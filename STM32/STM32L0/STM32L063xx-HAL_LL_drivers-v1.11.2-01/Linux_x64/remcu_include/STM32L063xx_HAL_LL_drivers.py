# -*- coding: utf-8 -*-
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
# INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE  FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
# WHETHER IN CONTRACT, STRICT LIABILITY,OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# To improve the quality of the software, users are encouraged to share modifications, enhancements or bug fixes with
# remotemcu.com (remcu@remotemcu.com)
#
# It is python header file for using REMCU library
#
#
# word size : 32 bit
#
#


import ctypes



__version__ = "v1.11.2-e339fbd6"
__RUN = 0
__HALT = 1
__ERROR = 0
__WARNING = 1
__INFO = 2
__DEBUG = 3
__ALL_LOG = 4
DEFAULT_OPENOCD_PORT = 6666
DEFAULT_GDB_PORT = 3333
# file stm32l0xx.h : 

# Enum FlagStatus , ITStatus
RESET = 0x0
SET = 0x1
# Enum FunctionalState
DISABLE = 0x0
ENABLE = 0x1
# Enum ErrorStatus
SUCCESS = 0x0
ERROR = 0x1
# empty define __STM32L0xx_H
# empty define STM32L0
__STM32L0xx_CMSIS_VERSION_MAIN = 0x1
__STM32L0xx_CMSIS_VERSION_SUB1 = 0x9
__STM32L0xx_CMSIS_VERSION_SUB2 = 0x0
__STM32L0xx_CMSIS_VERSION_RC = 0x0
__STM32L0xx_CMSIS_VERSION = 0x1090000
# fun define IS_FUNCTIONAL_STATE(STATE) (((STATE) == DISABLE) || ((STATE) == ENABLE))
# fun define SET_BIT(REG, BIT)     ((REG) |= (BIT))
# fun define CLEAR_BIT(REG, BIT)   ((REG) &= ~(BIT))
# fun define READ_BIT(REG, BIT)    ((REG) & (BIT))
# fun define CLEAR_REG(REG)        ((REG) = (0x0))
# fun define WRITE_REG(REG, VAL)   ((REG) = (VAL))
# fun define READ_REG(REG)         ((REG))
# fun define MODIFY_REG(REG, CLEARMASK, SETMASK)  WRITE_REG((REG), (((READ_REG(REG)) & (~(CLEARMASK))) | (SETMASK)))
# ----------------------------------------

# file stm32l063xx.h : 

# Enum IRQn_Type
NonMaskableInt_IRQn = 0xFFFFFFF2
HardFault_IRQn = 0xFFFFFFF3
SVC_IRQn = 0xFFFFFFFB
PendSV_IRQn = 0xFFFFFFFE
SysTick_IRQn = 0xFFFFFFFF
WWDG_IRQn = 0x0
PVD_IRQn = 0x1
RTC_IRQn = 0x2
FLASH_IRQn = 0x3
RCC_CRS_IRQn = 0x4
EXTI0_1_IRQn = 0x5
EXTI2_3_IRQn = 0x6
EXTI4_15_IRQn = 0x7
TSC_IRQn = 0x8
DMA1_Channel1_IRQn = 0x9
DMA1_Channel2_3_IRQn = 0xA
DMA1_Channel4_5_6_7_IRQn = 0xB
ADC1_COMP_IRQn = 0xC
LPTIM1_IRQn = 0xD
TIM2_IRQn = 0xF
TIM6_DAC_IRQn = 0x11
TIM21_IRQn = 0x14
TIM22_IRQn = 0x16
I2C1_IRQn = 0x17
I2C2_IRQn = 0x18
SPI1_IRQn = 0x19
SPI2_IRQn = 0x1A
USART1_IRQn = 0x1B
USART2_IRQn = 0x1C
AES_RNG_LPUART1_IRQn = 0x1D
LCD_IRQn = 0x1E
USB_IRQn = 0x1F
# empty define __STM32L063xx_H
__CM0PLUS_REV = 0x0
__MPU_PRESENT = 0x1
__VTOR_PRESENT = 0x1
__NVIC_PRIO_BITS = 0x2
__Vendor_SysTickConfig = 0x0
FLASH_BASE = 0x8000000
DATA_EEPROM_BASE = 0x8080000
DATA_EEPROM_END = 0x80807FF
SRAM_BASE = 0x20000000
SRAM_SIZE_MAX = 0x2000
PERIPH_BASE = 0x40000000
APBPERIPH_BASE = 0x40000000
AHBPERIPH_BASE = 0x40020000
IOPPERIPH_BASE = 0x50000000
TIM2_BASE = 0x40000000
TIM6_BASE = 0x40001000
LCD_BASE = 0x40002400
RTC_BASE = 0x40002800
WWDG_BASE = 0x40002C00
IWDG_BASE = 0x40003000
SPI2_BASE = 0x40003800
USART2_BASE = 0x40004400
LPUART1_BASE = 0x40004800
I2C1_BASE = 0x40005400
I2C2_BASE = 0x40005800
CRS_BASE = 0x40006C00
PWR_BASE = 0x40007000
DAC_BASE = 0x40007400
LPTIM1_BASE = 0x40007C00
SYSCFG_BASE = 0x40010000
COMP1_BASE = 0x40010018
COMP2_BASE = 0x4001001C
COMP12_COMMON = 0x40010018
EXTI_BASE = 0x40010400
TIM21_BASE = 0x40010800
TIM22_BASE = 0x40011400
FIREWALL_BASE = 0x40011C00
ADC1_BASE = 0x40012400
ADC_BASE = 0x40012708
SPI1_BASE = 0x40013000
USART1_BASE = 0x40013800
DBGMCU_BASE = 0x40015800
DMA1_BASE = 0x40020000
DMA1_Channel1_BASE = 0x40020008
DMA1_Channel2_BASE = 0x4002001C
DMA1_Channel3_BASE = 0x40020030
DMA1_Channel4_BASE = 0x40020044
DMA1_Channel5_BASE = 0x40020058
DMA1_Channel6_BASE = 0x4002006C
DMA1_Channel7_BASE = 0x40020080
DMA1_CSELR_BASE = 0x400200A8
RCC_BASE = 0x40021000
FLASH_R_BASE = 0x40022000
OB_BASE = 0x1FF80000
FLASHSIZE_BASE = 0x1FF8007C
UID_BASE = 0x1FF80050
CRC_BASE = 0x40023000
TSC_BASE = 0x40024000
RNG_BASE = 0x40025000
AES_BASE = 0x40026000
GPIOA_BASE = 0x50000000
GPIOB_BASE = 0x50000400
GPIOC_BASE = 0x50000800
GPIOD_BASE = 0x50000C00
GPIOH_BASE = 0x50001C00
TIM2 = 0x40000000
TIM6 = 0x40001000
RTC = 0x40002800
WWDG = 0x40002C00
IWDG = 0x40003000
SPI2 = 0x40003800
USART2 = 0x40004400
LPUART1 = 0x40004800
I2C1 = 0x40005400
I2C2 = 0x40005800
CRS = 0x40006C00
PWR = 0x40007000
DAC = 0x40007400
DAC1 = 0x40007400
LPTIM1 = 0x40007C00
LCD = 0x40002400
SYSCFG = 0x40010000
COMP1 = 0x40010018
COMP2 = 0x4001001C
EXTI = 0x40010400
TIM21 = 0x40010800
TIM22 = 0x40011400
FIREWALL = 0x40011C00
ADC1 = 0x40012400
ADC1_COMMON = 0x40012708
ADC = 0x40012708
SPI1 = 0x40013000
USART1 = 0x40013800
DBGMCU = 0x40015800
DMA1 = 0x40020000
DMA1_Channel1 = 0x40020008
DMA1_Channel2 = 0x4002001C
DMA1_Channel3 = 0x40020030
DMA1_Channel4 = 0x40020044
DMA1_Channel5 = 0x40020058
DMA1_Channel6 = 0x4002006C
DMA1_Channel7 = 0x40020080
DMA1_CSELR = 0x400200A8
FLASH = 0x40022000
OB = 0x1FF80000
RCC = 0x40021000
CRC = 0x40023000
TSC = 0x40024000
AES = 0x40026000
RNG = 0x40025000
GPIOA = 0x50000000
GPIOB = 0x50000400
GPIOC = 0x50000800
GPIOD = 0x50000C00
GPIOH = 0x50001C00
USB = 0x40005C00
ADC_ISR_EOCAL_Pos = 0xB
ADC_ISR_EOCAL_Msk = 0x800
ADC_ISR_EOCAL = 0x800
ADC_ISR_AWD_Pos = 0x7
ADC_ISR_AWD_Msk = 0x80
ADC_ISR_AWD = 0x80
ADC_ISR_OVR_Pos = 0x4
ADC_ISR_OVR_Msk = 0x10
ADC_ISR_OVR = 0x10
ADC_ISR_EOSEQ_Pos = 0x3
ADC_ISR_EOSEQ_Msk = 0x8
ADC_ISR_EOSEQ = 0x8
ADC_ISR_EOC_Pos = 0x2
ADC_ISR_EOC_Msk = 0x4
ADC_ISR_EOC = 0x4
ADC_ISR_EOSMP_Pos = 0x1
ADC_ISR_EOSMP_Msk = 0x2
ADC_ISR_EOSMP = 0x2
ADC_ISR_ADRDY_Pos = 0x0
ADC_ISR_ADRDY_Msk = 0x1
ADC_ISR_ADRDY = 0x1
ADC_ISR_EOS = 0x8
ADC_IER_EOCALIE_Pos = 0xB
ADC_IER_EOCALIE_Msk = 0x800
ADC_IER_EOCALIE = 0x800
ADC_IER_AWDIE_Pos = 0x7
ADC_IER_AWDIE_Msk = 0x80
ADC_IER_AWDIE = 0x80
ADC_IER_OVRIE_Pos = 0x4
ADC_IER_OVRIE_Msk = 0x10
ADC_IER_OVRIE = 0x10
ADC_IER_EOSEQIE_Pos = 0x3
ADC_IER_EOSEQIE_Msk = 0x8
ADC_IER_EOSEQIE = 0x8
ADC_IER_EOCIE_Pos = 0x2
ADC_IER_EOCIE_Msk = 0x4
ADC_IER_EOCIE = 0x4
ADC_IER_EOSMPIE_Pos = 0x1
ADC_IER_EOSMPIE_Msk = 0x2
ADC_IER_EOSMPIE = 0x2
ADC_IER_ADRDYIE_Pos = 0x0
ADC_IER_ADRDYIE_Msk = 0x1
ADC_IER_ADRDYIE = 0x1
ADC_IER_EOSIE = 0x8
ADC_CR_ADCAL_Pos = 0x1F
ADC_CR_ADCAL_Msk = 0x80000000
ADC_CR_ADCAL = 0x80000000
ADC_CR_ADVREGEN_Pos = 0x1C
ADC_CR_ADVREGEN_Msk = 0x10000000
ADC_CR_ADVREGEN = 0x10000000
ADC_CR_ADSTP_Pos = 0x4
ADC_CR_ADSTP_Msk = 0x10
ADC_CR_ADSTP = 0x10
ADC_CR_ADSTART_Pos = 0x2
ADC_CR_ADSTART_Msk = 0x4
ADC_CR_ADSTART = 0x4
ADC_CR_ADDIS_Pos = 0x1
ADC_CR_ADDIS_Msk = 0x2
ADC_CR_ADDIS = 0x2
ADC_CR_ADEN_Pos = 0x0
ADC_CR_ADEN_Msk = 0x1
ADC_CR_ADEN = 0x1
ADC_CFGR1_AWDCH_Pos = 0x1A
ADC_CFGR1_AWDCH_Msk = 0x7C000000
ADC_CFGR1_AWDCH = 0x7C000000
ADC_CFGR1_AWDCH_0 = 0x4000000
ADC_CFGR1_AWDCH_1 = 0x8000000
ADC_CFGR1_AWDCH_2 = 0x10000000
ADC_CFGR1_AWDCH_3 = 0x20000000
ADC_CFGR1_AWDCH_4 = 0x40000000
ADC_CFGR1_AWDEN_Pos = 0x17
ADC_CFGR1_AWDEN_Msk = 0x800000
ADC_CFGR1_AWDEN = 0x800000
ADC_CFGR1_AWDSGL_Pos = 0x16
ADC_CFGR1_AWDSGL_Msk = 0x400000
ADC_CFGR1_AWDSGL = 0x400000
ADC_CFGR1_DISCEN_Pos = 0x10
ADC_CFGR1_DISCEN_Msk = 0x10000
ADC_CFGR1_DISCEN = 0x10000
ADC_CFGR1_AUTOFF_Pos = 0xF
ADC_CFGR1_AUTOFF_Msk = 0x8000
ADC_CFGR1_AUTOFF = 0x8000
ADC_CFGR1_WAIT_Pos = 0xE
ADC_CFGR1_WAIT_Msk = 0x4000
ADC_CFGR1_WAIT = 0x4000
ADC_CFGR1_CONT_Pos = 0xD
ADC_CFGR1_CONT_Msk = 0x2000
ADC_CFGR1_CONT = 0x2000
ADC_CFGR1_OVRMOD_Pos = 0xC
ADC_CFGR1_OVRMOD_Msk = 0x1000
ADC_CFGR1_OVRMOD = 0x1000
ADC_CFGR1_EXTEN_Pos = 0xA
ADC_CFGR1_EXTEN_Msk = 0xC00
ADC_CFGR1_EXTEN = 0xC00
ADC_CFGR1_EXTEN_0 = 0x400
ADC_CFGR1_EXTEN_1 = 0x800
ADC_CFGR1_EXTSEL_Pos = 0x6
ADC_CFGR1_EXTSEL_Msk = 0x1C0
ADC_CFGR1_EXTSEL = 0x1C0
ADC_CFGR1_EXTSEL_0 = 0x40
ADC_CFGR1_EXTSEL_1 = 0x80
ADC_CFGR1_EXTSEL_2 = 0x100
ADC_CFGR1_ALIGN_Pos = 0x5
ADC_CFGR1_ALIGN_Msk = 0x20
ADC_CFGR1_ALIGN = 0x20
ADC_CFGR1_RES_Pos = 0x3
ADC_CFGR1_RES_Msk = 0x18
ADC_CFGR1_RES = 0x18
ADC_CFGR1_RES_0 = 0x8
ADC_CFGR1_RES_1 = 0x10
ADC_CFGR1_SCANDIR_Pos = 0x2
ADC_CFGR1_SCANDIR_Msk = 0x4
ADC_CFGR1_SCANDIR = 0x4
ADC_CFGR1_DMACFG_Pos = 0x1
ADC_CFGR1_DMACFG_Msk = 0x2
ADC_CFGR1_DMACFG = 0x2
ADC_CFGR1_DMAEN_Pos = 0x0
ADC_CFGR1_DMAEN_Msk = 0x1
ADC_CFGR1_DMAEN = 0x1
ADC_CFGR1_AUTDLY = 0x4000
ADC_CFGR2_TOVS_Pos = 0x9
ADC_CFGR2_TOVS_Msk = 0x200
ADC_CFGR2_TOVS = 0x200
ADC_CFGR2_OVSS_Pos = 0x5
ADC_CFGR2_OVSS_Msk = 0x1E0
ADC_CFGR2_OVSS = 0x1E0
ADC_CFGR2_OVSS_0 = 0x20
ADC_CFGR2_OVSS_1 = 0x40
ADC_CFGR2_OVSS_2 = 0x80
ADC_CFGR2_OVSS_3 = 0x100
ADC_CFGR2_OVSR_Pos = 0x2
ADC_CFGR2_OVSR_Msk = 0x1C
ADC_CFGR2_OVSR = 0x1C
ADC_CFGR2_OVSR_0 = 0x4
ADC_CFGR2_OVSR_1 = 0x8
ADC_CFGR2_OVSR_2 = 0x10
ADC_CFGR2_OVSE_Pos = 0x0
ADC_CFGR2_OVSE_Msk = 0x1
ADC_CFGR2_OVSE = 0x1
ADC_CFGR2_CKMODE_Pos = 0x1E
ADC_CFGR2_CKMODE_Msk = 0xC0000000
ADC_CFGR2_CKMODE = 0xC0000000
ADC_CFGR2_CKMODE_0 = 0x40000000
ADC_CFGR2_CKMODE_1 = 0x80000000
ADC_SMPR_SMP_Pos = 0x0
ADC_SMPR_SMP_Msk = 0x7
ADC_SMPR_SMP = 0x7
ADC_SMPR_SMP_0 = 0x1
ADC_SMPR_SMP_1 = 0x2
ADC_SMPR_SMP_2 = 0x4
ADC_SMPR_SMPR = 0x7
ADC_SMPR_SMPR_0 = 0x1
ADC_SMPR_SMPR_1 = 0x2
ADC_SMPR_SMPR_2 = 0x4
ADC_TR_HT_Pos = 0x10
ADC_TR_HT_Msk = 0xFFF0000
ADC_TR_HT = 0xFFF0000
ADC_TR_LT_Pos = 0x0
ADC_TR_LT_Msk = 0xFFF
ADC_TR_LT = 0xFFF
ADC_CHSELR_CHSEL_Pos = 0x0
ADC_CHSELR_CHSEL_Msk = 0x7FFFF
ADC_CHSELR_CHSEL = 0x7FFFF
ADC_CHSELR_CHSEL18_Pos = 0x12
ADC_CHSELR_CHSEL18_Msk = 0x40000
ADC_CHSELR_CHSEL18 = 0x40000
ADC_CHSELR_CHSEL17_Pos = 0x11
ADC_CHSELR_CHSEL17_Msk = 0x20000
ADC_CHSELR_CHSEL17 = 0x20000
ADC_CHSELR_CHSEL16_Pos = 0x10
ADC_CHSELR_CHSEL16_Msk = 0x10000
ADC_CHSELR_CHSEL16 = 0x10000
ADC_CHSELR_CHSEL15_Pos = 0xF
ADC_CHSELR_CHSEL15_Msk = 0x8000
ADC_CHSELR_CHSEL15 = 0x8000
ADC_CHSELR_CHSEL14_Pos = 0xE
ADC_CHSELR_CHSEL14_Msk = 0x4000
ADC_CHSELR_CHSEL14 = 0x4000
ADC_CHSELR_CHSEL13_Pos = 0xD
ADC_CHSELR_CHSEL13_Msk = 0x2000
ADC_CHSELR_CHSEL13 = 0x2000
ADC_CHSELR_CHSEL12_Pos = 0xC
ADC_CHSELR_CHSEL12_Msk = 0x1000
ADC_CHSELR_CHSEL12 = 0x1000
ADC_CHSELR_CHSEL11_Pos = 0xB
ADC_CHSELR_CHSEL11_Msk = 0x800
ADC_CHSELR_CHSEL11 = 0x800
ADC_CHSELR_CHSEL10_Pos = 0xA
ADC_CHSELR_CHSEL10_Msk = 0x400
ADC_CHSELR_CHSEL10 = 0x400
ADC_CHSELR_CHSEL9_Pos = 0x9
ADC_CHSELR_CHSEL9_Msk = 0x200
ADC_CHSELR_CHSEL9 = 0x200
ADC_CHSELR_CHSEL8_Pos = 0x8
ADC_CHSELR_CHSEL8_Msk = 0x100
ADC_CHSELR_CHSEL8 = 0x100
ADC_CHSELR_CHSEL7_Pos = 0x7
ADC_CHSELR_CHSEL7_Msk = 0x80
ADC_CHSELR_CHSEL7 = 0x80
ADC_CHSELR_CHSEL6_Pos = 0x6
ADC_CHSELR_CHSEL6_Msk = 0x40
ADC_CHSELR_CHSEL6 = 0x40
ADC_CHSELR_CHSEL5_Pos = 0x5
ADC_CHSELR_CHSEL5_Msk = 0x20
ADC_CHSELR_CHSEL5 = 0x20
ADC_CHSELR_CHSEL4_Pos = 0x4
ADC_CHSELR_CHSEL4_Msk = 0x10
ADC_CHSELR_CHSEL4 = 0x10
ADC_CHSELR_CHSEL3_Pos = 0x3
ADC_CHSELR_CHSEL3_Msk = 0x8
ADC_CHSELR_CHSEL3 = 0x8
ADC_CHSELR_CHSEL2_Pos = 0x2
ADC_CHSELR_CHSEL2_Msk = 0x4
ADC_CHSELR_CHSEL2 = 0x4
ADC_CHSELR_CHSEL1_Pos = 0x1
ADC_CHSELR_CHSEL1_Msk = 0x2
ADC_CHSELR_CHSEL1 = 0x2
ADC_CHSELR_CHSEL0_Pos = 0x0
ADC_CHSELR_CHSEL0_Msk = 0x1
ADC_CHSELR_CHSEL0 = 0x1
ADC_DR_DATA_Pos = 0x0
ADC_DR_DATA_Msk = 0xFFFF
ADC_DR_DATA = 0xFFFF
ADC_CALFACT_CALFACT_Pos = 0x0
ADC_CALFACT_CALFACT_Msk = 0x7F
ADC_CALFACT_CALFACT = 0x7F
ADC_CCR_LFMEN_Pos = 0x19
ADC_CCR_LFMEN_Msk = 0x2000000
ADC_CCR_LFMEN = 0x2000000
ADC_CCR_VLCDEN_Pos = 0x18
ADC_CCR_VLCDEN_Msk = 0x1000000
ADC_CCR_VLCDEN = 0x1000000
ADC_CCR_TSEN_Pos = 0x17
ADC_CCR_TSEN_Msk = 0x800000
ADC_CCR_TSEN = 0x800000
ADC_CCR_VREFEN_Pos = 0x16
ADC_CCR_VREFEN_Msk = 0x400000
ADC_CCR_VREFEN = 0x400000
ADC_CCR_PRESC_Pos = 0x12
ADC_CCR_PRESC_Msk = 0x3C0000
ADC_CCR_PRESC = 0x3C0000
ADC_CCR_PRESC_0 = 0x40000
ADC_CCR_PRESC_1 = 0x80000
ADC_CCR_PRESC_2 = 0x100000
ADC_CCR_PRESC_3 = 0x200000
AES_CR_EN_Pos = 0x0
AES_CR_EN_Msk = 0x1
AES_CR_EN = 0x1
AES_CR_DATATYPE_Pos = 0x1
AES_CR_DATATYPE_Msk = 0x6
AES_CR_DATATYPE = 0x6
AES_CR_DATATYPE_0 = 0x2
AES_CR_DATATYPE_1 = 0x4
AES_CR_MODE_Pos = 0x3
AES_CR_MODE_Msk = 0x18
AES_CR_MODE = 0x18
AES_CR_MODE_0 = 0x8
AES_CR_MODE_1 = 0x10
AES_CR_CHMOD_Pos = 0x5
AES_CR_CHMOD_Msk = 0x60
AES_CR_CHMOD = 0x60
AES_CR_CHMOD_0 = 0x20
AES_CR_CHMOD_1 = 0x40
AES_CR_CCFC_Pos = 0x7
AES_CR_CCFC_Msk = 0x80
AES_CR_CCFC = 0x80
AES_CR_ERRC_Pos = 0x8
AES_CR_ERRC_Msk = 0x100
AES_CR_ERRC = 0x100
AES_CR_CCIE_Pos = 0x9
AES_CR_CCIE_Msk = 0x200
AES_CR_CCIE = 0x200
AES_CR_ERRIE_Pos = 0xA
AES_CR_ERRIE_Msk = 0x400
AES_CR_ERRIE = 0x400
AES_CR_DMAINEN_Pos = 0xB
AES_CR_DMAINEN_Msk = 0x800
AES_CR_DMAINEN = 0x800
AES_CR_DMAOUTEN_Pos = 0xC
AES_CR_DMAOUTEN_Msk = 0x1000
AES_CR_DMAOUTEN = 0x1000
AES_SR_CCF_Pos = 0x0
AES_SR_CCF_Msk = 0x1
AES_SR_CCF = 0x1
AES_SR_RDERR_Pos = 0x1
AES_SR_RDERR_Msk = 0x2
AES_SR_RDERR = 0x2
AES_SR_WRERR_Pos = 0x2
AES_SR_WRERR_Msk = 0x4
AES_SR_WRERR = 0x4
AES_DINR_Pos = 0x0
AES_DINR_Msk = 0xFFFF
AES_DINR = 0xFFFF
AES_DOUTR_Pos = 0x0
AES_DOUTR_Msk = 0xFFFF
AES_DOUTR = 0xFFFF
AES_KEYR0_Pos = 0x0
AES_KEYR0_Msk = 0xFFFF
AES_KEYR0 = 0xFFFF
AES_KEYR1_Pos = 0x0
AES_KEYR1_Msk = 0xFFFF
AES_KEYR1 = 0xFFFF
AES_KEYR2_Pos = 0x0
AES_KEYR2_Msk = 0xFFFF
AES_KEYR2 = 0xFFFF
AES_KEYR3_Pos = 0x0
AES_KEYR3_Msk = 0xFFFF
AES_KEYR3 = 0xFFFF
AES_IVR0_Pos = 0x0
AES_IVR0_Msk = 0xFFFF
AES_IVR0 = 0xFFFF
AES_IVR1_Pos = 0x0
AES_IVR1_Msk = 0xFFFF
AES_IVR1 = 0xFFFF
AES_IVR2_Pos = 0x0
AES_IVR2_Msk = 0xFFFF
AES_IVR2 = 0xFFFF
AES_IVR3_Pos = 0x0
AES_IVR3_Msk = 0xFFFF
AES_IVR3 = 0xFFFF
COMP_CSR_COMP1EN_Pos = 0x0
COMP_CSR_COMP1EN_Msk = 0x1
COMP_CSR_COMP1EN = 0x1
COMP_CSR_COMP1INNSEL_Pos = 0x4
COMP_CSR_COMP1INNSEL_Msk = 0x30
COMP_CSR_COMP1INNSEL = 0x30
COMP_CSR_COMP1INNSEL_0 = 0x10
COMP_CSR_COMP1INNSEL_1 = 0x20
COMP_CSR_COMP1WM_Pos = 0x8
COMP_CSR_COMP1WM_Msk = 0x100
COMP_CSR_COMP1WM = 0x100
COMP_CSR_COMP1LPTIM1IN1_Pos = 0xC
COMP_CSR_COMP1LPTIM1IN1_Msk = 0x1000
COMP_CSR_COMP1LPTIM1IN1 = 0x1000
COMP_CSR_COMP1POLARITY_Pos = 0xF
COMP_CSR_COMP1POLARITY_Msk = 0x8000
COMP_CSR_COMP1POLARITY = 0x8000
COMP_CSR_COMP1VALUE_Pos = 0x1E
COMP_CSR_COMP1VALUE_Msk = 0x40000000
COMP_CSR_COMP1VALUE = 0x40000000
COMP_CSR_COMP1LOCK_Pos = 0x1F
COMP_CSR_COMP1LOCK_Msk = 0x80000000
COMP_CSR_COMP1LOCK = 0x80000000
COMP_CSR_COMP2EN_Pos = 0x0
COMP_CSR_COMP2EN_Msk = 0x1
COMP_CSR_COMP2EN = 0x1
COMP_CSR_COMP2SPEED_Pos = 0x3
COMP_CSR_COMP2SPEED_Msk = 0x8
COMP_CSR_COMP2SPEED = 0x8
COMP_CSR_COMP2INNSEL_Pos = 0x4
COMP_CSR_COMP2INNSEL_Msk = 0x70
COMP_CSR_COMP2INNSEL = 0x70
COMP_CSR_COMP2INNSEL_0 = 0x10
COMP_CSR_COMP2INNSEL_1 = 0x20
COMP_CSR_COMP2INNSEL_2 = 0x40
COMP_CSR_COMP2INPSEL_Pos = 0x8
COMP_CSR_COMP2INPSEL_Msk = 0x700
COMP_CSR_COMP2INPSEL = 0x700
COMP_CSR_COMP2INPSEL_0 = 0x100
COMP_CSR_COMP2INPSEL_1 = 0x200
COMP_CSR_COMP2INPSEL_2 = 0x400
COMP_CSR_COMP2LPTIM1IN2_Pos = 0xC
COMP_CSR_COMP2LPTIM1IN2_Msk = 0x1000
COMP_CSR_COMP2LPTIM1IN2 = 0x1000
COMP_CSR_COMP2LPTIM1IN1_Pos = 0xD
COMP_CSR_COMP2LPTIM1IN1_Msk = 0x2000
COMP_CSR_COMP2LPTIM1IN1 = 0x2000
COMP_CSR_COMP2POLARITY_Pos = 0xF
COMP_CSR_COMP2POLARITY_Msk = 0x8000
COMP_CSR_COMP2POLARITY = 0x8000
COMP_CSR_COMP2VALUE_Pos = 0x1E
COMP_CSR_COMP2VALUE_Msk = 0x40000000
COMP_CSR_COMP2VALUE = 0x40000000
COMP_CSR_COMP2LOCK_Pos = 0x1F
COMP_CSR_COMP2LOCK_Msk = 0x80000000
COMP_CSR_COMP2LOCK = 0x80000000
COMP_CSR_COMPxEN_Pos = 0x0
COMP_CSR_COMPxEN_Msk = 0x1
COMP_CSR_COMPxEN = 0x1
COMP_CSR_COMPxPOLARITY_Pos = 0xF
COMP_CSR_COMPxPOLARITY_Msk = 0x8000
COMP_CSR_COMPxPOLARITY = 0x8000
COMP_CSR_COMPxOUTVALUE_Pos = 0x1E
COMP_CSR_COMPxOUTVALUE_Msk = 0x40000000
COMP_CSR_COMPxOUTVALUE = 0x40000000
COMP_CSR_COMPxLOCK_Pos = 0x1F
COMP_CSR_COMPxLOCK_Msk = 0x80000000
COMP_CSR_COMPxLOCK = 0x80000000
COMP_CSR_WINMODE = 0x100
CRC_DR_DR_Pos = 0x0
CRC_DR_DR_Msk = 0xFFFFFFFF
CRC_DR_DR = 0xFFFFFFFF
CRC_IDR_IDR = 0xFF
CRC_CR_RESET_Pos = 0x0
CRC_CR_RESET_Msk = 0x1
CRC_CR_RESET = 0x1
CRC_CR_POLYSIZE_Pos = 0x3
CRC_CR_POLYSIZE_Msk = 0x18
CRC_CR_POLYSIZE = 0x18
CRC_CR_POLYSIZE_0 = 0x8
CRC_CR_POLYSIZE_1 = 0x10
CRC_CR_REV_IN_Pos = 0x5
CRC_CR_REV_IN_Msk = 0x60
CRC_CR_REV_IN = 0x60
CRC_CR_REV_IN_0 = 0x20
CRC_CR_REV_IN_1 = 0x40
CRC_CR_REV_OUT_Pos = 0x7
CRC_CR_REV_OUT_Msk = 0x80
CRC_CR_REV_OUT = 0x80
CRC_INIT_INIT_Pos = 0x0
CRC_INIT_INIT_Msk = 0xFFFFFFFF
CRC_INIT_INIT = 0xFFFFFFFF
CRC_POL_POL_Pos = 0x0
CRC_POL_POL_Msk = 0xFFFFFFFF
CRC_POL_POL = 0xFFFFFFFF
CRS_CR_SYNCOKIE_Pos = 0x0
CRS_CR_SYNCOKIE_Msk = 0x1
CRS_CR_SYNCOKIE = 0x1
CRS_CR_SYNCWARNIE_Pos = 0x1
CRS_CR_SYNCWARNIE_Msk = 0x2
CRS_CR_SYNCWARNIE = 0x2
CRS_CR_ERRIE_Pos = 0x2
CRS_CR_ERRIE_Msk = 0x4
CRS_CR_ERRIE = 0x4
CRS_CR_ESYNCIE_Pos = 0x3
CRS_CR_ESYNCIE_Msk = 0x8
CRS_CR_ESYNCIE = 0x8
CRS_CR_CEN_Pos = 0x5
CRS_CR_CEN_Msk = 0x20
CRS_CR_CEN = 0x20
CRS_CR_AUTOTRIMEN_Pos = 0x6
CRS_CR_AUTOTRIMEN_Msk = 0x40
CRS_CR_AUTOTRIMEN = 0x40
CRS_CR_SWSYNC_Pos = 0x7
CRS_CR_SWSYNC_Msk = 0x80
CRS_CR_SWSYNC = 0x80
CRS_CR_TRIM_Pos = 0x8
CRS_CR_TRIM_Msk = 0x3F00
CRS_CR_TRIM = 0x3F00
CRS_CFGR_RELOAD_Pos = 0x0
CRS_CFGR_RELOAD_Msk = 0xFFFF
CRS_CFGR_RELOAD = 0xFFFF
CRS_CFGR_FELIM_Pos = 0x10
CRS_CFGR_FELIM_Msk = 0xFF0000
CRS_CFGR_FELIM = 0xFF0000
CRS_CFGR_SYNCDIV_Pos = 0x18
CRS_CFGR_SYNCDIV_Msk = 0x7000000
CRS_CFGR_SYNCDIV = 0x7000000
CRS_CFGR_SYNCDIV_0 = 0x1000000
CRS_CFGR_SYNCDIV_1 = 0x2000000
CRS_CFGR_SYNCDIV_2 = 0x4000000
CRS_CFGR_SYNCSRC_Pos = 0x1C
CRS_CFGR_SYNCSRC_Msk = 0x30000000
CRS_CFGR_SYNCSRC = 0x30000000
CRS_CFGR_SYNCSRC_0 = 0x10000000
CRS_CFGR_SYNCSRC_1 = 0x20000000
CRS_CFGR_SYNCPOL_Pos = 0x1F
CRS_CFGR_SYNCPOL_Msk = 0x80000000
CRS_CFGR_SYNCPOL = 0x80000000
CRS_ISR_SYNCOKF_Pos = 0x0
CRS_ISR_SYNCOKF_Msk = 0x1
CRS_ISR_SYNCOKF = 0x1
CRS_ISR_SYNCWARNF_Pos = 0x1
CRS_ISR_SYNCWARNF_Msk = 0x2
CRS_ISR_SYNCWARNF = 0x2
CRS_ISR_ERRF_Pos = 0x2
CRS_ISR_ERRF_Msk = 0x4
CRS_ISR_ERRF = 0x4
CRS_ISR_ESYNCF_Pos = 0x3
CRS_ISR_ESYNCF_Msk = 0x8
CRS_ISR_ESYNCF = 0x8
CRS_ISR_SYNCERR_Pos = 0x8
CRS_ISR_SYNCERR_Msk = 0x100
CRS_ISR_SYNCERR = 0x100
CRS_ISR_SYNCMISS_Pos = 0x9
CRS_ISR_SYNCMISS_Msk = 0x200
CRS_ISR_SYNCMISS = 0x200
CRS_ISR_TRIMOVF_Pos = 0xA
CRS_ISR_TRIMOVF_Msk = 0x400
CRS_ISR_TRIMOVF = 0x400
CRS_ISR_FEDIR_Pos = 0xF
CRS_ISR_FEDIR_Msk = 0x8000
CRS_ISR_FEDIR = 0x8000
CRS_ISR_FECAP_Pos = 0x10
CRS_ISR_FECAP_Msk = 0xFFFF0000
CRS_ISR_FECAP = 0xFFFF0000
CRS_ICR_SYNCOKC_Pos = 0x0
CRS_ICR_SYNCOKC_Msk = 0x1
CRS_ICR_SYNCOKC = 0x1
CRS_ICR_SYNCWARNC_Pos = 0x1
CRS_ICR_SYNCWARNC_Msk = 0x2
CRS_ICR_SYNCWARNC = 0x2
CRS_ICR_ERRC_Pos = 0x2
CRS_ICR_ERRC_Msk = 0x4
CRS_ICR_ERRC = 0x4
CRS_ICR_ESYNCC_Pos = 0x3
CRS_ICR_ESYNCC_Msk = 0x8
CRS_ICR_ESYNCC = 0x8
DAC_CR_EN1_Pos = 0x0
DAC_CR_EN1_Msk = 0x1
DAC_CR_EN1 = 0x1
DAC_CR_BOFF1_Pos = 0x1
DAC_CR_BOFF1_Msk = 0x2
DAC_CR_BOFF1 = 0x2
DAC_CR_TEN1_Pos = 0x2
DAC_CR_TEN1_Msk = 0x4
DAC_CR_TEN1 = 0x4
DAC_CR_TSEL1_Pos = 0x3
DAC_CR_TSEL1_Msk = 0x38
DAC_CR_TSEL1 = 0x38
DAC_CR_TSEL1_0 = 0x8
DAC_CR_TSEL1_1 = 0x10
DAC_CR_TSEL1_2 = 0x20
DAC_CR_WAVE1_Pos = 0x6
DAC_CR_WAVE1_Msk = 0xC0
DAC_CR_WAVE1 = 0xC0
DAC_CR_WAVE1_0 = 0x40
DAC_CR_WAVE1_1 = 0x80
DAC_CR_MAMP1_Pos = 0x8
DAC_CR_MAMP1_Msk = 0xF00
DAC_CR_MAMP1 = 0xF00
DAC_CR_MAMP1_0 = 0x100
DAC_CR_MAMP1_1 = 0x200
DAC_CR_MAMP1_2 = 0x400
DAC_CR_MAMP1_3 = 0x800
DAC_CR_DMAEN1_Pos = 0xC
DAC_CR_DMAEN1_Msk = 0x1000
DAC_CR_DMAEN1 = 0x1000
DAC_CR_DMAUDRIE1_Pos = 0xD
DAC_CR_DMAUDRIE1_Msk = 0x2000
DAC_CR_DMAUDRIE1 = 0x2000
DAC_SWTRIGR_SWTRIG1_Pos = 0x0
DAC_SWTRIGR_SWTRIG1_Msk = 0x1
DAC_SWTRIGR_SWTRIG1 = 0x1
DAC_DHR12R1_DACC1DHR_Pos = 0x0
DAC_DHR12R1_DACC1DHR_Msk = 0xFFF
DAC_DHR12R1_DACC1DHR = 0xFFF
DAC_DHR12L1_DACC1DHR_Pos = 0x4
DAC_DHR12L1_DACC1DHR_Msk = 0xFFF0
DAC_DHR12L1_DACC1DHR = 0xFFF0
DAC_DHR8R1_DACC1DHR_Pos = 0x0
DAC_DHR8R1_DACC1DHR_Msk = 0xFF
DAC_DHR8R1_DACC1DHR = 0xFF
DAC_DOR1_DACC1DOR_Pos = 0x0
DAC_DOR1_DACC1DOR_Msk = 0xFFF
DAC_DOR1_DACC1DOR = 0xFFF
DAC_SR_DMAUDR1_Pos = 0xD
DAC_SR_DMAUDR1_Msk = 0x2000
DAC_SR_DMAUDR1 = 0x2000
DBGMCU_IDCODE_DEV_ID_Pos = 0x0
DBGMCU_IDCODE_DEV_ID_Msk = 0xFFF
DBGMCU_IDCODE_DEV_ID = 0xFFF
DBGMCU_IDCODE_REV_ID_Pos = 0x10
DBGMCU_IDCODE_REV_ID_Msk = 0xFFFF0000
DBGMCU_IDCODE_REV_ID = 0xFFFF0000
DBGMCU_IDCODE_REV_ID_0 = 0x10000
DBGMCU_IDCODE_REV_ID_1 = 0x20000
DBGMCU_IDCODE_REV_ID_2 = 0x40000
DBGMCU_IDCODE_REV_ID_3 = 0x80000
DBGMCU_IDCODE_REV_ID_4 = 0x100000
DBGMCU_IDCODE_REV_ID_5 = 0x200000
DBGMCU_IDCODE_REV_ID_6 = 0x400000
DBGMCU_IDCODE_REV_ID_7 = 0x800000
DBGMCU_IDCODE_REV_ID_8 = 0x1000000
DBGMCU_IDCODE_REV_ID_9 = 0x2000000
DBGMCU_IDCODE_REV_ID_10 = 0x4000000
DBGMCU_IDCODE_REV_ID_11 = 0x8000000
DBGMCU_IDCODE_REV_ID_12 = 0x10000000
DBGMCU_IDCODE_REV_ID_13 = 0x20000000
DBGMCU_IDCODE_REV_ID_14 = 0x40000000
DBGMCU_IDCODE_REV_ID_15 = 0x80000000
DBGMCU_CR_DBG_Pos = 0x0
DBGMCU_CR_DBG_Msk = 0x7
DBGMCU_CR_DBG = 0x7
DBGMCU_CR_DBG_SLEEP_Pos = 0x0
DBGMCU_CR_DBG_SLEEP_Msk = 0x1
DBGMCU_CR_DBG_SLEEP = 0x1
DBGMCU_CR_DBG_STOP_Pos = 0x1
DBGMCU_CR_DBG_STOP_Msk = 0x2
DBGMCU_CR_DBG_STOP = 0x2
DBGMCU_CR_DBG_STANDBY_Pos = 0x2
DBGMCU_CR_DBG_STANDBY_Msk = 0x4
DBGMCU_CR_DBG_STANDBY = 0x4
DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos = 0x0
DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk = 0x1
DBGMCU_APB1_FZ_DBG_TIM2_STOP = 0x1
DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos = 0x4
DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk = 0x10
DBGMCU_APB1_FZ_DBG_TIM6_STOP = 0x10
DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos = 0xA
DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk = 0x400
DBGMCU_APB1_FZ_DBG_RTC_STOP = 0x400
DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos = 0xB
DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk = 0x800
DBGMCU_APB1_FZ_DBG_WWDG_STOP = 0x800
DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos = 0xC
DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk = 0x1000
DBGMCU_APB1_FZ_DBG_IWDG_STOP = 0x1000
DBGMCU_APB1_FZ_DBG_I2C1_STOP_Pos = 0x15
DBGMCU_APB1_FZ_DBG_I2C1_STOP_Msk = 0x200000
DBGMCU_APB1_FZ_DBG_I2C1_STOP = 0x200000
DBGMCU_APB1_FZ_DBG_I2C2_STOP_Pos = 0x16
DBGMCU_APB1_FZ_DBG_I2C2_STOP_Msk = 0x400000
DBGMCU_APB1_FZ_DBG_I2C2_STOP = 0x400000
DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Pos = 0x1F
DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Msk = 0x80000000
DBGMCU_APB1_FZ_DBG_LPTIMER_STOP = 0x80000000
DBGMCU_APB2_FZ_DBG_TIM22_STOP_Pos = 0x5
DBGMCU_APB2_FZ_DBG_TIM22_STOP_Msk = 0x20
DBGMCU_APB2_FZ_DBG_TIM22_STOP = 0x20
DBGMCU_APB2_FZ_DBG_TIM21_STOP_Pos = 0x2
DBGMCU_APB2_FZ_DBG_TIM21_STOP_Msk = 0x4
DBGMCU_APB2_FZ_DBG_TIM21_STOP = 0x4
DMA_ISR_GIF1_Pos = 0x0
DMA_ISR_GIF1_Msk = 0x1
DMA_ISR_GIF1 = 0x1
DMA_ISR_TCIF1_Pos = 0x1
DMA_ISR_TCIF1_Msk = 0x2
DMA_ISR_TCIF1 = 0x2
DMA_ISR_HTIF1_Pos = 0x2
DMA_ISR_HTIF1_Msk = 0x4
DMA_ISR_HTIF1 = 0x4
DMA_ISR_TEIF1_Pos = 0x3
DMA_ISR_TEIF1_Msk = 0x8
DMA_ISR_TEIF1 = 0x8
DMA_ISR_GIF2_Pos = 0x4
DMA_ISR_GIF2_Msk = 0x10
DMA_ISR_GIF2 = 0x10
DMA_ISR_TCIF2_Pos = 0x5
DMA_ISR_TCIF2_Msk = 0x20
DMA_ISR_TCIF2 = 0x20
DMA_ISR_HTIF2_Pos = 0x6
DMA_ISR_HTIF2_Msk = 0x40
DMA_ISR_HTIF2 = 0x40
DMA_ISR_TEIF2_Pos = 0x7
DMA_ISR_TEIF2_Msk = 0x80
DMA_ISR_TEIF2 = 0x80
DMA_ISR_GIF3_Pos = 0x8
DMA_ISR_GIF3_Msk = 0x100
DMA_ISR_GIF3 = 0x100
DMA_ISR_TCIF3_Pos = 0x9
DMA_ISR_TCIF3_Msk = 0x200
DMA_ISR_TCIF3 = 0x200
DMA_ISR_HTIF3_Pos = 0xA
DMA_ISR_HTIF3_Msk = 0x400
DMA_ISR_HTIF3 = 0x400
DMA_ISR_TEIF3_Pos = 0xB
DMA_ISR_TEIF3_Msk = 0x800
DMA_ISR_TEIF3 = 0x800
DMA_ISR_GIF4_Pos = 0xC
DMA_ISR_GIF4_Msk = 0x1000
DMA_ISR_GIF4 = 0x1000
DMA_ISR_TCIF4_Pos = 0xD
DMA_ISR_TCIF4_Msk = 0x2000
DMA_ISR_TCIF4 = 0x2000
DMA_ISR_HTIF4_Pos = 0xE
DMA_ISR_HTIF4_Msk = 0x4000
DMA_ISR_HTIF4 = 0x4000
DMA_ISR_TEIF4_Pos = 0xF
DMA_ISR_TEIF4_Msk = 0x8000
DMA_ISR_TEIF4 = 0x8000
DMA_ISR_GIF5_Pos = 0x10
DMA_ISR_GIF5_Msk = 0x10000
DMA_ISR_GIF5 = 0x10000
DMA_ISR_TCIF5_Pos = 0x11
DMA_ISR_TCIF5_Msk = 0x20000
DMA_ISR_TCIF5 = 0x20000
DMA_ISR_HTIF5_Pos = 0x12
DMA_ISR_HTIF5_Msk = 0x40000
DMA_ISR_HTIF5 = 0x40000
DMA_ISR_TEIF5_Pos = 0x13
DMA_ISR_TEIF5_Msk = 0x80000
DMA_ISR_TEIF5 = 0x80000
DMA_ISR_GIF6_Pos = 0x14
DMA_ISR_GIF6_Msk = 0x100000
DMA_ISR_GIF6 = 0x100000
DMA_ISR_TCIF6_Pos = 0x15
DMA_ISR_TCIF6_Msk = 0x200000
DMA_ISR_TCIF6 = 0x200000
DMA_ISR_HTIF6_Pos = 0x16
DMA_ISR_HTIF6_Msk = 0x400000
DMA_ISR_HTIF6 = 0x400000
DMA_ISR_TEIF6_Pos = 0x17
DMA_ISR_TEIF6_Msk = 0x800000
DMA_ISR_TEIF6 = 0x800000
DMA_ISR_GIF7_Pos = 0x18
DMA_ISR_GIF7_Msk = 0x1000000
DMA_ISR_GIF7 = 0x1000000
DMA_ISR_TCIF7_Pos = 0x19
DMA_ISR_TCIF7_Msk = 0x2000000
DMA_ISR_TCIF7 = 0x2000000
DMA_ISR_HTIF7_Pos = 0x1A
DMA_ISR_HTIF7_Msk = 0x4000000
DMA_ISR_HTIF7 = 0x4000000
DMA_ISR_TEIF7_Pos = 0x1B
DMA_ISR_TEIF7_Msk = 0x8000000
DMA_ISR_TEIF7 = 0x8000000
DMA_IFCR_CGIF1_Pos = 0x0
DMA_IFCR_CGIF1_Msk = 0x1
DMA_IFCR_CGIF1 = 0x1
DMA_IFCR_CTCIF1_Pos = 0x1
DMA_IFCR_CTCIF1_Msk = 0x2
DMA_IFCR_CTCIF1 = 0x2
DMA_IFCR_CHTIF1_Pos = 0x2
DMA_IFCR_CHTIF1_Msk = 0x4
DMA_IFCR_CHTIF1 = 0x4
DMA_IFCR_CTEIF1_Pos = 0x3
DMA_IFCR_CTEIF1_Msk = 0x8
DMA_IFCR_CTEIF1 = 0x8
DMA_IFCR_CGIF2_Pos = 0x4
DMA_IFCR_CGIF2_Msk = 0x10
DMA_IFCR_CGIF2 = 0x10
DMA_IFCR_CTCIF2_Pos = 0x5
DMA_IFCR_CTCIF2_Msk = 0x20
DMA_IFCR_CTCIF2 = 0x20
DMA_IFCR_CHTIF2_Pos = 0x6
DMA_IFCR_CHTIF2_Msk = 0x40
DMA_IFCR_CHTIF2 = 0x40
DMA_IFCR_CTEIF2_Pos = 0x7
DMA_IFCR_CTEIF2_Msk = 0x80
DMA_IFCR_CTEIF2 = 0x80
DMA_IFCR_CGIF3_Pos = 0x8
DMA_IFCR_CGIF3_Msk = 0x100
DMA_IFCR_CGIF3 = 0x100
DMA_IFCR_CTCIF3_Pos = 0x9
DMA_IFCR_CTCIF3_Msk = 0x200
DMA_IFCR_CTCIF3 = 0x200
DMA_IFCR_CHTIF3_Pos = 0xA
DMA_IFCR_CHTIF3_Msk = 0x400
DMA_IFCR_CHTIF3 = 0x400
DMA_IFCR_CTEIF3_Pos = 0xB
DMA_IFCR_CTEIF3_Msk = 0x800
DMA_IFCR_CTEIF3 = 0x800
DMA_IFCR_CGIF4_Pos = 0xC
DMA_IFCR_CGIF4_Msk = 0x1000
DMA_IFCR_CGIF4 = 0x1000
DMA_IFCR_CTCIF4_Pos = 0xD
DMA_IFCR_CTCIF4_Msk = 0x2000
DMA_IFCR_CTCIF4 = 0x2000
DMA_IFCR_CHTIF4_Pos = 0xE
DMA_IFCR_CHTIF4_Msk = 0x4000
DMA_IFCR_CHTIF4 = 0x4000
DMA_IFCR_CTEIF4_Pos = 0xF
DMA_IFCR_CTEIF4_Msk = 0x8000
DMA_IFCR_CTEIF4 = 0x8000
DMA_IFCR_CGIF5_Pos = 0x10
DMA_IFCR_CGIF5_Msk = 0x10000
DMA_IFCR_CGIF5 = 0x10000
DMA_IFCR_CTCIF5_Pos = 0x11
DMA_IFCR_CTCIF5_Msk = 0x20000
DMA_IFCR_CTCIF5 = 0x20000
DMA_IFCR_CHTIF5_Pos = 0x12
DMA_IFCR_CHTIF5_Msk = 0x40000
DMA_IFCR_CHTIF5 = 0x40000
DMA_IFCR_CTEIF5_Pos = 0x13
DMA_IFCR_CTEIF5_Msk = 0x80000
DMA_IFCR_CTEIF5 = 0x80000
DMA_IFCR_CGIF6_Pos = 0x14
DMA_IFCR_CGIF6_Msk = 0x100000
DMA_IFCR_CGIF6 = 0x100000
DMA_IFCR_CTCIF6_Pos = 0x15
DMA_IFCR_CTCIF6_Msk = 0x200000
DMA_IFCR_CTCIF6 = 0x200000
DMA_IFCR_CHTIF6_Pos = 0x16
DMA_IFCR_CHTIF6_Msk = 0x400000
DMA_IFCR_CHTIF6 = 0x400000
DMA_IFCR_CTEIF6_Pos = 0x17
DMA_IFCR_CTEIF6_Msk = 0x800000
DMA_IFCR_CTEIF6 = 0x800000
DMA_IFCR_CGIF7_Pos = 0x18
DMA_IFCR_CGIF7_Msk = 0x1000000
DMA_IFCR_CGIF7 = 0x1000000
DMA_IFCR_CTCIF7_Pos = 0x19
DMA_IFCR_CTCIF7_Msk = 0x2000000
DMA_IFCR_CTCIF7 = 0x2000000
DMA_IFCR_CHTIF7_Pos = 0x1A
DMA_IFCR_CHTIF7_Msk = 0x4000000
DMA_IFCR_CHTIF7 = 0x4000000
DMA_IFCR_CTEIF7_Pos = 0x1B
DMA_IFCR_CTEIF7_Msk = 0x8000000
DMA_IFCR_CTEIF7 = 0x8000000
DMA_CCR_EN_Pos = 0x0
DMA_CCR_EN_Msk = 0x1
DMA_CCR_EN = 0x1
DMA_CCR_TCIE_Pos = 0x1
DMA_CCR_TCIE_Msk = 0x2
DMA_CCR_TCIE = 0x2
DMA_CCR_HTIE_Pos = 0x2
DMA_CCR_HTIE_Msk = 0x4
DMA_CCR_HTIE = 0x4
DMA_CCR_TEIE_Pos = 0x3
DMA_CCR_TEIE_Msk = 0x8
DMA_CCR_TEIE = 0x8
DMA_CCR_DIR_Pos = 0x4
DMA_CCR_DIR_Msk = 0x10
DMA_CCR_DIR = 0x10
DMA_CCR_CIRC_Pos = 0x5
DMA_CCR_CIRC_Msk = 0x20
DMA_CCR_CIRC = 0x20
DMA_CCR_PINC_Pos = 0x6
DMA_CCR_PINC_Msk = 0x40
DMA_CCR_PINC = 0x40
DMA_CCR_MINC_Pos = 0x7
DMA_CCR_MINC_Msk = 0x80
DMA_CCR_MINC = 0x80
DMA_CCR_PSIZE_Pos = 0x8
DMA_CCR_PSIZE_Msk = 0x300
DMA_CCR_PSIZE = 0x300
DMA_CCR_PSIZE_0 = 0x100
DMA_CCR_PSIZE_1 = 0x200
DMA_CCR_MSIZE_Pos = 0xA
DMA_CCR_MSIZE_Msk = 0xC00
DMA_CCR_MSIZE = 0xC00
DMA_CCR_MSIZE_0 = 0x400
DMA_CCR_MSIZE_1 = 0x800
DMA_CCR_PL_Pos = 0xC
DMA_CCR_PL_Msk = 0x3000
DMA_CCR_PL = 0x3000
DMA_CCR_PL_0 = 0x1000
DMA_CCR_PL_1 = 0x2000
DMA_CCR_MEM2MEM_Pos = 0xE
DMA_CCR_MEM2MEM_Msk = 0x4000
DMA_CCR_MEM2MEM = 0x4000
DMA_CNDTR_NDT_Pos = 0x0
DMA_CNDTR_NDT_Msk = 0xFFFF
DMA_CNDTR_NDT = 0xFFFF
DMA_CPAR_PA_Pos = 0x0
DMA_CPAR_PA_Msk = 0xFFFFFFFF
DMA_CPAR_PA = 0xFFFFFFFF
DMA_CMAR_MA_Pos = 0x0
DMA_CMAR_MA_Msk = 0xFFFFFFFF
DMA_CMAR_MA = 0xFFFFFFFF
DMA_CSELR_C1S_Pos = 0x0
DMA_CSELR_C1S_Msk = 0xF
DMA_CSELR_C1S = 0xF
DMA_CSELR_C2S_Pos = 0x4
DMA_CSELR_C2S_Msk = 0xF0
DMA_CSELR_C2S = 0xF0
DMA_CSELR_C3S_Pos = 0x8
DMA_CSELR_C3S_Msk = 0xF00
DMA_CSELR_C3S = 0xF00
DMA_CSELR_C4S_Pos = 0xC
DMA_CSELR_C4S_Msk = 0xF000
DMA_CSELR_C4S = 0xF000
DMA_CSELR_C5S_Pos = 0x10
DMA_CSELR_C5S_Msk = 0xF0000
DMA_CSELR_C5S = 0xF0000
DMA_CSELR_C6S_Pos = 0x14
DMA_CSELR_C6S_Msk = 0xF00000
DMA_CSELR_C6S = 0xF00000
DMA_CSELR_C7S_Pos = 0x18
DMA_CSELR_C7S_Msk = 0xF000000
DMA_CSELR_C7S = 0xF000000
EXTI_IMR_IM0_Pos = 0x0
EXTI_IMR_IM0_Msk = 0x1
EXTI_IMR_IM0 = 0x1
EXTI_IMR_IM1_Pos = 0x1
EXTI_IMR_IM1_Msk = 0x2
EXTI_IMR_IM1 = 0x2
EXTI_IMR_IM2_Pos = 0x2
EXTI_IMR_IM2_Msk = 0x4
EXTI_IMR_IM2 = 0x4
EXTI_IMR_IM3_Pos = 0x3
EXTI_IMR_IM3_Msk = 0x8
EXTI_IMR_IM3 = 0x8
EXTI_IMR_IM4_Pos = 0x4
EXTI_IMR_IM4_Msk = 0x10
EXTI_IMR_IM4 = 0x10
EXTI_IMR_IM5_Pos = 0x5
EXTI_IMR_IM5_Msk = 0x20
EXTI_IMR_IM5 = 0x20
EXTI_IMR_IM6_Pos = 0x6
EXTI_IMR_IM6_Msk = 0x40
EXTI_IMR_IM6 = 0x40
EXTI_IMR_IM7_Pos = 0x7
EXTI_IMR_IM7_Msk = 0x80
EXTI_IMR_IM7 = 0x80
EXTI_IMR_IM8_Pos = 0x8
EXTI_IMR_IM8_Msk = 0x100
EXTI_IMR_IM8 = 0x100
EXTI_IMR_IM9_Pos = 0x9
EXTI_IMR_IM9_Msk = 0x200
EXTI_IMR_IM9 = 0x200
EXTI_IMR_IM10_Pos = 0xA
EXTI_IMR_IM10_Msk = 0x400
EXTI_IMR_IM10 = 0x400
EXTI_IMR_IM11_Pos = 0xB
EXTI_IMR_IM11_Msk = 0x800
EXTI_IMR_IM11 = 0x800
EXTI_IMR_IM12_Pos = 0xC
EXTI_IMR_IM12_Msk = 0x1000
EXTI_IMR_IM12 = 0x1000
EXTI_IMR_IM13_Pos = 0xD
EXTI_IMR_IM13_Msk = 0x2000
EXTI_IMR_IM13 = 0x2000
EXTI_IMR_IM14_Pos = 0xE
EXTI_IMR_IM14_Msk = 0x4000
EXTI_IMR_IM14 = 0x4000
EXTI_IMR_IM15_Pos = 0xF
EXTI_IMR_IM15_Msk = 0x8000
EXTI_IMR_IM15 = 0x8000
EXTI_IMR_IM16_Pos = 0x10
EXTI_IMR_IM16_Msk = 0x10000
EXTI_IMR_IM16 = 0x10000
EXTI_IMR_IM17_Pos = 0x11
EXTI_IMR_IM17_Msk = 0x20000
EXTI_IMR_IM17 = 0x20000
EXTI_IMR_IM18_Pos = 0x12
EXTI_IMR_IM18_Msk = 0x40000
EXTI_IMR_IM18 = 0x40000
EXTI_IMR_IM19_Pos = 0x13
EXTI_IMR_IM19_Msk = 0x80000
EXTI_IMR_IM19 = 0x80000
EXTI_IMR_IM20_Pos = 0x14
EXTI_IMR_IM20_Msk = 0x100000
EXTI_IMR_IM20 = 0x100000
EXTI_IMR_IM21_Pos = 0x15
EXTI_IMR_IM21_Msk = 0x200000
EXTI_IMR_IM21 = 0x200000
EXTI_IMR_IM22_Pos = 0x16
EXTI_IMR_IM22_Msk = 0x400000
EXTI_IMR_IM22 = 0x400000
EXTI_IMR_IM23_Pos = 0x17
EXTI_IMR_IM23_Msk = 0x800000
EXTI_IMR_IM23 = 0x800000
EXTI_IMR_IM25_Pos = 0x19
EXTI_IMR_IM25_Msk = 0x2000000
EXTI_IMR_IM25 = 0x2000000
EXTI_IMR_IM26_Pos = 0x1A
EXTI_IMR_IM26_Msk = 0x4000000
EXTI_IMR_IM26 = 0x4000000
EXTI_IMR_IM28_Pos = 0x1C
EXTI_IMR_IM28_Msk = 0x10000000
EXTI_IMR_IM28 = 0x10000000
EXTI_IMR_IM29_Pos = 0x1D
EXTI_IMR_IM29_Msk = 0x20000000
EXTI_IMR_IM29 = 0x20000000
EXTI_IMR_IM_Pos = 0x0
EXTI_IMR_IM_Msk = 0x36FFFFFF
EXTI_IMR_IM = 0x36FFFFFF
EXTI_EMR_EM0_Pos = 0x0
EXTI_EMR_EM0_Msk = 0x1
EXTI_EMR_EM0 = 0x1
EXTI_EMR_EM1_Pos = 0x1
EXTI_EMR_EM1_Msk = 0x2
EXTI_EMR_EM1 = 0x2
EXTI_EMR_EM2_Pos = 0x2
EXTI_EMR_EM2_Msk = 0x4
EXTI_EMR_EM2 = 0x4
EXTI_EMR_EM3_Pos = 0x3
EXTI_EMR_EM3_Msk = 0x8
EXTI_EMR_EM3 = 0x8
EXTI_EMR_EM4_Pos = 0x4
EXTI_EMR_EM4_Msk = 0x10
EXTI_EMR_EM4 = 0x10
EXTI_EMR_EM5_Pos = 0x5
EXTI_EMR_EM5_Msk = 0x20
EXTI_EMR_EM5 = 0x20
EXTI_EMR_EM6_Pos = 0x6
EXTI_EMR_EM6_Msk = 0x40
EXTI_EMR_EM6 = 0x40
EXTI_EMR_EM7_Pos = 0x7
EXTI_EMR_EM7_Msk = 0x80
EXTI_EMR_EM7 = 0x80
EXTI_EMR_EM8_Pos = 0x8
EXTI_EMR_EM8_Msk = 0x100
EXTI_EMR_EM8 = 0x100
EXTI_EMR_EM9_Pos = 0x9
EXTI_EMR_EM9_Msk = 0x200
EXTI_EMR_EM9 = 0x200
EXTI_EMR_EM10_Pos = 0xA
EXTI_EMR_EM10_Msk = 0x400
EXTI_EMR_EM10 = 0x400
EXTI_EMR_EM11_Pos = 0xB
EXTI_EMR_EM11_Msk = 0x800
EXTI_EMR_EM11 = 0x800
EXTI_EMR_EM12_Pos = 0xC
EXTI_EMR_EM12_Msk = 0x1000
EXTI_EMR_EM12 = 0x1000
EXTI_EMR_EM13_Pos = 0xD
EXTI_EMR_EM13_Msk = 0x2000
EXTI_EMR_EM13 = 0x2000
EXTI_EMR_EM14_Pos = 0xE
EXTI_EMR_EM14_Msk = 0x4000
EXTI_EMR_EM14 = 0x4000
EXTI_EMR_EM15_Pos = 0xF
EXTI_EMR_EM15_Msk = 0x8000
EXTI_EMR_EM15 = 0x8000
EXTI_EMR_EM16_Pos = 0x10
EXTI_EMR_EM16_Msk = 0x10000
EXTI_EMR_EM16 = 0x10000
EXTI_EMR_EM17_Pos = 0x11
EXTI_EMR_EM17_Msk = 0x20000
EXTI_EMR_EM17 = 0x20000
EXTI_EMR_EM18_Pos = 0x12
EXTI_EMR_EM18_Msk = 0x40000
EXTI_EMR_EM18 = 0x40000
EXTI_EMR_EM19_Pos = 0x13
EXTI_EMR_EM19_Msk = 0x80000
EXTI_EMR_EM19 = 0x80000
EXTI_EMR_EM20_Pos = 0x14
EXTI_EMR_EM20_Msk = 0x100000
EXTI_EMR_EM20 = 0x100000
EXTI_EMR_EM21_Pos = 0x15
EXTI_EMR_EM21_Msk = 0x200000
EXTI_EMR_EM21 = 0x200000
EXTI_EMR_EM22_Pos = 0x16
EXTI_EMR_EM22_Msk = 0x400000
EXTI_EMR_EM22 = 0x400000
EXTI_EMR_EM23_Pos = 0x17
EXTI_EMR_EM23_Msk = 0x800000
EXTI_EMR_EM23 = 0x800000
EXTI_EMR_EM25_Pos = 0x19
EXTI_EMR_EM25_Msk = 0x2000000
EXTI_EMR_EM25 = 0x2000000
EXTI_EMR_EM26_Pos = 0x1A
EXTI_EMR_EM26_Msk = 0x4000000
EXTI_EMR_EM26 = 0x4000000
EXTI_EMR_EM28_Pos = 0x1C
EXTI_EMR_EM28_Msk = 0x10000000
EXTI_EMR_EM28 = 0x10000000
EXTI_EMR_EM29_Pos = 0x1D
EXTI_EMR_EM29_Msk = 0x20000000
EXTI_EMR_EM29 = 0x20000000
EXTI_RTSR_RT0_Pos = 0x0
EXTI_RTSR_RT0_Msk = 0x1
EXTI_RTSR_RT0 = 0x1
EXTI_RTSR_RT1_Pos = 0x1
EXTI_RTSR_RT1_Msk = 0x2
EXTI_RTSR_RT1 = 0x2
EXTI_RTSR_RT2_Pos = 0x2
EXTI_RTSR_RT2_Msk = 0x4
EXTI_RTSR_RT2 = 0x4
EXTI_RTSR_RT3_Pos = 0x3
EXTI_RTSR_RT3_Msk = 0x8
EXTI_RTSR_RT3 = 0x8
EXTI_RTSR_RT4_Pos = 0x4
EXTI_RTSR_RT4_Msk = 0x10
EXTI_RTSR_RT4 = 0x10
EXTI_RTSR_RT5_Pos = 0x5
EXTI_RTSR_RT5_Msk = 0x20
EXTI_RTSR_RT5 = 0x20
EXTI_RTSR_RT6_Pos = 0x6
EXTI_RTSR_RT6_Msk = 0x40
EXTI_RTSR_RT6 = 0x40
EXTI_RTSR_RT7_Pos = 0x7
EXTI_RTSR_RT7_Msk = 0x80
EXTI_RTSR_RT7 = 0x80
EXTI_RTSR_RT8_Pos = 0x8
EXTI_RTSR_RT8_Msk = 0x100
EXTI_RTSR_RT8 = 0x100
EXTI_RTSR_RT9_Pos = 0x9
EXTI_RTSR_RT9_Msk = 0x200
EXTI_RTSR_RT9 = 0x200
EXTI_RTSR_RT10_Pos = 0xA
EXTI_RTSR_RT10_Msk = 0x400
EXTI_RTSR_RT10 = 0x400
EXTI_RTSR_RT11_Pos = 0xB
EXTI_RTSR_RT11_Msk = 0x800
EXTI_RTSR_RT11 = 0x800
EXTI_RTSR_RT12_Pos = 0xC
EXTI_RTSR_RT12_Msk = 0x1000
EXTI_RTSR_RT12 = 0x1000
EXTI_RTSR_RT13_Pos = 0xD
EXTI_RTSR_RT13_Msk = 0x2000
EXTI_RTSR_RT13 = 0x2000
EXTI_RTSR_RT14_Pos = 0xE
EXTI_RTSR_RT14_Msk = 0x4000
EXTI_RTSR_RT14 = 0x4000
EXTI_RTSR_RT15_Pos = 0xF
EXTI_RTSR_RT15_Msk = 0x8000
EXTI_RTSR_RT15 = 0x8000
EXTI_RTSR_RT16_Pos = 0x10
EXTI_RTSR_RT16_Msk = 0x10000
EXTI_RTSR_RT16 = 0x10000
EXTI_RTSR_RT17_Pos = 0x11
EXTI_RTSR_RT17_Msk = 0x20000
EXTI_RTSR_RT17 = 0x20000
EXTI_RTSR_RT19_Pos = 0x13
EXTI_RTSR_RT19_Msk = 0x80000
EXTI_RTSR_RT19 = 0x80000
EXTI_RTSR_RT20_Pos = 0x14
EXTI_RTSR_RT20_Msk = 0x100000
EXTI_RTSR_RT20 = 0x100000
EXTI_RTSR_RT21_Pos = 0x15
EXTI_RTSR_RT21_Msk = 0x200000
EXTI_RTSR_RT21 = 0x200000
EXTI_RTSR_RT22_Pos = 0x16
EXTI_RTSR_RT22_Msk = 0x400000
EXTI_RTSR_RT22 = 0x400000
EXTI_RTSR_TR0 = 0x1
EXTI_RTSR_TR1 = 0x2
EXTI_RTSR_TR2 = 0x4
EXTI_RTSR_TR3 = 0x8
EXTI_RTSR_TR4 = 0x10
EXTI_RTSR_TR5 = 0x20
EXTI_RTSR_TR6 = 0x40
EXTI_RTSR_TR7 = 0x80
EXTI_RTSR_TR8 = 0x100
EXTI_RTSR_TR9 = 0x200
EXTI_RTSR_TR10 = 0x400
EXTI_RTSR_TR11 = 0x800
EXTI_RTSR_TR12 = 0x1000
EXTI_RTSR_TR13 = 0x2000
EXTI_RTSR_TR14 = 0x4000
EXTI_RTSR_TR15 = 0x8000
EXTI_RTSR_TR16 = 0x10000
EXTI_RTSR_TR17 = 0x20000
EXTI_RTSR_TR19 = 0x80000
EXTI_RTSR_TR20 = 0x100000
EXTI_RTSR_TR21 = 0x200000
EXTI_RTSR_TR22 = 0x400000
EXTI_FTSR_FT0_Pos = 0x0
EXTI_FTSR_FT0_Msk = 0x1
EXTI_FTSR_FT0 = 0x1
EXTI_FTSR_FT1_Pos = 0x1
EXTI_FTSR_FT1_Msk = 0x2
EXTI_FTSR_FT1 = 0x2
EXTI_FTSR_FT2_Pos = 0x2
EXTI_FTSR_FT2_Msk = 0x4
EXTI_FTSR_FT2 = 0x4
EXTI_FTSR_FT3_Pos = 0x3
EXTI_FTSR_FT3_Msk = 0x8
EXTI_FTSR_FT3 = 0x8
EXTI_FTSR_FT4_Pos = 0x4
EXTI_FTSR_FT4_Msk = 0x10
EXTI_FTSR_FT4 = 0x10
EXTI_FTSR_FT5_Pos = 0x5
EXTI_FTSR_FT5_Msk = 0x20
EXTI_FTSR_FT5 = 0x20
EXTI_FTSR_FT6_Pos = 0x6
EXTI_FTSR_FT6_Msk = 0x40
EXTI_FTSR_FT6 = 0x40
EXTI_FTSR_FT7_Pos = 0x7
EXTI_FTSR_FT7_Msk = 0x80
EXTI_FTSR_FT7 = 0x80
EXTI_FTSR_FT8_Pos = 0x8
EXTI_FTSR_FT8_Msk = 0x100
EXTI_FTSR_FT8 = 0x100
EXTI_FTSR_FT9_Pos = 0x9
EXTI_FTSR_FT9_Msk = 0x200
EXTI_FTSR_FT9 = 0x200
EXTI_FTSR_FT10_Pos = 0xA
EXTI_FTSR_FT10_Msk = 0x400
EXTI_FTSR_FT10 = 0x400
EXTI_FTSR_FT11_Pos = 0xB
EXTI_FTSR_FT11_Msk = 0x800
EXTI_FTSR_FT11 = 0x800
EXTI_FTSR_FT12_Pos = 0xC
EXTI_FTSR_FT12_Msk = 0x1000
EXTI_FTSR_FT12 = 0x1000
EXTI_FTSR_FT13_Pos = 0xD
EXTI_FTSR_FT13_Msk = 0x2000
EXTI_FTSR_FT13 = 0x2000
EXTI_FTSR_FT14_Pos = 0xE
EXTI_FTSR_FT14_Msk = 0x4000
EXTI_FTSR_FT14 = 0x4000
EXTI_FTSR_FT15_Pos = 0xF
EXTI_FTSR_FT15_Msk = 0x8000
EXTI_FTSR_FT15 = 0x8000
EXTI_FTSR_FT16_Pos = 0x10
EXTI_FTSR_FT16_Msk = 0x10000
EXTI_FTSR_FT16 = 0x10000
EXTI_FTSR_FT17_Pos = 0x11
EXTI_FTSR_FT17_Msk = 0x20000
EXTI_FTSR_FT17 = 0x20000
EXTI_FTSR_FT19_Pos = 0x13
EXTI_FTSR_FT19_Msk = 0x80000
EXTI_FTSR_FT19 = 0x80000
EXTI_FTSR_FT20_Pos = 0x14
EXTI_FTSR_FT20_Msk = 0x100000
EXTI_FTSR_FT20 = 0x100000
EXTI_FTSR_FT21_Pos = 0x15
EXTI_FTSR_FT21_Msk = 0x200000
EXTI_FTSR_FT21 = 0x200000
EXTI_FTSR_FT22_Pos = 0x16
EXTI_FTSR_FT22_Msk = 0x400000
EXTI_FTSR_FT22 = 0x400000
EXTI_FTSR_TR0 = 0x1
EXTI_FTSR_TR1 = 0x2
EXTI_FTSR_TR2 = 0x4
EXTI_FTSR_TR3 = 0x8
EXTI_FTSR_TR4 = 0x10
EXTI_FTSR_TR5 = 0x20
EXTI_FTSR_TR6 = 0x40
EXTI_FTSR_TR7 = 0x80
EXTI_FTSR_TR8 = 0x100
EXTI_FTSR_TR9 = 0x200
EXTI_FTSR_TR10 = 0x400
EXTI_FTSR_TR11 = 0x800
EXTI_FTSR_TR12 = 0x1000
EXTI_FTSR_TR13 = 0x2000
EXTI_FTSR_TR14 = 0x4000
EXTI_FTSR_TR15 = 0x8000
EXTI_FTSR_TR16 = 0x10000
EXTI_FTSR_TR17 = 0x20000
EXTI_FTSR_TR19 = 0x80000
EXTI_FTSR_TR20 = 0x100000
EXTI_FTSR_TR21 = 0x200000
EXTI_FTSR_TR22 = 0x400000
EXTI_SWIER_SWI0_Pos = 0x0
EXTI_SWIER_SWI0_Msk = 0x1
EXTI_SWIER_SWI0 = 0x1
EXTI_SWIER_SWI1_Pos = 0x1
EXTI_SWIER_SWI1_Msk = 0x2
EXTI_SWIER_SWI1 = 0x2
EXTI_SWIER_SWI2_Pos = 0x2
EXTI_SWIER_SWI2_Msk = 0x4
EXTI_SWIER_SWI2 = 0x4
EXTI_SWIER_SWI3_Pos = 0x3
EXTI_SWIER_SWI3_Msk = 0x8
EXTI_SWIER_SWI3 = 0x8
EXTI_SWIER_SWI4_Pos = 0x4
EXTI_SWIER_SWI4_Msk = 0x10
EXTI_SWIER_SWI4 = 0x10
EXTI_SWIER_SWI5_Pos = 0x5
EXTI_SWIER_SWI5_Msk = 0x20
EXTI_SWIER_SWI5 = 0x20
EXTI_SWIER_SWI6_Pos = 0x6
EXTI_SWIER_SWI6_Msk = 0x40
EXTI_SWIER_SWI6 = 0x40
EXTI_SWIER_SWI7_Pos = 0x7
EXTI_SWIER_SWI7_Msk = 0x80
EXTI_SWIER_SWI7 = 0x80
EXTI_SWIER_SWI8_Pos = 0x8
EXTI_SWIER_SWI8_Msk = 0x100
EXTI_SWIER_SWI8 = 0x100
EXTI_SWIER_SWI9_Pos = 0x9
EXTI_SWIER_SWI9_Msk = 0x200
EXTI_SWIER_SWI9 = 0x200
EXTI_SWIER_SWI10_Pos = 0xA
EXTI_SWIER_SWI10_Msk = 0x400
EXTI_SWIER_SWI10 = 0x400
EXTI_SWIER_SWI11_Pos = 0xB
EXTI_SWIER_SWI11_Msk = 0x800
EXTI_SWIER_SWI11 = 0x800
EXTI_SWIER_SWI12_Pos = 0xC
EXTI_SWIER_SWI12_Msk = 0x1000
EXTI_SWIER_SWI12 = 0x1000
EXTI_SWIER_SWI13_Pos = 0xD
EXTI_SWIER_SWI13_Msk = 0x2000
EXTI_SWIER_SWI13 = 0x2000
EXTI_SWIER_SWI14_Pos = 0xE
EXTI_SWIER_SWI14_Msk = 0x4000
EXTI_SWIER_SWI14 = 0x4000
EXTI_SWIER_SWI15_Pos = 0xF
EXTI_SWIER_SWI15_Msk = 0x8000
EXTI_SWIER_SWI15 = 0x8000
EXTI_SWIER_SWI16_Pos = 0x10
EXTI_SWIER_SWI16_Msk = 0x10000
EXTI_SWIER_SWI16 = 0x10000
EXTI_SWIER_SWI17_Pos = 0x11
EXTI_SWIER_SWI17_Msk = 0x20000
EXTI_SWIER_SWI17 = 0x20000
EXTI_SWIER_SWI19_Pos = 0x13
EXTI_SWIER_SWI19_Msk = 0x80000
EXTI_SWIER_SWI19 = 0x80000
EXTI_SWIER_SWI20_Pos = 0x14
EXTI_SWIER_SWI20_Msk = 0x100000
EXTI_SWIER_SWI20 = 0x100000
EXTI_SWIER_SWI21_Pos = 0x15
EXTI_SWIER_SWI21_Msk = 0x200000
EXTI_SWIER_SWI21 = 0x200000
EXTI_SWIER_SWI22_Pos = 0x16
EXTI_SWIER_SWI22_Msk = 0x400000
EXTI_SWIER_SWI22 = 0x400000
EXTI_SWIER_SWIER0 = 0x1
EXTI_SWIER_SWIER1 = 0x2
EXTI_SWIER_SWIER2 = 0x4
EXTI_SWIER_SWIER3 = 0x8
EXTI_SWIER_SWIER4 = 0x10
EXTI_SWIER_SWIER5 = 0x20
EXTI_SWIER_SWIER6 = 0x40
EXTI_SWIER_SWIER7 = 0x80
EXTI_SWIER_SWIER8 = 0x100
EXTI_SWIER_SWIER9 = 0x200
EXTI_SWIER_SWIER10 = 0x400
EXTI_SWIER_SWIER11 = 0x800
EXTI_SWIER_SWIER12 = 0x1000
EXTI_SWIER_SWIER13 = 0x2000
EXTI_SWIER_SWIER14 = 0x4000
EXTI_SWIER_SWIER15 = 0x8000
EXTI_SWIER_SWIER16 = 0x10000
EXTI_SWIER_SWIER17 = 0x20000
EXTI_SWIER_SWIER19 = 0x80000
EXTI_SWIER_SWIER20 = 0x100000
EXTI_SWIER_SWIER21 = 0x200000
EXTI_SWIER_SWIER22 = 0x400000
EXTI_PR_PIF0_Pos = 0x0
EXTI_PR_PIF0_Msk = 0x1
EXTI_PR_PIF0 = 0x1
EXTI_PR_PIF1_Pos = 0x1
EXTI_PR_PIF1_Msk = 0x2
EXTI_PR_PIF1 = 0x2
EXTI_PR_PIF2_Pos = 0x2
EXTI_PR_PIF2_Msk = 0x4
EXTI_PR_PIF2 = 0x4
EXTI_PR_PIF3_Pos = 0x3
EXTI_PR_PIF3_Msk = 0x8
EXTI_PR_PIF3 = 0x8
EXTI_PR_PIF4_Pos = 0x4
EXTI_PR_PIF4_Msk = 0x10
EXTI_PR_PIF4 = 0x10
EXTI_PR_PIF5_Pos = 0x5
EXTI_PR_PIF5_Msk = 0x20
EXTI_PR_PIF5 = 0x20
EXTI_PR_PIF6_Pos = 0x6
EXTI_PR_PIF6_Msk = 0x40
EXTI_PR_PIF6 = 0x40
EXTI_PR_PIF7_Pos = 0x7
EXTI_PR_PIF7_Msk = 0x80
EXTI_PR_PIF7 = 0x80
EXTI_PR_PIF8_Pos = 0x8
EXTI_PR_PIF8_Msk = 0x100
EXTI_PR_PIF8 = 0x100
EXTI_PR_PIF9_Pos = 0x9
EXTI_PR_PIF9_Msk = 0x200
EXTI_PR_PIF9 = 0x200
EXTI_PR_PIF10_Pos = 0xA
EXTI_PR_PIF10_Msk = 0x400
EXTI_PR_PIF10 = 0x400
EXTI_PR_PIF11_Pos = 0xB
EXTI_PR_PIF11_Msk = 0x800
EXTI_PR_PIF11 = 0x800
EXTI_PR_PIF12_Pos = 0xC
EXTI_PR_PIF12_Msk = 0x1000
EXTI_PR_PIF12 = 0x1000
EXTI_PR_PIF13_Pos = 0xD
EXTI_PR_PIF13_Msk = 0x2000
EXTI_PR_PIF13 = 0x2000
EXTI_PR_PIF14_Pos = 0xE
EXTI_PR_PIF14_Msk = 0x4000
EXTI_PR_PIF14 = 0x4000
EXTI_PR_PIF15_Pos = 0xF
EXTI_PR_PIF15_Msk = 0x8000
EXTI_PR_PIF15 = 0x8000
EXTI_PR_PIF16_Pos = 0x10
EXTI_PR_PIF16_Msk = 0x10000
EXTI_PR_PIF16 = 0x10000
EXTI_PR_PIF17_Pos = 0x11
EXTI_PR_PIF17_Msk = 0x20000
EXTI_PR_PIF17 = 0x20000
EXTI_PR_PIF19_Pos = 0x13
EXTI_PR_PIF19_Msk = 0x80000
EXTI_PR_PIF19 = 0x80000
EXTI_PR_PIF20_Pos = 0x14
EXTI_PR_PIF20_Msk = 0x100000
EXTI_PR_PIF20 = 0x100000
EXTI_PR_PIF21_Pos = 0x15
EXTI_PR_PIF21_Msk = 0x200000
EXTI_PR_PIF21 = 0x200000
EXTI_PR_PIF22_Pos = 0x16
EXTI_PR_PIF22_Msk = 0x400000
EXTI_PR_PIF22 = 0x400000
EXTI_PR_PR0 = 0x1
EXTI_PR_PR1 = 0x2
EXTI_PR_PR2 = 0x4
EXTI_PR_PR3 = 0x8
EXTI_PR_PR4 = 0x10
EXTI_PR_PR5 = 0x20
EXTI_PR_PR6 = 0x40
EXTI_PR_PR7 = 0x80
EXTI_PR_PR8 = 0x100
EXTI_PR_PR9 = 0x200
EXTI_PR_PR10 = 0x400
EXTI_PR_PR11 = 0x800
EXTI_PR_PR12 = 0x1000
EXTI_PR_PR13 = 0x2000
EXTI_PR_PR14 = 0x4000
EXTI_PR_PR15 = 0x8000
EXTI_PR_PR16 = 0x10000
EXTI_PR_PR17 = 0x20000
EXTI_PR_PR19 = 0x80000
EXTI_PR_PR20 = 0x100000
EXTI_PR_PR21 = 0x200000
EXTI_PR_PR22 = 0x400000
FLASH_ACR_LATENCY_Pos = 0x0
FLASH_ACR_LATENCY_Msk = 0x1
FLASH_ACR_LATENCY = 0x1
FLASH_ACR_PRFTEN_Pos = 0x1
FLASH_ACR_PRFTEN_Msk = 0x2
FLASH_ACR_PRFTEN = 0x2
FLASH_ACR_SLEEP_PD_Pos = 0x3
FLASH_ACR_SLEEP_PD_Msk = 0x8
FLASH_ACR_SLEEP_PD = 0x8
FLASH_ACR_RUN_PD_Pos = 0x4
FLASH_ACR_RUN_PD_Msk = 0x10
FLASH_ACR_RUN_PD = 0x10
FLASH_ACR_DISAB_BUF_Pos = 0x5
FLASH_ACR_DISAB_BUF_Msk = 0x20
FLASH_ACR_DISAB_BUF = 0x20
FLASH_ACR_PRE_READ_Pos = 0x6
FLASH_ACR_PRE_READ_Msk = 0x40
FLASH_ACR_PRE_READ = 0x40
FLASH_PECR_PELOCK_Pos = 0x0
FLASH_PECR_PELOCK_Msk = 0x1
FLASH_PECR_PELOCK = 0x1
FLASH_PECR_PRGLOCK_Pos = 0x1
FLASH_PECR_PRGLOCK_Msk = 0x2
FLASH_PECR_PRGLOCK = 0x2
FLASH_PECR_OPTLOCK_Pos = 0x2
FLASH_PECR_OPTLOCK_Msk = 0x4
FLASH_PECR_OPTLOCK = 0x4
FLASH_PECR_PROG_Pos = 0x3
FLASH_PECR_PROG_Msk = 0x8
FLASH_PECR_PROG = 0x8
FLASH_PECR_DATA_Pos = 0x4
FLASH_PECR_DATA_Msk = 0x10
FLASH_PECR_DATA = 0x10
FLASH_PECR_FIX_Pos = 0x8
FLASH_PECR_FIX_Msk = 0x100
FLASH_PECR_FIX = 0x100
FLASH_PECR_ERASE_Pos = 0x9
FLASH_PECR_ERASE_Msk = 0x200
FLASH_PECR_ERASE = 0x200
FLASH_PECR_FPRG_Pos = 0xA
FLASH_PECR_FPRG_Msk = 0x400
FLASH_PECR_FPRG = 0x400
FLASH_PECR_EOPIE_Pos = 0x10
FLASH_PECR_EOPIE_Msk = 0x10000
FLASH_PECR_EOPIE = 0x10000
FLASH_PECR_ERRIE_Pos = 0x11
FLASH_PECR_ERRIE_Msk = 0x20000
FLASH_PECR_ERRIE = 0x20000
FLASH_PECR_OBL_LAUNCH_Pos = 0x12
FLASH_PECR_OBL_LAUNCH_Msk = 0x40000
FLASH_PECR_OBL_LAUNCH = 0x40000
FLASH_PECR_HALF_ARRAY_Pos = 0x13
FLASH_PECR_HALF_ARRAY_Msk = 0x80000
FLASH_PECR_HALF_ARRAY = 0x80000
FLASH_PDKEYR_PDKEYR_Pos = 0x0
FLASH_PDKEYR_PDKEYR_Msk = 0xFFFFFFFF
FLASH_PDKEYR_PDKEYR = 0xFFFFFFFF
FLASH_PEKEYR_PEKEYR_Pos = 0x0
FLASH_PEKEYR_PEKEYR_Msk = 0xFFFFFFFF
FLASH_PEKEYR_PEKEYR = 0xFFFFFFFF
FLASH_PRGKEYR_PRGKEYR_Pos = 0x0
FLASH_PRGKEYR_PRGKEYR_Msk = 0xFFFFFFFF
FLASH_PRGKEYR_PRGKEYR = 0xFFFFFFFF
FLASH_OPTKEYR_OPTKEYR_Pos = 0x0
FLASH_OPTKEYR_OPTKEYR_Msk = 0xFFFFFFFF
FLASH_OPTKEYR_OPTKEYR = 0xFFFFFFFF
FLASH_SR_BSY_Pos = 0x0
FLASH_SR_BSY_Msk = 0x1
FLASH_SR_BSY = 0x1
FLASH_SR_EOP_Pos = 0x1
FLASH_SR_EOP_Msk = 0x2
FLASH_SR_EOP = 0x2
FLASH_SR_HVOFF_Pos = 0x2
FLASH_SR_HVOFF_Msk = 0x4
FLASH_SR_HVOFF = 0x4
FLASH_SR_READY_Pos = 0x3
FLASH_SR_READY_Msk = 0x8
FLASH_SR_READY = 0x8
FLASH_SR_WRPERR_Pos = 0x8
FLASH_SR_WRPERR_Msk = 0x100
FLASH_SR_WRPERR = 0x100
FLASH_SR_PGAERR_Pos = 0x9
FLASH_SR_PGAERR_Msk = 0x200
FLASH_SR_PGAERR = 0x200
FLASH_SR_SIZERR_Pos = 0xA
FLASH_SR_SIZERR_Msk = 0x400
FLASH_SR_SIZERR = 0x400
FLASH_SR_OPTVERR_Pos = 0xB
FLASH_SR_OPTVERR_Msk = 0x800
FLASH_SR_OPTVERR = 0x800
FLASH_SR_RDERR_Pos = 0xD
FLASH_SR_RDERR_Msk = 0x2000
FLASH_SR_RDERR = 0x2000
FLASH_SR_NOTZEROERR_Pos = 0x10
FLASH_SR_NOTZEROERR_Msk = 0x10000
FLASH_SR_NOTZEROERR = 0x10000
FLASH_SR_FWWERR_Pos = 0x11
FLASH_SR_FWWERR_Msk = 0x20000
FLASH_SR_FWWERR = 0x20000
FLASH_SR_FWWER = 0x20000
FLASH_SR_ENHV = 0x4
FLASH_SR_ENDHV = 0x4
FLASH_OPTR_RDPROT_Pos = 0x0
FLASH_OPTR_RDPROT_Msk = 0xFF
FLASH_OPTR_RDPROT = 0xFF
FLASH_OPTR_WPRMOD_Pos = 0x8
FLASH_OPTR_WPRMOD_Msk = 0x100
FLASH_OPTR_WPRMOD = 0x100
FLASH_OPTR_BOR_LEV_Pos = 0x10
FLASH_OPTR_BOR_LEV_Msk = 0xF0000
FLASH_OPTR_BOR_LEV = 0xF0000
FLASH_OPTR_IWDG_SW_Pos = 0x14
FLASH_OPTR_IWDG_SW_Msk = 0x100000
FLASH_OPTR_IWDG_SW = 0x100000
FLASH_OPTR_nRST_STOP_Pos = 0x15
FLASH_OPTR_nRST_STOP_Msk = 0x200000
FLASH_OPTR_nRST_STOP = 0x200000
FLASH_OPTR_nRST_STDBY_Pos = 0x16
FLASH_OPTR_nRST_STDBY_Msk = 0x400000
FLASH_OPTR_nRST_STDBY = 0x400000
FLASH_OPTR_USER_Pos = 0x14
FLASH_OPTR_USER_Msk = 0x700000
FLASH_OPTR_USER = 0x700000
FLASH_OPTR_BOOT1_Pos = 0x1F
FLASH_OPTR_BOOT1_Msk = 0x80000000
FLASH_OPTR_BOOT1 = 0x80000000
FLASH_WRPR_WRP_Pos = 0x0
FLASH_WRPR_WRP_Msk = 0xFFFF
FLASH_WRPR_WRP = 0xFFFF
GPIO_MODER_MODE0_Pos = 0x0
GPIO_MODER_MODE0_Msk = 0x3
GPIO_MODER_MODE0 = 0x3
GPIO_MODER_MODE0_0 = 0x1
GPIO_MODER_MODE0_1 = 0x2
GPIO_MODER_MODE1_Pos = 0x2
GPIO_MODER_MODE1_Msk = 0xC
GPIO_MODER_MODE1 = 0xC
GPIO_MODER_MODE1_0 = 0x4
GPIO_MODER_MODE1_1 = 0x8
GPIO_MODER_MODE2_Pos = 0x4
GPIO_MODER_MODE2_Msk = 0x30
GPIO_MODER_MODE2 = 0x30
GPIO_MODER_MODE2_0 = 0x10
GPIO_MODER_MODE2_1 = 0x20
GPIO_MODER_MODE3_Pos = 0x6
GPIO_MODER_MODE3_Msk = 0xC0
GPIO_MODER_MODE3 = 0xC0
GPIO_MODER_MODE3_0 = 0x40
GPIO_MODER_MODE3_1 = 0x80
GPIO_MODER_MODE4_Pos = 0x8
GPIO_MODER_MODE4_Msk = 0x300
GPIO_MODER_MODE4 = 0x300
GPIO_MODER_MODE4_0 = 0x100
GPIO_MODER_MODE4_1 = 0x200
GPIO_MODER_MODE5_Pos = 0xA
GPIO_MODER_MODE5_Msk = 0xC00
GPIO_MODER_MODE5 = 0xC00
GPIO_MODER_MODE5_0 = 0x400
GPIO_MODER_MODE5_1 = 0x800
GPIO_MODER_MODE6_Pos = 0xC
GPIO_MODER_MODE6_Msk = 0x3000
GPIO_MODER_MODE6 = 0x3000
GPIO_MODER_MODE6_0 = 0x1000
GPIO_MODER_MODE6_1 = 0x2000
GPIO_MODER_MODE7_Pos = 0xE
GPIO_MODER_MODE7_Msk = 0xC000
GPIO_MODER_MODE7 = 0xC000
GPIO_MODER_MODE7_0 = 0x4000
GPIO_MODER_MODE7_1 = 0x8000
GPIO_MODER_MODE8_Pos = 0x10
GPIO_MODER_MODE8_Msk = 0x30000
GPIO_MODER_MODE8 = 0x30000
GPIO_MODER_MODE8_0 = 0x10000
GPIO_MODER_MODE8_1 = 0x20000
GPIO_MODER_MODE9_Pos = 0x12
GPIO_MODER_MODE9_Msk = 0xC0000
GPIO_MODER_MODE9 = 0xC0000
GPIO_MODER_MODE9_0 = 0x40000
GPIO_MODER_MODE9_1 = 0x80000
GPIO_MODER_MODE10_Pos = 0x14
GPIO_MODER_MODE10_Msk = 0x300000
GPIO_MODER_MODE10 = 0x300000
GPIO_MODER_MODE10_0 = 0x100000
GPIO_MODER_MODE10_1 = 0x200000
GPIO_MODER_MODE11_Pos = 0x16
GPIO_MODER_MODE11_Msk = 0xC00000
GPIO_MODER_MODE11 = 0xC00000
GPIO_MODER_MODE11_0 = 0x400000
GPIO_MODER_MODE11_1 = 0x800000
GPIO_MODER_MODE12_Pos = 0x18
GPIO_MODER_MODE12_Msk = 0x3000000
GPIO_MODER_MODE12 = 0x3000000
GPIO_MODER_MODE12_0 = 0x1000000
GPIO_MODER_MODE12_1 = 0x2000000
GPIO_MODER_MODE13_Pos = 0x1A
GPIO_MODER_MODE13_Msk = 0xC000000
GPIO_MODER_MODE13 = 0xC000000
GPIO_MODER_MODE13_0 = 0x4000000
GPIO_MODER_MODE13_1 = 0x8000000
GPIO_MODER_MODE14_Pos = 0x1C
GPIO_MODER_MODE14_Msk = 0x30000000
GPIO_MODER_MODE14 = 0x30000000
GPIO_MODER_MODE14_0 = 0x10000000
GPIO_MODER_MODE14_1 = 0x20000000
GPIO_MODER_MODE15_Pos = 0x1E
GPIO_MODER_MODE15_Msk = 0xC0000000
GPIO_MODER_MODE15 = 0xC0000000
GPIO_MODER_MODE15_0 = 0x40000000
GPIO_MODER_MODE15_1 = 0x80000000
GPIO_OTYPER_OT_0 = 0x1
GPIO_OTYPER_OT_1 = 0x2
GPIO_OTYPER_OT_2 = 0x4
GPIO_OTYPER_OT_3 = 0x8
GPIO_OTYPER_OT_4 = 0x10
GPIO_OTYPER_OT_5 = 0x20
GPIO_OTYPER_OT_6 = 0x40
GPIO_OTYPER_OT_7 = 0x80
GPIO_OTYPER_OT_8 = 0x100
GPIO_OTYPER_OT_9 = 0x200
GPIO_OTYPER_OT_10 = 0x400
GPIO_OTYPER_OT_11 = 0x800
GPIO_OTYPER_OT_12 = 0x1000
GPIO_OTYPER_OT_13 = 0x2000
GPIO_OTYPER_OT_14 = 0x4000
GPIO_OTYPER_OT_15 = 0x8000
GPIO_OSPEEDER_OSPEED0_Pos = 0x0
GPIO_OSPEEDER_OSPEED0_Msk = 0x3
GPIO_OSPEEDER_OSPEED0 = 0x3
GPIO_OSPEEDER_OSPEED0_0 = 0x1
GPIO_OSPEEDER_OSPEED0_1 = 0x2
GPIO_OSPEEDER_OSPEED1_Pos = 0x2
GPIO_OSPEEDER_OSPEED1_Msk = 0xC
GPIO_OSPEEDER_OSPEED1 = 0xC
GPIO_OSPEEDER_OSPEED1_0 = 0x4
GPIO_OSPEEDER_OSPEED1_1 = 0x8
GPIO_OSPEEDER_OSPEED2_Pos = 0x4
GPIO_OSPEEDER_OSPEED2_Msk = 0x30
GPIO_OSPEEDER_OSPEED2 = 0x30
GPIO_OSPEEDER_OSPEED2_0 = 0x10
GPIO_OSPEEDER_OSPEED2_1 = 0x20
GPIO_OSPEEDER_OSPEED3_Pos = 0x6
GPIO_OSPEEDER_OSPEED3_Msk = 0xC0
GPIO_OSPEEDER_OSPEED3 = 0xC0
GPIO_OSPEEDER_OSPEED3_0 = 0x40
GPIO_OSPEEDER_OSPEED3_1 = 0x80
GPIO_OSPEEDER_OSPEED4_Pos = 0x8
GPIO_OSPEEDER_OSPEED4_Msk = 0x300
GPIO_OSPEEDER_OSPEED4 = 0x300
GPIO_OSPEEDER_OSPEED4_0 = 0x100
GPIO_OSPEEDER_OSPEED4_1 = 0x200
GPIO_OSPEEDER_OSPEED5_Pos = 0xA
GPIO_OSPEEDER_OSPEED5_Msk = 0xC00
GPIO_OSPEEDER_OSPEED5 = 0xC00
GPIO_OSPEEDER_OSPEED5_0 = 0x400
GPIO_OSPEEDER_OSPEED5_1 = 0x800
GPIO_OSPEEDER_OSPEED6_Pos = 0xC
GPIO_OSPEEDER_OSPEED6_Msk = 0x3000
GPIO_OSPEEDER_OSPEED6 = 0x3000
GPIO_OSPEEDER_OSPEED6_0 = 0x1000
GPIO_OSPEEDER_OSPEED6_1 = 0x2000
GPIO_OSPEEDER_OSPEED7_Pos = 0xE
GPIO_OSPEEDER_OSPEED7_Msk = 0xC000
GPIO_OSPEEDER_OSPEED7 = 0xC000
GPIO_OSPEEDER_OSPEED7_0 = 0x4000
GPIO_OSPEEDER_OSPEED7_1 = 0x8000
GPIO_OSPEEDER_OSPEED8_Pos = 0x10
GPIO_OSPEEDER_OSPEED8_Msk = 0x30000
GPIO_OSPEEDER_OSPEED8 = 0x30000
GPIO_OSPEEDER_OSPEED8_0 = 0x10000
GPIO_OSPEEDER_OSPEED8_1 = 0x20000
GPIO_OSPEEDER_OSPEED9_Pos = 0x12
GPIO_OSPEEDER_OSPEED9_Msk = 0xC0000
GPIO_OSPEEDER_OSPEED9 = 0xC0000
GPIO_OSPEEDER_OSPEED9_0 = 0x40000
GPIO_OSPEEDER_OSPEED9_1 = 0x80000
GPIO_OSPEEDER_OSPEED10_Pos = 0x14
GPIO_OSPEEDER_OSPEED10_Msk = 0x300000
GPIO_OSPEEDER_OSPEED10 = 0x300000
GPIO_OSPEEDER_OSPEED10_0 = 0x100000
GPIO_OSPEEDER_OSPEED10_1 = 0x200000
GPIO_OSPEEDER_OSPEED11_Pos = 0x16
GPIO_OSPEEDER_OSPEED11_Msk = 0xC00000
GPIO_OSPEEDER_OSPEED11 = 0xC00000
GPIO_OSPEEDER_OSPEED11_0 = 0x400000
GPIO_OSPEEDER_OSPEED11_1 = 0x800000
GPIO_OSPEEDER_OSPEED12_Pos = 0x18
GPIO_OSPEEDER_OSPEED12_Msk = 0x3000000
GPIO_OSPEEDER_OSPEED12 = 0x3000000
GPIO_OSPEEDER_OSPEED12_0 = 0x1000000
GPIO_OSPEEDER_OSPEED12_1 = 0x2000000
GPIO_OSPEEDER_OSPEED13_Pos = 0x1A
GPIO_OSPEEDER_OSPEED13_Msk = 0xC000000
GPIO_OSPEEDER_OSPEED13 = 0xC000000
GPIO_OSPEEDER_OSPEED13_0 = 0x4000000
GPIO_OSPEEDER_OSPEED13_1 = 0x8000000
GPIO_OSPEEDER_OSPEED14_Pos = 0x1C
GPIO_OSPEEDER_OSPEED14_Msk = 0x30000000
GPIO_OSPEEDER_OSPEED14 = 0x30000000
GPIO_OSPEEDER_OSPEED14_0 = 0x10000000
GPIO_OSPEEDER_OSPEED14_1 = 0x20000000
GPIO_OSPEEDER_OSPEED15_Pos = 0x1E
GPIO_OSPEEDER_OSPEED15_Msk = 0xC0000000
GPIO_OSPEEDER_OSPEED15 = 0xC0000000
GPIO_OSPEEDER_OSPEED15_0 = 0x40000000
GPIO_OSPEEDER_OSPEED15_1 = 0x80000000
GPIO_PUPDR_PUPD0_Pos = 0x0
GPIO_PUPDR_PUPD0_Msk = 0x3
GPIO_PUPDR_PUPD0 = 0x3
GPIO_PUPDR_PUPD0_0 = 0x1
GPIO_PUPDR_PUPD0_1 = 0x2
GPIO_PUPDR_PUPD1_Pos = 0x2
GPIO_PUPDR_PUPD1_Msk = 0xC
GPIO_PUPDR_PUPD1 = 0xC
GPIO_PUPDR_PUPD1_0 = 0x4
GPIO_PUPDR_PUPD1_1 = 0x8
GPIO_PUPDR_PUPD2_Pos = 0x4
GPIO_PUPDR_PUPD2_Msk = 0x30
GPIO_PUPDR_PUPD2 = 0x30
GPIO_PUPDR_PUPD2_0 = 0x10
GPIO_PUPDR_PUPD2_1 = 0x20
GPIO_PUPDR_PUPD3_Pos = 0x6
GPIO_PUPDR_PUPD3_Msk = 0xC0
GPIO_PUPDR_PUPD3 = 0xC0
GPIO_PUPDR_PUPD3_0 = 0x40
GPIO_PUPDR_PUPD3_1 = 0x80
GPIO_PUPDR_PUPD4_Pos = 0x8
GPIO_PUPDR_PUPD4_Msk = 0x300
GPIO_PUPDR_PUPD4 = 0x300
GPIO_PUPDR_PUPD4_0 = 0x100
GPIO_PUPDR_PUPD4_1 = 0x200
GPIO_PUPDR_PUPD5_Pos = 0xA
GPIO_PUPDR_PUPD5_Msk = 0xC00
GPIO_PUPDR_PUPD5 = 0xC00
GPIO_PUPDR_PUPD5_0 = 0x400
GPIO_PUPDR_PUPD5_1 = 0x800
GPIO_PUPDR_PUPD6_Pos = 0xC
GPIO_PUPDR_PUPD6_Msk = 0x3000
GPIO_PUPDR_PUPD6 = 0x3000
GPIO_PUPDR_PUPD6_0 = 0x1000
GPIO_PUPDR_PUPD6_1 = 0x2000
GPIO_PUPDR_PUPD7_Pos = 0xE
GPIO_PUPDR_PUPD7_Msk = 0xC000
GPIO_PUPDR_PUPD7 = 0xC000
GPIO_PUPDR_PUPD7_0 = 0x4000
GPIO_PUPDR_PUPD7_1 = 0x8000
GPIO_PUPDR_PUPD8_Pos = 0x10
GPIO_PUPDR_PUPD8_Msk = 0x30000
GPIO_PUPDR_PUPD8 = 0x30000
GPIO_PUPDR_PUPD8_0 = 0x10000
GPIO_PUPDR_PUPD8_1 = 0x20000
GPIO_PUPDR_PUPD9_Pos = 0x12
GPIO_PUPDR_PUPD9_Msk = 0xC0000
GPIO_PUPDR_PUPD9 = 0xC0000
GPIO_PUPDR_PUPD9_0 = 0x40000
GPIO_PUPDR_PUPD9_1 = 0x80000
GPIO_PUPDR_PUPD10_Pos = 0x14
GPIO_PUPDR_PUPD10_Msk = 0x300000
GPIO_PUPDR_PUPD10 = 0x300000
GPIO_PUPDR_PUPD10_0 = 0x100000
GPIO_PUPDR_PUPD10_1 = 0x200000
GPIO_PUPDR_PUPD11_Pos = 0x16
GPIO_PUPDR_PUPD11_Msk = 0xC00000
GPIO_PUPDR_PUPD11 = 0xC00000
GPIO_PUPDR_PUPD11_0 = 0x400000
GPIO_PUPDR_PUPD11_1 = 0x800000
GPIO_PUPDR_PUPD12_Pos = 0x18
GPIO_PUPDR_PUPD12_Msk = 0x3000000
GPIO_PUPDR_PUPD12 = 0x3000000
GPIO_PUPDR_PUPD12_0 = 0x1000000
GPIO_PUPDR_PUPD12_1 = 0x2000000
GPIO_PUPDR_PUPD13_Pos = 0x1A
GPIO_PUPDR_PUPD13_Msk = 0xC000000
GPIO_PUPDR_PUPD13 = 0xC000000
GPIO_PUPDR_PUPD13_0 = 0x4000000
GPIO_PUPDR_PUPD13_1 = 0x8000000
GPIO_PUPDR_PUPD14_Pos = 0x1C
GPIO_PUPDR_PUPD14_Msk = 0x30000000
GPIO_PUPDR_PUPD14 = 0x30000000
GPIO_PUPDR_PUPD14_0 = 0x10000000
GPIO_PUPDR_PUPD14_1 = 0x20000000
GPIO_PUPDR_PUPD15_Pos = 0x1E
GPIO_PUPDR_PUPD15_Msk = 0xC0000000
GPIO_PUPDR_PUPD15 = 0xC0000000
GPIO_PUPDR_PUPD15_0 = 0x40000000
GPIO_PUPDR_PUPD15_1 = 0x80000000
GPIO_IDR_ID0_Pos = 0x0
GPIO_IDR_ID0_Msk = 0x1
GPIO_IDR_ID0 = 0x1
GPIO_IDR_ID1_Pos = 0x1
GPIO_IDR_ID1_Msk = 0x2
GPIO_IDR_ID1 = 0x2
GPIO_IDR_ID2_Pos = 0x2
GPIO_IDR_ID2_Msk = 0x4
GPIO_IDR_ID2 = 0x4
GPIO_IDR_ID3_Pos = 0x3
GPIO_IDR_ID3_Msk = 0x8
GPIO_IDR_ID3 = 0x8
GPIO_IDR_ID4_Pos = 0x4
GPIO_IDR_ID4_Msk = 0x10
GPIO_IDR_ID4 = 0x10
GPIO_IDR_ID5_Pos = 0x5
GPIO_IDR_ID5_Msk = 0x20
GPIO_IDR_ID5 = 0x20
GPIO_IDR_ID6_Pos = 0x6
GPIO_IDR_ID6_Msk = 0x40
GPIO_IDR_ID6 = 0x40
GPIO_IDR_ID7_Pos = 0x7
GPIO_IDR_ID7_Msk = 0x80
GPIO_IDR_ID7 = 0x80
GPIO_IDR_ID8_Pos = 0x8
GPIO_IDR_ID8_Msk = 0x100
GPIO_IDR_ID8 = 0x100
GPIO_IDR_ID9_Pos = 0x9
GPIO_IDR_ID9_Msk = 0x200
GPIO_IDR_ID9 = 0x200
GPIO_IDR_ID10_Pos = 0xA
GPIO_IDR_ID10_Msk = 0x400
GPIO_IDR_ID10 = 0x400
GPIO_IDR_ID11_Pos = 0xB
GPIO_IDR_ID11_Msk = 0x800
GPIO_IDR_ID11 = 0x800
GPIO_IDR_ID12_Pos = 0xC
GPIO_IDR_ID12_Msk = 0x1000
GPIO_IDR_ID12 = 0x1000
GPIO_IDR_ID13_Pos = 0xD
GPIO_IDR_ID13_Msk = 0x2000
GPIO_IDR_ID13 = 0x2000
GPIO_IDR_ID14_Pos = 0xE
GPIO_IDR_ID14_Msk = 0x4000
GPIO_IDR_ID14 = 0x4000
GPIO_IDR_ID15_Pos = 0xF
GPIO_IDR_ID15_Msk = 0x8000
GPIO_IDR_ID15 = 0x8000
GPIO_ODR_OD0_Pos = 0x0
GPIO_ODR_OD0_Msk = 0x1
GPIO_ODR_OD0 = 0x1
GPIO_ODR_OD1_Pos = 0x1
GPIO_ODR_OD1_Msk = 0x2
GPIO_ODR_OD1 = 0x2
GPIO_ODR_OD2_Pos = 0x2
GPIO_ODR_OD2_Msk = 0x4
GPIO_ODR_OD2 = 0x4
GPIO_ODR_OD3_Pos = 0x3
GPIO_ODR_OD3_Msk = 0x8
GPIO_ODR_OD3 = 0x8
GPIO_ODR_OD4_Pos = 0x4
GPIO_ODR_OD4_Msk = 0x10
GPIO_ODR_OD4 = 0x10
GPIO_ODR_OD5_Pos = 0x5
GPIO_ODR_OD5_Msk = 0x20
GPIO_ODR_OD5 = 0x20
GPIO_ODR_OD6_Pos = 0x6
GPIO_ODR_OD6_Msk = 0x40
GPIO_ODR_OD6 = 0x40
GPIO_ODR_OD7_Pos = 0x7
GPIO_ODR_OD7_Msk = 0x80
GPIO_ODR_OD7 = 0x80
GPIO_ODR_OD8_Pos = 0x8
GPIO_ODR_OD8_Msk = 0x100
GPIO_ODR_OD8 = 0x100
GPIO_ODR_OD9_Pos = 0x9
GPIO_ODR_OD9_Msk = 0x200
GPIO_ODR_OD9 = 0x200
GPIO_ODR_OD10_Pos = 0xA
GPIO_ODR_OD10_Msk = 0x400
GPIO_ODR_OD10 = 0x400
GPIO_ODR_OD11_Pos = 0xB
GPIO_ODR_OD11_Msk = 0x800
GPIO_ODR_OD11 = 0x800
GPIO_ODR_OD12_Pos = 0xC
GPIO_ODR_OD12_Msk = 0x1000
GPIO_ODR_OD12 = 0x1000
GPIO_ODR_OD13_Pos = 0xD
GPIO_ODR_OD13_Msk = 0x2000
GPIO_ODR_OD13 = 0x2000
GPIO_ODR_OD14_Pos = 0xE
GPIO_ODR_OD14_Msk = 0x4000
GPIO_ODR_OD14 = 0x4000
GPIO_ODR_OD15_Pos = 0xF
GPIO_ODR_OD15_Msk = 0x8000
GPIO_ODR_OD15 = 0x8000
GPIO_BSRR_BS_0 = 0x1
GPIO_BSRR_BS_1 = 0x2
GPIO_BSRR_BS_2 = 0x4
GPIO_BSRR_BS_3 = 0x8
GPIO_BSRR_BS_4 = 0x10
GPIO_BSRR_BS_5 = 0x20
GPIO_BSRR_BS_6 = 0x40
GPIO_BSRR_BS_7 = 0x80
GPIO_BSRR_BS_8 = 0x100
GPIO_BSRR_BS_9 = 0x200
GPIO_BSRR_BS_10 = 0x400
GPIO_BSRR_BS_11 = 0x800
GPIO_BSRR_BS_12 = 0x1000
GPIO_BSRR_BS_13 = 0x2000
GPIO_BSRR_BS_14 = 0x4000
GPIO_BSRR_BS_15 = 0x8000
GPIO_BSRR_BR_0 = 0x10000
GPIO_BSRR_BR_1 = 0x20000
GPIO_BSRR_BR_2 = 0x40000
GPIO_BSRR_BR_3 = 0x80000
GPIO_BSRR_BR_4 = 0x100000
GPIO_BSRR_BR_5 = 0x200000
GPIO_BSRR_BR_6 = 0x400000
GPIO_BSRR_BR_7 = 0x800000
GPIO_BSRR_BR_8 = 0x1000000
GPIO_BSRR_BR_9 = 0x2000000
GPIO_BSRR_BR_10 = 0x4000000
GPIO_BSRR_BR_11 = 0x8000000
GPIO_BSRR_BR_12 = 0x10000000
GPIO_BSRR_BR_13 = 0x20000000
GPIO_BSRR_BR_14 = 0x40000000
GPIO_BSRR_BR_15 = 0x80000000
GPIO_LCKR_LCK0_Pos = 0x0
GPIO_LCKR_LCK0_Msk = 0x1
GPIO_LCKR_LCK0 = 0x1
GPIO_LCKR_LCK1_Pos = 0x1
GPIO_LCKR_LCK1_Msk = 0x2
GPIO_LCKR_LCK1 = 0x2
GPIO_LCKR_LCK2_Pos = 0x2
GPIO_LCKR_LCK2_Msk = 0x4
GPIO_LCKR_LCK2 = 0x4
GPIO_LCKR_LCK3_Pos = 0x3
GPIO_LCKR_LCK3_Msk = 0x8
GPIO_LCKR_LCK3 = 0x8
GPIO_LCKR_LCK4_Pos = 0x4
GPIO_LCKR_LCK4_Msk = 0x10
GPIO_LCKR_LCK4 = 0x10
GPIO_LCKR_LCK5_Pos = 0x5
GPIO_LCKR_LCK5_Msk = 0x20
GPIO_LCKR_LCK5 = 0x20
GPIO_LCKR_LCK6_Pos = 0x6
GPIO_LCKR_LCK6_Msk = 0x40
GPIO_LCKR_LCK6 = 0x40
GPIO_LCKR_LCK7_Pos = 0x7
GPIO_LCKR_LCK7_Msk = 0x80
GPIO_LCKR_LCK7 = 0x80
GPIO_LCKR_LCK8_Pos = 0x8
GPIO_LCKR_LCK8_Msk = 0x100
GPIO_LCKR_LCK8 = 0x100
GPIO_LCKR_LCK9_Pos = 0x9
GPIO_LCKR_LCK9_Msk = 0x200
GPIO_LCKR_LCK9 = 0x200
GPIO_LCKR_LCK10_Pos = 0xA
GPIO_LCKR_LCK10_Msk = 0x400
GPIO_LCKR_LCK10 = 0x400
GPIO_LCKR_LCK11_Pos = 0xB
GPIO_LCKR_LCK11_Msk = 0x800
GPIO_LCKR_LCK11 = 0x800
GPIO_LCKR_LCK12_Pos = 0xC
GPIO_LCKR_LCK12_Msk = 0x1000
GPIO_LCKR_LCK12 = 0x1000
GPIO_LCKR_LCK13_Pos = 0xD
GPIO_LCKR_LCK13_Msk = 0x2000
GPIO_LCKR_LCK13 = 0x2000
GPIO_LCKR_LCK14_Pos = 0xE
GPIO_LCKR_LCK14_Msk = 0x4000
GPIO_LCKR_LCK14 = 0x4000
GPIO_LCKR_LCK15_Pos = 0xF
GPIO_LCKR_LCK15_Msk = 0x8000
GPIO_LCKR_LCK15 = 0x8000
GPIO_LCKR_LCKK_Pos = 0x10
GPIO_LCKR_LCKK_Msk = 0x10000
GPIO_LCKR_LCKK = 0x10000
GPIO_AFRL_AFSEL0_Pos = 0x0
GPIO_AFRL_AFSEL0_Msk = 0xF
GPIO_AFRL_AFSEL0 = 0xF
GPIO_AFRL_AFSEL1_Pos = 0x4
GPIO_AFRL_AFSEL1_Msk = 0xF0
GPIO_AFRL_AFSEL1 = 0xF0
GPIO_AFRL_AFSEL2_Pos = 0x8
GPIO_AFRL_AFSEL2_Msk = 0xF00
GPIO_AFRL_AFSEL2 = 0xF00
GPIO_AFRL_AFSEL3_Pos = 0xC
GPIO_AFRL_AFSEL3_Msk = 0xF000
GPIO_AFRL_AFSEL3 = 0xF000
GPIO_AFRL_AFSEL4_Pos = 0x10
GPIO_AFRL_AFSEL4_Msk = 0xF0000
GPIO_AFRL_AFSEL4 = 0xF0000
GPIO_AFRL_AFSEL5_Pos = 0x14
GPIO_AFRL_AFSEL5_Msk = 0xF00000
GPIO_AFRL_AFSEL5 = 0xF00000
GPIO_AFRL_AFSEL6_Pos = 0x18
GPIO_AFRL_AFSEL6_Msk = 0xF000000
GPIO_AFRL_AFSEL6 = 0xF000000
GPIO_AFRL_AFSEL7_Pos = 0x1C
GPIO_AFRL_AFSEL7_Msk = 0xF0000000
GPIO_AFRL_AFSEL7 = 0xF0000000
GPIO_AFRH_AFSEL8_Pos = 0x0
GPIO_AFRH_AFSEL8_Msk = 0xF
GPIO_AFRH_AFSEL8 = 0xF
GPIO_AFRH_AFSEL9_Pos = 0x4
GPIO_AFRH_AFSEL9_Msk = 0xF0
GPIO_AFRH_AFSEL9 = 0xF0
GPIO_AFRH_AFSEL10_Pos = 0x8
GPIO_AFRH_AFSEL10_Msk = 0xF00
GPIO_AFRH_AFSEL10 = 0xF00
GPIO_AFRH_AFSEL11_Pos = 0xC
GPIO_AFRH_AFSEL11_Msk = 0xF000
GPIO_AFRH_AFSEL11 = 0xF000
GPIO_AFRH_AFSEL12_Pos = 0x10
GPIO_AFRH_AFSEL12_Msk = 0xF0000
GPIO_AFRH_AFSEL12 = 0xF0000
GPIO_AFRH_AFSEL13_Pos = 0x14
GPIO_AFRH_AFSEL13_Msk = 0xF00000
GPIO_AFRH_AFSEL13 = 0xF00000
GPIO_AFRH_AFSEL14_Pos = 0x18
GPIO_AFRH_AFSEL14_Msk = 0xF000000
GPIO_AFRH_AFSEL14 = 0xF000000
GPIO_AFRH_AFSEL15_Pos = 0x1C
GPIO_AFRH_AFSEL15_Msk = 0xF0000000
GPIO_AFRH_AFSEL15 = 0xF0000000
GPIO_BRR_BR_0 = 0x1
GPIO_BRR_BR_1 = 0x2
GPIO_BRR_BR_2 = 0x4
GPIO_BRR_BR_3 = 0x8
GPIO_BRR_BR_4 = 0x10
GPIO_BRR_BR_5 = 0x20
GPIO_BRR_BR_6 = 0x40
GPIO_BRR_BR_7 = 0x80
GPIO_BRR_BR_8 = 0x100
GPIO_BRR_BR_9 = 0x200
GPIO_BRR_BR_10 = 0x400
GPIO_BRR_BR_11 = 0x800
GPIO_BRR_BR_12 = 0x1000
GPIO_BRR_BR_13 = 0x2000
GPIO_BRR_BR_14 = 0x4000
GPIO_BRR_BR_15 = 0x8000
I2C_CR1_PE_Pos = 0x0
I2C_CR1_PE_Msk = 0x1
I2C_CR1_PE = 0x1
I2C_CR1_TXIE_Pos = 0x1
I2C_CR1_TXIE_Msk = 0x2
I2C_CR1_TXIE = 0x2
I2C_CR1_RXIE_Pos = 0x2
I2C_CR1_RXIE_Msk = 0x4
I2C_CR1_RXIE = 0x4
I2C_CR1_ADDRIE_Pos = 0x3
I2C_CR1_ADDRIE_Msk = 0x8
I2C_CR1_ADDRIE = 0x8
I2C_CR1_NACKIE_Pos = 0x4
I2C_CR1_NACKIE_Msk = 0x10
I2C_CR1_NACKIE = 0x10
I2C_CR1_STOPIE_Pos = 0x5
I2C_CR1_STOPIE_Msk = 0x20
I2C_CR1_STOPIE = 0x20
I2C_CR1_TCIE_Pos = 0x6
I2C_CR1_TCIE_Msk = 0x40
I2C_CR1_TCIE = 0x40
I2C_CR1_ERRIE_Pos = 0x7
I2C_CR1_ERRIE_Msk = 0x80
I2C_CR1_ERRIE = 0x80
I2C_CR1_DNF_Pos = 0x8
I2C_CR1_DNF_Msk = 0xF00
I2C_CR1_DNF = 0xF00
I2C_CR1_ANFOFF_Pos = 0xC
I2C_CR1_ANFOFF_Msk = 0x1000
I2C_CR1_ANFOFF = 0x1000
I2C_CR1_TXDMAEN_Pos = 0xE
I2C_CR1_TXDMAEN_Msk = 0x4000
I2C_CR1_TXDMAEN = 0x4000
I2C_CR1_RXDMAEN_Pos = 0xF
I2C_CR1_RXDMAEN_Msk = 0x8000
I2C_CR1_RXDMAEN = 0x8000
I2C_CR1_SBC_Pos = 0x10
I2C_CR1_SBC_Msk = 0x10000
I2C_CR1_SBC = 0x10000
I2C_CR1_NOSTRETCH_Pos = 0x11
I2C_CR1_NOSTRETCH_Msk = 0x20000
I2C_CR1_NOSTRETCH = 0x20000
I2C_CR1_WUPEN_Pos = 0x12
I2C_CR1_WUPEN_Msk = 0x40000
I2C_CR1_WUPEN = 0x40000
I2C_CR1_GCEN_Pos = 0x13
I2C_CR1_GCEN_Msk = 0x80000
I2C_CR1_GCEN = 0x80000
I2C_CR1_SMBHEN_Pos = 0x14
I2C_CR1_SMBHEN_Msk = 0x100000
I2C_CR1_SMBHEN = 0x100000
I2C_CR1_SMBDEN_Pos = 0x15
I2C_CR1_SMBDEN_Msk = 0x200000
I2C_CR1_SMBDEN = 0x200000
I2C_CR1_ALERTEN_Pos = 0x16
I2C_CR1_ALERTEN_Msk = 0x400000
I2C_CR1_ALERTEN = 0x400000
I2C_CR1_PECEN_Pos = 0x17
I2C_CR1_PECEN_Msk = 0x800000
I2C_CR1_PECEN = 0x800000
I2C_CR2_SADD_Pos = 0x0
I2C_CR2_SADD_Msk = 0x3FF
I2C_CR2_SADD = 0x3FF
I2C_CR2_RD_WRN_Pos = 0xA
I2C_CR2_RD_WRN_Msk = 0x400
I2C_CR2_RD_WRN = 0x400
I2C_CR2_ADD10_Pos = 0xB
I2C_CR2_ADD10_Msk = 0x800
I2C_CR2_ADD10 = 0x800
I2C_CR2_HEAD10R_Pos = 0xC
I2C_CR2_HEAD10R_Msk = 0x1000
I2C_CR2_HEAD10R = 0x1000
I2C_CR2_START_Pos = 0xD
I2C_CR2_START_Msk = 0x2000
I2C_CR2_START = 0x2000
I2C_CR2_STOP_Pos = 0xE
I2C_CR2_STOP_Msk = 0x4000
I2C_CR2_STOP = 0x4000
I2C_CR2_NACK_Pos = 0xF
I2C_CR2_NACK_Msk = 0x8000
I2C_CR2_NACK = 0x8000
I2C_CR2_NBYTES_Pos = 0x10
I2C_CR2_NBYTES_Msk = 0xFF0000
I2C_CR2_NBYTES = 0xFF0000
I2C_CR2_RELOAD_Pos = 0x18
I2C_CR2_RELOAD_Msk = 0x1000000
I2C_CR2_RELOAD = 0x1000000
I2C_CR2_AUTOEND_Pos = 0x19
I2C_CR2_AUTOEND_Msk = 0x2000000
I2C_CR2_AUTOEND = 0x2000000
I2C_CR2_PECBYTE_Pos = 0x1A
I2C_CR2_PECBYTE_Msk = 0x4000000
I2C_CR2_PECBYTE = 0x4000000
I2C_OAR1_OA1_Pos = 0x0
I2C_OAR1_OA1_Msk = 0x3FF
I2C_OAR1_OA1 = 0x3FF
I2C_OAR1_OA1MODE_Pos = 0xA
I2C_OAR1_OA1MODE_Msk = 0x400
I2C_OAR1_OA1MODE = 0x400
I2C_OAR1_OA1EN_Pos = 0xF
I2C_OAR1_OA1EN_Msk = 0x8000
I2C_OAR1_OA1EN = 0x8000
I2C_OAR2_OA2_Pos = 0x1
I2C_OAR2_OA2_Msk = 0xFE
I2C_OAR2_OA2 = 0xFE
I2C_OAR2_OA2MSK_Pos = 0x8
I2C_OAR2_OA2MSK_Msk = 0x700
I2C_OAR2_OA2MSK = 0x700
I2C_OAR2_OA2NOMASK = 0x0
I2C_OAR2_OA2MASK01_Pos = 0x8
I2C_OAR2_OA2MASK01_Msk = 0x100
I2C_OAR2_OA2MASK01 = 0x100
I2C_OAR2_OA2MASK02_Pos = 0x9
I2C_OAR2_OA2MASK02_Msk = 0x200
I2C_OAR2_OA2MASK02 = 0x200
I2C_OAR2_OA2MASK03_Pos = 0x8
I2C_OAR2_OA2MASK03_Msk = 0x300
I2C_OAR2_OA2MASK03 = 0x300
I2C_OAR2_OA2MASK04_Pos = 0xA
I2C_OAR2_OA2MASK04_Msk = 0x400
I2C_OAR2_OA2MASK04 = 0x400
I2C_OAR2_OA2MASK05_Pos = 0x8
I2C_OAR2_OA2MASK05_Msk = 0x500
I2C_OAR2_OA2MASK05 = 0x500
I2C_OAR2_OA2MASK06_Pos = 0x9
I2C_OAR2_OA2MASK06_Msk = 0x600
I2C_OAR2_OA2MASK06 = 0x600
I2C_OAR2_OA2MASK07_Pos = 0x8
I2C_OAR2_OA2MASK07_Msk = 0x700
I2C_OAR2_OA2MASK07 = 0x700
I2C_OAR2_OA2EN_Pos = 0xF
I2C_OAR2_OA2EN_Msk = 0x8000
I2C_OAR2_OA2EN = 0x8000
I2C_TIMINGR_SCLL_Pos = 0x0
I2C_TIMINGR_SCLL_Msk = 0xFF
I2C_TIMINGR_SCLL = 0xFF
I2C_TIMINGR_SCLH_Pos = 0x8
I2C_TIMINGR_SCLH_Msk = 0xFF00
I2C_TIMINGR_SCLH = 0xFF00
I2C_TIMINGR_SDADEL_Pos = 0x10
I2C_TIMINGR_SDADEL_Msk = 0xF0000
I2C_TIMINGR_SDADEL = 0xF0000
I2C_TIMINGR_SCLDEL_Pos = 0x14
I2C_TIMINGR_SCLDEL_Msk = 0xF00000
I2C_TIMINGR_SCLDEL = 0xF00000
I2C_TIMINGR_PRESC_Pos = 0x1C
I2C_TIMINGR_PRESC_Msk = 0xF0000000
I2C_TIMINGR_PRESC = 0xF0000000
I2C_TIMEOUTR_TIMEOUTA_Pos = 0x0
I2C_TIMEOUTR_TIMEOUTA_Msk = 0xFFF
I2C_TIMEOUTR_TIMEOUTA = 0xFFF
I2C_TIMEOUTR_TIDLE_Pos = 0xC
I2C_TIMEOUTR_TIDLE_Msk = 0x1000
I2C_TIMEOUTR_TIDLE = 0x1000
I2C_TIMEOUTR_TIMOUTEN_Pos = 0xF
I2C_TIMEOUTR_TIMOUTEN_Msk = 0x8000
I2C_TIMEOUTR_TIMOUTEN = 0x8000
I2C_TIMEOUTR_TIMEOUTB_Pos = 0x10
I2C_TIMEOUTR_TIMEOUTB_Msk = 0xFFF0000
I2C_TIMEOUTR_TIMEOUTB = 0xFFF0000
I2C_TIMEOUTR_TEXTEN_Pos = 0x1F
I2C_TIMEOUTR_TEXTEN_Msk = 0x80000000
I2C_TIMEOUTR_TEXTEN = 0x80000000
I2C_ISR_TXE_Pos = 0x0
I2C_ISR_TXE_Msk = 0x1
I2C_ISR_TXE = 0x1
I2C_ISR_TXIS_Pos = 0x1
I2C_ISR_TXIS_Msk = 0x2
I2C_ISR_TXIS = 0x2
I2C_ISR_RXNE_Pos = 0x2
I2C_ISR_RXNE_Msk = 0x4
I2C_ISR_RXNE = 0x4
I2C_ISR_ADDR_Pos = 0x3
I2C_ISR_ADDR_Msk = 0x8
I2C_ISR_ADDR = 0x8
I2C_ISR_NACKF_Pos = 0x4
I2C_ISR_NACKF_Msk = 0x10
I2C_ISR_NACKF = 0x10
I2C_ISR_STOPF_Pos = 0x5
I2C_ISR_STOPF_Msk = 0x20
I2C_ISR_STOPF = 0x20
I2C_ISR_TC_Pos = 0x6
I2C_ISR_TC_Msk = 0x40
I2C_ISR_TC = 0x40
I2C_ISR_TCR_Pos = 0x7
I2C_ISR_TCR_Msk = 0x80
I2C_ISR_TCR = 0x80
I2C_ISR_BERR_Pos = 0x8
I2C_ISR_BERR_Msk = 0x100
I2C_ISR_BERR = 0x100
I2C_ISR_ARLO_Pos = 0x9
I2C_ISR_ARLO_Msk = 0x200
I2C_ISR_ARLO = 0x200
I2C_ISR_OVR_Pos = 0xA
I2C_ISR_OVR_Msk = 0x400
I2C_ISR_OVR = 0x400
I2C_ISR_PECERR_Pos = 0xB
I2C_ISR_PECERR_Msk = 0x800
I2C_ISR_PECERR = 0x800
I2C_ISR_TIMEOUT_Pos = 0xC
I2C_ISR_TIMEOUT_Msk = 0x1000
I2C_ISR_TIMEOUT = 0x1000
I2C_ISR_ALERT_Pos = 0xD
I2C_ISR_ALERT_Msk = 0x2000
I2C_ISR_ALERT = 0x2000
I2C_ISR_BUSY_Pos = 0xF
I2C_ISR_BUSY_Msk = 0x8000
I2C_ISR_BUSY = 0x8000
I2C_ISR_DIR_Pos = 0x10
I2C_ISR_DIR_Msk = 0x10000
I2C_ISR_DIR = 0x10000
I2C_ISR_ADDCODE_Pos = 0x11
I2C_ISR_ADDCODE_Msk = 0xFE0000
I2C_ISR_ADDCODE = 0xFE0000
I2C_ICR_ADDRCF_Pos = 0x3
I2C_ICR_ADDRCF_Msk = 0x8
I2C_ICR_ADDRCF = 0x8
I2C_ICR_NACKCF_Pos = 0x4
I2C_ICR_NACKCF_Msk = 0x10
I2C_ICR_NACKCF = 0x10
I2C_ICR_STOPCF_Pos = 0x5
I2C_ICR_STOPCF_Msk = 0x20
I2C_ICR_STOPCF = 0x20
I2C_ICR_BERRCF_Pos = 0x8
I2C_ICR_BERRCF_Msk = 0x100
I2C_ICR_BERRCF = 0x100
I2C_ICR_ARLOCF_Pos = 0x9
I2C_ICR_ARLOCF_Msk = 0x200
I2C_ICR_ARLOCF = 0x200
I2C_ICR_OVRCF_Pos = 0xA
I2C_ICR_OVRCF_Msk = 0x400
I2C_ICR_OVRCF = 0x400
I2C_ICR_PECCF_Pos = 0xB
I2C_ICR_PECCF_Msk = 0x800
I2C_ICR_PECCF = 0x800
I2C_ICR_TIMOUTCF_Pos = 0xC
I2C_ICR_TIMOUTCF_Msk = 0x1000
I2C_ICR_TIMOUTCF = 0x1000
I2C_ICR_ALERTCF_Pos = 0xD
I2C_ICR_ALERTCF_Msk = 0x2000
I2C_ICR_ALERTCF = 0x2000
I2C_PECR_PEC_Pos = 0x0
I2C_PECR_PEC_Msk = 0xFF
I2C_PECR_PEC = 0xFF
I2C_RXDR_RXDATA_Pos = 0x0
I2C_RXDR_RXDATA_Msk = 0xFF
I2C_RXDR_RXDATA = 0xFF
I2C_TXDR_TXDATA_Pos = 0x0
I2C_TXDR_TXDATA_Msk = 0xFF
I2C_TXDR_TXDATA = 0xFF
IWDG_KR_KEY_Pos = 0x0
IWDG_KR_KEY_Msk = 0xFFFF
IWDG_KR_KEY = 0xFFFF
IWDG_PR_PR_Pos = 0x0
IWDG_PR_PR_Msk = 0x7
IWDG_PR_PR = 0x7
IWDG_PR_PR_0 = 0x1
IWDG_PR_PR_1 = 0x2
IWDG_PR_PR_2 = 0x4
IWDG_RLR_RL_Pos = 0x0
IWDG_RLR_RL_Msk = 0xFFF
IWDG_RLR_RL = 0xFFF
IWDG_SR_PVU_Pos = 0x0
IWDG_SR_PVU_Msk = 0x1
IWDG_SR_PVU = 0x1
IWDG_SR_RVU_Pos = 0x1
IWDG_SR_RVU_Msk = 0x2
IWDG_SR_RVU = 0x2
IWDG_SR_WVU_Pos = 0x2
IWDG_SR_WVU_Msk = 0x4
IWDG_SR_WVU = 0x4
IWDG_WINR_WIN_Pos = 0x0
IWDG_WINR_WIN_Msk = 0xFFF
IWDG_WINR_WIN = 0xFFF
LCD_CR_LCDEN_Pos = 0x0
LCD_CR_LCDEN_Msk = 0x1
LCD_CR_LCDEN = 0x1
LCD_CR_VSEL_Pos = 0x1
LCD_CR_VSEL_Msk = 0x2
LCD_CR_VSEL = 0x2
LCD_CR_DUTY_Pos = 0x2
LCD_CR_DUTY_Msk = 0x1C
LCD_CR_DUTY = 0x1C
LCD_CR_DUTY_0 = 0x4
LCD_CR_DUTY_1 = 0x8
LCD_CR_DUTY_2 = 0x10
LCD_CR_BIAS_Pos = 0x5
LCD_CR_BIAS_Msk = 0x60
LCD_CR_BIAS = 0x60
LCD_CR_BIAS_0 = 0x20
LCD_CR_BIAS_1 = 0x40
LCD_CR_MUX_SEG_Pos = 0x7
LCD_CR_MUX_SEG_Msk = 0x80
LCD_CR_MUX_SEG = 0x80
LCD_CR_BUFEN_Pos = 0x8
LCD_CR_BUFEN_Msk = 0x100
LCD_CR_BUFEN = 0x100
LCD_FCR_HD_Pos = 0x0
LCD_FCR_HD_Msk = 0x1
LCD_FCR_HD = 0x1
LCD_FCR_SOFIE_Pos = 0x1
LCD_FCR_SOFIE_Msk = 0x2
LCD_FCR_SOFIE = 0x2
LCD_FCR_UDDIE_Pos = 0x3
LCD_FCR_UDDIE_Msk = 0x8
LCD_FCR_UDDIE = 0x8
LCD_FCR_PON_Pos = 0x4
LCD_FCR_PON_Msk = 0x70
LCD_FCR_PON = 0x70
LCD_FCR_PON_0 = 0x10
LCD_FCR_PON_1 = 0x20
LCD_FCR_PON_2 = 0x40
LCD_FCR_DEAD_Pos = 0x7
LCD_FCR_DEAD_Msk = 0x380
LCD_FCR_DEAD = 0x380
LCD_FCR_DEAD_0 = 0x80
LCD_FCR_DEAD_1 = 0x100
LCD_FCR_DEAD_2 = 0x200
LCD_FCR_CC_Pos = 0xA
LCD_FCR_CC_Msk = 0x1C00
LCD_FCR_CC = 0x1C00
LCD_FCR_CC_0 = 0x400
LCD_FCR_CC_1 = 0x800
LCD_FCR_CC_2 = 0x1000
LCD_FCR_BLINKF_Pos = 0xD
LCD_FCR_BLINKF_Msk = 0xE000
LCD_FCR_BLINKF = 0xE000
LCD_FCR_BLINKF_0 = 0x2000
LCD_FCR_BLINKF_1 = 0x4000
LCD_FCR_BLINKF_2 = 0x8000
LCD_FCR_BLINK_Pos = 0x10
LCD_FCR_BLINK_Msk = 0x30000
LCD_FCR_BLINK = 0x30000
LCD_FCR_BLINK_0 = 0x10000
LCD_FCR_BLINK_1 = 0x20000
LCD_FCR_DIV_Pos = 0x12
LCD_FCR_DIV_Msk = 0x3C0000
LCD_FCR_DIV = 0x3C0000
LCD_FCR_PS_Pos = 0x16
LCD_FCR_PS_Msk = 0x3C00000
LCD_FCR_PS = 0x3C00000
LCD_SR_ENS_Pos = 0x0
LCD_SR_ENS_Msk = 0x1
LCD_SR_ENS = 0x1
LCD_SR_SOF_Pos = 0x1
LCD_SR_SOF_Msk = 0x2
LCD_SR_SOF = 0x2
LCD_SR_UDR_Pos = 0x2
LCD_SR_UDR_Msk = 0x4
LCD_SR_UDR = 0x4
LCD_SR_UDD_Pos = 0x3
LCD_SR_UDD_Msk = 0x8
LCD_SR_UDD = 0x8
LCD_SR_RDY_Pos = 0x4
LCD_SR_RDY_Msk = 0x10
LCD_SR_RDY = 0x10
LCD_SR_FCRSR_Pos = 0x5
LCD_SR_FCRSR_Msk = 0x20
LCD_SR_FCRSR = 0x20
LCD_CLR_SOFC_Pos = 0x1
LCD_CLR_SOFC_Msk = 0x2
LCD_CLR_SOFC = 0x2
LCD_CLR_UDDC_Pos = 0x3
LCD_CLR_UDDC_Msk = 0x8
LCD_CLR_UDDC = 0x8
LCD_RAM_SEGMENT_DATA_Pos = 0x0
LCD_RAM_SEGMENT_DATA_Msk = 0xFFFFFFFF
LCD_RAM_SEGMENT_DATA = 0xFFFFFFFF
LPTIM_ISR_CMPM_Pos = 0x0
LPTIM_ISR_CMPM_Msk = 0x1
LPTIM_ISR_CMPM = 0x1
LPTIM_ISR_ARRM_Pos = 0x1
LPTIM_ISR_ARRM_Msk = 0x2
LPTIM_ISR_ARRM = 0x2
LPTIM_ISR_EXTTRIG_Pos = 0x2
LPTIM_ISR_EXTTRIG_Msk = 0x4
LPTIM_ISR_EXTTRIG = 0x4
LPTIM_ISR_CMPOK_Pos = 0x3
LPTIM_ISR_CMPOK_Msk = 0x8
LPTIM_ISR_CMPOK = 0x8
LPTIM_ISR_ARROK_Pos = 0x4
LPTIM_ISR_ARROK_Msk = 0x10
LPTIM_ISR_ARROK = 0x10
LPTIM_ISR_UP_Pos = 0x5
LPTIM_ISR_UP_Msk = 0x20
LPTIM_ISR_UP = 0x20
LPTIM_ISR_DOWN_Pos = 0x6
LPTIM_ISR_DOWN_Msk = 0x40
LPTIM_ISR_DOWN = 0x40
LPTIM_ICR_CMPMCF_Pos = 0x0
LPTIM_ICR_CMPMCF_Msk = 0x1
LPTIM_ICR_CMPMCF = 0x1
LPTIM_ICR_ARRMCF_Pos = 0x1
LPTIM_ICR_ARRMCF_Msk = 0x2
LPTIM_ICR_ARRMCF = 0x2
LPTIM_ICR_EXTTRIGCF_Pos = 0x2
LPTIM_ICR_EXTTRIGCF_Msk = 0x4
LPTIM_ICR_EXTTRIGCF = 0x4
LPTIM_ICR_CMPOKCF_Pos = 0x3
LPTIM_ICR_CMPOKCF_Msk = 0x8
LPTIM_ICR_CMPOKCF = 0x8
LPTIM_ICR_ARROKCF_Pos = 0x4
LPTIM_ICR_ARROKCF_Msk = 0x10
LPTIM_ICR_ARROKCF = 0x10
LPTIM_ICR_UPCF_Pos = 0x5
LPTIM_ICR_UPCF_Msk = 0x20
LPTIM_ICR_UPCF = 0x20
LPTIM_ICR_DOWNCF_Pos = 0x6
LPTIM_ICR_DOWNCF_Msk = 0x40
LPTIM_ICR_DOWNCF = 0x40
LPTIM_IER_CMPMIE_Pos = 0x0
LPTIM_IER_CMPMIE_Msk = 0x1
LPTIM_IER_CMPMIE = 0x1
LPTIM_IER_ARRMIE_Pos = 0x1
LPTIM_IER_ARRMIE_Msk = 0x2
LPTIM_IER_ARRMIE = 0x2
LPTIM_IER_EXTTRIGIE_Pos = 0x2
LPTIM_IER_EXTTRIGIE_Msk = 0x4
LPTIM_IER_EXTTRIGIE = 0x4
LPTIM_IER_CMPOKIE_Pos = 0x3
LPTIM_IER_CMPOKIE_Msk = 0x8
LPTIM_IER_CMPOKIE = 0x8
LPTIM_IER_ARROKIE_Pos = 0x4
LPTIM_IER_ARROKIE_Msk = 0x10
LPTIM_IER_ARROKIE = 0x10
LPTIM_IER_UPIE_Pos = 0x5
LPTIM_IER_UPIE_Msk = 0x20
LPTIM_IER_UPIE = 0x20
LPTIM_IER_DOWNIE_Pos = 0x6
LPTIM_IER_DOWNIE_Msk = 0x40
LPTIM_IER_DOWNIE = 0x40
LPTIM_CFGR_CKSEL_Pos = 0x0
LPTIM_CFGR_CKSEL_Msk = 0x1
LPTIM_CFGR_CKSEL = 0x1
LPTIM_CFGR_CKPOL_Pos = 0x1
LPTIM_CFGR_CKPOL_Msk = 0x6
LPTIM_CFGR_CKPOL = 0x6
LPTIM_CFGR_CKPOL_0 = 0x2
LPTIM_CFGR_CKPOL_1 = 0x4
LPTIM_CFGR_CKFLT_Pos = 0x3
LPTIM_CFGR_CKFLT_Msk = 0x18
LPTIM_CFGR_CKFLT = 0x18
LPTIM_CFGR_CKFLT_0 = 0x8
LPTIM_CFGR_CKFLT_1 = 0x10
LPTIM_CFGR_TRGFLT_Pos = 0x6
LPTIM_CFGR_TRGFLT_Msk = 0xC0
LPTIM_CFGR_TRGFLT = 0xC0
LPTIM_CFGR_TRGFLT_0 = 0x40
LPTIM_CFGR_TRGFLT_1 = 0x80
LPTIM_CFGR_PRESC_Pos = 0x9
LPTIM_CFGR_PRESC_Msk = 0xE00
LPTIM_CFGR_PRESC = 0xE00
LPTIM_CFGR_PRESC_0 = 0x200
LPTIM_CFGR_PRESC_1 = 0x400
LPTIM_CFGR_PRESC_2 = 0x800
LPTIM_CFGR_TRIGSEL_Pos = 0xD
LPTIM_CFGR_TRIGSEL_Msk = 0xE000
LPTIM_CFGR_TRIGSEL = 0xE000
LPTIM_CFGR_TRIGSEL_0 = 0x2000
LPTIM_CFGR_TRIGSEL_1 = 0x4000
LPTIM_CFGR_TRIGSEL_2 = 0x8000
LPTIM_CFGR_TRIGEN_Pos = 0x11
LPTIM_CFGR_TRIGEN_Msk = 0x60000
LPTIM_CFGR_TRIGEN = 0x60000
LPTIM_CFGR_TRIGEN_0 = 0x20000
LPTIM_CFGR_TRIGEN_1 = 0x40000
LPTIM_CFGR_TIMOUT_Pos = 0x13
LPTIM_CFGR_TIMOUT_Msk = 0x80000
LPTIM_CFGR_TIMOUT = 0x80000
LPTIM_CFGR_WAVE_Pos = 0x14
LPTIM_CFGR_WAVE_Msk = 0x100000
LPTIM_CFGR_WAVE = 0x100000
LPTIM_CFGR_WAVPOL_Pos = 0x15
LPTIM_CFGR_WAVPOL_Msk = 0x200000
LPTIM_CFGR_WAVPOL = 0x200000
LPTIM_CFGR_PRELOAD_Pos = 0x16
LPTIM_CFGR_PRELOAD_Msk = 0x400000
LPTIM_CFGR_PRELOAD = 0x400000
LPTIM_CFGR_COUNTMODE_Pos = 0x17
LPTIM_CFGR_COUNTMODE_Msk = 0x800000
LPTIM_CFGR_COUNTMODE = 0x800000
LPTIM_CFGR_ENC_Pos = 0x18
LPTIM_CFGR_ENC_Msk = 0x1000000
LPTIM_CFGR_ENC = 0x1000000
LPTIM_CR_ENABLE_Pos = 0x0
LPTIM_CR_ENABLE_Msk = 0x1
LPTIM_CR_ENABLE = 0x1
LPTIM_CR_SNGSTRT_Pos = 0x1
LPTIM_CR_SNGSTRT_Msk = 0x2
LPTIM_CR_SNGSTRT = 0x2
LPTIM_CR_CNTSTRT_Pos = 0x2
LPTIM_CR_CNTSTRT_Msk = 0x4
LPTIM_CR_CNTSTRT = 0x4
LPTIM_CMP_CMP_Pos = 0x0
LPTIM_CMP_CMP_Msk = 0xFFFF
LPTIM_CMP_CMP = 0xFFFF
LPTIM_ARR_ARR_Pos = 0x0
LPTIM_ARR_ARR_Msk = 0xFFFF
LPTIM_ARR_ARR = 0xFFFF
LPTIM_CNT_CNT_Pos = 0x0
LPTIM_CNT_CNT_Msk = 0xFFFF
LPTIM_CNT_CNT = 0xFFFF
FW_CSSA_ADD_Pos = 0x8
FW_CSSA_ADD_Msk = 0xFFFF00
FW_CSSA_ADD = 0xFFFF00
FW_CSL_LENG_Pos = 0x8
FW_CSL_LENG_Msk = 0x3FFF00
FW_CSL_LENG = 0x3FFF00
FW_NVDSSA_ADD_Pos = 0x8
FW_NVDSSA_ADD_Msk = 0xFFFF00
FW_NVDSSA_ADD = 0xFFFF00
FW_NVDSL_LENG_Pos = 0x8
FW_NVDSL_LENG_Msk = 0x3FFF00
FW_NVDSL_LENG = 0x3FFF00
FW_VDSSA_ADD_Pos = 0x6
FW_VDSSA_ADD_Msk = 0xFFC0
FW_VDSSA_ADD = 0xFFC0
FW_VDSL_LENG_Pos = 0x6
FW_VDSL_LENG_Msk = 0xFFC0
FW_VDSL_LENG = 0xFFC0
FW_CR_FPA_Pos = 0x0
FW_CR_FPA_Msk = 0x1
FW_CR_FPA = 0x1
FW_CR_VDS_Pos = 0x1
FW_CR_VDS_Msk = 0x2
FW_CR_VDS = 0x2
FW_CR_VDE_Pos = 0x2
FW_CR_VDE_Msk = 0x4
FW_CR_VDE = 0x4
# Skip PWR_PVD_SUPPORT : no need parse
PWR_CR_LPSDSR_Pos = 0x0
PWR_CR_LPSDSR_Msk = 0x1
PWR_CR_LPSDSR = 0x1
PWR_CR_PDDS_Pos = 0x1
PWR_CR_PDDS_Msk = 0x2
PWR_CR_PDDS = 0x2
PWR_CR_CWUF_Pos = 0x2
PWR_CR_CWUF_Msk = 0x4
PWR_CR_CWUF = 0x4
PWR_CR_CSBF_Pos = 0x3
PWR_CR_CSBF_Msk = 0x8
PWR_CR_CSBF = 0x8
PWR_CR_PVDE_Pos = 0x4
PWR_CR_PVDE_Msk = 0x10
PWR_CR_PVDE = 0x10
PWR_CR_PLS_Pos = 0x5
PWR_CR_PLS_Msk = 0xE0
PWR_CR_PLS = 0xE0
PWR_CR_PLS_0 = 0x20
PWR_CR_PLS_1 = 0x40
PWR_CR_PLS_2 = 0x80
PWR_CR_PLS_LEV0 = 0x0
PWR_CR_PLS_LEV1 = 0x20
PWR_CR_PLS_LEV2 = 0x40
PWR_CR_PLS_LEV3 = 0x60
PWR_CR_PLS_LEV4 = 0x80
PWR_CR_PLS_LEV5 = 0xA0
PWR_CR_PLS_LEV6 = 0xC0
PWR_CR_PLS_LEV7 = 0xE0
PWR_CR_DBP_Pos = 0x8
PWR_CR_DBP_Msk = 0x100
PWR_CR_DBP = 0x100
PWR_CR_ULP_Pos = 0x9
PWR_CR_ULP_Msk = 0x200
PWR_CR_ULP = 0x200
PWR_CR_FWU_Pos = 0xA
PWR_CR_FWU_Msk = 0x400
PWR_CR_FWU = 0x400
PWR_CR_VOS_Pos = 0xB
PWR_CR_VOS_Msk = 0x1800
PWR_CR_VOS = 0x1800
PWR_CR_VOS_0 = 0x800
PWR_CR_VOS_1 = 0x1000
PWR_CR_DSEEKOFF_Pos = 0xD
PWR_CR_DSEEKOFF_Msk = 0x2000
PWR_CR_DSEEKOFF = 0x2000
PWR_CR_LPRUN_Pos = 0xE
PWR_CR_LPRUN_Msk = 0x4000
PWR_CR_LPRUN = 0x4000
PWR_CSR_WUF_Pos = 0x0
PWR_CSR_WUF_Msk = 0x1
PWR_CSR_WUF = 0x1
PWR_CSR_SBF_Pos = 0x1
PWR_CSR_SBF_Msk = 0x2
PWR_CSR_SBF = 0x2
PWR_CSR_PVDO_Pos = 0x2
PWR_CSR_PVDO_Msk = 0x4
PWR_CSR_PVDO = 0x4
PWR_CSR_VREFINTRDYF_Pos = 0x3
PWR_CSR_VREFINTRDYF_Msk = 0x8
PWR_CSR_VREFINTRDYF = 0x8
PWR_CSR_VOSF_Pos = 0x4
PWR_CSR_VOSF_Msk = 0x10
PWR_CSR_VOSF = 0x10
PWR_CSR_REGLPF_Pos = 0x5
PWR_CSR_REGLPF_Msk = 0x20
PWR_CSR_REGLPF = 0x20
PWR_CSR_EWUP1_Pos = 0x8
PWR_CSR_EWUP1_Msk = 0x100
PWR_CSR_EWUP1 = 0x100
PWR_CSR_EWUP2_Pos = 0x9
PWR_CSR_EWUP2_Msk = 0x200
PWR_CSR_EWUP2 = 0x200
# Skip RCC_HSI48_SUPPORT : no need parse
# Skip RCC_HSECSS_SUPPORT : no need parse
RCC_CR_HSION_Pos = 0x0
RCC_CR_HSION_Msk = 0x1
RCC_CR_HSION = 0x1
RCC_CR_HSIKERON_Pos = 0x1
RCC_CR_HSIKERON_Msk = 0x2
RCC_CR_HSIKERON = 0x2
RCC_CR_HSIRDY_Pos = 0x2
RCC_CR_HSIRDY_Msk = 0x4
RCC_CR_HSIRDY = 0x4
RCC_CR_HSIDIVEN_Pos = 0x3
RCC_CR_HSIDIVEN_Msk = 0x8
RCC_CR_HSIDIVEN = 0x8
RCC_CR_HSIDIVF_Pos = 0x4
RCC_CR_HSIDIVF_Msk = 0x10
RCC_CR_HSIDIVF = 0x10
RCC_CR_MSION_Pos = 0x8
RCC_CR_MSION_Msk = 0x100
RCC_CR_MSION = 0x100
RCC_CR_MSIRDY_Pos = 0x9
RCC_CR_MSIRDY_Msk = 0x200
RCC_CR_MSIRDY = 0x200
RCC_CR_HSEON_Pos = 0x10
RCC_CR_HSEON_Msk = 0x10000
RCC_CR_HSEON = 0x10000
RCC_CR_HSERDY_Pos = 0x11
RCC_CR_HSERDY_Msk = 0x20000
RCC_CR_HSERDY = 0x20000
RCC_CR_HSEBYP_Pos = 0x12
RCC_CR_HSEBYP_Msk = 0x40000
RCC_CR_HSEBYP = 0x40000
RCC_CR_CSSHSEON_Pos = 0x13
RCC_CR_CSSHSEON_Msk = 0x80000
RCC_CR_CSSHSEON = 0x80000
RCC_CR_RTCPRE_Pos = 0x14
RCC_CR_RTCPRE_Msk = 0x300000
RCC_CR_RTCPRE = 0x300000
RCC_CR_RTCPRE_0 = 0x100000
RCC_CR_RTCPRE_1 = 0x200000
RCC_CR_PLLON_Pos = 0x18
RCC_CR_PLLON_Msk = 0x1000000
RCC_CR_PLLON = 0x1000000
RCC_CR_PLLRDY_Pos = 0x19
RCC_CR_PLLRDY_Msk = 0x2000000
RCC_CR_PLLRDY = 0x2000000
RCC_CR_CSSON = 0x80000
RCC_ICSCR_HSICAL_Pos = 0x0
RCC_ICSCR_HSICAL_Msk = 0xFF
RCC_ICSCR_HSICAL = 0xFF
RCC_ICSCR_HSITRIM_Pos = 0x8
RCC_ICSCR_HSITRIM_Msk = 0x1F00
RCC_ICSCR_HSITRIM = 0x1F00
RCC_ICSCR_MSIRANGE_Pos = 0xD
RCC_ICSCR_MSIRANGE_Msk = 0xE000
RCC_ICSCR_MSIRANGE = 0xE000
RCC_ICSCR_MSIRANGE_0 = 0x0
RCC_ICSCR_MSIRANGE_1 = 0x2000
RCC_ICSCR_MSIRANGE_2 = 0x4000
RCC_ICSCR_MSIRANGE_3 = 0x6000
RCC_ICSCR_MSIRANGE_4 = 0x8000
RCC_ICSCR_MSIRANGE_5 = 0xA000
RCC_ICSCR_MSIRANGE_6 = 0xC000
RCC_ICSCR_MSICAL_Pos = 0x10
RCC_ICSCR_MSICAL_Msk = 0xFF0000
RCC_ICSCR_MSICAL = 0xFF0000
RCC_ICSCR_MSITRIM_Pos = 0x18
RCC_ICSCR_MSITRIM_Msk = 0xFF000000
RCC_ICSCR_MSITRIM = 0xFF000000
RCC_CRRCR_HSI48ON_Pos = 0x0
RCC_CRRCR_HSI48ON_Msk = 0x1
RCC_CRRCR_HSI48ON = 0x1
RCC_CRRCR_HSI48RDY_Pos = 0x1
RCC_CRRCR_HSI48RDY_Msk = 0x2
RCC_CRRCR_HSI48RDY = 0x2
RCC_CRRCR_HSI48CAL_Pos = 0x8
RCC_CRRCR_HSI48CAL_Msk = 0xFF00
RCC_CRRCR_HSI48CAL = 0xFF00
RCC_CFGR_SW_Pos = 0x0
RCC_CFGR_SW_Msk = 0x3
RCC_CFGR_SW = 0x3
RCC_CFGR_SW_0 = 0x1
RCC_CFGR_SW_1 = 0x2
RCC_CFGR_SW_MSI = 0x0
RCC_CFGR_SW_HSI = 0x1
RCC_CFGR_SW_HSE = 0x2
RCC_CFGR_SW_PLL = 0x3
RCC_CFGR_SWS_Pos = 0x2
RCC_CFGR_SWS_Msk = 0xC
RCC_CFGR_SWS = 0xC
RCC_CFGR_SWS_0 = 0x4
RCC_CFGR_SWS_1 = 0x8
RCC_CFGR_SWS_MSI = 0x0
RCC_CFGR_SWS_HSI = 0x4
RCC_CFGR_SWS_HSE = 0x8
RCC_CFGR_SWS_PLL = 0xC
RCC_CFGR_HPRE_Pos = 0x4
RCC_CFGR_HPRE_Msk = 0xF0
RCC_CFGR_HPRE = 0xF0
RCC_CFGR_HPRE_0 = 0x10
RCC_CFGR_HPRE_1 = 0x20
RCC_CFGR_HPRE_2 = 0x40
RCC_CFGR_HPRE_3 = 0x80
RCC_CFGR_HPRE_DIV1 = 0x0
RCC_CFGR_HPRE_DIV2 = 0x80
RCC_CFGR_HPRE_DIV4 = 0x90
RCC_CFGR_HPRE_DIV8 = 0xA0
RCC_CFGR_HPRE_DIV16 = 0xB0
RCC_CFGR_HPRE_DIV64 = 0xC0
RCC_CFGR_HPRE_DIV128 = 0xD0
RCC_CFGR_HPRE_DIV256 = 0xE0
RCC_CFGR_HPRE_DIV512 = 0xF0
RCC_CFGR_PPRE1_Pos = 0x8
RCC_CFGR_PPRE1_Msk = 0x700
RCC_CFGR_PPRE1 = 0x700
RCC_CFGR_PPRE1_0 = 0x100
RCC_CFGR_PPRE1_1 = 0x200
RCC_CFGR_PPRE1_2 = 0x400
RCC_CFGR_PPRE1_DIV1 = 0x0
RCC_CFGR_PPRE1_DIV2 = 0x400
RCC_CFGR_PPRE1_DIV4 = 0x500
RCC_CFGR_PPRE1_DIV8 = 0x600
RCC_CFGR_PPRE1_DIV16 = 0x700
RCC_CFGR_PPRE2_Pos = 0xB
RCC_CFGR_PPRE2_Msk = 0x3800
RCC_CFGR_PPRE2 = 0x3800
RCC_CFGR_PPRE2_0 = 0x800
RCC_CFGR_PPRE2_1 = 0x1000
RCC_CFGR_PPRE2_2 = 0x2000
RCC_CFGR_PPRE2_DIV1 = 0x0
RCC_CFGR_PPRE2_DIV2 = 0x2000
RCC_CFGR_PPRE2_DIV4 = 0x2800
RCC_CFGR_PPRE2_DIV8 = 0x3000
RCC_CFGR_PPRE2_DIV16 = 0x3800
RCC_CFGR_STOPWUCK_Pos = 0xF
RCC_CFGR_STOPWUCK_Msk = 0x8000
RCC_CFGR_STOPWUCK = 0x8000
RCC_CFGR_PLLSRC_Pos = 0x10
RCC_CFGR_PLLSRC_Msk = 0x10000
RCC_CFGR_PLLSRC = 0x10000
RCC_CFGR_PLLSRC_HSI = 0x0
RCC_CFGR_PLLSRC_HSE = 0x10000
RCC_CFGR_PLLMUL_Pos = 0x12
RCC_CFGR_PLLMUL_Msk = 0x3C0000
RCC_CFGR_PLLMUL = 0x3C0000
RCC_CFGR_PLLMUL_0 = 0x40000
RCC_CFGR_PLLMUL_1 = 0x80000
RCC_CFGR_PLLMUL_2 = 0x100000
RCC_CFGR_PLLMUL_3 = 0x200000
RCC_CFGR_PLLMUL3 = 0x0
RCC_CFGR_PLLMUL4 = 0x40000
RCC_CFGR_PLLMUL6 = 0x80000
RCC_CFGR_PLLMUL8 = 0xC0000
RCC_CFGR_PLLMUL12 = 0x100000
RCC_CFGR_PLLMUL16 = 0x140000
RCC_CFGR_PLLMUL24 = 0x180000
RCC_CFGR_PLLMUL32 = 0x1C0000
RCC_CFGR_PLLMUL48 = 0x200000
RCC_CFGR_PLLDIV_Pos = 0x16
RCC_CFGR_PLLDIV_Msk = 0xC00000
RCC_CFGR_PLLDIV = 0xC00000
RCC_CFGR_PLLDIV_0 = 0x400000
RCC_CFGR_PLLDIV_1 = 0x800000
RCC_CFGR_PLLDIV2_Pos = 0x16
RCC_CFGR_PLLDIV2_Msk = 0x400000
RCC_CFGR_PLLDIV2 = 0x400000
RCC_CFGR_PLLDIV3_Pos = 0x17
RCC_CFGR_PLLDIV3_Msk = 0x800000
RCC_CFGR_PLLDIV3 = 0x800000
RCC_CFGR_PLLDIV4_Pos = 0x16
RCC_CFGR_PLLDIV4_Msk = 0xC00000
RCC_CFGR_PLLDIV4 = 0xC00000
RCC_CFGR_MCOSEL_Pos = 0x18
RCC_CFGR_MCOSEL_Msk = 0xF000000
RCC_CFGR_MCOSEL = 0xF000000
RCC_CFGR_MCOSEL_0 = 0x1000000
RCC_CFGR_MCOSEL_1 = 0x2000000
RCC_CFGR_MCOSEL_2 = 0x4000000
RCC_CFGR_MCOSEL_3 = 0x8000000
RCC_CFGR_MCOSEL_NOCLOCK = 0x0
RCC_CFGR_MCOSEL_SYSCLK_Pos = 0x18
RCC_CFGR_MCOSEL_SYSCLK_Msk = 0x1000000
RCC_CFGR_MCOSEL_SYSCLK = 0x1000000
RCC_CFGR_MCOSEL_HSI_Pos = 0x19
RCC_CFGR_MCOSEL_HSI_Msk = 0x2000000
RCC_CFGR_MCOSEL_HSI = 0x2000000
RCC_CFGR_MCOSEL_MSI_Pos = 0x18
RCC_CFGR_MCOSEL_MSI_Msk = 0x3000000
RCC_CFGR_MCOSEL_MSI = 0x3000000
RCC_CFGR_MCOSEL_HSE_Pos = 0x1A
RCC_CFGR_MCOSEL_HSE_Msk = 0x4000000
RCC_CFGR_MCOSEL_HSE = 0x4000000
RCC_CFGR_MCOSEL_PLL_Pos = 0x18
RCC_CFGR_MCOSEL_PLL_Msk = 0x5000000
RCC_CFGR_MCOSEL_PLL = 0x5000000
RCC_CFGR_MCOSEL_LSI_Pos = 0x19
RCC_CFGR_MCOSEL_LSI_Msk = 0x6000000
RCC_CFGR_MCOSEL_LSI = 0x6000000
RCC_CFGR_MCOSEL_LSE_Pos = 0x18
RCC_CFGR_MCOSEL_LSE_Msk = 0x7000000
RCC_CFGR_MCOSEL_LSE = 0x7000000
RCC_CFGR_MCOSEL_HSI48_Pos = 0x1B
RCC_CFGR_MCOSEL_HSI48_Msk = 0x8000000
RCC_CFGR_MCOSEL_HSI48 = 0x8000000
RCC_CFGR_MCOPRE_Pos = 0x1C
RCC_CFGR_MCOPRE_Msk = 0x70000000
RCC_CFGR_MCOPRE = 0x70000000
RCC_CFGR_MCOPRE_0 = 0x10000000
RCC_CFGR_MCOPRE_1 = 0x20000000
RCC_CFGR_MCOPRE_2 = 0x40000000
RCC_CFGR_MCOPRE_DIV1 = 0x0
RCC_CFGR_MCOPRE_DIV2 = 0x10000000
RCC_CFGR_MCOPRE_DIV4 = 0x20000000
RCC_CFGR_MCOPRE_DIV8 = 0x30000000
RCC_CFGR_MCOPRE_DIV16 = 0x40000000
RCC_CFGR_MCO_NOCLOCK = 0x0
RCC_CFGR_MCO_SYSCLK = 0x1000000
RCC_CFGR_MCO_HSI = 0x2000000
RCC_CFGR_MCO_MSI = 0x3000000
RCC_CFGR_MCO_HSE = 0x4000000
RCC_CFGR_MCO_PLL = 0x5000000
RCC_CFGR_MCO_LSI = 0x6000000
RCC_CFGR_MCO_LSE = 0x7000000
RCC_CFGR_MCO_HSI48 = 0x8000000
RCC_CFGR_MCO_PRE = 0x70000000
RCC_CFGR_MCO_PRE_1 = 0x0
RCC_CFGR_MCO_PRE_2 = 0x10000000
RCC_CFGR_MCO_PRE_4 = 0x20000000
RCC_CFGR_MCO_PRE_8 = 0x30000000
RCC_CFGR_MCO_PRE_16 = 0x40000000
RCC_CIER_LSIRDYIE_Pos = 0x0
RCC_CIER_LSIRDYIE_Msk = 0x1
RCC_CIER_LSIRDYIE = 0x1
RCC_CIER_LSERDYIE_Pos = 0x1
RCC_CIER_LSERDYIE_Msk = 0x2
RCC_CIER_LSERDYIE = 0x2
RCC_CIER_HSIRDYIE_Pos = 0x2
RCC_CIER_HSIRDYIE_Msk = 0x4
RCC_CIER_HSIRDYIE = 0x4
RCC_CIER_HSERDYIE_Pos = 0x3
RCC_CIER_HSERDYIE_Msk = 0x8
RCC_CIER_HSERDYIE = 0x8
RCC_CIER_PLLRDYIE_Pos = 0x4
RCC_CIER_PLLRDYIE_Msk = 0x10
RCC_CIER_PLLRDYIE = 0x10
RCC_CIER_MSIRDYIE_Pos = 0x5
RCC_CIER_MSIRDYIE_Msk = 0x20
RCC_CIER_MSIRDYIE = 0x20
RCC_CIER_HSI48RDYIE_Pos = 0x6
RCC_CIER_HSI48RDYIE_Msk = 0x40
RCC_CIER_HSI48RDYIE = 0x40
RCC_CIER_CSSLSE_Pos = 0x7
RCC_CIER_CSSLSE_Msk = 0x80
RCC_CIER_CSSLSE = 0x80
RCC_CIER_LSECSSIE = 0x80
RCC_CIFR_LSIRDYF_Pos = 0x0
RCC_CIFR_LSIRDYF_Msk = 0x1
RCC_CIFR_LSIRDYF = 0x1
RCC_CIFR_LSERDYF_Pos = 0x1
RCC_CIFR_LSERDYF_Msk = 0x2
RCC_CIFR_LSERDYF = 0x2
RCC_CIFR_HSIRDYF_Pos = 0x2
RCC_CIFR_HSIRDYF_Msk = 0x4
RCC_CIFR_HSIRDYF = 0x4
RCC_CIFR_HSERDYF_Pos = 0x3
RCC_CIFR_HSERDYF_Msk = 0x8
RCC_CIFR_HSERDYF = 0x8
RCC_CIFR_PLLRDYF_Pos = 0x4
RCC_CIFR_PLLRDYF_Msk = 0x10
RCC_CIFR_PLLRDYF = 0x10
RCC_CIFR_MSIRDYF_Pos = 0x5
RCC_CIFR_MSIRDYF_Msk = 0x20
RCC_CIFR_MSIRDYF = 0x20
RCC_CIFR_HSI48RDYF_Pos = 0x6
RCC_CIFR_HSI48RDYF_Msk = 0x40
RCC_CIFR_HSI48RDYF = 0x40
RCC_CIFR_CSSLSEF_Pos = 0x7
RCC_CIFR_CSSLSEF_Msk = 0x80
RCC_CIFR_CSSLSEF = 0x80
RCC_CIFR_CSSHSEF_Pos = 0x8
RCC_CIFR_CSSHSEF_Msk = 0x100
RCC_CIFR_CSSHSEF = 0x100
RCC_CIFR_LSECSSF = 0x80
RCC_CIFR_CSSF = 0x100
RCC_CICR_LSIRDYC_Pos = 0x0
RCC_CICR_LSIRDYC_Msk = 0x1
RCC_CICR_LSIRDYC = 0x1
RCC_CICR_LSERDYC_Pos = 0x1
RCC_CICR_LSERDYC_Msk = 0x2
RCC_CICR_LSERDYC = 0x2
RCC_CICR_HSIRDYC_Pos = 0x2
RCC_CICR_HSIRDYC_Msk = 0x4
RCC_CICR_HSIRDYC = 0x4
RCC_CICR_HSERDYC_Pos = 0x3
RCC_CICR_HSERDYC_Msk = 0x8
RCC_CICR_HSERDYC = 0x8
RCC_CICR_PLLRDYC_Pos = 0x4
RCC_CICR_PLLRDYC_Msk = 0x10
RCC_CICR_PLLRDYC = 0x10
RCC_CICR_MSIRDYC_Pos = 0x5
RCC_CICR_MSIRDYC_Msk = 0x20
RCC_CICR_MSIRDYC = 0x20
RCC_CICR_HSI48RDYC_Pos = 0x6
RCC_CICR_HSI48RDYC_Msk = 0x40
RCC_CICR_HSI48RDYC = 0x40
RCC_CICR_CSSLSEC_Pos = 0x7
RCC_CICR_CSSLSEC_Msk = 0x80
RCC_CICR_CSSLSEC = 0x80
RCC_CICR_CSSHSEC_Pos = 0x8
RCC_CICR_CSSHSEC_Msk = 0x100
RCC_CICR_CSSHSEC = 0x100
RCC_CICR_LSECSSC = 0x80
RCC_CICR_CSSC = 0x100
RCC_IOPRSTR_IOPARST_Pos = 0x0
RCC_IOPRSTR_IOPARST_Msk = 0x1
RCC_IOPRSTR_IOPARST = 0x1
RCC_IOPRSTR_IOPBRST_Pos = 0x1
RCC_IOPRSTR_IOPBRST_Msk = 0x2
RCC_IOPRSTR_IOPBRST = 0x2
RCC_IOPRSTR_IOPCRST_Pos = 0x2
RCC_IOPRSTR_IOPCRST_Msk = 0x4
RCC_IOPRSTR_IOPCRST = 0x4
RCC_IOPRSTR_IOPDRST_Pos = 0x3
RCC_IOPRSTR_IOPDRST_Msk = 0x8
RCC_IOPRSTR_IOPDRST = 0x8
RCC_IOPRSTR_IOPHRST_Pos = 0x7
RCC_IOPRSTR_IOPHRST_Msk = 0x80
RCC_IOPRSTR_IOPHRST = 0x80
RCC_IOPRSTR_GPIOARST = 0x1
RCC_IOPRSTR_GPIOBRST = 0x2
RCC_IOPRSTR_GPIOCRST = 0x4
RCC_IOPRSTR_GPIODRST = 0x8
RCC_IOPRSTR_GPIOHRST = 0x80
RCC_AHBRSTR_DMARST_Pos = 0x0
RCC_AHBRSTR_DMARST_Msk = 0x1
RCC_AHBRSTR_DMARST = 0x1
RCC_AHBRSTR_MIFRST_Pos = 0x8
RCC_AHBRSTR_MIFRST_Msk = 0x100
RCC_AHBRSTR_MIFRST = 0x100
RCC_AHBRSTR_CRCRST_Pos = 0xC
RCC_AHBRSTR_CRCRST_Msk = 0x1000
RCC_AHBRSTR_CRCRST = 0x1000
RCC_AHBRSTR_TSCRST_Pos = 0x10
RCC_AHBRSTR_TSCRST_Msk = 0x10000
RCC_AHBRSTR_TSCRST = 0x10000
RCC_AHBRSTR_RNGRST_Pos = 0x14
RCC_AHBRSTR_RNGRST_Msk = 0x100000
RCC_AHBRSTR_RNGRST = 0x100000
RCC_AHBRSTR_CRYPRST_Pos = 0x18
RCC_AHBRSTR_CRYPRST_Msk = 0x1000000
RCC_AHBRSTR_CRYPRST = 0x1000000
RCC_AHBRSTR_DMA1RST = 0x1
RCC_APB2RSTR_SYSCFGRST_Pos = 0x0
RCC_APB2RSTR_SYSCFGRST_Msk = 0x1
RCC_APB2RSTR_SYSCFGRST = 0x1
RCC_APB2RSTR_TIM21RST_Pos = 0x2
RCC_APB2RSTR_TIM21RST_Msk = 0x4
RCC_APB2RSTR_TIM21RST = 0x4
RCC_APB2RSTR_TIM22RST_Pos = 0x5
RCC_APB2RSTR_TIM22RST_Msk = 0x20
RCC_APB2RSTR_TIM22RST = 0x20
RCC_APB2RSTR_ADCRST_Pos = 0x9
RCC_APB2RSTR_ADCRST_Msk = 0x200
RCC_APB2RSTR_ADCRST = 0x200
RCC_APB2RSTR_SPI1RST_Pos = 0xC
RCC_APB2RSTR_SPI1RST_Msk = 0x1000
RCC_APB2RSTR_SPI1RST = 0x1000
RCC_APB2RSTR_USART1RST_Pos = 0xE
RCC_APB2RSTR_USART1RST_Msk = 0x4000
RCC_APB2RSTR_USART1RST = 0x4000
RCC_APB2RSTR_DBGRST_Pos = 0x16
RCC_APB2RSTR_DBGRST_Msk = 0x400000
RCC_APB2RSTR_DBGRST = 0x400000
RCC_APB2RSTR_ADC1RST = 0x200
RCC_APB2RSTR_DBGMCURST = 0x400000
RCC_APB1RSTR_TIM2RST_Pos = 0x0
RCC_APB1RSTR_TIM2RST_Msk = 0x1
RCC_APB1RSTR_TIM2RST = 0x1
RCC_APB1RSTR_TIM6RST_Pos = 0x4
RCC_APB1RSTR_TIM6RST_Msk = 0x10
RCC_APB1RSTR_TIM6RST = 0x10
RCC_APB1RSTR_LCDRST_Pos = 0x9
RCC_APB1RSTR_LCDRST_Msk = 0x200
RCC_APB1RSTR_LCDRST = 0x200
RCC_APB1RSTR_WWDGRST_Pos = 0xB
RCC_APB1RSTR_WWDGRST_Msk = 0x800
RCC_APB1RSTR_WWDGRST = 0x800
RCC_APB1RSTR_SPI2RST_Pos = 0xE
RCC_APB1RSTR_SPI2RST_Msk = 0x4000
RCC_APB1RSTR_SPI2RST = 0x4000
RCC_APB1RSTR_USART2RST_Pos = 0x11
RCC_APB1RSTR_USART2RST_Msk = 0x20000
RCC_APB1RSTR_USART2RST = 0x20000
RCC_APB1RSTR_LPUART1RST_Pos = 0x12
RCC_APB1RSTR_LPUART1RST_Msk = 0x40000
RCC_APB1RSTR_LPUART1RST = 0x40000
RCC_APB1RSTR_I2C1RST_Pos = 0x15
RCC_APB1RSTR_I2C1RST_Msk = 0x200000
RCC_APB1RSTR_I2C1RST = 0x200000
RCC_APB1RSTR_I2C2RST_Pos = 0x16
RCC_APB1RSTR_I2C2RST_Msk = 0x400000
RCC_APB1RSTR_I2C2RST = 0x400000
RCC_APB1RSTR_USBRST_Pos = 0x17
RCC_APB1RSTR_USBRST_Msk = 0x800000
RCC_APB1RSTR_USBRST = 0x800000
RCC_APB1RSTR_CRSRST_Pos = 0x1B
RCC_APB1RSTR_CRSRST_Msk = 0x8000000
RCC_APB1RSTR_CRSRST = 0x8000000
RCC_APB1RSTR_PWRRST_Pos = 0x1C
RCC_APB1RSTR_PWRRST_Msk = 0x10000000
RCC_APB1RSTR_PWRRST = 0x10000000
RCC_APB1RSTR_DACRST_Pos = 0x1D
RCC_APB1RSTR_DACRST_Msk = 0x20000000
RCC_APB1RSTR_DACRST = 0x20000000
RCC_APB1RSTR_LPTIM1RST_Pos = 0x1F
RCC_APB1RSTR_LPTIM1RST_Msk = 0x80000000
RCC_APB1RSTR_LPTIM1RST = 0x80000000
RCC_IOPENR_IOPAEN_Pos = 0x0
RCC_IOPENR_IOPAEN_Msk = 0x1
RCC_IOPENR_IOPAEN = 0x1
RCC_IOPENR_IOPBEN_Pos = 0x1
RCC_IOPENR_IOPBEN_Msk = 0x2
RCC_IOPENR_IOPBEN = 0x2
RCC_IOPENR_IOPCEN_Pos = 0x2
RCC_IOPENR_IOPCEN_Msk = 0x4
RCC_IOPENR_IOPCEN = 0x4
RCC_IOPENR_IOPDEN_Pos = 0x3
RCC_IOPENR_IOPDEN_Msk = 0x8
RCC_IOPENR_IOPDEN = 0x8
RCC_IOPENR_IOPHEN_Pos = 0x7
RCC_IOPENR_IOPHEN_Msk = 0x80
RCC_IOPENR_IOPHEN = 0x80
RCC_IOPENR_GPIOAEN = 0x1
RCC_IOPENR_GPIOBEN = 0x2
RCC_IOPENR_GPIOCEN = 0x4
RCC_IOPENR_GPIODEN = 0x8
RCC_IOPENR_GPIOHEN = 0x80
RCC_AHBENR_DMAEN_Pos = 0x0
RCC_AHBENR_DMAEN_Msk = 0x1
RCC_AHBENR_DMAEN = 0x1
RCC_AHBENR_MIFEN_Pos = 0x8
RCC_AHBENR_MIFEN_Msk = 0x100
RCC_AHBENR_MIFEN = 0x100
RCC_AHBENR_CRCEN_Pos = 0xC
RCC_AHBENR_CRCEN_Msk = 0x1000
RCC_AHBENR_CRCEN = 0x1000
RCC_AHBENR_TSCEN_Pos = 0x10
RCC_AHBENR_TSCEN_Msk = 0x10000
RCC_AHBENR_TSCEN = 0x10000
RCC_AHBENR_RNGEN_Pos = 0x14
RCC_AHBENR_RNGEN_Msk = 0x100000
RCC_AHBENR_RNGEN = 0x100000
RCC_AHBENR_CRYPEN_Pos = 0x18
RCC_AHBENR_CRYPEN_Msk = 0x1000000
RCC_AHBENR_CRYPEN = 0x1000000
RCC_AHBENR_DMA1EN = 0x1
RCC_APB2ENR_SYSCFGEN_Pos = 0x0
RCC_APB2ENR_SYSCFGEN_Msk = 0x1
RCC_APB2ENR_SYSCFGEN = 0x1
RCC_APB2ENR_TIM21EN_Pos = 0x2
RCC_APB2ENR_TIM21EN_Msk = 0x4
RCC_APB2ENR_TIM21EN = 0x4
RCC_APB2ENR_TIM22EN_Pos = 0x5
RCC_APB2ENR_TIM22EN_Msk = 0x20
RCC_APB2ENR_TIM22EN = 0x20
RCC_APB2ENR_FWEN_Pos = 0x7
RCC_APB2ENR_FWEN_Msk = 0x80
RCC_APB2ENR_FWEN = 0x80
RCC_APB2ENR_ADCEN_Pos = 0x9
RCC_APB2ENR_ADCEN_Msk = 0x200
RCC_APB2ENR_ADCEN = 0x200
RCC_APB2ENR_SPI1EN_Pos = 0xC
RCC_APB2ENR_SPI1EN_Msk = 0x1000
RCC_APB2ENR_SPI1EN = 0x1000
RCC_APB2ENR_USART1EN_Pos = 0xE
RCC_APB2ENR_USART1EN_Msk = 0x4000
RCC_APB2ENR_USART1EN = 0x4000
RCC_APB2ENR_DBGEN_Pos = 0x16
RCC_APB2ENR_DBGEN_Msk = 0x400000
RCC_APB2ENR_DBGEN = 0x400000
RCC_APB2ENR_MIFIEN = 0x80
RCC_APB2ENR_ADC1EN = 0x200
RCC_APB2ENR_DBGMCUEN = 0x400000
RCC_APB1ENR_TIM2EN_Pos = 0x0
RCC_APB1ENR_TIM2EN_Msk = 0x1
RCC_APB1ENR_TIM2EN = 0x1
RCC_APB1ENR_TIM6EN_Pos = 0x4
RCC_APB1ENR_TIM6EN_Msk = 0x10
RCC_APB1ENR_TIM6EN = 0x10
RCC_APB1ENR_LCDEN_Pos = 0x9
RCC_APB1ENR_LCDEN_Msk = 0x200
RCC_APB1ENR_LCDEN = 0x200
RCC_APB1ENR_WWDGEN_Pos = 0xB
RCC_APB1ENR_WWDGEN_Msk = 0x800
RCC_APB1ENR_WWDGEN = 0x800
RCC_APB1ENR_SPI2EN_Pos = 0xE
RCC_APB1ENR_SPI2EN_Msk = 0x4000
RCC_APB1ENR_SPI2EN = 0x4000
RCC_APB1ENR_USART2EN_Pos = 0x11
RCC_APB1ENR_USART2EN_Msk = 0x20000
RCC_APB1ENR_USART2EN = 0x20000
RCC_APB1ENR_LPUART1EN_Pos = 0x12
RCC_APB1ENR_LPUART1EN_Msk = 0x40000
RCC_APB1ENR_LPUART1EN = 0x40000
RCC_APB1ENR_I2C1EN_Pos = 0x15
RCC_APB1ENR_I2C1EN_Msk = 0x200000
RCC_APB1ENR_I2C1EN = 0x200000
RCC_APB1ENR_I2C2EN_Pos = 0x16
RCC_APB1ENR_I2C2EN_Msk = 0x400000
RCC_APB1ENR_I2C2EN = 0x400000
RCC_APB1ENR_USBEN_Pos = 0x17
RCC_APB1ENR_USBEN_Msk = 0x800000
RCC_APB1ENR_USBEN = 0x800000
RCC_APB1ENR_CRSEN_Pos = 0x1B
RCC_APB1ENR_CRSEN_Msk = 0x8000000
RCC_APB1ENR_CRSEN = 0x8000000
RCC_APB1ENR_PWREN_Pos = 0x1C
RCC_APB1ENR_PWREN_Msk = 0x10000000
RCC_APB1ENR_PWREN = 0x10000000
RCC_APB1ENR_DACEN_Pos = 0x1D
RCC_APB1ENR_DACEN_Msk = 0x20000000
RCC_APB1ENR_DACEN = 0x20000000
RCC_APB1ENR_LPTIM1EN_Pos = 0x1F
RCC_APB1ENR_LPTIM1EN_Msk = 0x80000000
RCC_APB1ENR_LPTIM1EN = 0x80000000
RCC_IOPSMENR_IOPASMEN_Pos = 0x0
RCC_IOPSMENR_IOPASMEN_Msk = 0x1
RCC_IOPSMENR_IOPASMEN = 0x1
RCC_IOPSMENR_IOPBSMEN_Pos = 0x1
RCC_IOPSMENR_IOPBSMEN_Msk = 0x2
RCC_IOPSMENR_IOPBSMEN = 0x2
RCC_IOPSMENR_IOPCSMEN_Pos = 0x2
RCC_IOPSMENR_IOPCSMEN_Msk = 0x4
RCC_IOPSMENR_IOPCSMEN = 0x4
RCC_IOPSMENR_IOPDSMEN_Pos = 0x3
RCC_IOPSMENR_IOPDSMEN_Msk = 0x8
RCC_IOPSMENR_IOPDSMEN = 0x8
RCC_IOPSMENR_IOPHSMEN_Pos = 0x7
RCC_IOPSMENR_IOPHSMEN_Msk = 0x80
RCC_IOPSMENR_IOPHSMEN = 0x80
RCC_IOPSMENR_GPIOASMEN = 0x1
RCC_IOPSMENR_GPIOBSMEN = 0x2
RCC_IOPSMENR_GPIOCSMEN = 0x4
RCC_IOPSMENR_GPIODSMEN = 0x8
RCC_IOPSMENR_GPIOHSMEN = 0x80
RCC_AHBSMENR_DMASMEN_Pos = 0x0
RCC_AHBSMENR_DMASMEN_Msk = 0x1
RCC_AHBSMENR_DMASMEN = 0x1
RCC_AHBSMENR_MIFSMEN_Pos = 0x8
RCC_AHBSMENR_MIFSMEN_Msk = 0x100
RCC_AHBSMENR_MIFSMEN = 0x100
RCC_AHBSMENR_SRAMSMEN_Pos = 0x9
RCC_AHBSMENR_SRAMSMEN_Msk = 0x200
RCC_AHBSMENR_SRAMSMEN = 0x200
RCC_AHBSMENR_CRCSMEN_Pos = 0xC
RCC_AHBSMENR_CRCSMEN_Msk = 0x1000
RCC_AHBSMENR_CRCSMEN = 0x1000
RCC_AHBSMENR_TSCSMEN_Pos = 0x10
RCC_AHBSMENR_TSCSMEN_Msk = 0x10000
RCC_AHBSMENR_TSCSMEN = 0x10000
RCC_AHBSMENR_RNGSMEN_Pos = 0x14
RCC_AHBSMENR_RNGSMEN_Msk = 0x100000
RCC_AHBSMENR_RNGSMEN = 0x100000
RCC_AHBSMENR_CRYPSMEN_Pos = 0x18
RCC_AHBSMENR_CRYPSMEN_Msk = 0x1000000
RCC_AHBSMENR_CRYPSMEN = 0x1000000
RCC_AHBSMENR_DMA1SMEN = 0x1
RCC_APB2SMENR_SYSCFGSMEN_Pos = 0x0
RCC_APB2SMENR_SYSCFGSMEN_Msk = 0x1
RCC_APB2SMENR_SYSCFGSMEN = 0x1
RCC_APB2SMENR_TIM21SMEN_Pos = 0x2
RCC_APB2SMENR_TIM21SMEN_Msk = 0x4
RCC_APB2SMENR_TIM21SMEN = 0x4
RCC_APB2SMENR_TIM22SMEN_Pos = 0x5
RCC_APB2SMENR_TIM22SMEN_Msk = 0x20
RCC_APB2SMENR_TIM22SMEN = 0x20
RCC_APB2SMENR_ADCSMEN_Pos = 0x9
RCC_APB2SMENR_ADCSMEN_Msk = 0x200
RCC_APB2SMENR_ADCSMEN = 0x200
RCC_APB2SMENR_SPI1SMEN_Pos = 0xC
RCC_APB2SMENR_SPI1SMEN_Msk = 0x1000
RCC_APB2SMENR_SPI1SMEN = 0x1000
RCC_APB2SMENR_USART1SMEN_Pos = 0xE
RCC_APB2SMENR_USART1SMEN_Msk = 0x4000
RCC_APB2SMENR_USART1SMEN = 0x4000
RCC_APB2SMENR_DBGSMEN_Pos = 0x16
RCC_APB2SMENR_DBGSMEN_Msk = 0x400000
RCC_APB2SMENR_DBGSMEN = 0x400000
RCC_APB2SMENR_ADC1SMEN = 0x200
RCC_APB2SMENR_DBGMCUSMEN = 0x400000
RCC_APB1SMENR_TIM2SMEN_Pos = 0x0
RCC_APB1SMENR_TIM2SMEN_Msk = 0x1
RCC_APB1SMENR_TIM2SMEN = 0x1
RCC_APB1SMENR_TIM6SMEN_Pos = 0x4
RCC_APB1SMENR_TIM6SMEN_Msk = 0x10
RCC_APB1SMENR_TIM6SMEN = 0x10
RCC_APB1SMENR_LCDSMEN_Pos = 0x9
RCC_APB1SMENR_LCDSMEN_Msk = 0x200
RCC_APB1SMENR_LCDSMEN = 0x200
RCC_APB1SMENR_WWDGSMEN_Pos = 0xB
RCC_APB1SMENR_WWDGSMEN_Msk = 0x800
RCC_APB1SMENR_WWDGSMEN = 0x800
RCC_APB1SMENR_SPI2SMEN_Pos = 0xE
RCC_APB1SMENR_SPI2SMEN_Msk = 0x4000
RCC_APB1SMENR_SPI2SMEN = 0x4000
RCC_APB1SMENR_USART2SMEN_Pos = 0x11
RCC_APB1SMENR_USART2SMEN_Msk = 0x20000
RCC_APB1SMENR_USART2SMEN = 0x20000
RCC_APB1SMENR_LPUART1SMEN_Pos = 0x12
RCC_APB1SMENR_LPUART1SMEN_Msk = 0x40000
RCC_APB1SMENR_LPUART1SMEN = 0x40000
RCC_APB1SMENR_I2C1SMEN_Pos = 0x15
RCC_APB1SMENR_I2C1SMEN_Msk = 0x200000
RCC_APB1SMENR_I2C1SMEN = 0x200000
RCC_APB1SMENR_I2C2SMEN_Pos = 0x16
RCC_APB1SMENR_I2C2SMEN_Msk = 0x400000
RCC_APB1SMENR_I2C2SMEN = 0x400000
RCC_APB1SMENR_USBSMEN_Pos = 0x17
RCC_APB1SMENR_USBSMEN_Msk = 0x800000
RCC_APB1SMENR_USBSMEN = 0x800000
RCC_APB1SMENR_CRSSMEN_Pos = 0x1B
RCC_APB1SMENR_CRSSMEN_Msk = 0x8000000
RCC_APB1SMENR_CRSSMEN = 0x8000000
RCC_APB1SMENR_PWRSMEN_Pos = 0x1C
RCC_APB1SMENR_PWRSMEN_Msk = 0x10000000
RCC_APB1SMENR_PWRSMEN = 0x10000000
RCC_APB1SMENR_DACSMEN_Pos = 0x1D
RCC_APB1SMENR_DACSMEN_Msk = 0x20000000
RCC_APB1SMENR_DACSMEN = 0x20000000
RCC_APB1SMENR_LPTIM1SMEN_Pos = 0x1F
RCC_APB1SMENR_LPTIM1SMEN_Msk = 0x80000000
RCC_APB1SMENR_LPTIM1SMEN = 0x80000000
RCC_CCIPR_USART1SEL_Pos = 0x0
RCC_CCIPR_USART1SEL_Msk = 0x3
RCC_CCIPR_USART1SEL = 0x3
RCC_CCIPR_USART1SEL_0 = 0x1
RCC_CCIPR_USART1SEL_1 = 0x2
RCC_CCIPR_USART2SEL_Pos = 0x2
RCC_CCIPR_USART2SEL_Msk = 0xC
RCC_CCIPR_USART2SEL = 0xC
RCC_CCIPR_USART2SEL_0 = 0x4
RCC_CCIPR_USART2SEL_1 = 0x8
RCC_CCIPR_LPUART1SEL_Pos = 0xA
RCC_CCIPR_LPUART1SEL_Msk = 0xC00
RCC_CCIPR_LPUART1SEL = 0xC00
RCC_CCIPR_LPUART1SEL_0 = 0x400
RCC_CCIPR_LPUART1SEL_1 = 0x800
RCC_CCIPR_I2C1SEL_Pos = 0xC
RCC_CCIPR_I2C1SEL_Msk = 0x3000
RCC_CCIPR_I2C1SEL = 0x3000
RCC_CCIPR_I2C1SEL_0 = 0x1000
RCC_CCIPR_I2C1SEL_1 = 0x2000
RCC_CCIPR_LPTIM1SEL_Pos = 0x12
RCC_CCIPR_LPTIM1SEL_Msk = 0xC0000
RCC_CCIPR_LPTIM1SEL = 0xC0000
RCC_CCIPR_LPTIM1SEL_0 = 0x40000
RCC_CCIPR_LPTIM1SEL_1 = 0x80000
RCC_CCIPR_HSI48SEL_Pos = 0x1A
RCC_CCIPR_HSI48SEL_Msk = 0x4000000
RCC_CCIPR_HSI48SEL = 0x4000000
RCC_CCIPR_HSI48MSEL = 0x4000000
RCC_CSR_LSION_Pos = 0x0
RCC_CSR_LSION_Msk = 0x1
RCC_CSR_LSION = 0x1
RCC_CSR_LSIRDY_Pos = 0x1
RCC_CSR_LSIRDY_Msk = 0x2
RCC_CSR_LSIRDY = 0x2
RCC_CSR_LSEON_Pos = 0x8
RCC_CSR_LSEON_Msk = 0x100
RCC_CSR_LSEON = 0x100
RCC_CSR_LSERDY_Pos = 0x9
RCC_CSR_LSERDY_Msk = 0x200
RCC_CSR_LSERDY = 0x200
RCC_CSR_LSEBYP_Pos = 0xA
RCC_CSR_LSEBYP_Msk = 0x400
RCC_CSR_LSEBYP = 0x400
RCC_CSR_LSEDRV_Pos = 0xB
RCC_CSR_LSEDRV_Msk = 0x1800
RCC_CSR_LSEDRV = 0x1800
RCC_CSR_LSEDRV_0 = 0x800
RCC_CSR_LSEDRV_1 = 0x1000
RCC_CSR_LSECSSON_Pos = 0xD
RCC_CSR_LSECSSON_Msk = 0x2000
RCC_CSR_LSECSSON = 0x2000
RCC_CSR_LSECSSD_Pos = 0xE
RCC_CSR_LSECSSD_Msk = 0x4000
RCC_CSR_LSECSSD = 0x4000
RCC_CSR_RTCSEL_Pos = 0x10
RCC_CSR_RTCSEL_Msk = 0x30000
RCC_CSR_RTCSEL = 0x30000
RCC_CSR_RTCSEL_0 = 0x10000
RCC_CSR_RTCSEL_1 = 0x20000
RCC_CSR_RTCSEL_NOCLOCK = 0x0
RCC_CSR_RTCSEL_LSE_Pos = 0x10
RCC_CSR_RTCSEL_LSE_Msk = 0x10000
RCC_CSR_RTCSEL_LSE = 0x10000
RCC_CSR_RTCSEL_LSI_Pos = 0x11
RCC_CSR_RTCSEL_LSI_Msk = 0x20000
RCC_CSR_RTCSEL_LSI = 0x20000
RCC_CSR_RTCSEL_HSE_Pos = 0x10
RCC_CSR_RTCSEL_HSE_Msk = 0x30000
RCC_CSR_RTCSEL_HSE = 0x30000
RCC_CSR_RTCEN_Pos = 0x12
RCC_CSR_RTCEN_Msk = 0x40000
RCC_CSR_RTCEN = 0x40000
RCC_CSR_RTCRST_Pos = 0x13
RCC_CSR_RTCRST_Msk = 0x80000
RCC_CSR_RTCRST = 0x80000
RCC_CSR_RMVF_Pos = 0x17
RCC_CSR_RMVF_Msk = 0x800000
RCC_CSR_RMVF = 0x800000
RCC_CSR_FWRSTF_Pos = 0x18
RCC_CSR_FWRSTF_Msk = 0x1000000
RCC_CSR_FWRSTF = 0x1000000
RCC_CSR_OBLRSTF_Pos = 0x19
RCC_CSR_OBLRSTF_Msk = 0x2000000
RCC_CSR_OBLRSTF = 0x2000000
RCC_CSR_PINRSTF_Pos = 0x1A
RCC_CSR_PINRSTF_Msk = 0x4000000
RCC_CSR_PINRSTF = 0x4000000
RCC_CSR_PORRSTF_Pos = 0x1B
RCC_CSR_PORRSTF_Msk = 0x8000000
RCC_CSR_PORRSTF = 0x8000000
RCC_CSR_SFTRSTF_Pos = 0x1C
RCC_CSR_SFTRSTF_Msk = 0x10000000
RCC_CSR_SFTRSTF = 0x10000000
RCC_CSR_IWDGRSTF_Pos = 0x1D
RCC_CSR_IWDGRSTF_Msk = 0x20000000
RCC_CSR_IWDGRSTF = 0x20000000
RCC_CSR_WWDGRSTF_Pos = 0x1E
RCC_CSR_WWDGRSTF_Msk = 0x40000000
RCC_CSR_WWDGRSTF = 0x40000000
RCC_CSR_LPWRRSTF_Pos = 0x1F
RCC_CSR_LPWRRSTF_Msk = 0x80000000
RCC_CSR_LPWRRSTF = 0x80000000
RCC_CSR_OBL = 0x2000000
RNG_CR_RNGEN_Pos = 0x2
RNG_CR_RNGEN_Msk = 0x4
RNG_CR_RNGEN = 0x4
RNG_CR_IE_Pos = 0x3
RNG_CR_IE_Msk = 0x8
RNG_CR_IE = 0x8
RNG_SR_DRDY_Pos = 0x0
RNG_SR_DRDY_Msk = 0x1
RNG_SR_DRDY = 0x1
RNG_SR_CECS_Pos = 0x1
RNG_SR_CECS_Msk = 0x2
RNG_SR_CECS = 0x2
RNG_SR_SECS_Pos = 0x2
RNG_SR_SECS_Msk = 0x4
RNG_SR_SECS = 0x4
RNG_SR_CEIS_Pos = 0x5
RNG_SR_CEIS_Msk = 0x20
RNG_SR_CEIS = 0x20
RNG_SR_SEIS_Pos = 0x6
RNG_SR_SEIS_Msk = 0x40
RNG_SR_SEIS = 0x40
# empty define RTC_TAMPER1_SUPPORT
# empty define RTC_TAMPER2_SUPPORT
# empty define RTC_WAKEUP_SUPPORT
# empty define RTC_BACKUP_SUPPORT
RTC_TR_PM_Pos = 0x16
RTC_TR_PM_Msk = 0x400000
RTC_TR_PM = 0x400000
RTC_TR_HT_Pos = 0x14
RTC_TR_HT_Msk = 0x300000
RTC_TR_HT = 0x300000
RTC_TR_HT_0 = 0x100000
RTC_TR_HT_1 = 0x200000
RTC_TR_HU_Pos = 0x10
RTC_TR_HU_Msk = 0xF0000
RTC_TR_HU = 0xF0000
RTC_TR_HU_0 = 0x10000
RTC_TR_HU_1 = 0x20000
RTC_TR_HU_2 = 0x40000
RTC_TR_HU_3 = 0x80000
RTC_TR_MNT_Pos = 0xC
RTC_TR_MNT_Msk = 0x7000
RTC_TR_MNT = 0x7000
RTC_TR_MNT_0 = 0x1000
RTC_TR_MNT_1 = 0x2000
RTC_TR_MNT_2 = 0x4000
RTC_TR_MNU_Pos = 0x8
RTC_TR_MNU_Msk = 0xF00
RTC_TR_MNU = 0xF00
RTC_TR_MNU_0 = 0x100
RTC_TR_MNU_1 = 0x200
RTC_TR_MNU_2 = 0x400
RTC_TR_MNU_3 = 0x800
RTC_TR_ST_Pos = 0x4
RTC_TR_ST_Msk = 0x70
RTC_TR_ST = 0x70
RTC_TR_ST_0 = 0x10
RTC_TR_ST_1 = 0x20
RTC_TR_ST_2 = 0x40
RTC_TR_SU_Pos = 0x0
RTC_TR_SU_Msk = 0xF
RTC_TR_SU = 0xF
RTC_TR_SU_0 = 0x1
RTC_TR_SU_1 = 0x2
RTC_TR_SU_2 = 0x4
RTC_TR_SU_3 = 0x8
RTC_DR_YT_Pos = 0x14
RTC_DR_YT_Msk = 0xF00000
RTC_DR_YT = 0xF00000
RTC_DR_YT_0 = 0x100000
RTC_DR_YT_1 = 0x200000
RTC_DR_YT_2 = 0x400000
RTC_DR_YT_3 = 0x800000
RTC_DR_YU_Pos = 0x10
RTC_DR_YU_Msk = 0xF0000
RTC_DR_YU = 0xF0000
RTC_DR_YU_0 = 0x10000
RTC_DR_YU_1 = 0x20000
RTC_DR_YU_2 = 0x40000
RTC_DR_YU_3 = 0x80000
RTC_DR_WDU_Pos = 0xD
RTC_DR_WDU_Msk = 0xE000
RTC_DR_WDU = 0xE000
RTC_DR_WDU_0 = 0x2000
RTC_DR_WDU_1 = 0x4000
RTC_DR_WDU_2 = 0x8000
RTC_DR_MT_Pos = 0xC
RTC_DR_MT_Msk = 0x1000
RTC_DR_MT = 0x1000
RTC_DR_MU_Pos = 0x8
RTC_DR_MU_Msk = 0xF00
RTC_DR_MU = 0xF00
RTC_DR_MU_0 = 0x100
RTC_DR_MU_1 = 0x200
RTC_DR_MU_2 = 0x400
RTC_DR_MU_3 = 0x800
RTC_DR_DT_Pos = 0x4
RTC_DR_DT_Msk = 0x30
RTC_DR_DT = 0x30
RTC_DR_DT_0 = 0x10
RTC_DR_DT_1 = 0x20
RTC_DR_DU_Pos = 0x0
RTC_DR_DU_Msk = 0xF
RTC_DR_DU = 0xF
RTC_DR_DU_0 = 0x1
RTC_DR_DU_1 = 0x2
RTC_DR_DU_2 = 0x4
RTC_DR_DU_3 = 0x8
RTC_CR_COE_Pos = 0x17
RTC_CR_COE_Msk = 0x800000
RTC_CR_COE = 0x800000
RTC_CR_OSEL_Pos = 0x15
RTC_CR_OSEL_Msk = 0x600000
RTC_CR_OSEL = 0x600000
RTC_CR_OSEL_0 = 0x200000
RTC_CR_OSEL_1 = 0x400000
RTC_CR_POL_Pos = 0x14
RTC_CR_POL_Msk = 0x100000
RTC_CR_POL = 0x100000
RTC_CR_COSEL_Pos = 0x13
RTC_CR_COSEL_Msk = 0x80000
RTC_CR_COSEL = 0x80000
RTC_CR_BKP_Pos = 0x12
RTC_CR_BKP_Msk = 0x40000
RTC_CR_BKP = 0x40000
RTC_CR_SUB1H_Pos = 0x11
RTC_CR_SUB1H_Msk = 0x20000
RTC_CR_SUB1H = 0x20000
RTC_CR_ADD1H_Pos = 0x10
RTC_CR_ADD1H_Msk = 0x10000
RTC_CR_ADD1H = 0x10000
RTC_CR_TSIE_Pos = 0xF
RTC_CR_TSIE_Msk = 0x8000
RTC_CR_TSIE = 0x8000
RTC_CR_WUTIE_Pos = 0xE
RTC_CR_WUTIE_Msk = 0x4000
RTC_CR_WUTIE = 0x4000
RTC_CR_ALRBIE_Pos = 0xD
RTC_CR_ALRBIE_Msk = 0x2000
RTC_CR_ALRBIE = 0x2000
RTC_CR_ALRAIE_Pos = 0xC
RTC_CR_ALRAIE_Msk = 0x1000
RTC_CR_ALRAIE = 0x1000
RTC_CR_TSE_Pos = 0xB
RTC_CR_TSE_Msk = 0x800
RTC_CR_TSE = 0x800
RTC_CR_WUTE_Pos = 0xA
RTC_CR_WUTE_Msk = 0x400
RTC_CR_WUTE = 0x400
RTC_CR_ALRBE_Pos = 0x9
RTC_CR_ALRBE_Msk = 0x200
RTC_CR_ALRBE = 0x200
RTC_CR_ALRAE_Pos = 0x8
RTC_CR_ALRAE_Msk = 0x100
RTC_CR_ALRAE = 0x100
RTC_CR_FMT_Pos = 0x6
RTC_CR_FMT_Msk = 0x40
RTC_CR_FMT = 0x40
RTC_CR_BYPSHAD_Pos = 0x5
RTC_CR_BYPSHAD_Msk = 0x20
RTC_CR_BYPSHAD = 0x20
RTC_CR_REFCKON_Pos = 0x4
RTC_CR_REFCKON_Msk = 0x10
RTC_CR_REFCKON = 0x10
RTC_CR_TSEDGE_Pos = 0x3
RTC_CR_TSEDGE_Msk = 0x8
RTC_CR_TSEDGE = 0x8
RTC_CR_WUCKSEL_Pos = 0x0
RTC_CR_WUCKSEL_Msk = 0x7
RTC_CR_WUCKSEL = 0x7
RTC_CR_WUCKSEL_0 = 0x1
RTC_CR_WUCKSEL_1 = 0x2
RTC_CR_WUCKSEL_2 = 0x4
RTC_ISR_RECALPF_Pos = 0x10
RTC_ISR_RECALPF_Msk = 0x10000
RTC_ISR_RECALPF = 0x10000
RTC_ISR_TAMP2F_Pos = 0xE
RTC_ISR_TAMP2F_Msk = 0x4000
RTC_ISR_TAMP2F = 0x4000
RTC_ISR_TAMP1F_Pos = 0xD
RTC_ISR_TAMP1F_Msk = 0x2000
RTC_ISR_TAMP1F = 0x2000
RTC_ISR_TSOVF_Pos = 0xC
RTC_ISR_TSOVF_Msk = 0x1000
RTC_ISR_TSOVF = 0x1000
RTC_ISR_TSF_Pos = 0xB
RTC_ISR_TSF_Msk = 0x800
RTC_ISR_TSF = 0x800
RTC_ISR_WUTF_Pos = 0xA
RTC_ISR_WUTF_Msk = 0x400
RTC_ISR_WUTF = 0x400
RTC_ISR_ALRBF_Pos = 0x9
RTC_ISR_ALRBF_Msk = 0x200
RTC_ISR_ALRBF = 0x200
RTC_ISR_ALRAF_Pos = 0x8
RTC_ISR_ALRAF_Msk = 0x100
RTC_ISR_ALRAF = 0x100
RTC_ISR_INIT_Pos = 0x7
RTC_ISR_INIT_Msk = 0x80
RTC_ISR_INIT = 0x80
RTC_ISR_INITF_Pos = 0x6
RTC_ISR_INITF_Msk = 0x40
RTC_ISR_INITF = 0x40
RTC_ISR_RSF_Pos = 0x5
RTC_ISR_RSF_Msk = 0x20
RTC_ISR_RSF = 0x20
RTC_ISR_INITS_Pos = 0x4
RTC_ISR_INITS_Msk = 0x10
RTC_ISR_INITS = 0x10
RTC_ISR_SHPF_Pos = 0x3
RTC_ISR_SHPF_Msk = 0x8
RTC_ISR_SHPF = 0x8
RTC_ISR_WUTWF_Pos = 0x2
RTC_ISR_WUTWF_Msk = 0x4
RTC_ISR_WUTWF = 0x4
RTC_ISR_ALRBWF_Pos = 0x1
RTC_ISR_ALRBWF_Msk = 0x2
RTC_ISR_ALRBWF = 0x2
RTC_ISR_ALRAWF_Pos = 0x0
RTC_ISR_ALRAWF_Msk = 0x1
RTC_ISR_ALRAWF = 0x1
RTC_PRER_PREDIV_A_Pos = 0x10
RTC_PRER_PREDIV_A_Msk = 0x7F0000
RTC_PRER_PREDIV_A = 0x7F0000
RTC_PRER_PREDIV_S_Pos = 0x0
RTC_PRER_PREDIV_S_Msk = 0x7FFF
RTC_PRER_PREDIV_S = 0x7FFF
RTC_WUTR_WUT_Pos = 0x0
RTC_WUTR_WUT_Msk = 0xFFFF
RTC_WUTR_WUT = 0xFFFF
RTC_ALRMAR_MSK4_Pos = 0x1F
RTC_ALRMAR_MSK4_Msk = 0x80000000
RTC_ALRMAR_MSK4 = 0x80000000
RTC_ALRMAR_WDSEL_Pos = 0x1E
RTC_ALRMAR_WDSEL_Msk = 0x40000000
RTC_ALRMAR_WDSEL = 0x40000000
RTC_ALRMAR_DT_Pos = 0x1C
RTC_ALRMAR_DT_Msk = 0x30000000
RTC_ALRMAR_DT = 0x30000000
RTC_ALRMAR_DT_0 = 0x10000000
RTC_ALRMAR_DT_1 = 0x20000000
RTC_ALRMAR_DU_Pos = 0x18
RTC_ALRMAR_DU_Msk = 0xF000000
RTC_ALRMAR_DU = 0xF000000
RTC_ALRMAR_DU_0 = 0x1000000
RTC_ALRMAR_DU_1 = 0x2000000
RTC_ALRMAR_DU_2 = 0x4000000
RTC_ALRMAR_DU_3 = 0x8000000
RTC_ALRMAR_MSK3_Pos = 0x17
RTC_ALRMAR_MSK3_Msk = 0x800000
RTC_ALRMAR_MSK3 = 0x800000
RTC_ALRMAR_PM_Pos = 0x16
RTC_ALRMAR_PM_Msk = 0x400000
RTC_ALRMAR_PM = 0x400000
RTC_ALRMAR_HT_Pos = 0x14
RTC_ALRMAR_HT_Msk = 0x300000
RTC_ALRMAR_HT = 0x300000
RTC_ALRMAR_HT_0 = 0x100000
RTC_ALRMAR_HT_1 = 0x200000
RTC_ALRMAR_HU_Pos = 0x10
RTC_ALRMAR_HU_Msk = 0xF0000
RTC_ALRMAR_HU = 0xF0000
RTC_ALRMAR_HU_0 = 0x10000
RTC_ALRMAR_HU_1 = 0x20000
RTC_ALRMAR_HU_2 = 0x40000
RTC_ALRMAR_HU_3 = 0x80000
RTC_ALRMAR_MSK2_Pos = 0xF
RTC_ALRMAR_MSK2_Msk = 0x8000
RTC_ALRMAR_MSK2 = 0x8000
RTC_ALRMAR_MNT_Pos = 0xC
RTC_ALRMAR_MNT_Msk = 0x7000
RTC_ALRMAR_MNT = 0x7000
RTC_ALRMAR_MNT_0 = 0x1000
RTC_ALRMAR_MNT_1 = 0x2000
RTC_ALRMAR_MNT_2 = 0x4000
RTC_ALRMAR_MNU_Pos = 0x8
RTC_ALRMAR_MNU_Msk = 0xF00
RTC_ALRMAR_MNU = 0xF00
RTC_ALRMAR_MNU_0 = 0x100
RTC_ALRMAR_MNU_1 = 0x200
RTC_ALRMAR_MNU_2 = 0x400
RTC_ALRMAR_MNU_3 = 0x800
RTC_ALRMAR_MSK1_Pos = 0x7
RTC_ALRMAR_MSK1_Msk = 0x80
RTC_ALRMAR_MSK1 = 0x80
RTC_ALRMAR_ST_Pos = 0x4
RTC_ALRMAR_ST_Msk = 0x70
RTC_ALRMAR_ST = 0x70
RTC_ALRMAR_ST_0 = 0x10
RTC_ALRMAR_ST_1 = 0x20
RTC_ALRMAR_ST_2 = 0x40
RTC_ALRMAR_SU_Pos = 0x0
RTC_ALRMAR_SU_Msk = 0xF
RTC_ALRMAR_SU = 0xF
RTC_ALRMAR_SU_0 = 0x1
RTC_ALRMAR_SU_1 = 0x2
RTC_ALRMAR_SU_2 = 0x4
RTC_ALRMAR_SU_3 = 0x8
RTC_ALRMBR_MSK4_Pos = 0x1F
RTC_ALRMBR_MSK4_Msk = 0x80000000
RTC_ALRMBR_MSK4 = 0x80000000
RTC_ALRMBR_WDSEL_Pos = 0x1E
RTC_ALRMBR_WDSEL_Msk = 0x40000000
RTC_ALRMBR_WDSEL = 0x40000000
RTC_ALRMBR_DT_Pos = 0x1C
RTC_ALRMBR_DT_Msk = 0x30000000
RTC_ALRMBR_DT = 0x30000000
RTC_ALRMBR_DT_0 = 0x10000000
RTC_ALRMBR_DT_1 = 0x20000000
RTC_ALRMBR_DU_Pos = 0x18
RTC_ALRMBR_DU_Msk = 0xF000000
RTC_ALRMBR_DU = 0xF000000
RTC_ALRMBR_DU_0 = 0x1000000
RTC_ALRMBR_DU_1 = 0x2000000
RTC_ALRMBR_DU_2 = 0x4000000
RTC_ALRMBR_DU_3 = 0x8000000
RTC_ALRMBR_MSK3_Pos = 0x17
RTC_ALRMBR_MSK3_Msk = 0x800000
RTC_ALRMBR_MSK3 = 0x800000
RTC_ALRMBR_PM_Pos = 0x16
RTC_ALRMBR_PM_Msk = 0x400000
RTC_ALRMBR_PM = 0x400000
RTC_ALRMBR_HT_Pos = 0x14
RTC_ALRMBR_HT_Msk = 0x300000
RTC_ALRMBR_HT = 0x300000
RTC_ALRMBR_HT_0 = 0x100000
RTC_ALRMBR_HT_1 = 0x200000
RTC_ALRMBR_HU_Pos = 0x10
RTC_ALRMBR_HU_Msk = 0xF0000
RTC_ALRMBR_HU = 0xF0000
RTC_ALRMBR_HU_0 = 0x10000
RTC_ALRMBR_HU_1 = 0x20000
RTC_ALRMBR_HU_2 = 0x40000
RTC_ALRMBR_HU_3 = 0x80000
RTC_ALRMBR_MSK2_Pos = 0xF
RTC_ALRMBR_MSK2_Msk = 0x8000
RTC_ALRMBR_MSK2 = 0x8000
RTC_ALRMBR_MNT_Pos = 0xC
RTC_ALRMBR_MNT_Msk = 0x7000
RTC_ALRMBR_MNT = 0x7000
RTC_ALRMBR_MNT_0 = 0x1000
RTC_ALRMBR_MNT_1 = 0x2000
RTC_ALRMBR_MNT_2 = 0x4000
RTC_ALRMBR_MNU_Pos = 0x8
RTC_ALRMBR_MNU_Msk = 0xF00
RTC_ALRMBR_MNU = 0xF00
RTC_ALRMBR_MNU_0 = 0x100
RTC_ALRMBR_MNU_1 = 0x200
RTC_ALRMBR_MNU_2 = 0x400
RTC_ALRMBR_MNU_3 = 0x800
RTC_ALRMBR_MSK1_Pos = 0x7
RTC_ALRMBR_MSK1_Msk = 0x80
RTC_ALRMBR_MSK1 = 0x80
RTC_ALRMBR_ST_Pos = 0x4
RTC_ALRMBR_ST_Msk = 0x70
RTC_ALRMBR_ST = 0x70
RTC_ALRMBR_ST_0 = 0x10
RTC_ALRMBR_ST_1 = 0x20
RTC_ALRMBR_ST_2 = 0x40
RTC_ALRMBR_SU_Pos = 0x0
RTC_ALRMBR_SU_Msk = 0xF
RTC_ALRMBR_SU = 0xF
RTC_ALRMBR_SU_0 = 0x1
RTC_ALRMBR_SU_1 = 0x2
RTC_ALRMBR_SU_2 = 0x4
RTC_ALRMBR_SU_3 = 0x8
RTC_WPR_KEY_Pos = 0x0
RTC_WPR_KEY_Msk = 0xFF
RTC_WPR_KEY = 0xFF
RTC_SSR_SS_Pos = 0x0
RTC_SSR_SS_Msk = 0xFFFF
RTC_SSR_SS = 0xFFFF
RTC_SHIFTR_SUBFS_Pos = 0x0
RTC_SHIFTR_SUBFS_Msk = 0x7FFF
RTC_SHIFTR_SUBFS = 0x7FFF
RTC_SHIFTR_ADD1S_Pos = 0x1F
RTC_SHIFTR_ADD1S_Msk = 0x80000000
RTC_SHIFTR_ADD1S = 0x80000000
RTC_TSTR_PM_Pos = 0x16
RTC_TSTR_PM_Msk = 0x400000
RTC_TSTR_PM = 0x400000
RTC_TSTR_HT_Pos = 0x14
RTC_TSTR_HT_Msk = 0x300000
RTC_TSTR_HT = 0x300000
RTC_TSTR_HT_0 = 0x100000
RTC_TSTR_HT_1 = 0x200000
RTC_TSTR_HU_Pos = 0x10
RTC_TSTR_HU_Msk = 0xF0000
RTC_TSTR_HU = 0xF0000
RTC_TSTR_HU_0 = 0x10000
RTC_TSTR_HU_1 = 0x20000
RTC_TSTR_HU_2 = 0x40000
RTC_TSTR_HU_3 = 0x80000
RTC_TSTR_MNT_Pos = 0xC
RTC_TSTR_MNT_Msk = 0x7000
RTC_TSTR_MNT = 0x7000
RTC_TSTR_MNT_0 = 0x1000
RTC_TSTR_MNT_1 = 0x2000
RTC_TSTR_MNT_2 = 0x4000
RTC_TSTR_MNU_Pos = 0x8
RTC_TSTR_MNU_Msk = 0xF00
RTC_TSTR_MNU = 0xF00
RTC_TSTR_MNU_0 = 0x100
RTC_TSTR_MNU_1 = 0x200
RTC_TSTR_MNU_2 = 0x400
RTC_TSTR_MNU_3 = 0x800
RTC_TSTR_ST_Pos = 0x4
RTC_TSTR_ST_Msk = 0x70
RTC_TSTR_ST = 0x70
RTC_TSTR_ST_0 = 0x10
RTC_TSTR_ST_1 = 0x20
RTC_TSTR_ST_2 = 0x40
RTC_TSTR_SU_Pos = 0x0
RTC_TSTR_SU_Msk = 0xF
RTC_TSTR_SU = 0xF
RTC_TSTR_SU_0 = 0x1
RTC_TSTR_SU_1 = 0x2
RTC_TSTR_SU_2 = 0x4
RTC_TSTR_SU_3 = 0x8
RTC_TSDR_WDU_Pos = 0xD
RTC_TSDR_WDU_Msk = 0xE000
RTC_TSDR_WDU = 0xE000
RTC_TSDR_WDU_0 = 0x2000
RTC_TSDR_WDU_1 = 0x4000
RTC_TSDR_WDU_2 = 0x8000
RTC_TSDR_MT_Pos = 0xC
RTC_TSDR_MT_Msk = 0x1000
RTC_TSDR_MT = 0x1000
RTC_TSDR_MU_Pos = 0x8
RTC_TSDR_MU_Msk = 0xF00
RTC_TSDR_MU = 0xF00
RTC_TSDR_MU_0 = 0x100
RTC_TSDR_MU_1 = 0x200
RTC_TSDR_MU_2 = 0x400
RTC_TSDR_MU_3 = 0x800
RTC_TSDR_DT_Pos = 0x4
RTC_TSDR_DT_Msk = 0x30
RTC_TSDR_DT = 0x30
RTC_TSDR_DT_0 = 0x10
RTC_TSDR_DT_1 = 0x20
RTC_TSDR_DU_Pos = 0x0
RTC_TSDR_DU_Msk = 0xF
RTC_TSDR_DU = 0xF
RTC_TSDR_DU_0 = 0x1
RTC_TSDR_DU_1 = 0x2
RTC_TSDR_DU_2 = 0x4
RTC_TSDR_DU_3 = 0x8
RTC_TSSSR_SS_Pos = 0x0
RTC_TSSSR_SS_Msk = 0xFFFF
RTC_TSSSR_SS = 0xFFFF
RTC_CALR_CALP_Pos = 0xF
RTC_CALR_CALP_Msk = 0x8000
RTC_CALR_CALP = 0x8000
RTC_CALR_CALW8_Pos = 0xE
RTC_CALR_CALW8_Msk = 0x4000
RTC_CALR_CALW8 = 0x4000
RTC_CALR_CALW16_Pos = 0xD
RTC_CALR_CALW16_Msk = 0x2000
RTC_CALR_CALW16 = 0x2000
RTC_CALR_CALM_Pos = 0x0
RTC_CALR_CALM_Msk = 0x1FF
RTC_CALR_CALM = 0x1FF
RTC_CALR_CALM_0 = 0x1
RTC_CALR_CALM_1 = 0x2
RTC_CALR_CALM_2 = 0x4
RTC_CALR_CALM_3 = 0x8
RTC_CALR_CALM_4 = 0x10
RTC_CALR_CALM_5 = 0x20
RTC_CALR_CALM_6 = 0x40
RTC_CALR_CALM_7 = 0x80
RTC_CALR_CALM_8 = 0x100
RTC_CAL_CALP = 0x8000
RTC_CAL_CALW8 = 0x4000
RTC_CAL_CALW16 = 0x2000
RTC_CAL_CALM = 0x1FF
RTC_CAL_CALM_0 = 0x1
RTC_CAL_CALM_1 = 0x2
RTC_CAL_CALM_2 = 0x4
RTC_CAL_CALM_3 = 0x8
RTC_CAL_CALM_4 = 0x10
RTC_CAL_CALM_5 = 0x20
RTC_CAL_CALM_6 = 0x40
RTC_CAL_CALM_7 = 0x80
RTC_CAL_CALM_8 = 0x100
RTC_TAMPCR_TAMP2MF_Pos = 0x15
RTC_TAMPCR_TAMP2MF_Msk = 0x200000
RTC_TAMPCR_TAMP2MF = 0x200000
RTC_TAMPCR_TAMP2NOERASE_Pos = 0x14
RTC_TAMPCR_TAMP2NOERASE_Msk = 0x100000
RTC_TAMPCR_TAMP2NOERASE = 0x100000
RTC_TAMPCR_TAMP2IE_Pos = 0x13
RTC_TAMPCR_TAMP2IE_Msk = 0x80000
RTC_TAMPCR_TAMP2IE = 0x80000
RTC_TAMPCR_TAMP1MF_Pos = 0x12
RTC_TAMPCR_TAMP1MF_Msk = 0x40000
RTC_TAMPCR_TAMP1MF = 0x40000
RTC_TAMPCR_TAMP1NOERASE_Pos = 0x11
RTC_TAMPCR_TAMP1NOERASE_Msk = 0x20000
RTC_TAMPCR_TAMP1NOERASE = 0x20000
RTC_TAMPCR_TAMP1IE_Pos = 0x10
RTC_TAMPCR_TAMP1IE_Msk = 0x10000
RTC_TAMPCR_TAMP1IE = 0x10000
RTC_TAMPCR_TAMPPUDIS_Pos = 0xF
RTC_TAMPCR_TAMPPUDIS_Msk = 0x8000
RTC_TAMPCR_TAMPPUDIS = 0x8000
RTC_TAMPCR_TAMPPRCH_Pos = 0xD
RTC_TAMPCR_TAMPPRCH_Msk = 0x6000
RTC_TAMPCR_TAMPPRCH = 0x6000
RTC_TAMPCR_TAMPPRCH_0 = 0x2000
RTC_TAMPCR_TAMPPRCH_1 = 0x4000
RTC_TAMPCR_TAMPFLT_Pos = 0xB
RTC_TAMPCR_TAMPFLT_Msk = 0x1800
RTC_TAMPCR_TAMPFLT = 0x1800
RTC_TAMPCR_TAMPFLT_0 = 0x800
RTC_TAMPCR_TAMPFLT_1 = 0x1000
RTC_TAMPCR_TAMPFREQ_Pos = 0x8
RTC_TAMPCR_TAMPFREQ_Msk = 0x700
RTC_TAMPCR_TAMPFREQ = 0x700
RTC_TAMPCR_TAMPFREQ_0 = 0x100
RTC_TAMPCR_TAMPFREQ_1 = 0x200
RTC_TAMPCR_TAMPFREQ_2 = 0x400
RTC_TAMPCR_TAMPTS_Pos = 0x7
RTC_TAMPCR_TAMPTS_Msk = 0x80
RTC_TAMPCR_TAMPTS = 0x80
RTC_TAMPCR_TAMP2TRG_Pos = 0x4
RTC_TAMPCR_TAMP2TRG_Msk = 0x10
RTC_TAMPCR_TAMP2TRG = 0x10
RTC_TAMPCR_TAMP2E_Pos = 0x3
RTC_TAMPCR_TAMP2E_Msk = 0x8
RTC_TAMPCR_TAMP2E = 0x8
RTC_TAMPCR_TAMPIE_Pos = 0x2
RTC_TAMPCR_TAMPIE_Msk = 0x4
RTC_TAMPCR_TAMPIE = 0x4
RTC_TAMPCR_TAMP1TRG_Pos = 0x1
RTC_TAMPCR_TAMP1TRG_Msk = 0x2
RTC_TAMPCR_TAMP1TRG = 0x2
RTC_TAMPCR_TAMP1E_Pos = 0x0
RTC_TAMPCR_TAMP1E_Msk = 0x1
RTC_TAMPCR_TAMP1E = 0x1
RTC_ALRMASSR_MASKSS_Pos = 0x18
RTC_ALRMASSR_MASKSS_Msk = 0xF000000
RTC_ALRMASSR_MASKSS = 0xF000000
RTC_ALRMASSR_MASKSS_0 = 0x1000000
RTC_ALRMASSR_MASKSS_1 = 0x2000000
RTC_ALRMASSR_MASKSS_2 = 0x4000000
RTC_ALRMASSR_MASKSS_3 = 0x8000000
RTC_ALRMASSR_SS_Pos = 0x0
RTC_ALRMASSR_SS_Msk = 0x7FFF
RTC_ALRMASSR_SS = 0x7FFF
RTC_ALRMBSSR_MASKSS_Pos = 0x18
RTC_ALRMBSSR_MASKSS_Msk = 0xF000000
RTC_ALRMBSSR_MASKSS = 0xF000000
RTC_ALRMBSSR_MASKSS_0 = 0x1000000
RTC_ALRMBSSR_MASKSS_1 = 0x2000000
RTC_ALRMBSSR_MASKSS_2 = 0x4000000
RTC_ALRMBSSR_MASKSS_3 = 0x8000000
RTC_ALRMBSSR_SS_Pos = 0x0
RTC_ALRMBSSR_SS_Msk = 0x7FFF
RTC_ALRMBSSR_SS = 0x7FFF
RTC_OR_OUT_RMP_Pos = 0x1
RTC_OR_OUT_RMP_Msk = 0x2
RTC_OR_OUT_RMP = 0x2
RTC_OR_ALARMOUTTYPE_Pos = 0x0
RTC_OR_ALARMOUTTYPE_Msk = 0x1
RTC_OR_ALARMOUTTYPE = 0x1
RTC_OR_RTC_OUT_RMP = 0x2
RTC_BKP0R_Pos = 0x0
RTC_BKP0R_Msk = 0xFFFFFFFF
RTC_BKP0R = 0xFFFFFFFF
RTC_BKP1R_Pos = 0x0
RTC_BKP1R_Msk = 0xFFFFFFFF
RTC_BKP1R = 0xFFFFFFFF
RTC_BKP2R_Pos = 0x0
RTC_BKP2R_Msk = 0xFFFFFFFF
RTC_BKP2R = 0xFFFFFFFF
RTC_BKP3R_Pos = 0x0
RTC_BKP3R_Msk = 0xFFFFFFFF
RTC_BKP3R = 0xFFFFFFFF
RTC_BKP4R_Pos = 0x0
RTC_BKP4R_Msk = 0xFFFFFFFF
RTC_BKP4R = 0xFFFFFFFF
RTC_BKP_NUMBER = 0x5
# Skip SPI_I2S_SUPPORT : no need parse
SPI_CR1_CPHA_Pos = 0x0
SPI_CR1_CPHA_Msk = 0x1
SPI_CR1_CPHA = 0x1
SPI_CR1_CPOL_Pos = 0x1
SPI_CR1_CPOL_Msk = 0x2
SPI_CR1_CPOL = 0x2
SPI_CR1_MSTR_Pos = 0x2
SPI_CR1_MSTR_Msk = 0x4
SPI_CR1_MSTR = 0x4
SPI_CR1_BR_Pos = 0x3
SPI_CR1_BR_Msk = 0x38
SPI_CR1_BR = 0x38
SPI_CR1_BR_0 = 0x8
SPI_CR1_BR_1 = 0x10
SPI_CR1_BR_2 = 0x20
SPI_CR1_SPE_Pos = 0x6
SPI_CR1_SPE_Msk = 0x40
SPI_CR1_SPE = 0x40
SPI_CR1_LSBFIRST_Pos = 0x7
SPI_CR1_LSBFIRST_Msk = 0x80
SPI_CR1_LSBFIRST = 0x80
SPI_CR1_SSI_Pos = 0x8
SPI_CR1_SSI_Msk = 0x100
SPI_CR1_SSI = 0x100
SPI_CR1_SSM_Pos = 0x9
SPI_CR1_SSM_Msk = 0x200
SPI_CR1_SSM = 0x200
SPI_CR1_RXONLY_Pos = 0xA
SPI_CR1_RXONLY_Msk = 0x400
SPI_CR1_RXONLY = 0x400
SPI_CR1_DFF_Pos = 0xB
SPI_CR1_DFF_Msk = 0x800
SPI_CR1_DFF = 0x800
SPI_CR1_CRCNEXT_Pos = 0xC
SPI_CR1_CRCNEXT_Msk = 0x1000
SPI_CR1_CRCNEXT = 0x1000
SPI_CR1_CRCEN_Pos = 0xD
SPI_CR1_CRCEN_Msk = 0x2000
SPI_CR1_CRCEN = 0x2000
SPI_CR1_BIDIOE_Pos = 0xE
SPI_CR1_BIDIOE_Msk = 0x4000
SPI_CR1_BIDIOE = 0x4000
SPI_CR1_BIDIMODE_Pos = 0xF
SPI_CR1_BIDIMODE_Msk = 0x8000
SPI_CR1_BIDIMODE = 0x8000
SPI_CR2_RXDMAEN_Pos = 0x0
SPI_CR2_RXDMAEN_Msk = 0x1
SPI_CR2_RXDMAEN = 0x1
SPI_CR2_TXDMAEN_Pos = 0x1
SPI_CR2_TXDMAEN_Msk = 0x2
SPI_CR2_TXDMAEN = 0x2
SPI_CR2_SSOE_Pos = 0x2
SPI_CR2_SSOE_Msk = 0x4
SPI_CR2_SSOE = 0x4
SPI_CR2_FRF_Pos = 0x4
SPI_CR2_FRF_Msk = 0x10
SPI_CR2_FRF = 0x10
SPI_CR2_ERRIE_Pos = 0x5
SPI_CR2_ERRIE_Msk = 0x20
SPI_CR2_ERRIE = 0x20
SPI_CR2_RXNEIE_Pos = 0x6
SPI_CR2_RXNEIE_Msk = 0x40
SPI_CR2_RXNEIE = 0x40
SPI_CR2_TXEIE_Pos = 0x7
SPI_CR2_TXEIE_Msk = 0x80
SPI_CR2_TXEIE = 0x80
SPI_SR_RXNE_Pos = 0x0
SPI_SR_RXNE_Msk = 0x1
SPI_SR_RXNE = 0x1
SPI_SR_TXE_Pos = 0x1
SPI_SR_TXE_Msk = 0x2
SPI_SR_TXE = 0x2
SPI_SR_CHSIDE_Pos = 0x2
SPI_SR_CHSIDE_Msk = 0x4
SPI_SR_CHSIDE = 0x4
SPI_SR_UDR_Pos = 0x3
SPI_SR_UDR_Msk = 0x8
SPI_SR_UDR = 0x8
SPI_SR_CRCERR_Pos = 0x4
SPI_SR_CRCERR_Msk = 0x10
SPI_SR_CRCERR = 0x10
SPI_SR_MODF_Pos = 0x5
SPI_SR_MODF_Msk = 0x20
SPI_SR_MODF = 0x20
SPI_SR_OVR_Pos = 0x6
SPI_SR_OVR_Msk = 0x40
SPI_SR_OVR = 0x40
SPI_SR_BSY_Pos = 0x7
SPI_SR_BSY_Msk = 0x80
SPI_SR_BSY = 0x80
SPI_SR_FRE_Pos = 0x8
SPI_SR_FRE_Msk = 0x100
SPI_SR_FRE = 0x100
SPI_DR_DR_Pos = 0x0
SPI_DR_DR_Msk = 0xFFFF
SPI_DR_DR = 0xFFFF
SPI_CRCPR_CRCPOLY_Pos = 0x0
SPI_CRCPR_CRCPOLY_Msk = 0xFFFF
SPI_CRCPR_CRCPOLY = 0xFFFF
SPI_RXCRCR_RXCRC_Pos = 0x0
SPI_RXCRCR_RXCRC_Msk = 0xFFFF
SPI_RXCRCR_RXCRC = 0xFFFF
SPI_TXCRCR_TXCRC_Pos = 0x0
SPI_TXCRCR_TXCRC_Msk = 0xFFFF
SPI_TXCRCR_TXCRC = 0xFFFF
SPI_I2SCFGR_CHLEN_Pos = 0x0
SPI_I2SCFGR_CHLEN_Msk = 0x1
SPI_I2SCFGR_CHLEN = 0x1
SPI_I2SCFGR_DATLEN_Pos = 0x1
SPI_I2SCFGR_DATLEN_Msk = 0x6
SPI_I2SCFGR_DATLEN = 0x6
SPI_I2SCFGR_DATLEN_0 = 0x2
SPI_I2SCFGR_DATLEN_1 = 0x4
SPI_I2SCFGR_CKPOL_Pos = 0x3
SPI_I2SCFGR_CKPOL_Msk = 0x8
SPI_I2SCFGR_CKPOL = 0x8
SPI_I2SCFGR_I2SSTD_Pos = 0x4
SPI_I2SCFGR_I2SSTD_Msk = 0x30
SPI_I2SCFGR_I2SSTD = 0x30
SPI_I2SCFGR_I2SSTD_0 = 0x10
SPI_I2SCFGR_I2SSTD_1 = 0x20
SPI_I2SCFGR_PCMSYNC_Pos = 0x7
SPI_I2SCFGR_PCMSYNC_Msk = 0x80
SPI_I2SCFGR_PCMSYNC = 0x80
SPI_I2SCFGR_I2SCFG_Pos = 0x8
SPI_I2SCFGR_I2SCFG_Msk = 0x300
SPI_I2SCFGR_I2SCFG = 0x300
SPI_I2SCFGR_I2SCFG_0 = 0x100
SPI_I2SCFGR_I2SCFG_1 = 0x200
SPI_I2SCFGR_I2SE_Pos = 0xA
SPI_I2SCFGR_I2SE_Msk = 0x400
SPI_I2SCFGR_I2SE = 0x400
SPI_I2SCFGR_I2SMOD_Pos = 0xB
SPI_I2SCFGR_I2SMOD_Msk = 0x800
SPI_I2SCFGR_I2SMOD = 0x800
SPI_I2SPR_I2SDIV_Pos = 0x0
SPI_I2SPR_I2SDIV_Msk = 0xFF
SPI_I2SPR_I2SDIV = 0xFF
SPI_I2SPR_ODD_Pos = 0x8
SPI_I2SPR_ODD_Msk = 0x100
SPI_I2SPR_ODD = 0x100
SPI_I2SPR_MCKOE_Pos = 0x9
SPI_I2SPR_MCKOE_Msk = 0x200
SPI_I2SPR_MCKOE = 0x200
SYSCFG_CFGR1_MEM_MODE_Pos = 0x0
SYSCFG_CFGR1_MEM_MODE_Msk = 0x3
SYSCFG_CFGR1_MEM_MODE = 0x3
SYSCFG_CFGR1_MEM_MODE_0 = 0x1
SYSCFG_CFGR1_MEM_MODE_1 = 0x2
SYSCFG_CFGR1_BOOT_MODE_Pos = 0x8
SYSCFG_CFGR1_BOOT_MODE_Msk = 0x300
SYSCFG_CFGR1_BOOT_MODE = 0x300
SYSCFG_CFGR1_BOOT_MODE_0 = 0x100
SYSCFG_CFGR1_BOOT_MODE_1 = 0x200
SYSCFG_CFGR2_FWDISEN_Pos = 0x0
SYSCFG_CFGR2_FWDISEN_Msk = 0x1
SYSCFG_CFGR2_FWDISEN = 0x1
SYSCFG_CFGR2_CAPA_Pos = 0x1
SYSCFG_CFGR2_CAPA_Msk = 0xE
SYSCFG_CFGR2_CAPA = 0xE
SYSCFG_CFGR2_CAPA_0 = 0x2
SYSCFG_CFGR2_CAPA_1 = 0x4
SYSCFG_CFGR2_CAPA_2 = 0x8
SYSCFG_CFGR2_I2C_PB6_FMP_Pos = 0x8
SYSCFG_CFGR2_I2C_PB6_FMP_Msk = 0x100
SYSCFG_CFGR2_I2C_PB6_FMP = 0x100
SYSCFG_CFGR2_I2C_PB7_FMP_Pos = 0x9
SYSCFG_CFGR2_I2C_PB7_FMP_Msk = 0x200
SYSCFG_CFGR2_I2C_PB7_FMP = 0x200
SYSCFG_CFGR2_I2C_PB8_FMP_Pos = 0xA
SYSCFG_CFGR2_I2C_PB8_FMP_Msk = 0x400
SYSCFG_CFGR2_I2C_PB8_FMP = 0x400
SYSCFG_CFGR2_I2C_PB9_FMP_Pos = 0xB
SYSCFG_CFGR2_I2C_PB9_FMP_Msk = 0x800
SYSCFG_CFGR2_I2C_PB9_FMP = 0x800
SYSCFG_CFGR2_I2C1_FMP_Pos = 0xC
SYSCFG_CFGR2_I2C1_FMP_Msk = 0x1000
SYSCFG_CFGR2_I2C1_FMP = 0x1000
SYSCFG_CFGR2_I2C2_FMP_Pos = 0xD
SYSCFG_CFGR2_I2C2_FMP_Msk = 0x2000
SYSCFG_CFGR2_I2C2_FMP = 0x2000
SYSCFG_EXTICR1_EXTI0_Pos = 0x0
SYSCFG_EXTICR1_EXTI0_Msk = 0xF
SYSCFG_EXTICR1_EXTI0 = 0xF
SYSCFG_EXTICR1_EXTI1_Pos = 0x4
SYSCFG_EXTICR1_EXTI1_Msk = 0xF0
SYSCFG_EXTICR1_EXTI1 = 0xF0
SYSCFG_EXTICR1_EXTI2_Pos = 0x8
SYSCFG_EXTICR1_EXTI2_Msk = 0xF00
SYSCFG_EXTICR1_EXTI2 = 0xF00
SYSCFG_EXTICR1_EXTI3_Pos = 0xC
SYSCFG_EXTICR1_EXTI3_Msk = 0xF000
SYSCFG_EXTICR1_EXTI3 = 0xF000
SYSCFG_EXTICR1_EXTI0_PA = 0x0
SYSCFG_EXTICR1_EXTI0_PB = 0x1
SYSCFG_EXTICR1_EXTI0_PC = 0x2
SYSCFG_EXTICR1_EXTI0_PH = 0x5
SYSCFG_EXTICR1_EXTI1_PA = 0x0
SYSCFG_EXTICR1_EXTI1_PB = 0x10
SYSCFG_EXTICR1_EXTI1_PC = 0x20
SYSCFG_EXTICR1_EXTI1_PH = 0x50
SYSCFG_EXTICR1_EXTI2_PA = 0x0
SYSCFG_EXTICR1_EXTI2_PB = 0x100
SYSCFG_EXTICR1_EXTI2_PC = 0x200
SYSCFG_EXTICR1_EXTI2_PD = 0x300
SYSCFG_EXTICR1_EXTI3_PA = 0x0
SYSCFG_EXTICR1_EXTI3_PB = 0x1000
SYSCFG_EXTICR1_EXTI3_PC = 0x2000
SYSCFG_EXTICR2_EXTI4_Pos = 0x0
SYSCFG_EXTICR2_EXTI4_Msk = 0xF
SYSCFG_EXTICR2_EXTI4 = 0xF
SYSCFG_EXTICR2_EXTI5_Pos = 0x4
SYSCFG_EXTICR2_EXTI5_Msk = 0xF0
SYSCFG_EXTICR2_EXTI5 = 0xF0
SYSCFG_EXTICR2_EXTI6_Pos = 0x8
SYSCFG_EXTICR2_EXTI6_Msk = 0xF00
SYSCFG_EXTICR2_EXTI6 = 0xF00
SYSCFG_EXTICR2_EXTI7_Pos = 0xC
SYSCFG_EXTICR2_EXTI7_Msk = 0xF000
SYSCFG_EXTICR2_EXTI7 = 0xF000
SYSCFG_EXTICR2_EXTI4_PA = 0x0
SYSCFG_EXTICR2_EXTI4_PB = 0x1
SYSCFG_EXTICR2_EXTI4_PC = 0x2
SYSCFG_EXTICR2_EXTI5_PA = 0x0
SYSCFG_EXTICR2_EXTI5_PB = 0x10
SYSCFG_EXTICR2_EXTI5_PC = 0x20
SYSCFG_EXTICR2_EXTI6_PA = 0x0
SYSCFG_EXTICR2_EXTI6_PB = 0x100
SYSCFG_EXTICR2_EXTI6_PC = 0x200
SYSCFG_EXTICR2_EXTI7_PA = 0x0
SYSCFG_EXTICR2_EXTI7_PB = 0x1000
SYSCFG_EXTICR2_EXTI7_PC = 0x2000
SYSCFG_EXTICR3_EXTI8_Pos = 0x0
SYSCFG_EXTICR3_EXTI8_Msk = 0xF
SYSCFG_EXTICR3_EXTI8 = 0xF
SYSCFG_EXTICR3_EXTI9_Pos = 0x4
SYSCFG_EXTICR3_EXTI9_Msk = 0xF0
SYSCFG_EXTICR3_EXTI9 = 0xF0
SYSCFG_EXTICR3_EXTI10_Pos = 0x8
SYSCFG_EXTICR3_EXTI10_Msk = 0xF00
SYSCFG_EXTICR3_EXTI10 = 0xF00
SYSCFG_EXTICR3_EXTI11_Pos = 0xC
SYSCFG_EXTICR3_EXTI11_Msk = 0xF000
SYSCFG_EXTICR3_EXTI11 = 0xF000
SYSCFG_EXTICR3_EXTI8_PA = 0x0
SYSCFG_EXTICR3_EXTI8_PB = 0x1
SYSCFG_EXTICR3_EXTI8_PC = 0x2
SYSCFG_EXTICR3_EXTI9_PA = 0x0
SYSCFG_EXTICR3_EXTI9_PB = 0x10
SYSCFG_EXTICR3_EXTI9_PC = 0x20
SYSCFG_EXTICR3_EXTI10_PA = 0x0
SYSCFG_EXTICR3_EXTI10_PB = 0x100
SYSCFG_EXTICR3_EXTI10_PC = 0x200
SYSCFG_EXTICR3_EXTI11_PA = 0x0
SYSCFG_EXTICR3_EXTI11_PB = 0x1000
SYSCFG_EXTICR3_EXTI11_PC = 0x2000
SYSCFG_EXTICR4_EXTI12_Pos = 0x0
SYSCFG_EXTICR4_EXTI12_Msk = 0xF
SYSCFG_EXTICR4_EXTI12 = 0xF
SYSCFG_EXTICR4_EXTI13_Pos = 0x4
SYSCFG_EXTICR4_EXTI13_Msk = 0xF0
SYSCFG_EXTICR4_EXTI13 = 0xF0
SYSCFG_EXTICR4_EXTI14_Pos = 0x8
SYSCFG_EXTICR4_EXTI14_Msk = 0xF00
SYSCFG_EXTICR4_EXTI14 = 0xF00
SYSCFG_EXTICR4_EXTI15_Pos = 0xC
SYSCFG_EXTICR4_EXTI15_Msk = 0xF000
SYSCFG_EXTICR4_EXTI15 = 0xF000
SYSCFG_EXTICR4_EXTI12_PA = 0x0
SYSCFG_EXTICR4_EXTI12_PB = 0x1
SYSCFG_EXTICR4_EXTI12_PC = 0x2
SYSCFG_EXTICR4_EXTI13_PA = 0x0
SYSCFG_EXTICR4_EXTI13_PB = 0x10
SYSCFG_EXTICR4_EXTI13_PC = 0x20
SYSCFG_EXTICR4_EXTI14_PA = 0x0
SYSCFG_EXTICR4_EXTI14_PB = 0x100
SYSCFG_EXTICR4_EXTI14_PC = 0x200
SYSCFG_EXTICR4_EXTI15_PA = 0x0
SYSCFG_EXTICR4_EXTI15_PB = 0x1000
SYSCFG_EXTICR4_EXTI15_PC = 0x2000
SYSCFG_CFGR3_EN_VREFINT_Pos = 0x0
SYSCFG_CFGR3_EN_VREFINT_Msk = 0x1
SYSCFG_CFGR3_EN_VREFINT = 0x1
SYSCFG_CFGR3_VREF_OUT_Pos = 0x4
SYSCFG_CFGR3_VREF_OUT_Msk = 0x30
SYSCFG_CFGR3_VREF_OUT = 0x30
SYSCFG_CFGR3_VREF_OUT_0 = 0x10
SYSCFG_CFGR3_VREF_OUT_1 = 0x20
SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Pos = 0x8
SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Msk = 0x100
SYSCFG_CFGR3_ENBUF_VREFINT_ADC = 0x100
SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Pos = 0x9
SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Msk = 0x200
SYSCFG_CFGR3_ENBUF_SENSOR_ADC = 0x200
SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Pos = 0xC
SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Msk = 0x1000
SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP = 0x1000
SYSCFG_CFGR3_ENREF_HSI48_Pos = 0xD
SYSCFG_CFGR3_ENREF_HSI48_Msk = 0x2000
SYSCFG_CFGR3_ENREF_HSI48 = 0x2000
SYSCFG_CFGR3_VREFINT_RDYF_Pos = 0x1E
SYSCFG_CFGR3_VREFINT_RDYF_Msk = 0x40000000
SYSCFG_CFGR3_VREFINT_RDYF = 0x40000000
SYSCFG_CFGR3_REF_LOCK_Pos = 0x1F
SYSCFG_CFGR3_REF_LOCK_Msk = 0x80000000
SYSCFG_CFGR3_REF_LOCK = 0x80000000
SYSCFG_CFGR3_EN_BGAP = 0x1
SYSCFG_CFGR3_ENBUF_BGAP_ADC = 0x100
SYSCFG_CFGR3_ENBUFLP_BGAP_COMP = 0x1000
SYSCFG_CFGR3_ENREF_RC48MHz = 0x2000
SYSCFG_CFGR3_REF_RC48MHz_RDYF = 0x40000000
SYSCFG_CFGR3_REF_HSI48_RDYF = 0x40000000
SYSCFG_VREFINT_ADC_RDYF = 0x40000000
SYSCFG_CFGR3_SENSOR_ADC_RDYF = 0x40000000
SYSCFG_CFGR3_VREFINT_ADC_RDYF = 0x40000000
SYSCFG_CFGR3_VREFINT_COMP_RDYF = 0x40000000
# Skip TIM_TIM2_REMAP_HSI_SUPPORT : no need parse
# Skip TIM_TIM2_REMAP_HSI48_SUPPORT : no need parse
# Skip TIM_TIM2_REMAP_HSI48_SUPPORT : no need parse
TIM_CR1_CEN_Pos = 0x0
TIM_CR1_CEN_Msk = 0x1
TIM_CR1_CEN = 0x1
TIM_CR1_UDIS_Pos = 0x1
TIM_CR1_UDIS_Msk = 0x2
TIM_CR1_UDIS = 0x2
TIM_CR1_URS_Pos = 0x2
TIM_CR1_URS_Msk = 0x4
TIM_CR1_URS = 0x4
TIM_CR1_OPM_Pos = 0x3
TIM_CR1_OPM_Msk = 0x8
TIM_CR1_OPM = 0x8
TIM_CR1_DIR_Pos = 0x4
TIM_CR1_DIR_Msk = 0x10
TIM_CR1_DIR = 0x10
TIM_CR1_CMS_Pos = 0x5
TIM_CR1_CMS_Msk = 0x60
TIM_CR1_CMS = 0x60
TIM_CR1_CMS_0 = 0x20
TIM_CR1_CMS_1 = 0x40
TIM_CR1_ARPE_Pos = 0x7
TIM_CR1_ARPE_Msk = 0x80
TIM_CR1_ARPE = 0x80
TIM_CR1_CKD_Pos = 0x8
TIM_CR1_CKD_Msk = 0x300
TIM_CR1_CKD = 0x300
TIM_CR1_CKD_0 = 0x100
TIM_CR1_CKD_1 = 0x200
TIM_CR2_CCDS_Pos = 0x3
TIM_CR2_CCDS_Msk = 0x8
TIM_CR2_CCDS = 0x8
TIM_CR2_MMS_Pos = 0x4
TIM_CR2_MMS_Msk = 0x70
TIM_CR2_MMS = 0x70
TIM_CR2_MMS_0 = 0x10
TIM_CR2_MMS_1 = 0x20
TIM_CR2_MMS_2 = 0x40
TIM_CR2_TI1S_Pos = 0x7
TIM_CR2_TI1S_Msk = 0x80
TIM_CR2_TI1S = 0x80
TIM_SMCR_SMS_Pos = 0x0
TIM_SMCR_SMS_Msk = 0x7
TIM_SMCR_SMS = 0x7
TIM_SMCR_SMS_0 = 0x1
TIM_SMCR_SMS_1 = 0x2
TIM_SMCR_SMS_2 = 0x4
TIM_SMCR_TS_Pos = 0x4
TIM_SMCR_TS_Msk = 0x70
TIM_SMCR_TS = 0x70
TIM_SMCR_TS_0 = 0x10
TIM_SMCR_TS_1 = 0x20
TIM_SMCR_TS_2 = 0x40
TIM_SMCR_MSM_Pos = 0x7
TIM_SMCR_MSM_Msk = 0x80
TIM_SMCR_MSM = 0x80
TIM_SMCR_ETF_Pos = 0x8
TIM_SMCR_ETF_Msk = 0xF00
TIM_SMCR_ETF = 0xF00
TIM_SMCR_ETF_0 = 0x100
TIM_SMCR_ETF_1 = 0x200
TIM_SMCR_ETF_2 = 0x400
TIM_SMCR_ETF_3 = 0x800
TIM_SMCR_ETPS_Pos = 0xC
TIM_SMCR_ETPS_Msk = 0x3000
TIM_SMCR_ETPS = 0x3000
TIM_SMCR_ETPS_0 = 0x1000
TIM_SMCR_ETPS_1 = 0x2000
TIM_SMCR_ECE_Pos = 0xE
TIM_SMCR_ECE_Msk = 0x4000
TIM_SMCR_ECE = 0x4000
TIM_SMCR_ETP_Pos = 0xF
TIM_SMCR_ETP_Msk = 0x8000
TIM_SMCR_ETP = 0x8000
TIM_DIER_UIE_Pos = 0x0
TIM_DIER_UIE_Msk = 0x1
TIM_DIER_UIE = 0x1
TIM_DIER_CC1IE_Pos = 0x1
TIM_DIER_CC1IE_Msk = 0x2
TIM_DIER_CC1IE = 0x2
TIM_DIER_CC2IE_Pos = 0x2
TIM_DIER_CC2IE_Msk = 0x4
TIM_DIER_CC2IE = 0x4
TIM_DIER_CC3IE_Pos = 0x3
TIM_DIER_CC3IE_Msk = 0x8
TIM_DIER_CC3IE = 0x8
TIM_DIER_CC4IE_Pos = 0x4
TIM_DIER_CC4IE_Msk = 0x10
TIM_DIER_CC4IE = 0x10
TIM_DIER_TIE_Pos = 0x6
TIM_DIER_TIE_Msk = 0x40
TIM_DIER_TIE = 0x40
TIM_DIER_UDE_Pos = 0x8
TIM_DIER_UDE_Msk = 0x100
TIM_DIER_UDE = 0x100
TIM_DIER_CC1DE_Pos = 0x9
TIM_DIER_CC1DE_Msk = 0x200
TIM_DIER_CC1DE = 0x200
TIM_DIER_CC2DE_Pos = 0xA
TIM_DIER_CC2DE_Msk = 0x400
TIM_DIER_CC2DE = 0x400
TIM_DIER_CC3DE_Pos = 0xB
TIM_DIER_CC3DE_Msk = 0x800
TIM_DIER_CC3DE = 0x800
TIM_DIER_CC4DE_Pos = 0xC
TIM_DIER_CC4DE_Msk = 0x1000
TIM_DIER_CC4DE = 0x1000
TIM_DIER_TDE_Pos = 0xE
TIM_DIER_TDE_Msk = 0x4000
TIM_DIER_TDE = 0x4000
TIM_SR_UIF_Pos = 0x0
TIM_SR_UIF_Msk = 0x1
TIM_SR_UIF = 0x1
TIM_SR_CC1IF_Pos = 0x1
TIM_SR_CC1IF_Msk = 0x2
TIM_SR_CC1IF = 0x2
TIM_SR_CC2IF_Pos = 0x2
TIM_SR_CC2IF_Msk = 0x4
TIM_SR_CC2IF = 0x4
TIM_SR_CC3IF_Pos = 0x3
TIM_SR_CC3IF_Msk = 0x8
TIM_SR_CC3IF = 0x8
TIM_SR_CC4IF_Pos = 0x4
TIM_SR_CC4IF_Msk = 0x10
TIM_SR_CC4IF = 0x10
TIM_SR_TIF_Pos = 0x6
TIM_SR_TIF_Msk = 0x40
TIM_SR_TIF = 0x40
TIM_SR_CC1OF_Pos = 0x9
TIM_SR_CC1OF_Msk = 0x200
TIM_SR_CC1OF = 0x200
TIM_SR_CC2OF_Pos = 0xA
TIM_SR_CC2OF_Msk = 0x400
TIM_SR_CC2OF = 0x400
TIM_SR_CC3OF_Pos = 0xB
TIM_SR_CC3OF_Msk = 0x800
TIM_SR_CC3OF = 0x800
TIM_SR_CC4OF_Pos = 0xC
TIM_SR_CC4OF_Msk = 0x1000
TIM_SR_CC4OF = 0x1000
TIM_EGR_UG_Pos = 0x0
TIM_EGR_UG_Msk = 0x1
TIM_EGR_UG = 0x1
TIM_EGR_CC1G_Pos = 0x1
TIM_EGR_CC1G_Msk = 0x2
TIM_EGR_CC1G = 0x2
TIM_EGR_CC2G_Pos = 0x2
TIM_EGR_CC2G_Msk = 0x4
TIM_EGR_CC2G = 0x4
TIM_EGR_CC3G_Pos = 0x3
TIM_EGR_CC3G_Msk = 0x8
TIM_EGR_CC3G = 0x8
TIM_EGR_CC4G_Pos = 0x4
TIM_EGR_CC4G_Msk = 0x10
TIM_EGR_CC4G = 0x10
TIM_EGR_TG_Pos = 0x6
TIM_EGR_TG_Msk = 0x40
TIM_EGR_TG = 0x40
TIM_CCMR1_CC1S_Pos = 0x0
TIM_CCMR1_CC1S_Msk = 0x3
TIM_CCMR1_CC1S = 0x3
TIM_CCMR1_CC1S_0 = 0x1
TIM_CCMR1_CC1S_1 = 0x2
TIM_CCMR1_OC1FE_Pos = 0x2
TIM_CCMR1_OC1FE_Msk = 0x4
TIM_CCMR1_OC1FE = 0x4
TIM_CCMR1_OC1PE_Pos = 0x3
TIM_CCMR1_OC1PE_Msk = 0x8
TIM_CCMR1_OC1PE = 0x8
TIM_CCMR1_OC1M_Pos = 0x4
TIM_CCMR1_OC1M_Msk = 0x70
TIM_CCMR1_OC1M = 0x70
TIM_CCMR1_OC1M_0 = 0x10
TIM_CCMR1_OC1M_1 = 0x20
TIM_CCMR1_OC1M_2 = 0x40
TIM_CCMR1_OC1CE_Pos = 0x7
TIM_CCMR1_OC1CE_Msk = 0x80
TIM_CCMR1_OC1CE = 0x80
TIM_CCMR1_CC2S_Pos = 0x8
TIM_CCMR1_CC2S_Msk = 0x300
TIM_CCMR1_CC2S = 0x300
TIM_CCMR1_CC2S_0 = 0x100
TIM_CCMR1_CC2S_1 = 0x200
TIM_CCMR1_OC2FE_Pos = 0xA
TIM_CCMR1_OC2FE_Msk = 0x400
TIM_CCMR1_OC2FE = 0x400
TIM_CCMR1_OC2PE_Pos = 0xB
TIM_CCMR1_OC2PE_Msk = 0x800
TIM_CCMR1_OC2PE = 0x800
TIM_CCMR1_OC2M_Pos = 0xC
TIM_CCMR1_OC2M_Msk = 0x7000
TIM_CCMR1_OC2M = 0x7000
TIM_CCMR1_OC2M_0 = 0x1000
TIM_CCMR1_OC2M_1 = 0x2000
TIM_CCMR1_OC2M_2 = 0x4000
TIM_CCMR1_OC2CE_Pos = 0xF
TIM_CCMR1_OC2CE_Msk = 0x8000
TIM_CCMR1_OC2CE = 0x8000
TIM_CCMR1_IC1PSC_Pos = 0x2
TIM_CCMR1_IC1PSC_Msk = 0xC
TIM_CCMR1_IC1PSC = 0xC
TIM_CCMR1_IC1PSC_0 = 0x4
TIM_CCMR1_IC1PSC_1 = 0x8
TIM_CCMR1_IC1F_Pos = 0x4
TIM_CCMR1_IC1F_Msk = 0xF0
TIM_CCMR1_IC1F = 0xF0
TIM_CCMR1_IC1F_0 = 0x10
TIM_CCMR1_IC1F_1 = 0x20
TIM_CCMR1_IC1F_2 = 0x40
TIM_CCMR1_IC1F_3 = 0x80
TIM_CCMR1_IC2PSC_Pos = 0xA
TIM_CCMR1_IC2PSC_Msk = 0xC00
TIM_CCMR1_IC2PSC = 0xC00
TIM_CCMR1_IC2PSC_0 = 0x400
TIM_CCMR1_IC2PSC_1 = 0x800
TIM_CCMR1_IC2F_Pos = 0xC
TIM_CCMR1_IC2F_Msk = 0xF000
TIM_CCMR1_IC2F = 0xF000
TIM_CCMR1_IC2F_0 = 0x1000
TIM_CCMR1_IC2F_1 = 0x2000
TIM_CCMR1_IC2F_2 = 0x4000
TIM_CCMR1_IC2F_3 = 0x8000
TIM_CCMR2_CC3S_Pos = 0x0
TIM_CCMR2_CC3S_Msk = 0x3
TIM_CCMR2_CC3S = 0x3
TIM_CCMR2_CC3S_0 = 0x1
TIM_CCMR2_CC3S_1 = 0x2
TIM_CCMR2_OC3FE_Pos = 0x2
TIM_CCMR2_OC3FE_Msk = 0x4
TIM_CCMR2_OC3FE = 0x4
TIM_CCMR2_OC3PE_Pos = 0x3
TIM_CCMR2_OC3PE_Msk = 0x8
TIM_CCMR2_OC3PE = 0x8
TIM_CCMR2_OC3M_Pos = 0x4
TIM_CCMR2_OC3M_Msk = 0x70
TIM_CCMR2_OC3M = 0x70
TIM_CCMR2_OC3M_0 = 0x10
TIM_CCMR2_OC3M_1 = 0x20
TIM_CCMR2_OC3M_2 = 0x40
TIM_CCMR2_OC3CE_Pos = 0x7
TIM_CCMR2_OC3CE_Msk = 0x80
TIM_CCMR2_OC3CE = 0x80
TIM_CCMR2_CC4S_Pos = 0x8
TIM_CCMR2_CC4S_Msk = 0x300
TIM_CCMR2_CC4S = 0x300
TIM_CCMR2_CC4S_0 = 0x100
TIM_CCMR2_CC4S_1 = 0x200
TIM_CCMR2_OC4FE_Pos = 0xA
TIM_CCMR2_OC4FE_Msk = 0x400
TIM_CCMR2_OC4FE = 0x400
TIM_CCMR2_OC4PE_Pos = 0xB
TIM_CCMR2_OC4PE_Msk = 0x800
TIM_CCMR2_OC4PE = 0x800
TIM_CCMR2_OC4M_Pos = 0xC
TIM_CCMR2_OC4M_Msk = 0x7000
TIM_CCMR2_OC4M = 0x7000
TIM_CCMR2_OC4M_0 = 0x1000
TIM_CCMR2_OC4M_1 = 0x2000
TIM_CCMR2_OC4M_2 = 0x4000
TIM_CCMR2_OC4CE_Pos = 0xF
TIM_CCMR2_OC4CE_Msk = 0x8000
TIM_CCMR2_OC4CE = 0x8000
TIM_CCMR2_IC3PSC_Pos = 0x2
TIM_CCMR2_IC3PSC_Msk = 0xC
TIM_CCMR2_IC3PSC = 0xC
TIM_CCMR2_IC3PSC_0 = 0x4
TIM_CCMR2_IC3PSC_1 = 0x8
TIM_CCMR2_IC3F_Pos = 0x4
TIM_CCMR2_IC3F_Msk = 0xF0
TIM_CCMR2_IC3F = 0xF0
TIM_CCMR2_IC3F_0 = 0x10
TIM_CCMR2_IC3F_1 = 0x20
TIM_CCMR2_IC3F_2 = 0x40
TIM_CCMR2_IC3F_3 = 0x80
TIM_CCMR2_IC4PSC_Pos = 0xA
TIM_CCMR2_IC4PSC_Msk = 0xC00
TIM_CCMR2_IC4PSC = 0xC00
TIM_CCMR2_IC4PSC_0 = 0x400
TIM_CCMR2_IC4PSC_1 = 0x800
TIM_CCMR2_IC4F_Pos = 0xC
TIM_CCMR2_IC4F_Msk = 0xF000
TIM_CCMR2_IC4F = 0xF000
TIM_CCMR2_IC4F_0 = 0x1000
TIM_CCMR2_IC4F_1 = 0x2000
TIM_CCMR2_IC4F_2 = 0x4000
TIM_CCMR2_IC4F_3 = 0x8000
TIM_CCER_CC1E_Pos = 0x0
TIM_CCER_CC1E_Msk = 0x1
TIM_CCER_CC1E = 0x1
TIM_CCER_CC1P_Pos = 0x1
TIM_CCER_CC1P_Msk = 0x2
TIM_CCER_CC1P = 0x2
TIM_CCER_CC1NP_Pos = 0x3
TIM_CCER_CC1NP_Msk = 0x8
TIM_CCER_CC1NP = 0x8
TIM_CCER_CC2E_Pos = 0x4
TIM_CCER_CC2E_Msk = 0x10
TIM_CCER_CC2E = 0x10
TIM_CCER_CC2P_Pos = 0x5
TIM_CCER_CC2P_Msk = 0x20
TIM_CCER_CC2P = 0x20
TIM_CCER_CC2NP_Pos = 0x7
TIM_CCER_CC2NP_Msk = 0x80
TIM_CCER_CC2NP = 0x80
TIM_CCER_CC3E_Pos = 0x8
TIM_CCER_CC3E_Msk = 0x100
TIM_CCER_CC3E = 0x100
TIM_CCER_CC3P_Pos = 0x9
TIM_CCER_CC3P_Msk = 0x200
TIM_CCER_CC3P = 0x200
TIM_CCER_CC3NP_Pos = 0xB
TIM_CCER_CC3NP_Msk = 0x800
TIM_CCER_CC3NP = 0x800
TIM_CCER_CC4E_Pos = 0xC
TIM_CCER_CC4E_Msk = 0x1000
TIM_CCER_CC4E = 0x1000
TIM_CCER_CC4P_Pos = 0xD
TIM_CCER_CC4P_Msk = 0x2000
TIM_CCER_CC4P = 0x2000
TIM_CCER_CC4NP_Pos = 0xF
TIM_CCER_CC4NP_Msk = 0x8000
TIM_CCER_CC4NP = 0x8000
TIM_CNT_CNT_Pos = 0x0
TIM_CNT_CNT_Msk = 0xFFFF
TIM_CNT_CNT = 0xFFFF
TIM_PSC_PSC_Pos = 0x0
TIM_PSC_PSC_Msk = 0xFFFF
TIM_PSC_PSC = 0xFFFF
TIM_ARR_ARR_Pos = 0x0
TIM_ARR_ARR_Msk = 0xFFFF
TIM_ARR_ARR = 0xFFFF
TIM_CCR1_CCR1_Pos = 0x0
TIM_CCR1_CCR1_Msk = 0xFFFF
TIM_CCR1_CCR1 = 0xFFFF
TIM_CCR2_CCR2_Pos = 0x0
TIM_CCR2_CCR2_Msk = 0xFFFF
TIM_CCR2_CCR2 = 0xFFFF
TIM_CCR3_CCR3_Pos = 0x0
TIM_CCR3_CCR3_Msk = 0xFFFF
TIM_CCR3_CCR3 = 0xFFFF
TIM_CCR4_CCR4_Pos = 0x0
TIM_CCR4_CCR4_Msk = 0xFFFF
TIM_CCR4_CCR4 = 0xFFFF
TIM_DCR_DBA_Pos = 0x0
TIM_DCR_DBA_Msk = 0x1F
TIM_DCR_DBA = 0x1F
TIM_DCR_DBA_0 = 0x1
TIM_DCR_DBA_1 = 0x2
TIM_DCR_DBA_2 = 0x4
TIM_DCR_DBA_3 = 0x8
TIM_DCR_DBA_4 = 0x10
TIM_DCR_DBL_Pos = 0x8
TIM_DCR_DBL_Msk = 0x1F00
TIM_DCR_DBL = 0x1F00
TIM_DCR_DBL_0 = 0x100
TIM_DCR_DBL_1 = 0x200
TIM_DCR_DBL_2 = 0x400
TIM_DCR_DBL_3 = 0x800
TIM_DCR_DBL_4 = 0x1000
TIM_DMAR_DMAB_Pos = 0x0
TIM_DMAR_DMAB_Msk = 0xFFFF
TIM_DMAR_DMAB = 0xFFFF
TIM2_OR_ETR_RMP_Pos = 0x0
TIM2_OR_ETR_RMP_Msk = 0x7
TIM2_OR_ETR_RMP = 0x7
TIM2_OR_ETR_RMP_0 = 0x1
TIM2_OR_ETR_RMP_1 = 0x2
TIM2_OR_ETR_RMP_2 = 0x4
TIM2_OR_TI4_RMP_Pos = 0x3
TIM2_OR_TI4_RMP_Msk = 0x18
TIM2_OR_TI4_RMP = 0x18
TIM2_OR_TI4_RMP_0 = 0x8
TIM2_OR_TI4_RMP_1 = 0x10
TIM21_OR_ETR_RMP_Pos = 0x0
TIM21_OR_ETR_RMP_Msk = 0x3
TIM21_OR_ETR_RMP = 0x3
TIM21_OR_ETR_RMP_0 = 0x1
TIM21_OR_ETR_RMP_1 = 0x2
TIM21_OR_TI1_RMP_Pos = 0x2
TIM21_OR_TI1_RMP_Msk = 0x1C
TIM21_OR_TI1_RMP = 0x1C
TIM21_OR_TI1_RMP_0 = 0x4
TIM21_OR_TI1_RMP_1 = 0x8
TIM21_OR_TI1_RMP_2 = 0x10
TIM21_OR_TI2_RMP_Pos = 0x5
TIM21_OR_TI2_RMP_Msk = 0x20
TIM21_OR_TI2_RMP = 0x20
TIM22_OR_ETR_RMP_Pos = 0x0
TIM22_OR_ETR_RMP_Msk = 0x3
TIM22_OR_ETR_RMP = 0x3
TIM22_OR_ETR_RMP_0 = 0x1
TIM22_OR_ETR_RMP_1 = 0x2
TIM22_OR_TI1_RMP_Pos = 0x2
TIM22_OR_TI1_RMP_Msk = 0xC
TIM22_OR_TI1_RMP = 0xC
TIM22_OR_TI1_RMP_0 = 0x4
TIM22_OR_TI1_RMP_1 = 0x8
TSC_CR_TSCE_Pos = 0x0
TSC_CR_TSCE_Msk = 0x1
TSC_CR_TSCE = 0x1
TSC_CR_START_Pos = 0x1
TSC_CR_START_Msk = 0x2
TSC_CR_START = 0x2
TSC_CR_AM_Pos = 0x2
TSC_CR_AM_Msk = 0x4
TSC_CR_AM = 0x4
TSC_CR_SYNCPOL_Pos = 0x3
TSC_CR_SYNCPOL_Msk = 0x8
TSC_CR_SYNCPOL = 0x8
TSC_CR_IODEF_Pos = 0x4
TSC_CR_IODEF_Msk = 0x10
TSC_CR_IODEF = 0x10
TSC_CR_MCV_Pos = 0x5
TSC_CR_MCV_Msk = 0xE0
TSC_CR_MCV = 0xE0
TSC_CR_MCV_0 = 0x20
TSC_CR_MCV_1 = 0x40
TSC_CR_MCV_2 = 0x80
TSC_CR_PGPSC_Pos = 0xC
TSC_CR_PGPSC_Msk = 0x7000
TSC_CR_PGPSC = 0x7000
TSC_CR_PGPSC_0 = 0x1000
TSC_CR_PGPSC_1 = 0x2000
TSC_CR_PGPSC_2 = 0x4000
TSC_CR_SSPSC_Pos = 0xF
TSC_CR_SSPSC_Msk = 0x8000
TSC_CR_SSPSC = 0x8000
TSC_CR_SSE_Pos = 0x10
TSC_CR_SSE_Msk = 0x10000
TSC_CR_SSE = 0x10000
TSC_CR_SSD_Pos = 0x11
TSC_CR_SSD_Msk = 0xFE0000
TSC_CR_SSD = 0xFE0000
TSC_CR_SSD_0 = 0x20000
TSC_CR_SSD_1 = 0x40000
TSC_CR_SSD_2 = 0x80000
TSC_CR_SSD_3 = 0x100000
TSC_CR_SSD_4 = 0x200000
TSC_CR_SSD_5 = 0x400000
TSC_CR_SSD_6 = 0x800000
TSC_CR_CTPL_Pos = 0x18
TSC_CR_CTPL_Msk = 0xF000000
TSC_CR_CTPL = 0xF000000
TSC_CR_CTPL_0 = 0x1000000
TSC_CR_CTPL_1 = 0x2000000
TSC_CR_CTPL_2 = 0x4000000
TSC_CR_CTPL_3 = 0x8000000
TSC_CR_CTPH_Pos = 0x1C
TSC_CR_CTPH_Msk = 0xF0000000
TSC_CR_CTPH = 0xF0000000
TSC_CR_CTPH_0 = 0x10000000
TSC_CR_CTPH_1 = 0x20000000
TSC_CR_CTPH_2 = 0x40000000
TSC_CR_CTPH_3 = 0x80000000
TSC_IER_EOAIE_Pos = 0x0
TSC_IER_EOAIE_Msk = 0x1
TSC_IER_EOAIE = 0x1
TSC_IER_MCEIE_Pos = 0x1
TSC_IER_MCEIE_Msk = 0x2
TSC_IER_MCEIE = 0x2
TSC_ICR_EOAIC_Pos = 0x0
TSC_ICR_EOAIC_Msk = 0x1
TSC_ICR_EOAIC = 0x1
TSC_ICR_MCEIC_Pos = 0x1
TSC_ICR_MCEIC_Msk = 0x2
TSC_ICR_MCEIC = 0x2
TSC_ISR_EOAF_Pos = 0x0
TSC_ISR_EOAF_Msk = 0x1
TSC_ISR_EOAF = 0x1
TSC_ISR_MCEF_Pos = 0x1
TSC_ISR_MCEF_Msk = 0x2
TSC_ISR_MCEF = 0x2
TSC_IOHCR_G1_IO1_Pos = 0x0
TSC_IOHCR_G1_IO1_Msk = 0x1
TSC_IOHCR_G1_IO1 = 0x1
TSC_IOHCR_G1_IO2_Pos = 0x1
TSC_IOHCR_G1_IO2_Msk = 0x2
TSC_IOHCR_G1_IO2 = 0x2
TSC_IOHCR_G1_IO3_Pos = 0x2
TSC_IOHCR_G1_IO3_Msk = 0x4
TSC_IOHCR_G1_IO3 = 0x4
TSC_IOHCR_G1_IO4_Pos = 0x3
TSC_IOHCR_G1_IO4_Msk = 0x8
TSC_IOHCR_G1_IO4 = 0x8
TSC_IOHCR_G2_IO1_Pos = 0x4
TSC_IOHCR_G2_IO1_Msk = 0x10
TSC_IOHCR_G2_IO1 = 0x10
TSC_IOHCR_G2_IO2_Pos = 0x5
TSC_IOHCR_G2_IO2_Msk = 0x20
TSC_IOHCR_G2_IO2 = 0x20
TSC_IOHCR_G2_IO3_Pos = 0x6
TSC_IOHCR_G2_IO3_Msk = 0x40
TSC_IOHCR_G2_IO3 = 0x40
TSC_IOHCR_G2_IO4_Pos = 0x7
TSC_IOHCR_G2_IO4_Msk = 0x80
TSC_IOHCR_G2_IO4 = 0x80
TSC_IOHCR_G3_IO1_Pos = 0x8
TSC_IOHCR_G3_IO1_Msk = 0x100
TSC_IOHCR_G3_IO1 = 0x100
TSC_IOHCR_G3_IO2_Pos = 0x9
TSC_IOHCR_G3_IO2_Msk = 0x200
TSC_IOHCR_G3_IO2 = 0x200
TSC_IOHCR_G3_IO3_Pos = 0xA
TSC_IOHCR_G3_IO3_Msk = 0x400
TSC_IOHCR_G3_IO3 = 0x400
TSC_IOHCR_G3_IO4_Pos = 0xB
TSC_IOHCR_G3_IO4_Msk = 0x800
TSC_IOHCR_G3_IO4 = 0x800
TSC_IOHCR_G4_IO1_Pos = 0xC
TSC_IOHCR_G4_IO1_Msk = 0x1000
TSC_IOHCR_G4_IO1 = 0x1000
TSC_IOHCR_G4_IO2_Pos = 0xD
TSC_IOHCR_G4_IO2_Msk = 0x2000
TSC_IOHCR_G4_IO2 = 0x2000
TSC_IOHCR_G4_IO3_Pos = 0xE
TSC_IOHCR_G4_IO3_Msk = 0x4000
TSC_IOHCR_G4_IO3 = 0x4000
TSC_IOHCR_G4_IO4_Pos = 0xF
TSC_IOHCR_G4_IO4_Msk = 0x8000
TSC_IOHCR_G4_IO4 = 0x8000
TSC_IOHCR_G5_IO1_Pos = 0x10
TSC_IOHCR_G5_IO1_Msk = 0x10000
TSC_IOHCR_G5_IO1 = 0x10000
TSC_IOHCR_G5_IO2_Pos = 0x11
TSC_IOHCR_G5_IO2_Msk = 0x20000
TSC_IOHCR_G5_IO2 = 0x20000
TSC_IOHCR_G5_IO3_Pos = 0x12
TSC_IOHCR_G5_IO3_Msk = 0x40000
TSC_IOHCR_G5_IO3 = 0x40000
TSC_IOHCR_G5_IO4_Pos = 0x13
TSC_IOHCR_G5_IO4_Msk = 0x80000
TSC_IOHCR_G5_IO4 = 0x80000
TSC_IOHCR_G6_IO1_Pos = 0x14
TSC_IOHCR_G6_IO1_Msk = 0x100000
TSC_IOHCR_G6_IO1 = 0x100000
TSC_IOHCR_G6_IO2_Pos = 0x15
TSC_IOHCR_G6_IO2_Msk = 0x200000
TSC_IOHCR_G6_IO2 = 0x200000
TSC_IOHCR_G6_IO3_Pos = 0x16
TSC_IOHCR_G6_IO3_Msk = 0x400000
TSC_IOHCR_G6_IO3 = 0x400000
TSC_IOHCR_G6_IO4_Pos = 0x17
TSC_IOHCR_G6_IO4_Msk = 0x800000
TSC_IOHCR_G6_IO4 = 0x800000
TSC_IOHCR_G7_IO1_Pos = 0x18
TSC_IOHCR_G7_IO1_Msk = 0x1000000
TSC_IOHCR_G7_IO1 = 0x1000000
TSC_IOHCR_G7_IO2_Pos = 0x19
TSC_IOHCR_G7_IO2_Msk = 0x2000000
TSC_IOHCR_G7_IO2 = 0x2000000
TSC_IOHCR_G7_IO3_Pos = 0x1A
TSC_IOHCR_G7_IO3_Msk = 0x4000000
TSC_IOHCR_G7_IO3 = 0x4000000
TSC_IOHCR_G7_IO4_Pos = 0x1B
TSC_IOHCR_G7_IO4_Msk = 0x8000000
TSC_IOHCR_G7_IO4 = 0x8000000
TSC_IOHCR_G8_IO1_Pos = 0x1C
TSC_IOHCR_G8_IO1_Msk = 0x10000000
TSC_IOHCR_G8_IO1 = 0x10000000
TSC_IOHCR_G8_IO2_Pos = 0x1D
TSC_IOHCR_G8_IO2_Msk = 0x20000000
TSC_IOHCR_G8_IO2 = 0x20000000
TSC_IOHCR_G8_IO3_Pos = 0x1E
TSC_IOHCR_G8_IO3_Msk = 0x40000000
TSC_IOHCR_G8_IO3 = 0x40000000
TSC_IOHCR_G8_IO4_Pos = 0x1F
TSC_IOHCR_G8_IO4_Msk = 0x80000000
TSC_IOHCR_G8_IO4 = 0x80000000
TSC_IOASCR_G1_IO1_Pos = 0x0
TSC_IOASCR_G1_IO1_Msk = 0x1
TSC_IOASCR_G1_IO1 = 0x1
TSC_IOASCR_G1_IO2_Pos = 0x1
TSC_IOASCR_G1_IO2_Msk = 0x2
TSC_IOASCR_G1_IO2 = 0x2
TSC_IOASCR_G1_IO3_Pos = 0x2
TSC_IOASCR_G1_IO3_Msk = 0x4
TSC_IOASCR_G1_IO3 = 0x4
TSC_IOASCR_G1_IO4_Pos = 0x3
TSC_IOASCR_G1_IO4_Msk = 0x8
TSC_IOASCR_G1_IO4 = 0x8
TSC_IOASCR_G2_IO1_Pos = 0x4
TSC_IOASCR_G2_IO1_Msk = 0x10
TSC_IOASCR_G2_IO1 = 0x10
TSC_IOASCR_G2_IO2_Pos = 0x5
TSC_IOASCR_G2_IO2_Msk = 0x20
TSC_IOASCR_G2_IO2 = 0x20
TSC_IOASCR_G2_IO3_Pos = 0x6
TSC_IOASCR_G2_IO3_Msk = 0x40
TSC_IOASCR_G2_IO3 = 0x40
TSC_IOASCR_G2_IO4_Pos = 0x7
TSC_IOASCR_G2_IO4_Msk = 0x80
TSC_IOASCR_G2_IO4 = 0x80
TSC_IOASCR_G3_IO1_Pos = 0x8
TSC_IOASCR_G3_IO1_Msk = 0x100
TSC_IOASCR_G3_IO1 = 0x100
TSC_IOASCR_G3_IO2_Pos = 0x9
TSC_IOASCR_G3_IO2_Msk = 0x200
TSC_IOASCR_G3_IO2 = 0x200
TSC_IOASCR_G3_IO3_Pos = 0xA
TSC_IOASCR_G3_IO3_Msk = 0x400
TSC_IOASCR_G3_IO3 = 0x400
TSC_IOASCR_G3_IO4_Pos = 0xB
TSC_IOASCR_G3_IO4_Msk = 0x800
TSC_IOASCR_G3_IO4 = 0x800
TSC_IOASCR_G4_IO1_Pos = 0xC
TSC_IOASCR_G4_IO1_Msk = 0x1000
TSC_IOASCR_G4_IO1 = 0x1000
TSC_IOASCR_G4_IO2_Pos = 0xD
TSC_IOASCR_G4_IO2_Msk = 0x2000
TSC_IOASCR_G4_IO2 = 0x2000
TSC_IOASCR_G4_IO3_Pos = 0xE
TSC_IOASCR_G4_IO3_Msk = 0x4000
TSC_IOASCR_G4_IO3 = 0x4000
TSC_IOASCR_G4_IO4_Pos = 0xF
TSC_IOASCR_G4_IO4_Msk = 0x8000
TSC_IOASCR_G4_IO4 = 0x8000
TSC_IOASCR_G5_IO1_Pos = 0x10
TSC_IOASCR_G5_IO1_Msk = 0x10000
TSC_IOASCR_G5_IO1 = 0x10000
TSC_IOASCR_G5_IO2_Pos = 0x11
TSC_IOASCR_G5_IO2_Msk = 0x20000
TSC_IOASCR_G5_IO2 = 0x20000
TSC_IOASCR_G5_IO3_Pos = 0x12
TSC_IOASCR_G5_IO3_Msk = 0x40000
TSC_IOASCR_G5_IO3 = 0x40000
TSC_IOASCR_G5_IO4_Pos = 0x13
TSC_IOASCR_G5_IO4_Msk = 0x80000
TSC_IOASCR_G5_IO4 = 0x80000
TSC_IOASCR_G6_IO1_Pos = 0x14
TSC_IOASCR_G6_IO1_Msk = 0x100000
TSC_IOASCR_G6_IO1 = 0x100000
TSC_IOASCR_G6_IO2_Pos = 0x15
TSC_IOASCR_G6_IO2_Msk = 0x200000
TSC_IOASCR_G6_IO2 = 0x200000
TSC_IOASCR_G6_IO3_Pos = 0x16
TSC_IOASCR_G6_IO3_Msk = 0x400000
TSC_IOASCR_G6_IO3 = 0x400000
TSC_IOASCR_G6_IO4_Pos = 0x17
TSC_IOASCR_G6_IO4_Msk = 0x800000
TSC_IOASCR_G6_IO4 = 0x800000
TSC_IOASCR_G7_IO1_Pos = 0x18
TSC_IOASCR_G7_IO1_Msk = 0x1000000
TSC_IOASCR_G7_IO1 = 0x1000000
TSC_IOASCR_G7_IO2_Pos = 0x19
TSC_IOASCR_G7_IO2_Msk = 0x2000000
TSC_IOASCR_G7_IO2 = 0x2000000
TSC_IOASCR_G7_IO3_Pos = 0x1A
TSC_IOASCR_G7_IO3_Msk = 0x4000000
TSC_IOASCR_G7_IO3 = 0x4000000
TSC_IOASCR_G7_IO4_Pos = 0x1B
TSC_IOASCR_G7_IO4_Msk = 0x8000000
TSC_IOASCR_G7_IO4 = 0x8000000
TSC_IOASCR_G8_IO1_Pos = 0x1C
TSC_IOASCR_G8_IO1_Msk = 0x10000000
TSC_IOASCR_G8_IO1 = 0x10000000
TSC_IOASCR_G8_IO2_Pos = 0x1D
TSC_IOASCR_G8_IO2_Msk = 0x20000000
TSC_IOASCR_G8_IO2 = 0x20000000
TSC_IOASCR_G8_IO3_Pos = 0x1E
TSC_IOASCR_G8_IO3_Msk = 0x40000000
TSC_IOASCR_G8_IO3 = 0x40000000
TSC_IOASCR_G8_IO4_Pos = 0x1F
TSC_IOASCR_G8_IO4_Msk = 0x80000000
TSC_IOASCR_G8_IO4 = 0x80000000
TSC_IOSCR_G1_IO1_Pos = 0x0
TSC_IOSCR_G1_IO1_Msk = 0x1
TSC_IOSCR_G1_IO1 = 0x1
TSC_IOSCR_G1_IO2_Pos = 0x1
TSC_IOSCR_G1_IO2_Msk = 0x2
TSC_IOSCR_G1_IO2 = 0x2
TSC_IOSCR_G1_IO3_Pos = 0x2
TSC_IOSCR_G1_IO3_Msk = 0x4
TSC_IOSCR_G1_IO3 = 0x4
TSC_IOSCR_G1_IO4_Pos = 0x3
TSC_IOSCR_G1_IO4_Msk = 0x8
TSC_IOSCR_G1_IO4 = 0x8
TSC_IOSCR_G2_IO1_Pos = 0x4
TSC_IOSCR_G2_IO1_Msk = 0x10
TSC_IOSCR_G2_IO1 = 0x10
TSC_IOSCR_G2_IO2_Pos = 0x5
TSC_IOSCR_G2_IO2_Msk = 0x20
TSC_IOSCR_G2_IO2 = 0x20
TSC_IOSCR_G2_IO3_Pos = 0x6
TSC_IOSCR_G2_IO3_Msk = 0x40
TSC_IOSCR_G2_IO3 = 0x40
TSC_IOSCR_G2_IO4_Pos = 0x7
TSC_IOSCR_G2_IO4_Msk = 0x80
TSC_IOSCR_G2_IO4 = 0x80
TSC_IOSCR_G3_IO1_Pos = 0x8
TSC_IOSCR_G3_IO1_Msk = 0x100
TSC_IOSCR_G3_IO1 = 0x100
TSC_IOSCR_G3_IO2_Pos = 0x9
TSC_IOSCR_G3_IO2_Msk = 0x200
TSC_IOSCR_G3_IO2 = 0x200
TSC_IOSCR_G3_IO3_Pos = 0xA
TSC_IOSCR_G3_IO3_Msk = 0x400
TSC_IOSCR_G3_IO3 = 0x400
TSC_IOSCR_G3_IO4_Pos = 0xB
TSC_IOSCR_G3_IO4_Msk = 0x800
TSC_IOSCR_G3_IO4 = 0x800
TSC_IOSCR_G4_IO1_Pos = 0xC
TSC_IOSCR_G4_IO1_Msk = 0x1000
TSC_IOSCR_G4_IO1 = 0x1000
TSC_IOSCR_G4_IO2_Pos = 0xD
TSC_IOSCR_G4_IO2_Msk = 0x2000
TSC_IOSCR_G4_IO2 = 0x2000
TSC_IOSCR_G4_IO3_Pos = 0xE
TSC_IOSCR_G4_IO3_Msk = 0x4000
TSC_IOSCR_G4_IO3 = 0x4000
TSC_IOSCR_G4_IO4_Pos = 0xF
TSC_IOSCR_G4_IO4_Msk = 0x8000
TSC_IOSCR_G4_IO4 = 0x8000
TSC_IOSCR_G5_IO1_Pos = 0x10
TSC_IOSCR_G5_IO1_Msk = 0x10000
TSC_IOSCR_G5_IO1 = 0x10000
TSC_IOSCR_G5_IO2_Pos = 0x11
TSC_IOSCR_G5_IO2_Msk = 0x20000
TSC_IOSCR_G5_IO2 = 0x20000
TSC_IOSCR_G5_IO3_Pos = 0x12
TSC_IOSCR_G5_IO3_Msk = 0x40000
TSC_IOSCR_G5_IO3 = 0x40000
TSC_IOSCR_G5_IO4_Pos = 0x13
TSC_IOSCR_G5_IO4_Msk = 0x80000
TSC_IOSCR_G5_IO4 = 0x80000
TSC_IOSCR_G6_IO1_Pos = 0x14
TSC_IOSCR_G6_IO1_Msk = 0x100000
TSC_IOSCR_G6_IO1 = 0x100000
TSC_IOSCR_G6_IO2_Pos = 0x15
TSC_IOSCR_G6_IO2_Msk = 0x200000
TSC_IOSCR_G6_IO2 = 0x200000
TSC_IOSCR_G6_IO3_Pos = 0x16
TSC_IOSCR_G6_IO3_Msk = 0x400000
TSC_IOSCR_G6_IO3 = 0x400000
TSC_IOSCR_G6_IO4_Pos = 0x17
TSC_IOSCR_G6_IO4_Msk = 0x800000
TSC_IOSCR_G6_IO4 = 0x800000
TSC_IOSCR_G7_IO1_Pos = 0x18
TSC_IOSCR_G7_IO1_Msk = 0x1000000
TSC_IOSCR_G7_IO1 = 0x1000000
TSC_IOSCR_G7_IO2_Pos = 0x19
TSC_IOSCR_G7_IO2_Msk = 0x2000000
TSC_IOSCR_G7_IO2 = 0x2000000
TSC_IOSCR_G7_IO3_Pos = 0x1A
TSC_IOSCR_G7_IO3_Msk = 0x4000000
TSC_IOSCR_G7_IO3 = 0x4000000
TSC_IOSCR_G7_IO4_Pos = 0x1B
TSC_IOSCR_G7_IO4_Msk = 0x8000000
TSC_IOSCR_G7_IO4 = 0x8000000
TSC_IOSCR_G8_IO1_Pos = 0x1C
TSC_IOSCR_G8_IO1_Msk = 0x10000000
TSC_IOSCR_G8_IO1 = 0x10000000
TSC_IOSCR_G8_IO2_Pos = 0x1D
TSC_IOSCR_G8_IO2_Msk = 0x20000000
TSC_IOSCR_G8_IO2 = 0x20000000
TSC_IOSCR_G8_IO3_Pos = 0x1E
TSC_IOSCR_G8_IO3_Msk = 0x40000000
TSC_IOSCR_G8_IO3 = 0x40000000
TSC_IOSCR_G8_IO4_Pos = 0x1F
TSC_IOSCR_G8_IO4_Msk = 0x80000000
TSC_IOSCR_G8_IO4 = 0x80000000
TSC_IOCCR_G1_IO1_Pos = 0x0
TSC_IOCCR_G1_IO1_Msk = 0x1
TSC_IOCCR_G1_IO1 = 0x1
TSC_IOCCR_G1_IO2_Pos = 0x1
TSC_IOCCR_G1_IO2_Msk = 0x2
TSC_IOCCR_G1_IO2 = 0x2
TSC_IOCCR_G1_IO3_Pos = 0x2
TSC_IOCCR_G1_IO3_Msk = 0x4
TSC_IOCCR_G1_IO3 = 0x4
TSC_IOCCR_G1_IO4_Pos = 0x3
TSC_IOCCR_G1_IO4_Msk = 0x8
TSC_IOCCR_G1_IO4 = 0x8
TSC_IOCCR_G2_IO1_Pos = 0x4
TSC_IOCCR_G2_IO1_Msk = 0x10
TSC_IOCCR_G2_IO1 = 0x10
TSC_IOCCR_G2_IO2_Pos = 0x5
TSC_IOCCR_G2_IO2_Msk = 0x20
TSC_IOCCR_G2_IO2 = 0x20
TSC_IOCCR_G2_IO3_Pos = 0x6
TSC_IOCCR_G2_IO3_Msk = 0x40
TSC_IOCCR_G2_IO3 = 0x40
TSC_IOCCR_G2_IO4_Pos = 0x7
TSC_IOCCR_G2_IO4_Msk = 0x80
TSC_IOCCR_G2_IO4 = 0x80
TSC_IOCCR_G3_IO1_Pos = 0x8
TSC_IOCCR_G3_IO1_Msk = 0x100
TSC_IOCCR_G3_IO1 = 0x100
TSC_IOCCR_G3_IO2_Pos = 0x9
TSC_IOCCR_G3_IO2_Msk = 0x200
TSC_IOCCR_G3_IO2 = 0x200
TSC_IOCCR_G3_IO3_Pos = 0xA
TSC_IOCCR_G3_IO3_Msk = 0x400
TSC_IOCCR_G3_IO3 = 0x400
TSC_IOCCR_G3_IO4_Pos = 0xB
TSC_IOCCR_G3_IO4_Msk = 0x800
TSC_IOCCR_G3_IO4 = 0x800
TSC_IOCCR_G4_IO1_Pos = 0xC
TSC_IOCCR_G4_IO1_Msk = 0x1000
TSC_IOCCR_G4_IO1 = 0x1000
TSC_IOCCR_G4_IO2_Pos = 0xD
TSC_IOCCR_G4_IO2_Msk = 0x2000
TSC_IOCCR_G4_IO2 = 0x2000
TSC_IOCCR_G4_IO3_Pos = 0xE
TSC_IOCCR_G4_IO3_Msk = 0x4000
TSC_IOCCR_G4_IO3 = 0x4000
TSC_IOCCR_G4_IO4_Pos = 0xF
TSC_IOCCR_G4_IO4_Msk = 0x8000
TSC_IOCCR_G4_IO4 = 0x8000
TSC_IOCCR_G5_IO1_Pos = 0x10
TSC_IOCCR_G5_IO1_Msk = 0x10000
TSC_IOCCR_G5_IO1 = 0x10000
TSC_IOCCR_G5_IO2_Pos = 0x11
TSC_IOCCR_G5_IO2_Msk = 0x20000
TSC_IOCCR_G5_IO2 = 0x20000
TSC_IOCCR_G5_IO3_Pos = 0x12
TSC_IOCCR_G5_IO3_Msk = 0x40000
TSC_IOCCR_G5_IO3 = 0x40000
TSC_IOCCR_G5_IO4_Pos = 0x13
TSC_IOCCR_G5_IO4_Msk = 0x80000
TSC_IOCCR_G5_IO4 = 0x80000
TSC_IOCCR_G6_IO1_Pos = 0x14
TSC_IOCCR_G6_IO1_Msk = 0x100000
TSC_IOCCR_G6_IO1 = 0x100000
TSC_IOCCR_G6_IO2_Pos = 0x15
TSC_IOCCR_G6_IO2_Msk = 0x200000
TSC_IOCCR_G6_IO2 = 0x200000
TSC_IOCCR_G6_IO3_Pos = 0x16
TSC_IOCCR_G6_IO3_Msk = 0x400000
TSC_IOCCR_G6_IO3 = 0x400000
TSC_IOCCR_G6_IO4_Pos = 0x17
TSC_IOCCR_G6_IO4_Msk = 0x800000
TSC_IOCCR_G6_IO4 = 0x800000
TSC_IOCCR_G7_IO1_Pos = 0x18
TSC_IOCCR_G7_IO1_Msk = 0x1000000
TSC_IOCCR_G7_IO1 = 0x1000000
TSC_IOCCR_G7_IO2_Pos = 0x19
TSC_IOCCR_G7_IO2_Msk = 0x2000000
TSC_IOCCR_G7_IO2 = 0x2000000
TSC_IOCCR_G7_IO3_Pos = 0x1A
TSC_IOCCR_G7_IO3_Msk = 0x4000000
TSC_IOCCR_G7_IO3 = 0x4000000
TSC_IOCCR_G7_IO4_Pos = 0x1B
TSC_IOCCR_G7_IO4_Msk = 0x8000000
TSC_IOCCR_G7_IO4 = 0x8000000
TSC_IOCCR_G8_IO1_Pos = 0x1C
TSC_IOCCR_G8_IO1_Msk = 0x10000000
TSC_IOCCR_G8_IO1 = 0x10000000
TSC_IOCCR_G8_IO2_Pos = 0x1D
TSC_IOCCR_G8_IO2_Msk = 0x20000000
TSC_IOCCR_G8_IO2 = 0x20000000
TSC_IOCCR_G8_IO3_Pos = 0x1E
TSC_IOCCR_G8_IO3_Msk = 0x40000000
TSC_IOCCR_G8_IO3 = 0x40000000
TSC_IOCCR_G8_IO4_Pos = 0x1F
TSC_IOCCR_G8_IO4_Msk = 0x80000000
TSC_IOCCR_G8_IO4 = 0x80000000
TSC_IOGCSR_G1E_Pos = 0x0
TSC_IOGCSR_G1E_Msk = 0x1
TSC_IOGCSR_G1E = 0x1
TSC_IOGCSR_G2E_Pos = 0x1
TSC_IOGCSR_G2E_Msk = 0x2
TSC_IOGCSR_G2E = 0x2
TSC_IOGCSR_G3E_Pos = 0x2
TSC_IOGCSR_G3E_Msk = 0x4
TSC_IOGCSR_G3E = 0x4
TSC_IOGCSR_G4E_Pos = 0x3
TSC_IOGCSR_G4E_Msk = 0x8
TSC_IOGCSR_G4E = 0x8
TSC_IOGCSR_G5E_Pos = 0x4
TSC_IOGCSR_G5E_Msk = 0x10
TSC_IOGCSR_G5E = 0x10
TSC_IOGCSR_G6E_Pos = 0x5
TSC_IOGCSR_G6E_Msk = 0x20
TSC_IOGCSR_G6E = 0x20
TSC_IOGCSR_G7E_Pos = 0x6
TSC_IOGCSR_G7E_Msk = 0x40
TSC_IOGCSR_G7E = 0x40
TSC_IOGCSR_G8E_Pos = 0x7
TSC_IOGCSR_G8E_Msk = 0x80
TSC_IOGCSR_G8E = 0x80
TSC_IOGCSR_G1S_Pos = 0x10
TSC_IOGCSR_G1S_Msk = 0x10000
TSC_IOGCSR_G1S = 0x10000
TSC_IOGCSR_G2S_Pos = 0x11
TSC_IOGCSR_G2S_Msk = 0x20000
TSC_IOGCSR_G2S = 0x20000
TSC_IOGCSR_G3S_Pos = 0x12
TSC_IOGCSR_G3S_Msk = 0x40000
TSC_IOGCSR_G3S = 0x40000
TSC_IOGCSR_G4S_Pos = 0x13
TSC_IOGCSR_G4S_Msk = 0x80000
TSC_IOGCSR_G4S = 0x80000
TSC_IOGCSR_G5S_Pos = 0x14
TSC_IOGCSR_G5S_Msk = 0x100000
TSC_IOGCSR_G5S = 0x100000
TSC_IOGCSR_G6S_Pos = 0x15
TSC_IOGCSR_G6S_Msk = 0x200000
TSC_IOGCSR_G6S = 0x200000
TSC_IOGCSR_G7S_Pos = 0x16
TSC_IOGCSR_G7S_Msk = 0x400000
TSC_IOGCSR_G7S = 0x400000
TSC_IOGCSR_G8S_Pos = 0x17
TSC_IOGCSR_G8S_Msk = 0x800000
TSC_IOGCSR_G8S = 0x800000
TSC_IOGXCR_CNT_Pos = 0x0
TSC_IOGXCR_CNT_Msk = 0x3FFF
TSC_IOGXCR_CNT = 0x3FFF
USART_CR1_UE_Pos = 0x0
USART_CR1_UE_Msk = 0x1
USART_CR1_UE = 0x1
USART_CR1_UESM_Pos = 0x1
USART_CR1_UESM_Msk = 0x2
USART_CR1_UESM = 0x2
USART_CR1_RE_Pos = 0x2
USART_CR1_RE_Msk = 0x4
USART_CR1_RE = 0x4
USART_CR1_TE_Pos = 0x3
USART_CR1_TE_Msk = 0x8
USART_CR1_TE = 0x8
USART_CR1_IDLEIE_Pos = 0x4
USART_CR1_IDLEIE_Msk = 0x10
USART_CR1_IDLEIE = 0x10
USART_CR1_RXNEIE_Pos = 0x5
USART_CR1_RXNEIE_Msk = 0x20
USART_CR1_RXNEIE = 0x20
USART_CR1_TCIE_Pos = 0x6
USART_CR1_TCIE_Msk = 0x40
USART_CR1_TCIE = 0x40
USART_CR1_TXEIE_Pos = 0x7
USART_CR1_TXEIE_Msk = 0x80
USART_CR1_TXEIE = 0x80
USART_CR1_PEIE_Pos = 0x8
USART_CR1_PEIE_Msk = 0x100
USART_CR1_PEIE = 0x100
USART_CR1_PS_Pos = 0x9
USART_CR1_PS_Msk = 0x200
USART_CR1_PS = 0x200
USART_CR1_PCE_Pos = 0xA
USART_CR1_PCE_Msk = 0x400
USART_CR1_PCE = 0x400
USART_CR1_WAKE_Pos = 0xB
USART_CR1_WAKE_Msk = 0x800
USART_CR1_WAKE = 0x800
USART_CR1_M_Pos = 0xC
USART_CR1_M_Msk = 0x10001000
USART_CR1_M = 0x10001000
USART_CR1_M0_Pos = 0xC
USART_CR1_M0_Msk = 0x1000
USART_CR1_M0 = 0x1000
USART_CR1_MME_Pos = 0xD
USART_CR1_MME_Msk = 0x2000
USART_CR1_MME = 0x2000
USART_CR1_CMIE_Pos = 0xE
USART_CR1_CMIE_Msk = 0x4000
USART_CR1_CMIE = 0x4000
USART_CR1_OVER8_Pos = 0xF
USART_CR1_OVER8_Msk = 0x8000
USART_CR1_OVER8 = 0x8000
USART_CR1_DEDT_Pos = 0x10
USART_CR1_DEDT_Msk = 0x1F0000
USART_CR1_DEDT = 0x1F0000
USART_CR1_DEDT_0 = 0x10000
USART_CR1_DEDT_1 = 0x20000
USART_CR1_DEDT_2 = 0x40000
USART_CR1_DEDT_3 = 0x80000
USART_CR1_DEDT_4 = 0x100000
USART_CR1_DEAT_Pos = 0x15
USART_CR1_DEAT_Msk = 0x3E00000
USART_CR1_DEAT = 0x3E00000
USART_CR1_DEAT_0 = 0x200000
USART_CR1_DEAT_1 = 0x400000
USART_CR1_DEAT_2 = 0x800000
USART_CR1_DEAT_3 = 0x1000000
USART_CR1_DEAT_4 = 0x2000000
USART_CR1_RTOIE_Pos = 0x1A
USART_CR1_RTOIE_Msk = 0x4000000
USART_CR1_RTOIE = 0x4000000
USART_CR1_EOBIE_Pos = 0x1B
USART_CR1_EOBIE_Msk = 0x8000000
USART_CR1_EOBIE = 0x8000000
USART_CR1_M1_Pos = 0x1C
USART_CR1_M1_Msk = 0x10000000
USART_CR1_M1 = 0x10000000
USART_CR2_ADDM7_Pos = 0x4
USART_CR2_ADDM7_Msk = 0x10
USART_CR2_ADDM7 = 0x10
USART_CR2_LBDL_Pos = 0x5
USART_CR2_LBDL_Msk = 0x20
USART_CR2_LBDL = 0x20
USART_CR2_LBDIE_Pos = 0x6
USART_CR2_LBDIE_Msk = 0x40
USART_CR2_LBDIE = 0x40
USART_CR2_LBCL_Pos = 0x8
USART_CR2_LBCL_Msk = 0x100
USART_CR2_LBCL = 0x100
USART_CR2_CPHA_Pos = 0x9
USART_CR2_CPHA_Msk = 0x200
USART_CR2_CPHA = 0x200
USART_CR2_CPOL_Pos = 0xA
USART_CR2_CPOL_Msk = 0x400
USART_CR2_CPOL = 0x400
USART_CR2_CLKEN_Pos = 0xB
USART_CR2_CLKEN_Msk = 0x800
USART_CR2_CLKEN = 0x800
USART_CR2_STOP_Pos = 0xC
USART_CR2_STOP_Msk = 0x3000
USART_CR2_STOP = 0x3000
USART_CR2_STOP_0 = 0x1000
USART_CR2_STOP_1 = 0x2000
USART_CR2_LINEN_Pos = 0xE
USART_CR2_LINEN_Msk = 0x4000
USART_CR2_LINEN = 0x4000
USART_CR2_SWAP_Pos = 0xF
USART_CR2_SWAP_Msk = 0x8000
USART_CR2_SWAP = 0x8000
USART_CR2_RXINV_Pos = 0x10
USART_CR2_RXINV_Msk = 0x10000
USART_CR2_RXINV = 0x10000
USART_CR2_TXINV_Pos = 0x11
USART_CR2_TXINV_Msk = 0x20000
USART_CR2_TXINV = 0x20000
USART_CR2_DATAINV_Pos = 0x12
USART_CR2_DATAINV_Msk = 0x40000
USART_CR2_DATAINV = 0x40000
USART_CR2_MSBFIRST_Pos = 0x13
USART_CR2_MSBFIRST_Msk = 0x80000
USART_CR2_MSBFIRST = 0x80000
USART_CR2_ABREN_Pos = 0x14
USART_CR2_ABREN_Msk = 0x100000
USART_CR2_ABREN = 0x100000
USART_CR2_ABRMODE_Pos = 0x15
USART_CR2_ABRMODE_Msk = 0x600000
USART_CR2_ABRMODE = 0x600000
USART_CR2_ABRMODE_0 = 0x200000
USART_CR2_ABRMODE_1 = 0x400000
USART_CR2_RTOEN_Pos = 0x17
USART_CR2_RTOEN_Msk = 0x800000
USART_CR2_RTOEN = 0x800000
USART_CR2_ADD_Pos = 0x18
USART_CR2_ADD_Msk = 0xFF000000
USART_CR2_ADD = 0xFF000000
USART_CR3_EIE_Pos = 0x0
USART_CR3_EIE_Msk = 0x1
USART_CR3_EIE = 0x1
USART_CR3_IREN_Pos = 0x1
USART_CR3_IREN_Msk = 0x2
USART_CR3_IREN = 0x2
USART_CR3_IRLP_Pos = 0x2
USART_CR3_IRLP_Msk = 0x4
USART_CR3_IRLP = 0x4
USART_CR3_HDSEL_Pos = 0x3
USART_CR3_HDSEL_Msk = 0x8
USART_CR3_HDSEL = 0x8
USART_CR3_NACK_Pos = 0x4
USART_CR3_NACK_Msk = 0x10
USART_CR3_NACK = 0x10
USART_CR3_SCEN_Pos = 0x5
USART_CR3_SCEN_Msk = 0x20
USART_CR3_SCEN = 0x20
USART_CR3_DMAR_Pos = 0x6
USART_CR3_DMAR_Msk = 0x40
USART_CR3_DMAR = 0x40
USART_CR3_DMAT_Pos = 0x7
USART_CR3_DMAT_Msk = 0x80
USART_CR3_DMAT = 0x80
USART_CR3_RTSE_Pos = 0x8
USART_CR3_RTSE_Msk = 0x100
USART_CR3_RTSE = 0x100
USART_CR3_CTSE_Pos = 0x9
USART_CR3_CTSE_Msk = 0x200
USART_CR3_CTSE = 0x200
USART_CR3_CTSIE_Pos = 0xA
USART_CR3_CTSIE_Msk = 0x400
USART_CR3_CTSIE = 0x400
USART_CR3_ONEBIT_Pos = 0xB
USART_CR3_ONEBIT_Msk = 0x800
USART_CR3_ONEBIT = 0x800
USART_CR3_OVRDIS_Pos = 0xC
USART_CR3_OVRDIS_Msk = 0x1000
USART_CR3_OVRDIS = 0x1000
USART_CR3_DDRE_Pos = 0xD
USART_CR3_DDRE_Msk = 0x2000
USART_CR3_DDRE = 0x2000
USART_CR3_DEM_Pos = 0xE
USART_CR3_DEM_Msk = 0x4000
USART_CR3_DEM = 0x4000
USART_CR3_DEP_Pos = 0xF
USART_CR3_DEP_Msk = 0x8000
USART_CR3_DEP = 0x8000
USART_CR3_SCARCNT_Pos = 0x11
USART_CR3_SCARCNT_Msk = 0xE0000
USART_CR3_SCARCNT = 0xE0000
USART_CR3_SCARCNT_0 = 0x20000
USART_CR3_SCARCNT_1 = 0x40000
USART_CR3_SCARCNT_2 = 0x80000
USART_CR3_WUS_Pos = 0x14
USART_CR3_WUS_Msk = 0x300000
USART_CR3_WUS = 0x300000
USART_CR3_WUS_0 = 0x100000
USART_CR3_WUS_1 = 0x200000
USART_CR3_WUFIE_Pos = 0x16
USART_CR3_WUFIE_Msk = 0x400000
USART_CR3_WUFIE = 0x400000
USART_CR3_UCESM_Pos = 0x17
USART_CR3_UCESM_Msk = 0x800000
USART_CR3_UCESM = 0x800000
USART_BRR_DIV_FRACTION_Pos = 0x0
USART_BRR_DIV_FRACTION_Msk = 0xF
USART_BRR_DIV_FRACTION = 0xF
USART_BRR_DIV_MANTISSA_Pos = 0x4
USART_BRR_DIV_MANTISSA_Msk = 0xFFF0
USART_BRR_DIV_MANTISSA = 0xFFF0
USART_GTPR_PSC_Pos = 0x0
USART_GTPR_PSC_Msk = 0xFF
USART_GTPR_PSC = 0xFF
USART_GTPR_GT_Pos = 0x8
USART_GTPR_GT_Msk = 0xFF00
USART_GTPR_GT = 0xFF00
USART_RTOR_RTO_Pos = 0x0
USART_RTOR_RTO_Msk = 0xFFFFFF
USART_RTOR_RTO = 0xFFFFFF
USART_RTOR_BLEN_Pos = 0x18
USART_RTOR_BLEN_Msk = 0xFF000000
USART_RTOR_BLEN = 0xFF000000
USART_RQR_ABRRQ_Pos = 0x0
USART_RQR_ABRRQ_Msk = 0x1
USART_RQR_ABRRQ = 0x1
USART_RQR_SBKRQ_Pos = 0x1
USART_RQR_SBKRQ_Msk = 0x2
USART_RQR_SBKRQ = 0x2
USART_RQR_MMRQ_Pos = 0x2
USART_RQR_MMRQ_Msk = 0x4
USART_RQR_MMRQ = 0x4
USART_RQR_RXFRQ_Pos = 0x3
USART_RQR_RXFRQ_Msk = 0x8
USART_RQR_RXFRQ = 0x8
USART_RQR_TXFRQ_Pos = 0x4
USART_RQR_TXFRQ_Msk = 0x10
USART_RQR_TXFRQ = 0x10
USART_ISR_PE_Pos = 0x0
USART_ISR_PE_Msk = 0x1
USART_ISR_PE = 0x1
USART_ISR_FE_Pos = 0x1
USART_ISR_FE_Msk = 0x2
USART_ISR_FE = 0x2
USART_ISR_NE_Pos = 0x2
USART_ISR_NE_Msk = 0x4
USART_ISR_NE = 0x4
USART_ISR_ORE_Pos = 0x3
USART_ISR_ORE_Msk = 0x8
USART_ISR_ORE = 0x8
USART_ISR_IDLE_Pos = 0x4
USART_ISR_IDLE_Msk = 0x10
USART_ISR_IDLE = 0x10
USART_ISR_RXNE_Pos = 0x5
USART_ISR_RXNE_Msk = 0x20
USART_ISR_RXNE = 0x20
USART_ISR_TC_Pos = 0x6
USART_ISR_TC_Msk = 0x40
USART_ISR_TC = 0x40
USART_ISR_TXE_Pos = 0x7
USART_ISR_TXE_Msk = 0x80
USART_ISR_TXE = 0x80
USART_ISR_LBDF_Pos = 0x8
USART_ISR_LBDF_Msk = 0x100
USART_ISR_LBDF = 0x100
USART_ISR_CTSIF_Pos = 0x9
USART_ISR_CTSIF_Msk = 0x200
USART_ISR_CTSIF = 0x200
USART_ISR_CTS_Pos = 0xA
USART_ISR_CTS_Msk = 0x400
USART_ISR_CTS = 0x400
USART_ISR_RTOF_Pos = 0xB
USART_ISR_RTOF_Msk = 0x800
USART_ISR_RTOF = 0x800
USART_ISR_EOBF_Pos = 0xC
USART_ISR_EOBF_Msk = 0x1000
USART_ISR_EOBF = 0x1000
USART_ISR_ABRE_Pos = 0xE
USART_ISR_ABRE_Msk = 0x4000
USART_ISR_ABRE = 0x4000
USART_ISR_ABRF_Pos = 0xF
USART_ISR_ABRF_Msk = 0x8000
USART_ISR_ABRF = 0x8000
USART_ISR_BUSY_Pos = 0x10
USART_ISR_BUSY_Msk = 0x10000
USART_ISR_BUSY = 0x10000
USART_ISR_CMF_Pos = 0x11
USART_ISR_CMF_Msk = 0x20000
USART_ISR_CMF = 0x20000
USART_ISR_SBKF_Pos = 0x12
USART_ISR_SBKF_Msk = 0x40000
USART_ISR_SBKF = 0x40000
USART_ISR_RWU_Pos = 0x13
USART_ISR_RWU_Msk = 0x80000
USART_ISR_RWU = 0x80000
USART_ISR_WUF_Pos = 0x14
USART_ISR_WUF_Msk = 0x100000
USART_ISR_WUF = 0x100000
USART_ISR_TEACK_Pos = 0x15
USART_ISR_TEACK_Msk = 0x200000
USART_ISR_TEACK = 0x200000
USART_ISR_REACK_Pos = 0x16
USART_ISR_REACK_Msk = 0x400000
USART_ISR_REACK = 0x400000
USART_ICR_PECF_Pos = 0x0
USART_ICR_PECF_Msk = 0x1
USART_ICR_PECF = 0x1
USART_ICR_FECF_Pos = 0x1
USART_ICR_FECF_Msk = 0x2
USART_ICR_FECF = 0x2
USART_ICR_NCF_Pos = 0x2
USART_ICR_NCF_Msk = 0x4
USART_ICR_NCF = 0x4
USART_ICR_ORECF_Pos = 0x3
USART_ICR_ORECF_Msk = 0x8
USART_ICR_ORECF = 0x8
USART_ICR_IDLECF_Pos = 0x4
USART_ICR_IDLECF_Msk = 0x10
USART_ICR_IDLECF = 0x10
USART_ICR_TCCF_Pos = 0x6
USART_ICR_TCCF_Msk = 0x40
USART_ICR_TCCF = 0x40
USART_ICR_LBDCF_Pos = 0x8
USART_ICR_LBDCF_Msk = 0x100
USART_ICR_LBDCF = 0x100
USART_ICR_CTSCF_Pos = 0x9
USART_ICR_CTSCF_Msk = 0x200
USART_ICR_CTSCF = 0x200
USART_ICR_RTOCF_Pos = 0xB
USART_ICR_RTOCF_Msk = 0x800
USART_ICR_RTOCF = 0x800
USART_ICR_EOBCF_Pos = 0xC
USART_ICR_EOBCF_Msk = 0x1000
USART_ICR_EOBCF = 0x1000
USART_ICR_CMCF_Pos = 0x11
USART_ICR_CMCF_Msk = 0x20000
USART_ICR_CMCF = 0x20000
USART_ICR_WUCF_Pos = 0x14
USART_ICR_WUCF_Msk = 0x100000
USART_ICR_WUCF = 0x100000
USART_ICR_NECF = 0x4
USART_RDR_RDR_Pos = 0x0
USART_RDR_RDR_Msk = 0x1FF
USART_RDR_RDR = 0x1FF
USART_TDR_TDR_Pos = 0x0
USART_TDR_TDR_Msk = 0x1FF
USART_TDR_TDR = 0x1FF
USB_BASE = 0x40005C00
USB_PMAADDR_Pos = 0xD
USB_PMAADDR_Msk = 0x40006000
USB_PMAADDR = 0x40006000
USB_CNTR = 0x40005C40
USB_ISTR = 0x40005C44
USB_FNR = 0x40005C48
USB_DADDR = 0x40005C4C
USB_BTABLE = 0x40005C50
USB_LPMCSR = 0x40005C54
USB_BCDR = 0x40005C58
USB_ISTR_CTR = 0x8000
USB_ISTR_PMAOVR = 0x4000
USB_ISTR_ERR = 0x2000
USB_ISTR_WKUP = 0x1000
USB_ISTR_SUSP = 0x800
USB_ISTR_RESET = 0x400
USB_ISTR_SOF = 0x200
USB_ISTR_ESOF = 0x100
USB_ISTR_L1REQ = 0x80
USB_ISTR_DIR = 0x10
USB_ISTR_EP_ID = 0xF
USB_CLR_CTR = 0xFFFF7FFF
USB_CLR_PMAOVR = 0xFFFFBFFF
USB_CLR_ERR = 0xFFFFDFFF
USB_CLR_WKUP = 0xFFFFEFFF
USB_CLR_SUSP = 0xFFFFF7FF
USB_CLR_RESET = 0xFFFFFBFF
USB_CLR_SOF = 0xFFFFFDFF
USB_CLR_ESOF = 0xFFFFFEFF
USB_CLR_L1REQ = 0xFFFFFF7F
USB_CNTR_CTRM = 0x8000
USB_CNTR_PMAOVRM = 0x4000
USB_CNTR_ERRM = 0x2000
USB_CNTR_WKUPM = 0x1000
USB_CNTR_SUSPM = 0x800
USB_CNTR_RESETM = 0x400
USB_CNTR_SOFM = 0x200
USB_CNTR_ESOFM = 0x100
USB_CNTR_L1REQM = 0x80
USB_CNTR_L1RESUME = 0x20
USB_CNTR_RESUME = 0x10
USB_CNTR_FSUSP = 0x8
USB_CNTR_LPMODE = 0x4
USB_CNTR_PDWN = 0x2
USB_CNTR_FRES = 0x1
USB_BCDR_DPPU = 0x8000
USB_BCDR_PS2DET = 0x80
USB_BCDR_SDET = 0x40
USB_BCDR_PDET = 0x20
USB_BCDR_DCDET = 0x10
USB_BCDR_SDEN = 0x8
USB_BCDR_PDEN = 0x4
USB_BCDR_DCDEN = 0x2
USB_BCDR_BCDEN = 0x1
USB_LPMCSR_BESL = 0xF0
USB_LPMCSR_REMWAKE = 0x8
USB_LPMCSR_LPMACK = 0x2
USB_LPMCSR_LMPEN = 0x1
USB_FNR_RXDP = 0x8000
USB_FNR_RXDM = 0x4000
USB_FNR_LCK = 0x2000
USB_FNR_LSOF = 0x1800
USB_FNR_FN = 0x7FF
USB_DADDR_EF = 0x80
USB_DADDR_ADD = 0x7F
USB_EP0R = 0x40005C00
USB_EP1R = 0x40005C04
USB_EP2R = 0x40005C08
USB_EP3R = 0x40005C0C
USB_EP4R = 0x40005C10
USB_EP5R = 0x40005C14
USB_EP6R = 0x40005C18
USB_EP7R = 0x40005C1C
USB_EP_CTR_RX = 0x8000
USB_EP_DTOG_RX = 0x4000
USB_EPRX_STAT = 0x3000
USB_EP_SETUP = 0x800
USB_EP_T_FIELD = 0x600
USB_EP_KIND = 0x100
USB_EP_CTR_TX = 0x80
USB_EP_DTOG_TX = 0x40
USB_EPTX_STAT = 0x30
USB_EPADDR_FIELD = 0xF
USB_EPREG_MASK = 0x8F8F
USB_EP_TYPE_MASK = 0x600
USB_EP_BULK = 0x0
USB_EP_CONTROL = 0x200
USB_EP_ISOCHRONOUS = 0x400
USB_EP_INTERRUPT = 0x600
USB_EP_T_MASK = 0x898F
USB_EPKIND_MASK = 0x8E8F
USB_EP_TX_DIS = 0x0
USB_EP_TX_STALL = 0x10
USB_EP_TX_NAK = 0x20
USB_EP_TX_VALID = 0x30
USB_EPTX_DTOG1 = 0x10
USB_EPTX_DTOG2 = 0x20
USB_EPTX_DTOGMASK = 0x8FBF
USB_EP_RX_DIS = 0x0
USB_EP_RX_STALL = 0x1000
USB_EP_RX_NAK = 0x2000
USB_EP_RX_VALID = 0x3000
USB_EPRX_DTOG1 = 0x1000
USB_EPRX_DTOG2 = 0x2000
USB_EPRX_DTOGMASK = 0xBF8F
WWDG_CR_T_Pos = 0x0
WWDG_CR_T_Msk = 0x7F
WWDG_CR_T = 0x7F
WWDG_CR_T_0 = 0x1
WWDG_CR_T_1 = 0x2
WWDG_CR_T_2 = 0x4
WWDG_CR_T_3 = 0x8
WWDG_CR_T_4 = 0x10
WWDG_CR_T_5 = 0x20
WWDG_CR_T_6 = 0x40
WWDG_CR_T0 = 0x1
WWDG_CR_T1 = 0x2
WWDG_CR_T2 = 0x4
WWDG_CR_T3 = 0x8
WWDG_CR_T4 = 0x10
WWDG_CR_T5 = 0x20
WWDG_CR_T6 = 0x40
WWDG_CR_WDGA_Pos = 0x7
WWDG_CR_WDGA_Msk = 0x80
WWDG_CR_WDGA = 0x80
WWDG_CFR_W_Pos = 0x0
WWDG_CFR_W_Msk = 0x7F
WWDG_CFR_W = 0x7F
WWDG_CFR_W_0 = 0x1
WWDG_CFR_W_1 = 0x2
WWDG_CFR_W_2 = 0x4
WWDG_CFR_W_3 = 0x8
WWDG_CFR_W_4 = 0x10
WWDG_CFR_W_5 = 0x20
WWDG_CFR_W_6 = 0x40
WWDG_CFR_W0 = 0x1
WWDG_CFR_W1 = 0x2
WWDG_CFR_W2 = 0x4
WWDG_CFR_W3 = 0x8
WWDG_CFR_W4 = 0x10
WWDG_CFR_W5 = 0x20
WWDG_CFR_W6 = 0x40
WWDG_CFR_WDGTB_Pos = 0x7
WWDG_CFR_WDGTB_Msk = 0x180
WWDG_CFR_WDGTB = 0x180
WWDG_CFR_WDGTB_0 = 0x80
WWDG_CFR_WDGTB_1 = 0x100
WWDG_CFR_WDGTB0 = 0x80
WWDG_CFR_WDGTB1 = 0x100
WWDG_CFR_EWI_Pos = 0x9
WWDG_CFR_EWI_Msk = 0x200
WWDG_CFR_EWI = 0x200
WWDG_SR_EWIF_Pos = 0x0
WWDG_SR_EWIF_Msk = 0x1
WWDG_SR_EWIF = 0x1
# fun define IS_ADC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == ADC1)
# fun define IS_ADC_COMMON_INSTANCE(INSTANCE) ((INSTANCE) == ADC1_COMMON)
# fun define IS_AES_ALL_INSTANCE(INSTANCE) ((INSTANCE) == AES)
# fun define IS_COMP_ALL_INSTANCE(INSTANCE) (((INSTANCE) == COMP1) || \
#                                       ((INSTANCE) == COMP2))
# fun define IS_COMP_COMMON_INSTANCE(COMMON_INSTANCE) ((COMMON_INSTANCE) == COMP12_COMMON)
# fun define IS_CRC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == CRC)
# fun define IS_DAC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == DAC)
# fun define IS_DMA_ALL_INSTANCE(INSTANCE) (((INSTANCE) == DMA1_Channel1) || \
#                                       ((INSTANCE) == DMA1_Channel2) || \
#                                       ((INSTANCE) == DMA1_Channel3) || \
#                                       ((INSTANCE) == DMA1_Channel4) || \
#                                       ((INSTANCE) == DMA1_Channel5) || \
#                                       ((INSTANCE) == DMA1_Channel6) || \
#                                       ((INSTANCE) == DMA1_Channel7))
# fun define IS_GPIO_ALL_INSTANCE(INSTANCE) (((INSTANCE) == GPIOA) || \
#                                        ((INSTANCE) == GPIOB) || \
#                                        ((INSTANCE) == GPIOC) || \
#                                        ((INSTANCE) == GPIOD) || \
#                                        ((INSTANCE) == GPIOH))
# fun define IS_GPIO_AF_INSTANCE(INSTANCE)  (((INSTANCE) == GPIOA) || \
#                                        ((INSTANCE) == GPIOB) || \
#                                        ((INSTANCE) == GPIOC) || \
#                                        ((INSTANCE) == GPIOD) || \
#                                        ((INSTANCE) == GPIOH))
# fun define IS_I2C_ALL_INSTANCE(INSTANCE) (((INSTANCE) == I2C1) || \
#                                       ((INSTANCE) == I2C2))
# fun define IS_I2C_WAKEUP_FROMSTOP_INSTANCE(INSTANCE) (((INSTANCE) == I2C1))
# fun define IS_I2S_ALL_INSTANCE(INSTANCE)  ((INSTANCE) == SPI2)
# fun define IS_RNG_ALL_INSTANCE(INSTANCE)  ((INSTANCE) == RNG)
# fun define IS_RTC_ALL_INSTANCE(INSTANCE)  ((INSTANCE) == RTC)
# fun define IS_SMBUS_INSTANCE(INSTANCE)  ((INSTANCE) == I2C1)
# fun define IS_SPI_ALL_INSTANCE(INSTANCE) (((INSTANCE) == SPI1) || \
#                                       ((INSTANCE) == SPI2))
# fun define IS_LPTIM_INSTANCE(INSTANCE)       ((INSTANCE) == LPTIM1)
# fun define IS_LPTIM_ENCODER_INTERFACE_INSTANCE(INSTANCE) ((INSTANCE) == LPTIM1)
# fun define IS_TIM_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   || \
#                                         ((INSTANCE) == TIM6)   || \
#                                         ((INSTANCE) == TIM21)  || \
#                                         ((INSTANCE) == TIM22))
# fun define IS_TIM_CC1_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)  || \
#                                         ((INSTANCE) == TIM21) || \
#                                         ((INSTANCE) == TIM22))
# fun define IS_TIM_CC2_INSTANCE(INSTANCE)  (((INSTANCE) == TIM2)  || \
#                                        ((INSTANCE) == TIM21) || \
#                                        ((INSTANCE) == TIM22))
# fun define IS_TIM_CC3_INSTANCE(INSTANCE)   ((INSTANCE) == TIM2)
# fun define IS_TIM_CC4_INSTANCE(INSTANCE)   ((INSTANCE) == TIM2)
# fun define IS_TIM_DMA_INSTANCE(INSTANCE)      (((INSTANCE) == TIM2) || \
#                                            ((INSTANCE) == TIM6))
# fun define IS_TIM_DMA_CC_INSTANCE(INSTANCE)   ((INSTANCE) == TIM2)
# fun define IS_TIM_DMABURST_INSTANCE(INSTANCE)  ((INSTANCE) == TIM2)
# fun define IS_TIM_CCX_INSTANCE(INSTANCE, CHANNEL) \
#    ((((INSTANCE) == TIM2) &&                  \
#     (((CHANNEL) == TIM_CHANNEL_1) ||          \
#      ((CHANNEL) == TIM_CHANNEL_2) ||          \
#      ((CHANNEL) == TIM_CHANNEL_3) ||          \
#      ((CHANNEL) == TIM_CHANNEL_4)))           \
#     ||                                        \
#     (((INSTANCE) == TIM21) &&                 \
#      (((CHANNEL) == TIM_CHANNEL_1) ||         \
#       ((CHANNEL) == TIM_CHANNEL_2)))          \
#     ||                                        \
#     (((INSTANCE) == TIM22) &&                 \
#      (((CHANNEL) == TIM_CHANNEL_1) ||         \
#       ((CHANNEL) == TIM_CHANNEL_2))))
# fun define IS_TIM_CLOCK_DIVISION_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   || \
#                                                        ((INSTANCE) == TIM21)  || \
#                                                        ((INSTANCE) == TIM22))
# fun define IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)   || \
#                                                          ((INSTANCE) == TIM21))
# fun define IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)   || \
#                                                          ((INSTANCE) == TIM21)  || \
#                                                          ((INSTANCE) == TIM22))
# fun define IS_TIM_CLOCKSOURCE_TIX_INSTANCE(INSTANCE)        (((INSTANCE) == TIM2)   || \
#                                                          ((INSTANCE) == TIM21))
# fun define IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   || \
#                                                          ((INSTANCE) == TIM21)  || \
#                                                          ((INSTANCE) == TIM22))
# fun define IS_TIM_COUNTER_MODE_SELECT_INSTANCE(INSTANCE)       (((INSTANCE) == TIM2)   || \
#                                                             ((INSTANCE) == TIM21)  || \
#                                                             ((INSTANCE) == TIM22))
# fun define IS_TIM_ENCODER_INTERFACE_INSTANCE(INSTANCE) (((INSTANCE) == TIM2)   || \
#                                                     ((INSTANCE) == TIM21)  || \
#                                                     ((INSTANCE) == TIM22))
# fun define IS_TIM_ETR_INSTANCE(INSTANCE)      (((INSTANCE) == TIM2)  || \
#                                            ((INSTANCE) == TIM21) || \
#                                            ((INSTANCE) == TIM22))
# fun define IS_TIM_MASTER_INSTANCE(INSTANCE)   (((INSTANCE) == TIM2)  || \
#                                            ((INSTANCE) == TIM6)  || \
#                                            ((INSTANCE) == TIM21) || \
#                                            ((INSTANCE) == TIM22))
# fun define IS_TIM_SLAVE_INSTANCE(INSTANCE)    (((INSTANCE) == TIM2)  || \
#                                            ((INSTANCE) == TIM21) || \
#                                            ((INSTANCE) == TIM22))
# fun define IS_TIM_REMAP_INSTANCE(INSTANCE) (((INSTANCE) == TIM2)   || \
#                                         ((INSTANCE) == TIM21)  || \
#                                         ((INSTANCE) == TIM22))
# fun define IS_TIM_SYNCHRO_INSTANCE(INSTANCE)  IS_TIM_MASTER_INSTANCE(INSTANCE)
# fun define IS_TIM_OCXREF_CLEAR_INSTANCE(INSTANCE)  ((INSTANCE) == TIM2)
# fun define IS_TIM_XOR_INSTANCE(INSTANCE)   ((INSTANCE) == TIM2)
# fun define IS_TSC_ALL_INSTANCE(INSTANCE) ((INSTANCE) == TSC)
# fun define IS_UART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
#                                    ((INSTANCE) == USART2))
# fun define IS_USART_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
#                                     ((INSTANCE) == USART2))
# fun define IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
#                                                            ((INSTANCE) == USART2))
# fun define IS_UART_DRIVER_ENABLE_INSTANCE(INSTANCE)    (((INSTANCE) == USART1) || \
#                                                  ((INSTANCE) == USART2) || \
#                                                  ((INSTANCE) == LPUART1))
# fun define IS_UART_HALFDUPLEX_INSTANCE(INSTANCE)    (((INSTANCE) == USART1) || \
#                                                  ((INSTANCE) == USART2) || \
#                                                  ((INSTANCE) == LPUART1))
# fun define IS_UART_LIN_INSTANCE(INSTANCE)    (((INSTANCE) == USART1) || \
#                                           ((INSTANCE) == USART2))
# fun define IS_UART_WAKEUP_FROMSTOP_INSTANCE(INSTANCE)   (((INSTANCE) == USART1) || \
#                                                      ((INSTANCE) == USART2) || \
#                                                      ((INSTANCE) == LPUART1))
# fun define IS_UART_HWFLOW_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
#                                           ((INSTANCE) == USART2) || \
#                                           ((INSTANCE) == LPUART1))
# fun define IS_SMARTCARD_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
#                                         ((INSTANCE) == USART2))
# fun define IS_IRDA_INSTANCE(INSTANCE) (((INSTANCE) == USART1) || \
#                                    ((INSTANCE) == USART2))
# fun define IS_LPUART_INSTANCE(INSTANCE)    ((INSTANCE) == LPUART1)
# fun define IS_IWDG_ALL_INSTANCE(INSTANCE)  ((INSTANCE) == IWDG)
# fun define IS_USB_ALL_INSTANCE(INSTANCE) ((INSTANCE) == USB)
# Skip IS_PCD_ALL_INSTANCE : no need parse
# fun define IS_WWDG_ALL_INSTANCE(INSTANCE)  ((INSTANCE) == WWDG)
# fun define IS_LCD_ALL_INSTANCE(INSTANCE) ((INSTANCE) == LCD)
LPUART1_IRQn = 0x1D
AES_LPUART1_IRQn = 0x1D
RNG_LPUART1_IRQn = 0x1D
TIM6_IRQn = 0x11
RCC_IRQn = 0x4
DMA1_Channel4_5_IRQn = 0xB
ADC1_IRQn = 0xC
# Skip LPUART1_IRQHandler : no need parse
# Skip RNG_LPUART1_IRQHandler : no need parse
# Skip AES_LPUART1_IRQHandler : no need parse
# Skip TIM6_IRQHandler : no need parse
# Skip RCC_IRQHandler : no need parse
# Skip DMA1_Channel4_5_IRQHandler : no need parse
# Skip ADC1_IRQHandler : no need parse
# struct ADC_TypeDef

class ADC_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ISR',	ctypes.c_uint32),
		('IER',	ctypes.c_uint32),
		('CR',	ctypes.c_uint32),
		('CFGR1',	ctypes.c_uint32),
		('CFGR2',	ctypes.c_uint32),
		('SMPR',	ctypes.c_uint32),
		('RESERVED1',	ctypes.c_uint32),
		('RESERVED2',	ctypes.c_uint32),
		('TR',	ctypes.c_uint32),
		('RESERVED3',	ctypes.c_uint32),
		('CHSELR',	ctypes.c_uint32),
		('RESERVED4',	ctypes.c_uint8 * 20),
		('DR',	ctypes.c_uint32),
		('RESERVED5',	ctypes.c_uint8 * 112),
		('CALFACT',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct ADC_Common_TypeDef

class ADC_Common_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CCR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct AES_TypeDef

class AES_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR',	ctypes.c_uint32),
		('SR',	ctypes.c_uint32),
		('DINR',	ctypes.c_uint32),
		('DOUTR',	ctypes.c_uint32),
		('KEYR0',	ctypes.c_uint32),
		('KEYR1',	ctypes.c_uint32),
		('KEYR2',	ctypes.c_uint32),
		('KEYR3',	ctypes.c_uint32),
		('IVR0',	ctypes.c_uint32),
		('IVR1',	ctypes.c_uint32),
		('IVR2',	ctypes.c_uint32),
		('IVR3',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct COMP_TypeDef

class COMP_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CSR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct COMP_Common_TypeDef

class COMP_Common_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CSR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct CRC_TypeDef

class CRC_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('DR',	ctypes.c_uint32),
		('IDR',	ctypes.c_uint8),
		('RESERVED0',	ctypes.c_uint8),
		('RESERVED1',	ctypes.c_uint16),
		('CR',	ctypes.c_uint32),
		('RESERVED2',	ctypes.c_uint32),
		('INIT',	ctypes.c_uint32),
		('POL',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct CRS_TypeDef

class CRS_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR',	ctypes.c_uint32),
		('CFGR',	ctypes.c_uint32),
		('ISR',	ctypes.c_uint32),
		('ICR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct DAC_TypeDef

class DAC_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR',	ctypes.c_uint32),
		('SWTRIGR',	ctypes.c_uint32),
		('DHR12R1',	ctypes.c_uint32),
		('DHR12L1',	ctypes.c_uint32),
		('DHR8R1',	ctypes.c_uint32),
		('RESERVED0',	ctypes.c_uint8 * 24),
		('DOR1',	ctypes.c_uint32),
		('RESERVED1',	ctypes.c_uint32),
		('SR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct DBGMCU_TypeDef

class DBGMCU_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('IDCODE',	ctypes.c_uint32),
		('CR',	ctypes.c_uint32),
		('APB1FZ',	ctypes.c_uint32),
		('APB2FZ',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct DMA_Channel_TypeDef

class DMA_Channel_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CCR',	ctypes.c_uint32),
		('CNDTR',	ctypes.c_uint32),
		('CPAR',	ctypes.c_uint32),
		('CMAR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct DMA_TypeDef

class DMA_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ISR',	ctypes.c_uint32),
		('IFCR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct DMA_Request_TypeDef

class DMA_Request_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CSELR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct EXTI_TypeDef

class EXTI_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('IMR',	ctypes.c_uint32),
		('EMR',	ctypes.c_uint32),
		('RTSR',	ctypes.c_uint32),
		('FTSR',	ctypes.c_uint32),
		('SWIER',	ctypes.c_uint32),
		('PR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct FLASH_TypeDef

class FLASH_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ACR',	ctypes.c_uint32),
		('PECR',	ctypes.c_uint32),
		('PDKEYR',	ctypes.c_uint32),
		('PEKEYR',	ctypes.c_uint32),
		('PRGKEYR',	ctypes.c_uint32),
		('OPTKEYR',	ctypes.c_uint32),
		('SR',	ctypes.c_uint32),
		('OPTR',	ctypes.c_uint32),
		('WRPR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct OB_TypeDef

class OB_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('RDP',	ctypes.c_uint32),
		('USER',	ctypes.c_uint32),
		('WRP01',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct GPIO_TypeDef

class GPIO_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('MODER',	ctypes.c_uint32),
		('OTYPER',	ctypes.c_uint32),
		('OSPEEDR',	ctypes.c_uint32),
		('PUPDR',	ctypes.c_uint32),
		('IDR',	ctypes.c_uint32),
		('ODR',	ctypes.c_uint32),
		('BSRR',	ctypes.c_uint32),
		('LCKR',	ctypes.c_uint32),
		('AFR',	ctypes.c_uint64),
		('BRR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LPTIM_TypeDef

class LPTIM_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ISR',	ctypes.c_uint32),
		('ICR',	ctypes.c_uint32),
		('IER',	ctypes.c_uint32),
		('CFGR',	ctypes.c_uint32),
		('CR',	ctypes.c_uint32),
		('CMP',	ctypes.c_uint32),
		('ARR',	ctypes.c_uint32),
		('CNT',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct SYSCFG_TypeDef

class SYSCFG_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CFGR1',	ctypes.c_uint32),
		('CFGR2',	ctypes.c_uint32),
		('EXTICR',	ctypes.c_uint8 * 16),
		('RESERVED',	ctypes.c_uint64),
		('CFGR3',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct I2C_TypeDef

class I2C_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR1',	ctypes.c_uint32),
		('CR2',	ctypes.c_uint32),
		('OAR1',	ctypes.c_uint32),
		('OAR2',	ctypes.c_uint32),
		('TIMINGR',	ctypes.c_uint32),
		('TIMEOUTR',	ctypes.c_uint32),
		('ISR',	ctypes.c_uint32),
		('ICR',	ctypes.c_uint32),
		('PECR',	ctypes.c_uint32),
		('RXDR',	ctypes.c_uint32),
		('TXDR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct IWDG_TypeDef

class IWDG_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('KR',	ctypes.c_uint32),
		('PR',	ctypes.c_uint32),
		('RLR',	ctypes.c_uint32),
		('SR',	ctypes.c_uint32),
		('WINR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LCD_TypeDef

class LCD_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR',	ctypes.c_uint32),
		('FCR',	ctypes.c_uint32),
		('SR',	ctypes.c_uint32),
		('CLR',	ctypes.c_uint32),
		('RESERVED',	ctypes.c_uint32),
		('RAM',	ctypes.c_uint8 * 64),
	]
	def ref(self):
		return ctypes.byref(self)

# struct FIREWALL_TypeDef

class FIREWALL_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CSSA',	ctypes.c_uint32),
		('CSL',	ctypes.c_uint32),
		('NVDSSA',	ctypes.c_uint32),
		('NVDSL',	ctypes.c_uint32),
		('VDSSA',	ctypes.c_uint32),
		('VDSL',	ctypes.c_uint32),
		('LSSA',	ctypes.c_uint32),
		('LSL',	ctypes.c_uint32),
		('CR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct PWR_TypeDef

class PWR_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR',	ctypes.c_uint32),
		('CSR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct RCC_TypeDef

class RCC_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR',	ctypes.c_uint32),
		('ICSCR',	ctypes.c_uint32),
		('CRRCR',	ctypes.c_uint32),
		('CFGR',	ctypes.c_uint32),
		('CIER',	ctypes.c_uint32),
		('CIFR',	ctypes.c_uint32),
		('CICR',	ctypes.c_uint32),
		('IOPRSTR',	ctypes.c_uint32),
		('AHBRSTR',	ctypes.c_uint32),
		('APB2RSTR',	ctypes.c_uint32),
		('APB1RSTR',	ctypes.c_uint32),
		('IOPENR',	ctypes.c_uint32),
		('AHBENR',	ctypes.c_uint32),
		('APB2ENR',	ctypes.c_uint32),
		('APB1ENR',	ctypes.c_uint32),
		('IOPSMENR',	ctypes.c_uint32),
		('AHBSMENR',	ctypes.c_uint32),
		('APB2SMENR',	ctypes.c_uint32),
		('APB1SMENR',	ctypes.c_uint32),
		('CCIPR',	ctypes.c_uint32),
		('CSR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct RNG_TypeDef

class RNG_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR',	ctypes.c_uint32),
		('SR',	ctypes.c_uint32),
		('DR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct RTC_TypeDef

class RTC_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('TR',	ctypes.c_uint32),
		('DR',	ctypes.c_uint32),
		('CR',	ctypes.c_uint32),
		('ISR',	ctypes.c_uint32),
		('PRER',	ctypes.c_uint32),
		('WUTR',	ctypes.c_uint32),
		('RESERVED',	ctypes.c_uint32),
		('ALRMAR',	ctypes.c_uint32),
		('ALRMBR',	ctypes.c_uint32),
		('WPR',	ctypes.c_uint32),
		('SSR',	ctypes.c_uint32),
		('SHIFTR',	ctypes.c_uint32),
		('TSTR',	ctypes.c_uint32),
		('TSDR',	ctypes.c_uint32),
		('TSSSR',	ctypes.c_uint32),
		('CALR',	ctypes.c_uint32),
		('TAMPCR',	ctypes.c_uint32),
		('ALRMASSR',	ctypes.c_uint32),
		('ALRMBSSR',	ctypes.c_uint32),
		('OR',	ctypes.c_uint32),
		('BKP0R',	ctypes.c_uint32),
		('BKP1R',	ctypes.c_uint32),
		('BKP2R',	ctypes.c_uint32),
		('BKP3R',	ctypes.c_uint32),
		('BKP4R',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct SPI_TypeDef

class SPI_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR1',	ctypes.c_uint32),
		('CR2',	ctypes.c_uint32),
		('SR',	ctypes.c_uint32),
		('DR',	ctypes.c_uint32),
		('CRCPR',	ctypes.c_uint32),
		('RXCRCR',	ctypes.c_uint32),
		('TXCRCR',	ctypes.c_uint32),
		('I2SCFGR',	ctypes.c_uint32),
		('I2SPR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TIM_TypeDef

class TIM_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR1',	ctypes.c_uint32),
		('CR2',	ctypes.c_uint32),
		('SMCR',	ctypes.c_uint32),
		('DIER',	ctypes.c_uint32),
		('SR',	ctypes.c_uint32),
		('EGR',	ctypes.c_uint32),
		('CCMR1',	ctypes.c_uint32),
		('CCMR2',	ctypes.c_uint32),
		('CCER',	ctypes.c_uint32),
		('CNT',	ctypes.c_uint32),
		('PSC',	ctypes.c_uint32),
		('ARR',	ctypes.c_uint32),
		('RESERVED12',	ctypes.c_uint32),
		('CCR1',	ctypes.c_uint32),
		('CCR2',	ctypes.c_uint32),
		('CCR3',	ctypes.c_uint32),
		('CCR4',	ctypes.c_uint32),
		('RESERVED17',	ctypes.c_uint32),
		('DCR',	ctypes.c_uint32),
		('DMAR',	ctypes.c_uint32),
		('OR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TSC_TypeDef

class TSC_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR',	ctypes.c_uint32),
		('IER',	ctypes.c_uint32),
		('ICR',	ctypes.c_uint32),
		('ISR',	ctypes.c_uint32),
		('IOHCR',	ctypes.c_uint32),
		('RESERVED1',	ctypes.c_uint32),
		('IOASCR',	ctypes.c_uint32),
		('RESERVED2',	ctypes.c_uint32),
		('IOSCR',	ctypes.c_uint32),
		('RESERVED3',	ctypes.c_uint32),
		('IOCCR',	ctypes.c_uint32),
		('RESERVED4',	ctypes.c_uint32),
		('IOGCSR',	ctypes.c_uint32),
		('IOGXCR',	ctypes.c_uint8 * 32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct USART_TypeDef

class USART_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR1',	ctypes.c_uint32),
		('CR2',	ctypes.c_uint32),
		('CR3',	ctypes.c_uint32),
		('BRR',	ctypes.c_uint32),
		('GTPR',	ctypes.c_uint32),
		('RTOR',	ctypes.c_uint32),
		('RQR',	ctypes.c_uint32),
		('ISR',	ctypes.c_uint32),
		('ICR',	ctypes.c_uint32),
		('RDR',	ctypes.c_uint32),
		('TDR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct WWDG_TypeDef

class WWDG_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CR',	ctypes.c_uint32),
		('CFR',	ctypes.c_uint32),
		('SR',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct USB_TypeDef

class USB_TypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('EP0R',	ctypes.c_uint16),
		('RESERVED0',	ctypes.c_uint16),
		('EP1R',	ctypes.c_uint16),
		('RESERVED1',	ctypes.c_uint16),
		('EP2R',	ctypes.c_uint16),
		('RESERVED2',	ctypes.c_uint16),
		('EP3R',	ctypes.c_uint16),
		('RESERVED3',	ctypes.c_uint16),
		('EP4R',	ctypes.c_uint16),
		('RESERVED4',	ctypes.c_uint16),
		('EP5R',	ctypes.c_uint16),
		('RESERVED5',	ctypes.c_uint16),
		('EP6R',	ctypes.c_uint16),
		('RESERVED6',	ctypes.c_uint16),
		('EP7R',	ctypes.c_uint16),
		('RESERVED7',	ctypes.c_uint8 * 34),
		('CNTR',	ctypes.c_uint16),
		('RESERVED8',	ctypes.c_uint16),
		('ISTR',	ctypes.c_uint16),
		('RESERVED9',	ctypes.c_uint16),
		('FNR',	ctypes.c_uint16),
		('RESERVEDA',	ctypes.c_uint16),
		('DADDR',	ctypes.c_uint16),
		('RESERVEDB',	ctypes.c_uint16),
		('BTABLE',	ctypes.c_uint16),
		('RESERVEDC',	ctypes.c_uint16),
		('LPMCSR',	ctypes.c_uint16),
		('RESERVEDD',	ctypes.c_uint16),
		('BCDR',	ctypes.c_uint16),
		('RESERVEDE',	ctypes.c_uint16),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_adc_ex.h : 

# empty define __STM32L0xx_HAL_ADC_EX_H
ADC_SINGLE_ENDED = 0x0
ADC_EXTERNALTRIGCONV_T6_TRGO = 0x0
ADC_EXTERNALTRIGCONV_T21_CC2 = 0x40
ADC_EXTERNALTRIGCONV_T2_TRGO = 0x80
ADC_EXTERNALTRIGCONV_T2_CC4 = 0xC0
ADC_EXTERNALTRIGCONV_T22_TRGO = 0x100
ADC_EXTERNALTRIGCONV_T3_TRGO = 0x180
ADC_EXTERNALTRIGCONV_EXT_IT11 = 0x1C0
ADC_SOFTWARE_START = 0x1C1
ADC_EXTERNALTRIGCONV_T21_TRGO = 0x100
# Skip ADC_EXTERNALTRIGCONV_T2_CC3 : no need parse
ADC_FLAG_SENSOR = 0x40000000
ADC_FLAG_VREFINT = 0x40000000
# fun define IS_ADC_SINGLE_DIFFERENTIAL(SING_DIFF)   ((SING_DIFF) == ADC_SINGLE_ENDED)
# fun define IS_ADC_CALFACT(_Calibration_Factor_) ((_Calibration_Factor_) <= ((uint32_t)0x7FU))
# fun define IS_ADC_EXTTRIG(CONV) (((CONV) == ADC_EXTERNALTRIGCONV_T6_TRGO  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T21_CC2  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T2_TRGO  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T2_CC4   ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T22_TRGO ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T21_TRGO ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T2_CC3   ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T3_TRGO  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_EXT_IT11 ) || \
#                              ((CONV) == ADC_SOFTWARE_START))
# fun define IS_ADC_EXTTRIG(CONV) (((CONV) == ADC_EXTERNALTRIGCONV_T6_TRGO  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T21_CC2  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T2_TRGO  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T2_CC4   ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T22_TRGO ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T2_CC3   ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T3_TRGO  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_EXT_IT11 ) || \
#                              ((CONV) == ADC_SOFTWARE_START))
# fun define IS_ADC_EXTTRIG(CONV) (((CONV) == ADC_EXTERNALTRIGCONV_T6_TRGO  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T21_CC2  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T2_TRGO  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T2_CC4   ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T22_TRGO ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T21_TRGO ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_T3_TRGO  ) || \
#                              ((CONV) == ADC_EXTERNALTRIGCONV_EXT_IT11 ) || \
#                              ((CONV) == ADC_SOFTWARE_START))
# ----------------------------------------

# file stm32l0xx_hal_adc.h : 

# Enum HAL_ADC_CallbackIDTypeDef
# Skip HAL_ADC_CONVERSION_COMPLETE_CB_ID : no need parse
# Skip HAL_ADC_CONVERSION_HALF_CB_ID : no need parse
# Skip HAL_ADC_LEVEL_OUT_OF_WINDOW_1_CB_ID : no need parse
# Skip HAL_ADC_ERROR_CB_ID : no need parse
# Skip HAL_ADC_INJ_CONVERSION_COMPLETE_CB_ID : no need parse
# Skip HAL_ADC_MSPINIT_CB_ID : no need parse
# Skip HAL_ADC_MSPDEINIT_CB_ID : no need parse
# empty define __STM32L0xx_HAL_ADC_H
HAL_ADC_STATE_RESET = 0x0
HAL_ADC_STATE_READY = 0x1
HAL_ADC_STATE_BUSY_INTERNAL = 0x2
HAL_ADC_STATE_TIMEOUT = 0x4
HAL_ADC_STATE_ERROR_INTERNAL = 0x10
HAL_ADC_STATE_ERROR_CONFIG = 0x20
HAL_ADC_STATE_ERROR_DMA = 0x40
HAL_ADC_STATE_REG_BUSY = 0x100
HAL_ADC_STATE_REG_EOC = 0x200
HAL_ADC_STATE_REG_OVR = 0x400
HAL_ADC_STATE_REG_EOSMP = 0x800
HAL_ADC_STATE_INJ_BUSY = 0x1000
HAL_ADC_STATE_INJ_EOC = 0x2000
HAL_ADC_STATE_INJ_JQOVF = 0x4000
HAL_ADC_STATE_AWD1 = 0x10000
HAL_ADC_STATE_AWD2 = 0x20000
HAL_ADC_STATE_AWD3 = 0x40000
HAL_ADC_STATE_MULTIMODE_SLAVE = 0x100000
HAL_ADC_ERROR_NONE = 0x0
HAL_ADC_ERROR_INTERNAL = 0x1
HAL_ADC_ERROR_OVR = 0x2
HAL_ADC_ERROR_DMA = 0x4
# Skip HAL_ADC_ERROR_INVALID_CALLBACK : no need parse
ADC_ENABLE_TIMEOUT = 0xA
ADC_DISABLE_TIMEOUT = 0xA
ADC_STOP_CONVERSION_TIMEOUT = 0xA
ADC_DELAY_10US_MIN_CPU_CYCLES = 0x708
ADC_CLOCK_ASYNC_DIV1 = 0x0
ADC_CLOCK_ASYNC_DIV2 = 0x40000
ADC_CLOCK_ASYNC_DIV4 = 0x80000
ADC_CLOCK_ASYNC_DIV6 = 0xC0000
ADC_CLOCK_ASYNC_DIV8 = 0x100000
ADC_CLOCK_ASYNC_DIV10 = 0x140000
ADC_CLOCK_ASYNC_DIV12 = 0x180000
ADC_CLOCK_ASYNC_DIV16 = 0x1C0000
ADC_CLOCK_ASYNC_DIV32 = 0x200000
ADC_CLOCK_ASYNC_DIV64 = 0x240000
ADC_CLOCK_ASYNC_DIV128 = 0x280000
ADC_CLOCK_ASYNC_DIV256 = 0x2C0000
ADC_CLOCK_SYNC_PCLK_DIV1 = 0xC0000000
ADC_CLOCK_SYNC_PCLK_DIV2 = 0x40000000
ADC_CLOCK_SYNC_PCLK_DIV4 = 0x80000000
ADC_RESOLUTION_12B = 0x0
ADC_RESOLUTION_10B = 0x8
ADC_RESOLUTION_8B = 0x10
ADC_RESOLUTION_6B = 0x18
ADC_DATAALIGN_RIGHT = 0x0
ADC_DATAALIGN_LEFT = 0x20
ADC_EXTERNALTRIGCONVEDGE_NONE = 0x0
ADC_EXTERNALTRIGCONVEDGE_RISING = 0x400
ADC_EXTERNALTRIGCONVEDGE_FALLING = 0x800
ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING = 0xC00
ADC_EOC_SINGLE_CONV = 0x4
ADC_EOC_SEQ_CONV = 0x8
ADC_OVR_DATA_PRESERVED = 0x0
ADC_OVR_DATA_OVERWRITTEN = 0x1000
ADC_RANK_CHANNEL_NUMBER = 0x1000
ADC_RANK_NONE = 0x1001
ADC_CHANNEL_0 = 0x1
ADC_CHANNEL_1 = 0x4000002
ADC_CHANNEL_2 = 0x8000004
ADC_CHANNEL_3 = 0xC000008
ADC_CHANNEL_4 = 0x10000010
ADC_CHANNEL_5 = 0x14000020
ADC_CHANNEL_6 = 0x18000040
ADC_CHANNEL_7 = 0x1C000080
ADC_CHANNEL_8 = 0x20000100
ADC_CHANNEL_9 = 0x24000200
ADC_CHANNEL_10 = 0x28000400
ADC_CHANNEL_11 = 0x2C000800
ADC_CHANNEL_12 = 0x30001000
ADC_CHANNEL_13 = 0x34002000
ADC_CHANNEL_14 = 0x38004000
ADC_CHANNEL_15 = 0x3C008000
ADC_CHANNEL_16 = 0x40010000
ADC_CHANNEL_17 = 0x44020000
ADC_CHANNEL_18 = 0x48040000
ADC_CHANNEL_VLCD = 0x40010000
ADC_CHANNEL_VREFINT = 0x44020000
ADC_CHANNEL_TEMPSENSOR = 0x48040000
ADC_CHANNEL_MASK = 0x7FFFF
ADC_CHANNEL_AWD_MASK = 0x7C000000
ADC_SAMPLETIME_1CYCLE_5 = 0x0
ADC_SAMPLETIME_3CYCLES_5 = 0x1
ADC_SAMPLETIME_7CYCLES_5 = 0x2
ADC_SAMPLETIME_12CYCLES_5 = 0x3
ADC_SAMPLETIME_19CYCLES_5 = 0x4
ADC_SAMPLETIME_39CYCLES_5 = 0x5
ADC_SAMPLETIME_79CYCLES_5 = 0x6
ADC_SAMPLETIME_160CYCLES_5 = 0x7
ADC_SCAN_DIRECTION_FORWARD = 0x1
ADC_SCAN_DIRECTION_BACKWARD = 0x2
ADC_SCAN_ENABLE = 0x1
ADC_OVERSAMPLING_RATIO_2 = 0x0
ADC_OVERSAMPLING_RATIO_4 = 0x4
ADC_OVERSAMPLING_RATIO_8 = 0x8
ADC_OVERSAMPLING_RATIO_16 = 0xC
ADC_OVERSAMPLING_RATIO_32 = 0x10
ADC_OVERSAMPLING_RATIO_64 = 0x14
ADC_OVERSAMPLING_RATIO_128 = 0x18
ADC_OVERSAMPLING_RATIO_256 = 0x1C
ADC_RIGHTBITSHIFT_NONE = 0x0
ADC_RIGHTBITSHIFT_1 = 0x20
ADC_RIGHTBITSHIFT_2 = 0x40
ADC_RIGHTBITSHIFT_3 = 0x60
ADC_RIGHTBITSHIFT_4 = 0x80
ADC_RIGHTBITSHIFT_5 = 0xA0
ADC_RIGHTBITSHIFT_6 = 0xC0
ADC_RIGHTBITSHIFT_7 = 0xE0
ADC_RIGHTBITSHIFT_8 = 0x100
ADC_TRIGGEREDMODE_SINGLE_TRIGGER = 0x0
ADC_TRIGGEREDMODE_MULTI_TRIGGER = 0x200
ADC_ANALOGWATCHDOG_NONE = 0x0
ADC_ANALOGWATCHDOG_SINGLE_REG = 0xC00000
ADC_ANALOGWATCHDOG_ALL_REG = 0x800000
ADC_REGULAR_GROUP = 0xC
ADC_AWD_EVENT = 0x80
ADC_OVR_EVENT = 0x10
ADC_IT_RDY = 0x1
ADC_IT_EOSMP = 0x2
ADC_IT_EOC = 0x4
ADC_IT_EOS = 0x8
ADC_IT_OVR = 0x10
ADC_IT_AWD = 0x80
ADC_IT_EOCAL = 0x800
ADC_FLAG_RDY = 0x1
ADC_FLAG_EOSMP = 0x2
ADC_FLAG_EOC = 0x4
ADC_FLAG_EOS = 0x8
ADC_FLAG_OVR = 0x10
ADC_FLAG_AWD = 0x80
ADC_FLAG_EOCAL = 0x800
ADC_FLAG_ALL = 0x89F
# fun define __HAL_ADC_RESET_HANDLE_STATE(__HANDLE__)                               \
#  do{                                                                          \
#     (__HANDLE__)->State = HAL_ADC_STATE_RESET;                               \
#     (__HANDLE__)->MspInitCallback = NULL;                                     \
#     (__HANDLE__)->MspDeInitCallback = NULL;                                   \
#    } while(0)
# fun define __HAL_ADC_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_ADC_STATE_RESET)
# fun define __HAL_ADC_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR |= ADC_CR_ADEN)
# fun define ADC_ENABLING_CONDITIONS(__HANDLE__)           \
#       (( ( ((__HANDLE__)->Instance->CR) &                  \
#            (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | \
#             ADC_CR_ADDIS | ADC_CR_ADEN )                   \
#           ) == RESET                                       \
#        ) ? SET : RESET)
# fun define __HAL_ADC_DISABLE(__HANDLE__)                                          \
#  do{                                                                          \
#         (__HANDLE__)->Instance->CR |= ADC_CR_ADDIS;                           \
#          __HAL_ADC_CLEAR_FLAG((__HANDLE__), (ADC_FLAG_EOSMP | ADC_FLAG_RDY)); \
#  } while(0)
# fun define ADC_DISABLING_CONDITIONS(__HANDLE__)                             \
#       (( ( ((__HANDLE__)->Instance->CR) &                                     \
#            (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN   \
#        ) ? SET : RESET)
# fun define ADC_IS_ENABLE(__HANDLE__)                                                    \
#       (( ((((__HANDLE__)->Instance->CR) & (ADC_CR_ADEN | ADC_CR_ADDIS)) == ADC_CR_ADEN) && \
#          ((((__HANDLE__)->Instance->ISR) & ADC_FLAG_RDY) == ADC_FLAG_RDY)                  \
#        ) ? SET : RESET)
# fun define ADC_GET_RESOLUTION(__HANDLE__) (((__HANDLE__)->Instance->CFGR1) & ADC_CFGR1_RES)
# fun define ADC_IS_SOFTWARE_START_REGULAR(__HANDLE__)                              \
#  (((__HANDLE__)->Instance->CFGR1 & ADC_CFGR1_EXTEN) == RESET)
# fun define ADC_IS_CONVERSION_ONGOING_REGULAR(__HANDLE__)                          \
#  (( (((__HANDLE__)->Instance->CR) & ADC_CR_ADSTART) == RESET                  \
#  ) ? RESET : SET)
# fun define ADC_CONTINUOUS(_CONTINUOUS_MODE_) ((_CONTINUOUS_MODE_) << 13U)
# fun define ADC_SCANDIR(_SCAN_MODE_)                                   \
#  ( ( (_SCAN_MODE_) == (ADC_SCAN_DIRECTION_BACKWARD)                           \
#    )? (ADC_CFGR1_SCANDIR) : (0x00000000U)                                      \
#  )
# fun define __HAL_ADC_CFGR1_DISCONTINUOUS_NUM(_NBR_DISCONTINUOUS_CONV_) (((_NBR_DISCONTINUOUS_CONV_) - 1U) << 17U)
# fun define ADC_DMACONTREQ(_DMAContReq_MODE_) ((_DMAContReq_MODE_) << 1U)
# fun define __HAL_ADC_CFGR1_AutoDelay(_AutoDelay_) ((_AutoDelay_) << 14U)
# fun define __HAL_ADC_CFGR1_AUTOFF(_AUTOFF_) ((_AUTOFF_) << 15U)
# fun define ADC_TRX_HIGHTHRESHOLD(_Threshold_) ((_Threshold_) << 16U)
# fun define __HAL_ADC_CCR_LOWFREQUENCY(_LOW_FREQUENCY_MODE_) ((_LOW_FREQUENCY_MODE_) << 25U)
# fun define ADC_OFFSET_SHIFT_RESOLUTION(__HANDLE__, _Offset_) \
#        ((_Offset_) << ((((__HANDLE__)->Instance->CFGR & ADC_CFGR1_RES) >> 3U)*2U))
# fun define ADC_AWD1THRESHOLD_SHIFT_RESOLUTION(__HANDLE__, _Threshold_) \
#        ((_Threshold_) << ((((__HANDLE__)->Instance->CFGR1 & ADC_CFGR1_RES) >> 3U)*2U))
# fun define __HAL_ADC_Value_Shift_left(_Value_, _Shift_) ((_Value_) << (_Shift_))
# fun define __HAL_ADC_ENABLE_IT(__HANDLE__, __INTERRUPT__)  \
#  (((__HANDLE__)->Instance->IER) |= (__INTERRUPT__))
# fun define __HAL_ADC_DISABLE_IT(__HANDLE__, __INTERRUPT__) \
#  (((__HANDLE__)->Instance->IER) &= ~(__INTERRUPT__))
# fun define __HAL_ADC_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)                     \
#  (((__HANDLE__)->Instance->IER & (__INTERRUPT__)) == (__INTERRUPT__))
# fun define __HAL_ADC_CLEAR_FLAG(__HANDLE__, __FLAG__) \
#  (((__HANDLE__)->Instance->ISR) = (__FLAG__))
# fun define __HAL_ADC_GET_FLAG(__HANDLE__, __FLAG__) \
#  ((((__HANDLE__)->Instance->ISR) & (__FLAG__)) == (__FLAG__))
# Skip ADC_STATE_CLR_SET : no need parse
# fun define ADC_CLEAR_ERRORCODE(__HANDLE__)                                        \
#  ((__HANDLE__)->ErrorCode = HAL_ADC_ERROR_NONE)
# fun define __HAL_ADC_CLOCK_PRESCALER(__HANDLE__)                                       \
#  do{                                                                               \
#      if ((((__HANDLE__)->Init.ClockPrescaler) == ADC_CLOCK_SYNC_PCLK_DIV1) ||  \
#          (((__HANDLE__)->Init.ClockPrescaler) == ADC_CLOCK_SYNC_PCLK_DIV2) ||  \
#          (((__HANDLE__)->Init.ClockPrescaler) == ADC_CLOCK_SYNC_PCLK_DIV4))    \
#      {                                                                             \
#        (__HANDLE__)->Instance->CFGR2 &= ~(ADC_CFGR2_CKMODE);                       \
#        (__HANDLE__)->Instance->CFGR2 |=  (__HANDLE__)->Init.ClockPrescaler;        \
#      }                                                                             \
#      else                                                                          \
#      {                                                                             \
#        /* CKMOD bits must be reset */                                              \
#        (__HANDLE__)->Instance->CFGR2 &= ~(ADC_CFGR2_CKMODE);                       \
#        ADC->CCR &= ~(ADC_CCR_PRESC);                                               \
#        ADC->CCR |=  (__HANDLE__)->Init.ClockPrescaler;                             \
#      }                                                                             \
#  } while(0)
# fun define IS_ADC_CLOCKPRESCALER(ADC_CLOCK) (((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV1) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_SYNC_PCLK_DIV1) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_SYNC_PCLK_DIV2) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_SYNC_PCLK_DIV4) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV1  ) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV2  ) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV4  ) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV6  ) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV8  ) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV10 ) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV12 ) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV16 ) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV32 ) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV64 ) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV128 ) ||\
#                                          ((ADC_CLOCK) == ADC_CLOCK_ASYNC_DIV256))
# fun define IS_ADC_RESOLUTION(RESOLUTION) (((RESOLUTION) == ADC_RESOLUTION_12B) || \
#                                       ((RESOLUTION) == ADC_RESOLUTION_10B) || \
#                                       ((RESOLUTION) == ADC_RESOLUTION_8B) || \
#                                       ((RESOLUTION) == ADC_RESOLUTION_6B))
# fun define IS_ADC_RESOLUTION_8_6_BITS(RESOLUTION) (((RESOLUTION) == ADC_RESOLUTION_8B) || \
#                                                ((RESOLUTION) == ADC_RESOLUTION_6B))
# fun define IS_ADC_DATA_ALIGN(ALIGN) (((ALIGN) == ADC_DATAALIGN_RIGHT) || \
#                                  ((ALIGN) == ADC_DATAALIGN_LEFT))
# fun define IS_ADC_EXTTRIG_EDGE(EDGE) (((EDGE) == ADC_EXTERNALTRIGCONVEDGE_NONE) || \
#                                   ((EDGE) == ADC_EXTERNALTRIGCONVEDGE_RISING) || \
#                                   ((EDGE) == ADC_EXTERNALTRIGCONVEDGE_FALLING) || \
#                                   ((EDGE) == ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING))
# fun define IS_ADC_EOC_SELECTION(EOC_SELECTION) (((EOC_SELECTION) == ADC_EOC_SINGLE_CONV)   || \
#                                             ((EOC_SELECTION) == ADC_EOC_SEQ_CONV))
# fun define IS_ADC_OVERRUN(OVR) (((OVR) == ADC_OVR_DATA_PRESERVED) || \
#                             ((OVR) == ADC_OVR_DATA_OVERWRITTEN))
# fun define IS_ADC_RANK(WATCHDOG) (((WATCHDOG) == ADC_RANK_CHANNEL_NUMBER) || \
#                               ((WATCHDOG) == ADC_RANK_NONE))
# fun define IS_ADC_CHANNEL(CHANNEL) (((CHANNEL) == ADC_CHANNEL_0)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_1)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_2)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_3)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_4)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_5)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_6)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_7)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_8)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_9)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_10)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_11)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_12)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_13)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_14)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_15)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_TEMPSENSOR)  || \
#                                 ((CHANNEL) == ADC_CHANNEL_VREFINT)     || \
#                                 ((CHANNEL) == ADC_CHANNEL_VLCD))
# fun define IS_ADC_CHANNEL(CHANNEL) (((CHANNEL) == ADC_CHANNEL_0)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_1)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_2)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_3)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_4)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_5)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_6)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_7)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_8)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_9)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_10)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_11)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_12)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_13)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_14)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_15)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_TEMPSENSOR)  || \
#                                 ((CHANNEL) == ADC_CHANNEL_VREFINT))
# fun define IS_ADC_CHANNEL(CHANNEL) (((CHANNEL) == ADC_CHANNEL_0)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_1)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_2)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_3)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_4)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_5)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_6)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_7)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_8)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_9)           || \
#                                 ((CHANNEL) == ADC_CHANNEL_10)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_11)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_12)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_13)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_14)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_15)          || \
#                                 ((CHANNEL) == ADC_CHANNEL_VREFINT))
# fun define IS_ADC_SAMPLE_TIME(TIME) (((TIME) == ADC_SAMPLETIME_1CYCLE_5   ) || \
#                                  ((TIME) == ADC_SAMPLETIME_3CYCLES_5  ) || \
#                                  ((TIME) == ADC_SAMPLETIME_7CYCLES_5  ) || \
#                                  ((TIME) == ADC_SAMPLETIME_12CYCLES_5 ) || \
#                                  ((TIME) == ADC_SAMPLETIME_19CYCLES_5 ) || \
#                                  ((TIME) == ADC_SAMPLETIME_39CYCLES_5 ) || \
#                                  ((TIME) == ADC_SAMPLETIME_79CYCLES_5 ) || \
#                                  ((TIME) == ADC_SAMPLETIME_160CYCLES_5))
# fun define IS_ADC_SCAN_MODE(SCAN_MODE) (((SCAN_MODE) == ADC_SCAN_DIRECTION_FORWARD) || \
#                                     ((SCAN_MODE) == ADC_SCAN_DIRECTION_BACKWARD))
# fun define IS_ADC_OVERSAMPLING_RATIO(RATIO)          (((RATIO) == ADC_OVERSAMPLING_RATIO_2   ) || \
#                                                   ((RATIO) == ADC_OVERSAMPLING_RATIO_4   ) || \
#                                                   ((RATIO) == ADC_OVERSAMPLING_RATIO_8   ) || \
#                                                   ((RATIO) == ADC_OVERSAMPLING_RATIO_16  ) || \
#                                                   ((RATIO) == ADC_OVERSAMPLING_RATIO_32  ) || \
#                                                   ((RATIO) == ADC_OVERSAMPLING_RATIO_64  ) || \
#                                                   ((RATIO) == ADC_OVERSAMPLING_RATIO_128 ) || \
#                                                   ((RATIO) == ADC_OVERSAMPLING_RATIO_256 ))
# fun define IS_ADC_RIGHT_BIT_SHIFT(SHIFT)               (((SHIFT) == ADC_RIGHTBITSHIFT_NONE) || \
#                                                     ((SHIFT) == ADC_RIGHTBITSHIFT_1   ) || \
#                                                     ((SHIFT) == ADC_RIGHTBITSHIFT_2   ) || \
#                                                     ((SHIFT) == ADC_RIGHTBITSHIFT_3   ) || \
#                                                     ((SHIFT) == ADC_RIGHTBITSHIFT_4   ) || \
#                                                     ((SHIFT) == ADC_RIGHTBITSHIFT_5   ) || \
#                                                     ((SHIFT) == ADC_RIGHTBITSHIFT_6   ) || \
#                                                     ((SHIFT) == ADC_RIGHTBITSHIFT_7   ) || \
#                                                     ((SHIFT) == ADC_RIGHTBITSHIFT_8   ))
# fun define IS_ADC_TRIGGERED_OVERSAMPLING_MODE(MODE)     (((MODE) == ADC_TRIGGEREDMODE_SINGLE_TRIGGER) || \
#                                                      ((MODE) == ADC_TRIGGEREDMODE_MULTI_TRIGGER) )
# fun define IS_ADC_ANALOG_WATCHDOG_MODE(WATCHDOG)     (((WATCHDOG) == ADC_ANALOGWATCHDOG_NONE      )   || \
#                                                   ((WATCHDOG) == ADC_ANALOGWATCHDOG_SINGLE_REG)   || \
#                                                   ((WATCHDOG) == ADC_ANALOGWATCHDOG_ALL_REG   ))
# fun define IS_ADC_CONVERSION_GROUP(CONVERSION)   ((CONVERSION) == ADC_REGULAR_GROUP)
# fun define IS_ADC_EVENT_TYPE(EVENT) (((EVENT) == ADC_AWD_EVENT) || \
#                                  ((EVENT) == ADC_OVR_EVENT))
# fun define IS_ADC_RANGE(RESOLUTION, ADC_VALUE)                                     \
#   ((((RESOLUTION) == ADC_RESOLUTION_12B) && ((ADC_VALUE) <= ((uint32_t)0x0FFFU))) || \
#    (((RESOLUTION) == ADC_RESOLUTION_10B) && ((ADC_VALUE) <= ((uint32_t)0x03FFU))) || \
#    (((RESOLUTION) == ADC_RESOLUTION_8B)  && ((ADC_VALUE) <= ((uint32_t)0x00FFU))) || \
#    (((RESOLUTION) == ADC_RESOLUTION_6B)  && ((ADC_VALUE) <= ((uint32_t)0x003FU))))
# fun define IS_ADC_REGULAR_NB_CONV(LENGTH) (((LENGTH) >= ((uint32_t)1U)) && ((LENGTH) <= ((uint32_t)16U)))
# struct ADC_OversamplingTypeDef

class ADC_OversamplingTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Ratio',	ctypes.c_uint32),
		('RightBitShift',	ctypes.c_uint32),
		('TriggeredMode',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct ADC_InitTypeDef
# struct ADC_InitTypeDef : field is class : Oversample
# struct ADC_ChannelConfTypeDef

class ADC_ChannelConfTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Channel',	ctypes.c_uint32),
		('Rank',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct ADC_AnalogWDGConfTypeDef

class ADC_AnalogWDGConfTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('WatchdogMode',	ctypes.c_uint32),
		('Channel',	ctypes.c_uint32),
		('ITMode',	ctypes.c_uint32),
		('HighThreshold',	ctypes.c_uint32),
		('LowThreshold',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct ADC_HandleTypeDef
# struct ADC_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_comp_ex.h : 

# empty define __STM32L0xx_HAL_COMP_EX_H
# ----------------------------------------

# file stm32l0xx_hal_comp.h : 

# Enum HAL_COMP_StateTypeDef
HAL_COMP_STATE_RESET = 0x0
HAL_COMP_STATE_RESET_LOCKED = 0x10
HAL_COMP_STATE_READY = 0x1
HAL_COMP_STATE_READY_LOCKED = 0x11
HAL_COMP_STATE_BUSY = 0x2
HAL_COMP_STATE_BUSY_LOCKED = 0x12
# Enum HAL_COMP_CallbackIDTypeDef
# Skip HAL_COMP_TRIGGER_CB_ID : no need parse
# Skip HAL_COMP_MSPINIT_CB_ID : no need parse
# Skip HAL_COMP_MSPDEINIT_CB_ID : no need parse
# empty define __STM32L0xx_HAL_COMP_H
COMP_STATE_BITFIELD_LOCK = 0x10
HAL_COMP_ERROR_NONE = 0x0
# Skip HAL_COMP_ERROR_INVALID_CALLBACK : no need parse
COMP_WINDOWMODE_DISABLE = 0x0
COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON = 0x100
COMP_POWERMODE_MEDIUMSPEED = 0x8
COMP_POWERMODE_ULTRALOWPOWER = 0x0
COMP_INPUT_PLUS_IO1 = 0x0
COMP_INPUT_PLUS_IO2 = 0x100
COMP_INPUT_PLUS_IO3 = 0x200
COMP_INPUT_PLUS_IO4 = 0x300
COMP_INPUT_PLUS_IO5 = 0x400
# Skip COMP_INPUT_PLUS_IO6 : no need parse
COMP_INPUT_MINUS_1_4VREFINT = 0x40
COMP_INPUT_MINUS_1_2VREFINT = 0x50
COMP_INPUT_MINUS_3_4VREFINT = 0x60
COMP_INPUT_MINUS_VREFINT = 0x0
COMP_INPUT_MINUS_DAC1_CH1 = 0x20
COMP_INPUT_MINUS_DAC1_CH2 = 0x30
COMP_INPUT_MINUS_IO1 = 0x10
COMP_INPUT_MINUS_IO2 = 0x70
COMP_LPTIMCONNECTION_DISABLED = 0x0
COMP_LPTIMCONNECTION_IN1_ENABLED = 0x1
COMP_LPTIMCONNECTION_IN2_ENABLED = 0x2
COMP_OUTPUTPOL_NONINVERTED = 0x0
COMP_OUTPUTPOL_INVERTED = 0x8000
COMP_OUTPUT_LEVEL_LOW = 0x0
COMP_OUTPUT_LEVEL_HIGH = 0x1
COMP_TRIGGERMODE_NONE = 0x0
COMP_TRIGGERMODE_IT_RISING = 0x11
COMP_TRIGGERMODE_IT_FALLING = 0x21
COMP_TRIGGERMODE_IT_RISING_FALLING = 0x31
COMP_TRIGGERMODE_EVENT_RISING = 0x12
COMP_TRIGGERMODE_EVENT_FALLING = 0x22
COMP_TRIGGERMODE_EVENT_RISING_FALLING = 0x32
# fun define __HAL_COMP_RESET_HANDLE_STATE(__HANDLE__) do{                                                   \
#                                                     (__HANDLE__)->State = HAL_COMP_STATE_RESET;      \
#                                                     (__HANDLE__)->MspInitCallback = NULL;            \
#                                                     (__HANDLE__)->MspDeInitCallback = NULL;          \
#                                                    } while(0)
# fun define __HAL_COMP_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_COMP_STATE_RESET)
# fun define COMP_CLEAR_ERRORCODE(__HANDLE__) ((__HANDLE__)->ErrorCode = HAL_COMP_ERROR_NONE)
# fun define __HAL_COMP_ENABLE(__HANDLE__)              SET_BIT((__HANDLE__)->Instance->CSR, COMP_CSR_COMPxEN)
# fun define __HAL_COMP_DISABLE(__HANDLE__)             CLEAR_BIT((__HANDLE__)->Instance->CSR, COMP_CSR_COMPxEN)
# fun define __HAL_COMP_LOCK(__HANDLE__)                SET_BIT((__HANDLE__)->Instance->CSR, COMP_CSR_COMPxLOCK)
# fun define __HAL_COMP_IS_LOCKED(__HANDLE__)           (READ_BIT((__HANDLE__)->Instance->CSR, COMP_CSR_COMPxLOCK) == COMP_CSR_COMPxLOCK)
# fun define __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE()    SET_BIT(EXTI->RTSR, COMP_EXTI_LINE_COMP1)
# fun define __HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE()   CLEAR_BIT(EXTI->RTSR, COMP_EXTI_LINE_COMP1)
# fun define __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE()   SET_BIT(EXTI->FTSR, COMP_EXTI_LINE_COMP1)
# fun define __HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE()  CLEAR_BIT(EXTI->FTSR, COMP_EXTI_LINE_COMP1)
# fun define __HAL_COMP_COMP1_EXTI_ENABLE_RISING_FALLING_EDGE()   do { \
#                                                               __HAL_COMP_COMP1_EXTI_ENABLE_RISING_EDGE(); \
#                                                               __HAL_COMP_COMP1_EXTI_ENABLE_FALLING_EDGE(); \
#                                                             } while(0)
# fun define __HAL_COMP_COMP1_EXTI_DISABLE_RISING_FALLING_EDGE()  do { \
#                                                               __HAL_COMP_COMP1_EXTI_DISABLE_RISING_EDGE(); \
#                                                               __HAL_COMP_COMP1_EXTI_DISABLE_FALLING_EDGE(); \
#                                                             } while(0)
# fun define __HAL_COMP_COMP1_EXTI_ENABLE_IT()             SET_BIT(EXTI->IMR, COMP_EXTI_LINE_COMP1)
# fun define __HAL_COMP_COMP1_EXTI_DISABLE_IT()            CLEAR_BIT(EXTI->IMR, COMP_EXTI_LINE_COMP1)
# fun define __HAL_COMP_COMP1_EXTI_GENERATE_SWIT()         SET_BIT(EXTI->SWIER, COMP_EXTI_LINE_COMP1)
# fun define __HAL_COMP_COMP1_EXTI_ENABLE_EVENT()           SET_BIT(EXTI->EMR, COMP_EXTI_LINE_COMP1)
# fun define __HAL_COMP_COMP1_EXTI_DISABLE_EVENT()          CLEAR_BIT(EXTI->EMR, COMP_EXTI_LINE_COMP1)
# fun define __HAL_COMP_COMP1_EXTI_GET_FLAG()              READ_BIT(EXTI->PR, COMP_EXTI_LINE_COMP1)
# fun define __HAL_COMP_COMP1_EXTI_CLEAR_FLAG()            WRITE_REG(EXTI->PR, COMP_EXTI_LINE_COMP1)
# fun define __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE()    SET_BIT(EXTI->RTSR, COMP_EXTI_LINE_COMP2)
# fun define __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE()   CLEAR_BIT(EXTI->RTSR, COMP_EXTI_LINE_COMP2)
# fun define __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE()   SET_BIT(EXTI->FTSR, COMP_EXTI_LINE_COMP2)
# fun define __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE()  CLEAR_BIT(EXTI->FTSR, COMP_EXTI_LINE_COMP2)
# fun define __HAL_COMP_COMP2_EXTI_ENABLE_RISING_FALLING_EDGE()   do { \
#                                                               __HAL_COMP_COMP2_EXTI_ENABLE_RISING_EDGE(); \
#                                                               __HAL_COMP_COMP2_EXTI_ENABLE_FALLING_EDGE(); \
#                                                             } while(0)
# fun define __HAL_COMP_COMP2_EXTI_DISABLE_RISING_FALLING_EDGE()   do { \
#                                                               __HAL_COMP_COMP2_EXTI_DISABLE_RISING_EDGE(); \
#                                                               __HAL_COMP_COMP2_EXTI_DISABLE_FALLING_EDGE(); \
#                                                             } while(0)
# fun define __HAL_COMP_COMP2_EXTI_ENABLE_IT()             SET_BIT(EXTI->IMR, COMP_EXTI_LINE_COMP2)
# fun define __HAL_COMP_COMP2_EXTI_DISABLE_IT()            CLEAR_BIT(EXTI->IMR, COMP_EXTI_LINE_COMP2)
# fun define __HAL_COMP_COMP2_EXTI_GENERATE_SWIT()         SET_BIT(EXTI->SWIER, COMP_EXTI_LINE_COMP2)
# fun define __HAL_COMP_COMP2_EXTI_ENABLE_EVENT()           SET_BIT(EXTI->EMR, COMP_EXTI_LINE_COMP2)
# fun define __HAL_COMP_COMP2_EXTI_DISABLE_EVENT()          CLEAR_BIT(EXTI->EMR, COMP_EXTI_LINE_COMP2)
# fun define __HAL_COMP_COMP2_EXTI_GET_FLAG()              READ_BIT(EXTI->PR, COMP_EXTI_LINE_COMP2)
# fun define __HAL_COMP_COMP2_EXTI_CLEAR_FLAG()            WRITE_REG(EXTI->PR, COMP_EXTI_LINE_COMP2)
COMP_EXTI_LINE_COMP1 = 0x200000
COMP_EXTI_LINE_COMP2 = 0x400000
COMP_EXTI_IT = 0x1
COMP_EXTI_EVENT = 0x2
COMP_EXTI_RISING = 0x10
COMP_EXTI_FALLING = 0x20
# fun define COMP_GET_EXTI_LINE(__INSTANCE__)    (((__INSTANCE__) == COMP1) ?                 \
#                                             COMP_EXTI_LINE_COMP1 : COMP_EXTI_LINE_COMP2)
# fun define IS_COMP_WINDOWMODE(__WINDOWMODE__)  (((__WINDOWMODE__) == COMP_WINDOWMODE_DISABLE)                || \
#                                             ((__WINDOWMODE__) == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)  )
# fun define IS_COMP_POWERMODE(__POWERMODE__)    (((__POWERMODE__) == COMP_POWERMODE_MEDIUMSPEED)  || \
#                                             ((__POWERMODE__) == COMP_POWERMODE_ULTRALOWPOWER)  )
# fun define IS_COMP_WINDOWMODE_INSTANCE(INSTANCE) ((INSTANCE) == COMP1)
# fun define IS_COMP_INPUT_PLUS(__COMP_INSTANCE__, __INPUT_PLUS__)                  \
#  (((__COMP_INSTANCE__) == COMP1)                                              \
#    ? (                                                                        \
#       (__INPUT_PLUS__) == COMP_INPUT_PLUS_IO1                                 \
#      )                                                                        \
#      :                                                                        \
#      (                                                                        \
#          ((__INPUT_PLUS__) == COMP_INPUT_PLUS_IO1)                            \
#       || ((__INPUT_PLUS__) == COMP_INPUT_PLUS_IO2)                            \
#       || ((__INPUT_PLUS__) == COMP_INPUT_PLUS_IO3)                            \
#       || ((__INPUT_PLUS__) == COMP_INPUT_PLUS_IO4)                            \
#       || ((__INPUT_PLUS__) == COMP_INPUT_PLUS_IO5)                            \
#       || ((__INPUT_PLUS__) == COMP_INPUT_PLUS_IO6)                            \
#      )                                                                        \
#  )
# fun define IS_COMP_INPUT_PLUS(__COMP_INSTANCE__, __INPUT_PLUS__)                  \
#  (((__COMP_INSTANCE__) == COMP1)                                              \
#    ? (                                                                        \
#       (__INPUT_PLUS__) == COMP_INPUT_PLUS_IO1                                 \
#      )                                                                        \
#      :                                                                        \
#      (                                                                        \
#          ((__INPUT_PLUS__) == COMP_INPUT_PLUS_IO1)                            \
#       || ((__INPUT_PLUS__) == COMP_INPUT_PLUS_IO2)                            \
#       || ((__INPUT_PLUS__) == COMP_INPUT_PLUS_IO3)                            \
#       || ((__INPUT_PLUS__) == COMP_INPUT_PLUS_IO4)                            \
#       || ((__INPUT_PLUS__) == COMP_INPUT_PLUS_IO5)                            \
#      )                                                                        \
#  )
# fun define IS_COMP_INPUT_MINUS(__COMP_INSTANCE__, __INPUT_MINUS__)                \
#  (((__COMP_INSTANCE__) == COMP1)                                              \
#    ? (                                                                        \
#          ((__INPUT_MINUS__) == COMP_INPUT_MINUS_VREFINT)                      \
#       || ((__INPUT_MINUS__) == COMP_INPUT_MINUS_DAC1_CH1)                     \
#       || ((__INPUT_MINUS__) == COMP_INPUT_MINUS_DAC1_CH2)                     \
#       || ((__INPUT_MINUS__) == COMP_INPUT_MINUS_IO1)                          \
#      )                                                                        \
#      :                                                                        \
#      (                                                                        \
#          ((__INPUT_MINUS__) == COMP_INPUT_MINUS_1_4VREFINT)                   \
#       || ((__INPUT_MINUS__) == COMP_INPUT_MINUS_1_2VREFINT)                   \
#       || ((__INPUT_MINUS__) == COMP_INPUT_MINUS_3_4VREFINT)                   \
#       || ((__INPUT_MINUS__) == COMP_INPUT_MINUS_VREFINT)                      \
#       || ((__INPUT_MINUS__) == COMP_INPUT_MINUS_DAC1_CH1)                     \
#       || ((__INPUT_MINUS__) == COMP_INPUT_MINUS_DAC1_CH2)                     \
#       || ((__INPUT_MINUS__) == COMP_INPUT_MINUS_IO1)                          \
#       || ((__INPUT_MINUS__) == COMP_INPUT_MINUS_IO2)                          \
#      )                                                                        \
#  )
# fun define IS_COMP1_LPTIMCONNECTION(LPTIMCONNECTION)   (((LPTIMCONNECTION) == COMP_LPTIMCONNECTION_DISABLED) || \
#                                                     ((LPTIMCONNECTION) == COMP_LPTIMCONNECTION_IN1_ENABLED))
# fun define IS_COMP2_LPTIMCONNECTION(LPTIMCONNECTION)   (((LPTIMCONNECTION) == COMP_LPTIMCONNECTION_DISABLED) || \
#                                                     ((LPTIMCONNECTION) == COMP_LPTIMCONNECTION_IN1_ENABLED) || \
#                                                     ((LPTIMCONNECTION) == COMP_LPTIMCONNECTION_IN2_ENABLED))
# fun define IS_COMP2_LPTIMCONNECTION_RESTRICTED(LPTIMCONNECTION)   (((LPTIMCONNECTION) == COMP_LPTIMCONNECTION_DISABLED) || \
#                                                                ((LPTIMCONNECTION) == COMP_LPTIMCONNECTION_IN1_ENABLED))
# fun define IS_COMP_OUTPUTPOL(POL)  (((POL) == COMP_OUTPUTPOL_NONINVERTED)  || \
#                                 ((POL) == COMP_OUTPUTPOL_INVERTED))
# fun define IS_COMP_TRIGGERMODE(__TRIGGERMODE__) (((__TRIGGERMODE__) == COMP_TRIGGERMODE_NONE)                 || \
#                                              ((__TRIGGERMODE__) == COMP_TRIGGERMODE_IT_RISING)            || \
#                                              ((__TRIGGERMODE__) == COMP_TRIGGERMODE_IT_FALLING)           || \
#                                              ((__TRIGGERMODE__) == COMP_TRIGGERMODE_IT_RISING_FALLING)    || \
#                                              ((__TRIGGERMODE__) == COMP_TRIGGERMODE_EVENT_RISING)         || \
#                                              ((__TRIGGERMODE__) == COMP_TRIGGERMODE_EVENT_FALLING)        || \
#                                              ((__TRIGGERMODE__) == COMP_TRIGGERMODE_EVENT_RISING_FALLING)   )
# fun define IS_COMP_OUTPUT_LEVEL(__OUTPUT_LEVEL__) (((__OUTPUT_LEVEL__) == COMP_OUTPUT_LEVEL_LOW)     || \
#                                                ((__OUTPUT_LEVEL__) == COMP_OUTPUT_LEVEL_HIGH))
# struct COMP_InitTypeDef

class COMP_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('WindowMode',	ctypes.c_uint32),
		('Mode',	ctypes.c_uint32),
		('NonInvertingInput',	ctypes.c_uint32),
		('InvertingInput',	ctypes.c_uint32),
		('OutputPol',	ctypes.c_uint32),
		('LPTIMConnection',	ctypes.c_uint32),
		('TriggerMode',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct COMP_HandleTypeDef
# struct COMP_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_crc_ex.h : 

# empty define STM32L0xx_HAL_CRC_EX_H
CRC_INPUTDATA_INVERSION_NONE = 0x0
CRC_INPUTDATA_INVERSION_BYTE = 0x20
CRC_INPUTDATA_INVERSION_HALFWORD = 0x40
CRC_INPUTDATA_INVERSION_WORD = 0x60
CRC_OUTPUTDATA_INVERSION_DISABLE = 0x0
CRC_OUTPUTDATA_INVERSION_ENABLE = 0x80
# fun define __HAL_CRC_OUTPUTREVERSAL_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR |= CRC_CR_REV_OUT)
# fun define __HAL_CRC_OUTPUTREVERSAL_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR &= ~(CRC_CR_REV_OUT))
# fun define __HAL_CRC_POLYNOMIAL_CONFIG(__HANDLE__, __POLYNOMIAL__) ((__HANDLE__)->Instance->POL = (__POLYNOMIAL__))
# fun define IS_CRC_INPUTDATA_INVERSION_MODE(MODE)     (((MODE) == CRC_INPUTDATA_INVERSION_NONE)     || \
#                                                   ((MODE) == CRC_INPUTDATA_INVERSION_BYTE)     || \
#                                                   ((MODE) == CRC_INPUTDATA_INVERSION_HALFWORD) || \
#                                                   ((MODE) == CRC_INPUTDATA_INVERSION_WORD))
# fun define IS_CRC_OUTPUTDATA_INVERSION_MODE(MODE)    (((MODE) == CRC_OUTPUTDATA_INVERSION_DISABLE) || \
#                                                   ((MODE) == CRC_OUTPUTDATA_INVERSION_ENABLE))
# ----------------------------------------

# file stm32l0xx_hal_crc.h : 

# Enum HAL_CRC_StateTypeDef
HAL_CRC_STATE_RESET = 0x0
HAL_CRC_STATE_READY = 0x1
HAL_CRC_STATE_BUSY = 0x2
HAL_CRC_STATE_TIMEOUT = 0x3
HAL_CRC_STATE_ERROR = 0x4
# empty define STM32L0xx_HAL_CRC_H
DEFAULT_CRC32_POLY = 0x4C11DB7
DEFAULT_CRC_INITVALUE = 0xFFFFFFFF
DEFAULT_POLYNOMIAL_ENABLE = 0x0
DEFAULT_POLYNOMIAL_DISABLE = 0x1
DEFAULT_INIT_VALUE_ENABLE = 0x0
DEFAULT_INIT_VALUE_DISABLE = 0x1
CRC_POLYLENGTH_32B = 0x0
CRC_POLYLENGTH_16B = 0x8
CRC_POLYLENGTH_8B = 0x10
CRC_POLYLENGTH_7B = 0x18
HAL_CRC_LENGTH_32B = 0x20
HAL_CRC_LENGTH_16B = 0x10
HAL_CRC_LENGTH_8B = 0x8
HAL_CRC_LENGTH_7B = 0x7
CRC_INPUTDATA_FORMAT_UNDEFINED = 0x0
CRC_INPUTDATA_FORMAT_BYTES = 0x1
CRC_INPUTDATA_FORMAT_HALFWORDS = 0x2
CRC_INPUTDATA_FORMAT_WORDS = 0x3
# Skip HAL_CRC_Input_Data_Reverse : no need parse
# Skip HAL_CRC_Output_Data_Reverse : no need parse
# fun define __HAL_CRC_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_CRC_STATE_RESET)
# fun define __HAL_CRC_DR_RESET(__HANDLE__) ((__HANDLE__)->Instance->CR |= CRC_CR_RESET)
# fun define __HAL_CRC_INITIALCRCVALUE_CONFIG(__HANDLE__, __INIT__) ((__HANDLE__)->Instance->INIT = (__INIT__))
# fun define __HAL_CRC_SET_IDR(__HANDLE__, __VALUE__) (WRITE_REG((__HANDLE__)->Instance->IDR, (__VALUE__)))
# fun define __HAL_CRC_GET_IDR(__HANDLE__) (((__HANDLE__)->Instance->IDR) & CRC_IDR_IDR)
# fun define IS_DEFAULT_POLYNOMIAL(DEFAULT) (((DEFAULT) == DEFAULT_POLYNOMIAL_ENABLE) || \
#                                        ((DEFAULT) == DEFAULT_POLYNOMIAL_DISABLE))
# fun define IS_DEFAULT_INIT_VALUE(VALUE)  (((VALUE) == DEFAULT_INIT_VALUE_ENABLE) || \
#                                       ((VALUE) == DEFAULT_INIT_VALUE_DISABLE))
# fun define IS_CRC_POL_LENGTH(LENGTH)     (((LENGTH) == CRC_POLYLENGTH_32B) || \
#                                       ((LENGTH) == CRC_POLYLENGTH_16B) || \
#                                       ((LENGTH) == CRC_POLYLENGTH_8B)  || \
#                                       ((LENGTH) == CRC_POLYLENGTH_7B))
# fun define IS_CRC_INPUTDATA_FORMAT(FORMAT)           (((FORMAT) == CRC_INPUTDATA_FORMAT_BYTES)     || \
#                                                   ((FORMAT) == CRC_INPUTDATA_FORMAT_HALFWORDS) || \
#                                                   ((FORMAT) == CRC_INPUTDATA_FORMAT_WORDS))
# struct CRC_InitTypeDef

class CRC_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('DefaultPolynomialUse',	ctypes.c_uint8),
		('DefaultInitValueUse',	ctypes.c_uint8),
		('GeneratingPolynomial',	ctypes.c_uint32),
		('CRCLength',	ctypes.c_uint32),
		('InitValue',	ctypes.c_uint32),
		('InputDataInversionMode',	ctypes.c_uint32),
		('OutputDataInversionMode',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct CRC_HandleTypeDef
# struct CRC_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_cryp_ex.h : 

# empty define __STM32L0xx_HAL_CRYP_EX_H
# ----------------------------------------

# file stm32l0xx_hal_cryp.h : 

# Enum HAL_CRYP_STATETypeDef
HAL_CRYP_STATE_RESET = 0x0
HAL_CRYP_STATE_READY = 0x1
HAL_CRYP_STATE_BUSY = 0x2
HAL_CRYP_STATE_TIMEOUT = 0x3
HAL_CRYP_STATE_ERROR = 0x4
# Enum HAL_PhaseTypeDef
HAL_CRYP_PHASE_READY = 0x1
HAL_CRYP_PHASE_PROCESS = 0x2
# empty define __STM32L0xx_HAL_CRYP_H
CRYP_DATATYPE_32B = 0x0
CRYP_DATATYPE_16B = 0x2
CRYP_DATATYPE_8B = 0x4
CRYP_DATATYPE_1B = 0x6
# fun define IS_CRYP_DATATYPE(DATATYPE) (((DATATYPE) == CRYP_DATATYPE_32B) || \
#                                    ((DATATYPE) == CRYP_DATATYPE_16B) || \
#                                    ((DATATYPE) == CRYP_DATATYPE_8B)  || \
#                                    ((DATATYPE) == CRYP_DATATYPE_1B))
CRYP_CR_ALGOMODE_DIRECTION = 0x78
CRYP_CR_ALGOMODE_AES_ECB_ENCRYPT = 0x0
CRYP_CR_ALGOMODE_AES_ECB_KEYDERDECRYPT = 0x18
CRYP_CR_ALGOMODE_AES_CBC_ENCRYPT = 0x20
CRYP_CR_ALGOMODE_AES_CBC_KEYDERDECRYPT = 0x38
CRYP_CR_ALGOMODE_AES_CTR_ENCRYPT = 0x40
CRYP_CR_ALGOMODE_AES_CTR_DECRYPT = 0x50
CRYP_IT_CC = 0x200
CRYP_IT_ERR = 0x400
CRYP_FLAG_CCF = 0x1
CRYP_FLAG_RDERR = 0x2
CRYP_FLAG_WRERR = 0x4
CRYP_CLEARFLAG_CCF = 0x80
CRYP_CLEARFLAG_RDERR = 0x100
CRYP_CLEARFLAG_WRERR = 0x100
# fun define __HAL_CRYP_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_CRYP_STATE_RESET)
# fun define __HAL_CRYP_ENABLE(__HANDLE__)                   SET_BIT((__HANDLE__)->Instance->CR, AES_CR_EN)
# fun define __HAL_CRYP_DISABLE(__HANDLE__)                  CLEAR_BIT((__HANDLE__)->Instance->CR, AES_CR_EN)
# fun define __HAL_CRYP_SET_MODE(__HANDLE__,__MODE__)             SET_BIT((__HANDLE__)->Instance->CR, (__MODE__))
# fun define __HAL_CRYP_GET_FLAG(__HANDLE__,__FLAG__)         (((__HANDLE__)->Instance->SR & (__FLAG__)) == (__FLAG__))
# fun define __HAL_CRYP_CLEAR_FLAG(__HANDLE__, __FLAG__)   SET_BIT((__HANDLE__)->Instance->CR, (__FLAG__))
# fun define __HAL_CRYP_ENABLE_IT(__HANDLE__,__INTERRUPT__)   SET_BIT((__HANDLE__)->Instance->CR, (__INTERRUPT__))
# fun define __HAL_CRYP_DISABLE_IT(__HANDLE__,__INTERRUPT__)  CLEAR_BIT((__HANDLE__)->Instance->CR, (__INTERRUPT__))
# fun define __HAL_CRYP_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) \
#    (( ((__HANDLE__)->Instance->CR & (__INTERRUPT__)) == (__INTERRUPT__)       \
#     )? SET : RESET                                         \
#    )
# fun define __HAL_CRYP_CLEAR_IT(__HANDLE__, __IT__) SET_BIT((__HANDLE__)->Instance->CR, (__IT__))
# struct CRYP_InitTypeDef

class CRYP_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('DataType',	ctypes.c_uint32),
		('pKey',	ctypes.c_uint64),
		('pInitVect',	ctypes.c_uint64),
	]
	def ref(self):
		return ctypes.byref(self)

# struct CRYP_HandleTypeDef
# struct CRYP_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_dac_ex.h : 

# empty define __STM32L0xx_HAL_DAC_EX_H
DAC_LFSRUNMASK_BIT0 = 0x0
DAC_LFSRUNMASK_BITS1_0 = 0x100
DAC_LFSRUNMASK_BITS2_0 = 0x200
DAC_LFSRUNMASK_BITS3_0 = 0x300
DAC_LFSRUNMASK_BITS4_0 = 0x400
DAC_LFSRUNMASK_BITS5_0 = 0x500
DAC_LFSRUNMASK_BITS6_0 = 0x600
DAC_LFSRUNMASK_BITS7_0 = 0x700
DAC_LFSRUNMASK_BITS8_0 = 0x800
DAC_LFSRUNMASK_BITS9_0 = 0x900
DAC_LFSRUNMASK_BITS10_0 = 0xA00
DAC_LFSRUNMASK_BITS11_0 = 0xB00
DAC_TRIANGLEAMPLITUDE_1 = 0x0
DAC_TRIANGLEAMPLITUDE_3 = 0x100
DAC_TRIANGLEAMPLITUDE_7 = 0x200
DAC_TRIANGLEAMPLITUDE_15 = 0x300
DAC_TRIANGLEAMPLITUDE_31 = 0x400
DAC_TRIANGLEAMPLITUDE_63 = 0x500
DAC_TRIANGLEAMPLITUDE_127 = 0x600
DAC_TRIANGLEAMPLITUDE_255 = 0x700
DAC_TRIANGLEAMPLITUDE_511 = 0x800
DAC_TRIANGLEAMPLITUDE_1023 = 0x900
DAC_TRIANGLEAMPLITUDE_2047 = 0xA00
DAC_TRIANGLEAMPLITUDE_4095 = 0xB00
# fun define IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(VALUE) (((VALUE) == DAC_LFSRUNMASK_BIT0) || \
#                                                      ((VALUE) == DAC_LFSRUNMASK_BITS1_0) || \
#                                                      ((VALUE) == DAC_LFSRUNMASK_BITS2_0) || \
#                                                      ((VALUE) == DAC_LFSRUNMASK_BITS3_0) || \
#                                                      ((VALUE) == DAC_LFSRUNMASK_BITS4_0) || \
#                                                      ((VALUE) == DAC_LFSRUNMASK_BITS5_0) || \
#                                                      ((VALUE) == DAC_LFSRUNMASK_BITS6_0) || \
#                                                      ((VALUE) == DAC_LFSRUNMASK_BITS7_0) || \
#                                                      ((VALUE) == DAC_LFSRUNMASK_BITS8_0) || \
#                                                      ((VALUE) == DAC_LFSRUNMASK_BITS9_0) || \
#                                                      ((VALUE) == DAC_LFSRUNMASK_BITS10_0) || \
#                                                      ((VALUE) == DAC_LFSRUNMASK_BITS11_0) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_1) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_3) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_7) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_15) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_31) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_63) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_127) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_255) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_511) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_1023) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_2047) || \
#                                                      ((VALUE) == DAC_TRIANGLEAMPLITUDE_4095))
# ----------------------------------------

# file stm32l0xx_hal_dac.h : 

# Enum HAL_DAC_StateTypeDef
HAL_DAC_STATE_RESET = 0x0
HAL_DAC_STATE_READY = 0x1
HAL_DAC_STATE_BUSY = 0x2
HAL_DAC_STATE_TIMEOUT = 0x3
HAL_DAC_STATE_ERROR = 0x4
# Enum HAL_DAC_CallbackIDTypeDef
# Skip HAL_DAC_CH1_COMPLETE_CB_ID : no need parse
# Skip HAL_DAC_CH1_HALF_COMPLETE_CB_ID : no need parse
# Skip HAL_DAC_CH1_ERROR_ID : no need parse
# Skip HAL_DAC_CH1_UNDERRUN_CB_ID : no need parse
# Skip HAL_DAC_CH2_COMPLETE_CB_ID : no need parse
# Skip HAL_DAC_CH2_HALF_COMPLETE_CB_ID : no need parse
# Skip HAL_DAC_CH2_ERROR_ID : no need parse
# Skip HAL_DAC_CH2_UNDERRUN_CB_ID : no need parse
# Skip HAL_DAC_MSP_INIT_CB_ID : no need parse
# Skip HAL_DAC_MSP_DEINIT_CB_ID : no need parse
# Skip HAL_DAC_ALL_CB_ID : no need parse
# empty define __STM32L0xx_HAL_DAC_H
HAL_DAC_ERROR_NONE = 0x0
HAL_DAC_ERROR_DMAUNDERRUNCH1 = 0x1
# Skip HAL_DAC_ERROR_DMAUNDERRUNCH2 : no need parse
HAL_DAC_ERROR_DMA = 0x4
# Skip HAL_DAC_ERROR_INVALID_CALLBACK : no need parse
DAC_TRIGGER_NONE = 0x0
DAC_TRIGGER_T6_TRGO = 0x4
DAC_TRIGGER_T21_TRGO = 0x1C
DAC_TRIGGER_T2_TRGO = 0x24
DAC_TRIGGER_EXT_IT9 = 0x34
DAC_TRIGGER_SOFTWARE = 0x3C
# Skip DAC_TRIGGER_T3_TRGO : no need parse
# Skip DAC_TRIGGER_T3_CH3 : no need parse
# Skip DAC_TRIGGER_T7_TRGO : no need parse
# fun define IS_DAC_TRIGGER(TRIGGER) (((TRIGGER) == DAC_TRIGGER_NONE)       || \
#                                 ((TRIGGER) == DAC_TRIGGER_T6_TRGO)    || \
#                                 ((TRIGGER) == DAC_TRIGGER_T3_TRGO)    || \
#                                 ((TRIGGER) == DAC_TRIGGER_T3_CH3)     || \
#                                 ((TRIGGER) == DAC_TRIGGER_T7_TRGO)    || \
#                                 ((TRIGGER) == DAC_TRIGGER_T21_TRGO)   || \
#                                 ((TRIGGER) == DAC_TRIGGER_T2_TRGO)    || \
#                                 ((TRIGGER) == DAC_TRIGGER_EXT_IT9)    || \
#                                 ((TRIGGER) == DAC_TRIGGER_SOFTWARE))
# fun define IS_DAC_TRIGGER(TRIGGER) (((TRIGGER) == DAC_TRIGGER_NONE)       || \
#                                 ((TRIGGER) == DAC_TRIGGER_T6_TRGO)    || \
#                                 ((TRIGGER) == DAC_TRIGGER_T21_TRGO)   || \
#                                 ((TRIGGER) == DAC_TRIGGER_T2_TRGO)    || \
#                                 ((TRIGGER) == DAC_TRIGGER_EXT_IT9)    || \
#                                 ((TRIGGER) == DAC_TRIGGER_SOFTWARE))
DAC_OUTPUTBUFFER_ENABLE = 0x0
DAC_OUTPUTBUFFER_DISABLE = 0x2
# fun define IS_DAC_OUTPUT_BUFFER_STATE(STATE) (((STATE) == DAC_OUTPUTBUFFER_ENABLE) || \
#                                           ((STATE) == DAC_OUTPUTBUFFER_DISABLE))
DAC_CHANNEL_1 = 0x0
# Skip DAC_CHANNEL_2 : no need parse
# fun define IS_DAC_CHANNEL(CHANNEL) (((CHANNEL) == DAC_CHANNEL_1) || \
#                                 ((CHANNEL) == DAC_CHANNEL_2))
# fun define IS_DAC_CHANNEL(CHANNEL) ((CHANNEL) == DAC_CHANNEL_1)
DAC_ALIGN_12B_R = 0x0
DAC_ALIGN_12B_L = 0x4
DAC_ALIGN_8B_R = 0x8
# fun define IS_DAC_ALIGN(ALIGN) (((ALIGN) == DAC_ALIGN_12B_R) || \
#                             ((ALIGN) == DAC_ALIGN_12B_L) || \
#                             ((ALIGN) == DAC_ALIGN_8B_R))
# fun define IS_DAC_DATA(DATA) ((DATA) <= 0xFFF0U)
DAC_FLAG_DMAUDR1 = 0x2000
# Skip DAC_FLAG_DMAUDR2 : no need parse
DAC_IT_DMAUDR1 = 0x2000
# Skip DAC_IT_DMAUDR2 : no need parse
# fun define __HAL_DAC_RESET_HANDLE_STATE(__HANDLE__)           do {                                              \
#                                                                 (__HANDLE__)->State = HAL_DAC_STATE_RESET; \
#                                                                 (__HANDLE__)->MspInitCallback = NULL;       \
#                                                                 (__HANDLE__)->MspDeInitCallback = NULL;     \
#                                                               } while(0)
# fun define __HAL_DAC_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_DAC_STATE_RESET)
# fun define __HAL_DAC_ENABLE(__HANDLE__, __DAC_CHANNEL__) \
#SET_BIT((__HANDLE__)->Instance->CR, (DAC_CR_EN1 << (__DAC_CHANNEL__)))
# fun define __HAL_DAC_DISABLE(__HANDLE__, __DAC_CHANNEL__) \
#CLEAR_BIT((__HANDLE__)->Instance->CR, (DAC_CR_EN1 << (__DAC_CHANNEL__)))
# fun define __HAL_DAC_ENABLE_IT(__HANDLE__, __INTERRUPT__) \
#SET_BIT((__HANDLE__)->Instance->CR, (__INTERRUPT__))
# fun define __HAL_DAC_DISABLE_IT(__HANDLE__, __INTERRUPT__) \
#CLEAR_BIT((__HANDLE__)->Instance->CR, (__INTERRUPT__))
# fun define __HAL_DAC_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) \
#(((__HANDLE__)->Instance->CR & (__INTERRUPT__)) == (__INTERRUPT__))
# fun define __HAL_DAC_GET_FLAG(__HANDLE__, __FLAG__)  \
#((((__HANDLE__)->Instance->SR) & (__FLAG__)) == (__FLAG__))
# fun define __HAL_DAC_CLEAR_FLAG(__HANDLE__, __FLAG__) \
#(((__HANDLE__)->Instance->SR) = (__FLAG__))
# fun define DAC_DHR12R1_ALIGNMENT(__ALIGNMENT__) (((uint32_t)0x00000008U) + (__ALIGNMENT__))
# fun define DAC_DHR12R2_ALIGNMENT(__ALIGNMENT__) (((uint32_t)0x00000014U) + (__ALIGNMENT__))
# fun define DAC_DHR12RD_ALIGNMENT(__ALIGNMENT__) (((uint32_t)0x00000020U) + (__ALIGNMENT__))
# Skip Instance : no need parse
# Skip State : no need parse
# Skip Lock : no need parse
# Skip DMA_Handle1 : no need parse
# Skip DMA_Handle2 : no need parse
# Skip ErrorCode : no need parse
# Skip ConvCpltCallbackCh1 : no need parse
# Skip ConvHalfCpltCallbackCh1 : no need parse
# Skip ErrorCallbackCh1 : no need parse
# Skip DMAUnderrunCallbackCh1 : no need parse
# Skip ConvCpltCallbackCh2 : no need parse
# Skip ConvHalfCpltCallbackCh2 : no need parse
# Skip ErrorCallbackCh2 : no need parse
# Skip DMAUnderrunCallbackCh2 : no need parse
# Skip MspInitCallback : no need parse
# Skip MspDeInitCallback : no need parse
# struct DAC_ChannelConfTypeDef

class DAC_ChannelConfTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('DAC_Trigger',	ctypes.c_uint32),
		('DAC_OutputBuffer',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_def.h : 

# Enum HAL_StatusTypeDef
HAL_OK = 0x0
HAL_ERROR = 0x1
HAL_BUSY = 0x2
HAL_TIMEOUT = 0x3
# Enum HAL_LockTypeDef
HAL_UNLOCKED = 0x0
HAL_LOCKED = 0x1
# empty define __STM32L0xx_HAL_DEF
# fun define UNUSED(X) (void)X      /* To avoid gcc/g++ warnings */
HAL_MAX_DELAY = 0xFFFFFFFF
# fun define HAL_IS_BIT_SET(REG, BIT)         (((REG) & (BIT)) == (BIT))
# fun define HAL_IS_BIT_CLR(REG, BIT)         (((REG) & (BIT)) == 0U)
# fun define __HAL_LINKDMA(__HANDLE__, __PPP_DMA_FIELD__, __DMA_HANDLE__)             \
#                        do{                                                    \
#                            (__HANDLE__)->__PPP_DMA_FIELD__ = &(__DMA_HANDLE__); \
#                            (__DMA_HANDLE__).Parent = (__HANDLE__);             \
#                          } while(0)
# fun define __HAL_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = 0U)
# fun define __HAL_LOCK(__HANDLE__)                                               \
#                                do{                                            \
#                                    if((__HANDLE__)->Lock == HAL_LOCKED)       \
#                                    {                                          \
#                                       return HAL_BUSY;                        \
#                                    }                                          \
#                                    else                                       \
#                                    {                                          \
#                                       (__HANDLE__)->Lock = HAL_LOCKED;        \
#                                    }                                          \
#                                  }while (0)
# fun define __HAL_UNLOCK(__HANDLE__)                                             \
#                                  do{                                          \
#                                      (__HANDLE__)->Lock = HAL_UNLOCKED;       \
#                                    }while (0)
# Skip __weak : no need parse
# Skip __packed : no need parse
# Skip __NOINLINE : no need parse
# Skip __ALIGN_END : no need parse
# empty define __ALIGN_BEGIN
# empty define __ALIGN_END
# Skip __ALIGN_BEGIN : no need parse
# empty define __ALIGN_BEGIN
# empty define __RAM_FUNC
# Skip __NOINLINE : no need parse
# Skip __RAM_FUNC : no need parse
# Skip __NOINLINE : no need parse
# Skip __RAM_FUNC : no need parse
# ----------------------------------------

# file stm32l0xx_hal_dma.h : 

# Enum HAL_DMA_StateTypeDef
HAL_DMA_STATE_RESET = 0x0
HAL_DMA_STATE_READY = 0x1
HAL_DMA_STATE_BUSY = 0x2
HAL_DMA_STATE_TIMEOUT = 0x3
# Enum HAL_DMA_LevelCompleteTypeDef
HAL_DMA_FULL_TRANSFER = 0x0
HAL_DMA_HALF_TRANSFER = 0x1
# Enum HAL_DMA_CallbackIDTypeDef
HAL_DMA_XFER_CPLT_CB_ID = 0x0
HAL_DMA_XFER_HALFCPLT_CB_ID = 0x1
HAL_DMA_XFER_ERROR_CB_ID = 0x2
HAL_DMA_XFER_ABORT_CB_ID = 0x3
HAL_DMA_XFER_ALL_CB_ID = 0x4
# empty define STM32L0xx_HAL_DMA_H
HAL_DMA_ERROR_NONE = 0x0
HAL_DMA_ERROR_TE = 0x1
HAL_DMA_ERROR_NO_XFER = 0x4
HAL_DMA_ERROR_TIMEOUT = 0x20
HAL_DMA_ERROR_NOT_SUPPORTED = 0x100
DMA_REQUEST_0 = 0x0
DMA_REQUEST_1 = 0x1
DMA_REQUEST_4 = 0x4
DMA_REQUEST_5 = 0x5
DMA_REQUEST_6 = 0x6
DMA_REQUEST_8 = 0x8
# fun define IS_DMA_ALL_REQUEST(REQUEST) (((REQUEST) == DMA_REQUEST_0) || \
#                                     ((REQUEST) == DMA_REQUEST_1) || \
#                                     ((REQUEST) == DMA_REQUEST_4) || \
#                                     ((REQUEST) == DMA_REQUEST_5) || \
#                                     ((REQUEST) == DMA_REQUEST_6) || \
#                                     ((REQUEST) == DMA_REQUEST_8))
DMA_REQUEST_0 = 0x0
DMA_REQUEST_1 = 0x1
DMA_REQUEST_2 = 0x2
DMA_REQUEST_3 = 0x3
DMA_REQUEST_4 = 0x4
DMA_REQUEST_5 = 0x5
DMA_REQUEST_6 = 0x6
DMA_REQUEST_7 = 0x7
DMA_REQUEST_8 = 0x8
DMA_REQUEST_9 = 0x9
DMA_REQUEST_10 = 0xA
DMA_REQUEST_11 = 0xB
DMA_REQUEST_12 = 0xC
DMA_REQUEST_13 = 0xD
DMA_REQUEST_14 = 0xE
DMA_REQUEST_15 = 0xF
# fun define IS_DMA_ALL_REQUEST(REQUEST) (((REQUEST) == DMA_REQUEST_0) || \
#                                     ((REQUEST) == DMA_REQUEST_1) || \
#                                     ((REQUEST) == DMA_REQUEST_2) || \
#                                     ((REQUEST) == DMA_REQUEST_3) || \
#                                     ((REQUEST) == DMA_REQUEST_4) || \
#                                     ((REQUEST) == DMA_REQUEST_5) || \
#                                     ((REQUEST) == DMA_REQUEST_6) || \
#                                     ((REQUEST) == DMA_REQUEST_7) || \
#                                     ((REQUEST) == DMA_REQUEST_8) || \
#                                     ((REQUEST) == DMA_REQUEST_9) || \
#                                     ((REQUEST) == DMA_REQUEST_10) || \
#                                     ((REQUEST) == DMA_REQUEST_11) || \
#                                     ((REQUEST) == DMA_REQUEST_12) || \
#                                     ((REQUEST) == DMA_REQUEST_13) || \
#                                     ((REQUEST) == DMA_REQUEST_14) || \
#                                     ((REQUEST) == DMA_REQUEST_15))
DMA_REQUEST_0 = 0x0
DMA_REQUEST_1 = 0x1
DMA_REQUEST_2 = 0x2
DMA_REQUEST_3 = 0x3
DMA_REQUEST_4 = 0x4
DMA_REQUEST_5 = 0x5
DMA_REQUEST_6 = 0x6
DMA_REQUEST_7 = 0x7
DMA_REQUEST_8 = 0x8
DMA_REQUEST_9 = 0x9
DMA_REQUEST_10 = 0xA
DMA_REQUEST_12 = 0xC
DMA_REQUEST_13 = 0xD
DMA_REQUEST_14 = 0xE
DMA_REQUEST_15 = 0xF
# fun define IS_DMA_ALL_REQUEST(REQUEST) (((REQUEST) == DMA_REQUEST_0) || \
#                                     ((REQUEST) == DMA_REQUEST_1) || \
#                                     ((REQUEST) == DMA_REQUEST_2) || \
#                                     ((REQUEST) == DMA_REQUEST_3) || \
#                                     ((REQUEST) == DMA_REQUEST_4) || \
#                                     ((REQUEST) == DMA_REQUEST_5) || \
#                                     ((REQUEST) == DMA_REQUEST_6) || \
#                                     ((REQUEST) == DMA_REQUEST_7) || \
#                                     ((REQUEST) == DMA_REQUEST_8) || \
#                                     ((REQUEST) == DMA_REQUEST_9) || \
#                                     ((REQUEST) == DMA_REQUEST_10) || \
#                                     ((REQUEST) == DMA_REQUEST_12) || \
#                                     ((REQUEST) == DMA_REQUEST_13) || \
#                                     ((REQUEST) == DMA_REQUEST_14) || \
#                                     ((REQUEST) == DMA_REQUEST_15))
DMA_PERIPH_TO_MEMORY = 0x0
DMA_MEMORY_TO_PERIPH = 0x10
DMA_MEMORY_TO_MEMORY = 0x4000
DMA_PINC_ENABLE = 0x40
DMA_PINC_DISABLE = 0x0
DMA_MINC_ENABLE = 0x80
DMA_MINC_DISABLE = 0x0
DMA_PDATAALIGN_BYTE = 0x0
DMA_PDATAALIGN_HALFWORD = 0x100
DMA_PDATAALIGN_WORD = 0x200
DMA_MDATAALIGN_BYTE = 0x0
DMA_MDATAALIGN_HALFWORD = 0x400
DMA_MDATAALIGN_WORD = 0x800
DMA_NORMAL = 0x0
DMA_CIRCULAR = 0x20
DMA_PRIORITY_LOW = 0x0
DMA_PRIORITY_MEDIUM = 0x1000
DMA_PRIORITY_HIGH = 0x2000
DMA_PRIORITY_VERY_HIGH = 0x3000
DMA_IT_TC = 0x2
DMA_IT_HT = 0x4
DMA_IT_TE = 0x8
DMA_FLAG_GL1 = 0x1
DMA_FLAG_TC1 = 0x2
DMA_FLAG_HT1 = 0x4
DMA_FLAG_TE1 = 0x8
DMA_FLAG_GL2 = 0x10
DMA_FLAG_TC2 = 0x20
DMA_FLAG_HT2 = 0x40
DMA_FLAG_TE2 = 0x80
DMA_FLAG_GL3 = 0x100
DMA_FLAG_TC3 = 0x200
DMA_FLAG_HT3 = 0x400
DMA_FLAG_TE3 = 0x800
DMA_FLAG_GL4 = 0x1000
DMA_FLAG_TC4 = 0x2000
DMA_FLAG_HT4 = 0x4000
DMA_FLAG_TE4 = 0x8000
DMA_FLAG_GL5 = 0x10000
DMA_FLAG_TC5 = 0x20000
DMA_FLAG_HT5 = 0x40000
DMA_FLAG_TE5 = 0x80000
DMA_FLAG_GL6 = 0x100000
DMA_FLAG_TC6 = 0x200000
DMA_FLAG_HT6 = 0x400000
DMA_FLAG_TE6 = 0x800000
DMA_FLAG_GL7 = 0x1000000
DMA_FLAG_TC7 = 0x2000000
DMA_FLAG_HT7 = 0x4000000
DMA_FLAG_TE7 = 0x8000000
# fun define __HAL_DMA_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_DMA_STATE_RESET)
# fun define __HAL_DMA_ENABLE(__HANDLE__)        ((__HANDLE__)->Instance->CCR |=  DMA_CCR_EN)
# fun define __HAL_DMA_DISABLE(__HANDLE__)       ((__HANDLE__)->Instance->CCR &=  ~DMA_CCR_EN)
# fun define __HAL_DMA_GET_TC_FLAG_INDEX(__HANDLE__) \
#(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TC1 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TC2 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TC3 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TC4 :\
# DMA_FLAG_TC5)
# fun define __HAL_DMA_GET_TC_FLAG_INDEX(__HANDLE__) \
#(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TC1 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TC2 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TC3 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TC4 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TC5 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TC6 :\
#   DMA_FLAG_TC7)
# fun define __HAL_DMA_GET_HT_FLAG_INDEX(__HANDLE__)\
#(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_HT1 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_HT2 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_HT3 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_HT4 :\
# DMA_FLAG_HT5)
# fun define __HAL_DMA_GET_HT_FLAG_INDEX(__HANDLE__)\
#(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_HT1 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_HT2 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_HT3 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_HT4 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_HT5 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_HT6 :\
#   DMA_FLAG_HT7)
# fun define __HAL_DMA_GET_TE_FLAG_INDEX(__HANDLE__)\
#(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TE1 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TE2 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TE3 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TE4 :\
# DMA_FLAG_TE5)
# fun define __HAL_DMA_GET_TE_FLAG_INDEX(__HANDLE__)\
#(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_FLAG_TE1 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_FLAG_TE2 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_FLAG_TE3 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_FLAG_TE4 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_FLAG_TE5 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_FLAG_TE6 :\
#   DMA_FLAG_TE7)
# fun define __HAL_DMA_GET_GI_FLAG_INDEX(__HANDLE__)\
#(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_ISR_GIF1 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_ISR_GIF2 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_ISR_GIF3 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_ISR_GIF4 :\
#   DMA_ISR_GIF5)
# fun define __HAL_DMA_GET_GI_FLAG_INDEX(__HANDLE__)\
#(((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel1))? DMA_ISR_GIF1 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel2))? DMA_ISR_GIF2 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel3))? DMA_ISR_GIF3 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel4))? DMA_ISR_GIF4 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel5))? DMA_ISR_GIF5 :\
# ((uint32_t)((__HANDLE__)->Instance) == ((uint32_t)DMA1_Channel6))? DMA_ISR_GIF6 :\
#   DMA_ISR_GIF7)
# fun define __HAL_DMA_GET_FLAG(__HANDLE__, __FLAG__) (DMA1->ISR & (__FLAG__))
# fun define __HAL_DMA_CLEAR_FLAG(__HANDLE__, __FLAG__) (DMA1->IFCR = (__FLAG__))
# fun define __HAL_DMA_ENABLE_IT(__HANDLE__, __INTERRUPT__)   ((__HANDLE__)->Instance->CCR |= (__INTERRUPT__))
# fun define __HAL_DMA_DISABLE_IT(__HANDLE__, __INTERRUPT__)  ((__HANDLE__)->Instance->CCR &= ~(__INTERRUPT__))
# fun define __HAL_DMA_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)  (((__HANDLE__)->Instance->CCR & (__INTERRUPT__)))
# fun define __HAL_DMA_GET_COUNTER(__HANDLE__) ((__HANDLE__)->Instance->CNDTR)
# fun define IS_DMA_DIRECTION(DIRECTION) (((DIRECTION) == DMA_PERIPH_TO_MEMORY ) || \
#                                     ((DIRECTION) == DMA_MEMORY_TO_PERIPH)  || \
#                                     ((DIRECTION) == DMA_MEMORY_TO_MEMORY))
# fun define IS_DMA_BUFFER_SIZE(SIZE) (((SIZE) >= 0x1U) && ((SIZE) < 0x10000U))
# fun define IS_DMA_PERIPHERAL_INC_STATE(STATE) (((STATE) == DMA_PINC_ENABLE) || \
#                                            ((STATE) == DMA_PINC_DISABLE))
# fun define IS_DMA_MEMORY_INC_STATE(STATE) (((STATE) == DMA_MINC_ENABLE)  || \
#                                        ((STATE) == DMA_MINC_DISABLE))
# fun define IS_DMA_PERIPHERAL_DATA_SIZE(SIZE) (((SIZE) == DMA_PDATAALIGN_BYTE)     || \
#                                           ((SIZE) == DMA_PDATAALIGN_HALFWORD) || \
#                                           ((SIZE) == DMA_PDATAALIGN_WORD))
# fun define IS_DMA_MEMORY_DATA_SIZE(SIZE) (((SIZE) == DMA_MDATAALIGN_BYTE)     || \
#                                       ((SIZE) == DMA_MDATAALIGN_HALFWORD) || \
#                                       ((SIZE) == DMA_MDATAALIGN_WORD ))
# fun define IS_DMA_MODE(MODE) (((MODE) == DMA_NORMAL )  || \
#                           ((MODE) == DMA_CIRCULAR))
# fun define IS_DMA_PRIORITY(PRIORITY) (((PRIORITY) == DMA_PRIORITY_LOW )   || \
#                                   ((PRIORITY) == DMA_PRIORITY_MEDIUM) || \
#                                   ((PRIORITY) == DMA_PRIORITY_HIGH)   || \
#                                   ((PRIORITY) == DMA_PRIORITY_VERY_HIGH))
# struct DMA_InitTypeDef

class DMA_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Request',	ctypes.c_uint32),
		('Direction',	ctypes.c_uint32),
		('PeriphInc',	ctypes.c_uint32),
		('MemInc',	ctypes.c_uint32),
		('PeriphDataAlignment',	ctypes.c_uint32),
		('MemDataAlignment',	ctypes.c_uint32),
		('Mode',	ctypes.c_uint32),
		('Priority',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct DMA_HandleTypeDef
# struct DMA_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_firewall.h : 

# empty define __STM32L0xx_HAL_FIREWALL_H
FIREWALL_VOLATILEDATA_NOT_EXECUTABLE = 0x0
FIREWALL_VOLATILEDATA_EXECUTABLE = 0x4
FIREWALL_VOLATILEDATA_NOT_SHARED = 0x0
FIREWALL_VOLATILEDATA_SHARED = 0x2
FIREWALL_PRE_ARM_RESET = 0x0
FIREWALL_PRE_ARM_SET = 0x1
# fun define IS_FIREWALL_CODE_SEGMENT_ADDRESS(ADDRESS)        (((ADDRESS) >= FLASH_BASE) && ((ADDRESS) < (FLASH_BASE + FLASH_SIZE)))
# fun define IS_FIREWALL_CODE_SEGMENT_LENGTH(ADDRESS, LENGTH) (((ADDRESS) + (LENGTH)) <= (FLASH_BASE + FLASH_SIZE))
# fun define IS_FIREWALL_NONVOLATILEDATA_SEGMENT_ADDRESS(ADDRESS)        (((ADDRESS) >= FLASH_BASE) && ((ADDRESS) < (FLASH_BASE + FLASH_SIZE)))
# fun define IS_FIREWALL_NONVOLATILEDATA_SEGMENT_LENGTH(ADDRESS, LENGTH) (((ADDRESS) + (LENGTH)) <= (FLASH_BASE + FLASH_SIZE))
# fun define IS_FIREWALL_VOLATILEDATA_SEGMENT_ADDRESS(ADDRESS)        (((ADDRESS) >= SRAM_BASE) && ((ADDRESS) < (SRAM_BASE + SRAM_SIZE_MAX)))
# fun define IS_FIREWALL_VOLATILEDATA_SEGMENT_LENGTH(ADDRESS, LENGTH) (((ADDRESS) + (LENGTH)) <= (SRAM_BASE + SRAM_SIZE_MAX))
# fun define IS_FIREWALL_VOLATILEDATA_SHARE(SHARE) (((SHARE) == FIREWALL_VOLATILEDATA_NOT_SHARED) || \
#                                               ((SHARE) == FIREWALL_VOLATILEDATA_SHARED))
# fun define IS_FIREWALL_VOLATILEDATA_EXECUTE(EXECUTE) (((EXECUTE) == FIREWALL_VOLATILEDATA_NOT_EXECUTABLE) || \
#                                                   ((EXECUTE) == FIREWALL_VOLATILEDATA_EXECUTABLE))
# fun define __HAL_FIREWALL_IS_ENABLED()  HAL_IS_BIT_CLR(SYSCFG->CFGR2, SYSCFG_CFGR2_FWDISEN)
# fun define __HAL_FIREWALL_PREARM_ENABLE()                                                 \
#             do {                                                                      \
#                  __IO uint32_t tmpreg;                                                \
#                  SET_BIT(FIREWALL->CR, FW_CR_FPA) ;                                   \
#                  /* Read bit back to ensure it is taken into account by Peripheral */ \
#                  /* (introduce proper delay inside macro execution) */                \
#                  tmpreg = READ_BIT(FIREWALL->CR, FW_CR_FPA) ;                         \
#                  UNUSED(tmpreg);                                                      \
#                } while(0)
# fun define __HAL_FIREWALL_PREARM_DISABLE()                                                \
#             do {                                                                      \
#                  __IO uint32_t tmpreg;                                                \
#                  CLEAR_BIT(FIREWALL->CR, FW_CR_FPA) ;                                 \
#                  /* Read bit back to ensure it is taken into account by Peripheral */ \
#                  /* (introduce proper delay inside macro execution) */                \
#                  tmpreg = READ_BIT(FIREWALL->CR, FW_CR_FPA) ;                         \
#                  UNUSED(tmpreg);                                                      \
#                } while(0)
# fun define __HAL_FIREWALL_VOLATILEDATA_SHARED_ENABLE()                                    \
#             do {                                                                      \
#                  __IO uint32_t tmpreg;                                                \
#                  SET_BIT(FIREWALL->CR, FW_CR_VDS) ;                                   \
#                  /* Read bit back to ensure it is taken into account by Peripheral */ \
#                  /* (introduce proper delay inside macro execution) */                \
#                  tmpreg = READ_BIT(FIREWALL->CR, FW_CR_VDS) ;                         \
#                  UNUSED(tmpreg);                                                      \
#                } while(0)
# fun define __HAL_FIREWALL_VOLATILEDATA_SHARED_DISABLE()                                   \
#             do {                                                                      \
#                  __IO uint32_t tmpreg;                                                \
#                  CLEAR_BIT(FIREWALL->CR, FW_CR_VDS) ;                                 \
#                  /* Read bit back to ensure it is taken into account by Peripheral */ \
#                  /* (introduce proper delay inside macro execution) */                \
#                  tmpreg = READ_BIT(FIREWALL->CR, FW_CR_VDS) ;                         \
#                  UNUSED(tmpreg);                                                      \
#                } while(0)
# fun define __HAL_FIREWALL_VOLATILEDATA_EXECUTION_ENABLE()                                 \
#             do {                                                                      \
#                  __IO uint32_t tmpreg;                                                \
#                  SET_BIT(FIREWALL->CR, FW_CR_VDE) ;                                   \
#                  /* Read bit back to ensure it is taken into account by Peripheral */ \
#                  /* (introduce proper delay inside macro execution) */                \
#                  tmpreg = READ_BIT(FIREWALL->CR, FW_CR_VDE) ;                         \
#                  UNUSED(tmpreg);                                                      \
#                } while(0)
# fun define __HAL_FIREWALL_VOLATILEDATA_EXECUTION_DISABLE()                                \
#             do {                                                                      \
#                  __IO uint32_t tmpreg;                                                \
#                  CLEAR_BIT(FIREWALL->CR, FW_CR_VDE) ;                                 \
#                  /* Read bit back to ensure it is taken into account by Peripheral */ \
#                  /* (introduce proper delay inside macro execution) */                \
#                  tmpreg = READ_BIT(FIREWALL->CR, FW_CR_VDE) ;                         \
#                  UNUSED(tmpreg);                                                      \
#                } while(0)
# fun define __HAL_FIREWALL_GET_VOLATILEDATA_SHARED() ((FIREWALL->CR & FW_CR_VDS) == FW_CR_VDS)
# fun define __HAL_FIREWALL_GET_VOLATILEDATA_EXECUTION() ((FIREWALL->CR & FW_CR_VDE) == FW_CR_VDE)
# fun define __HAL_FIREWALL_GET_PREARM() ((FIREWALL->CR & FW_CR_FPA) == FW_CR_FPA)
# struct FIREWALL_InitTypeDef

class FIREWALL_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CodeSegmentStartAddress',	ctypes.c_uint32),
		('CodeSegmentLength',	ctypes.c_uint32),
		('NonVDataSegmentStartAddress',	ctypes.c_uint32),
		('NonVDataSegmentLength',	ctypes.c_uint32),
		('VDataSegmentStartAddress',	ctypes.c_uint32),
		('VDataSegmentLength',	ctypes.c_uint32),
		('VolatileDataExecution',	ctypes.c_uint32),
		('VolatileDataShared',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_flash_ex.h : 

# empty define __STM32L0xx_HAL_FLASH_EX_H
FLASH_SIZE_DATA_REGISTER = 0x1FF8007C
# Skip FLASH_NBPAGES_MAX : no time
WRP_MASK_LOW = 0xFFFF
WRP_MASK_HIGH = 0xFFFF0000
# fun define IS_FLASH_TYPEERASE(__VALUE__)   (((__VALUE__) == FLASH_TYPEERASE_PAGES))
# fun define IS_OPTIONBYTE(__VALUE__) (((__VALUE__) <= (OPTIONBYTE_WRP  | OPTIONBYTE_RDP | \
#                                                  OPTIONBYTE_USER | OPTIONBYTE_BOR | OPTIONBYTE_BOOT_BIT1)))
# fun define IS_WRPSTATE(__VALUE__)          (((__VALUE__) == OB_WRPSTATE_DISABLE) || \
#                                         ((__VALUE__) == OB_WRPSTATE_ENABLE))
# fun define IS_OB_WRP(__PAGE__)             (((__PAGE__) != 0x0000000U))
# fun define IS_OB_RDP(__LEVEL__)            (((__LEVEL__) == OB_RDP_LEVEL_0) ||\
#                                         ((__LEVEL__) == OB_RDP_LEVEL_1) ||\
#                                         ((__LEVEL__) == OB_RDP_LEVEL_2))
# fun define IS_OB_BOR_LEVEL(__LEVEL__)      (((__LEVEL__) == OB_BOR_OFF)     || \
#                                         ((__LEVEL__) == OB_BOR_LEVEL1)  || \
#                                         ((__LEVEL__) == OB_BOR_LEVEL2)  || \
#                                         ((__LEVEL__) == OB_BOR_LEVEL3)  || \
#                                         ((__LEVEL__) == OB_BOR_LEVEL4)  || \
#                                         ((__LEVEL__) == OB_BOR_LEVEL5))
# fun define IS_OB_IWDG_SOURCE(__SOURCE__)   (((__SOURCE__) == OB_IWDG_SW) || ((__SOURCE__) == OB_IWDG_HW))
# fun define IS_OB_STOP_SOURCE(__SOURCE__)   (((__SOURCE__) == OB_STOP_NORST) || ((__SOURCE__) == OB_STOP_RST))
# fun define IS_OB_STDBY_SOURCE(__SOURCE__)  (((__SOURCE__) == OB_STDBY_NORST) || ((__SOURCE__) == OB_STDBY_RST))
# fun define IS_OBEX(__VALUE__)              (((__VALUE__) <= (OPTIONBYTE_PCROP | OPTIONBYTE_BOOTCONFIG)) && ((__VALUE__) != 0U))
# fun define IS_OBEX(__VALUE__)              ((__VALUE__) == OPTIONBYTE_PCROP)
# fun define IS_OBEX(__VALUE__)              ((__VALUE__) == OPTIONBYTE_BOOTCONFIG)
# fun define IS_PCROPSTATE(__VALUE__)        (((__VALUE__) == OB_PCROP_STATE_DISABLE) || \
#                                         ((__VALUE__) == OB_PCROP_STATE_ENABLE))
# fun define IS_OB_PCROP(__PAGE__)           (((__PAGE__) != 0x0000000U))
# fun define IS_OB_BOOT_BANK(__BANK__)     (((__BANK__) == OB_BOOT_BANK2) || ((__BANK__) == OB_BOOT_BANK1))
# fun define IS_OB_BOOT1(__BOOT_BIT1__)  (((__BOOT_BIT1__) == OB_BOOT_BIT1_RESET) || ((__BOOT_BIT1__) == OB_BOOT_BIT1_SET))
# fun define IS_TYPEPROGRAMDATA(__VALUE__)   (((__VALUE__) == FLASH_TYPEPROGRAMDATA_BYTE)     || \
#                                         ((__VALUE__) == FLASH_TYPEPROGRAMDATA_HALFWORD) || \
#                                         ((__VALUE__) == FLASH_TYPEPROGRAMDATA_WORD))
# fun define IS_FLASH_DATA_ADDRESS(__ADDRESS__)          (((__ADDRESS__) >= DATA_EEPROM_BASE) && ((__ADDRESS__) <= DATA_EEPROM_BANK2_END))
# fun define IS_FLASH_DATA_BANK1_ADDRESS(__ADDRESS__)    (((__ADDRESS__) >= DATA_EEPROM_BASE) && ((__ADDRESS__) <= DATA_EEPROM_BANK1_END))
# fun define IS_FLASH_DATA_BANK2_ADDRESS(__ADDRESS__)    (((__ADDRESS__) >= DATA_EEPROM_BANK2_BASE) && ((__ADDRESS__) <= DATA_EEPROM_BANK2_END))
# fun define IS_FLASH_PROGRAM_ADDRESS(__ADDRESS__)       (((__ADDRESS__) >= FLASH_BASE)       && ((__ADDRESS__) <  (FLASH_BASE + FLASH_SIZE)))
# fun define IS_FLASH_PROGRAM_BANK1_ADDRESS(__ADDRESS__) (((__ADDRESS__) >= FLASH_BASE)       && ((__ADDRESS__) <  (FLASH_BASE + (FLASH_SIZE >> 1))))
# fun define IS_FLASH_PROGRAM_BANK2_ADDRESS(__ADDRESS__) (((__ADDRESS__) >= FLASH_BANK2_BASE) && ((__ADDRESS__) <  (FLASH_BASE + FLASH_SIZE)))
# fun define IS_FLASH_DATA_ADDRESS(__ADDRESS__)          (((__ADDRESS__) >= DATA_EEPROM_BASE) && ((__ADDRESS__) <= DATA_EEPROM_END))
# fun define IS_FLASH_PROGRAM_ADDRESS(__ADDRESS__)       (((__ADDRESS__) >= FLASH_BASE)       && ((__ADDRESS__) <  (FLASH_BASE + FLASH_SIZE)))
# fun define IS_NBPAGES(__PAGES__) (((__PAGES__) >= 1) && ((__PAGES__) <= FLASH_NBPAGES_MAX))
FLASH_TYPEERASE_PAGES = 0x0
OPTIONBYTE_WRP = 0x1
OPTIONBYTE_RDP = 0x2
OPTIONBYTE_USER = 0x4
OPTIONBYTE_BOR = 0x8
OPTIONBYTE_BOOT_BIT1 = 0x10
OB_WRPSTATE_DISABLE = 0x0
OB_WRPSTATE_ENABLE = 0x1
OB_WRP_Pages0to31 = 0x1
OB_WRP_Pages32to63 = 0x2
OB_WRP_Pages64to95 = 0x4
OB_WRP_Pages96to127 = 0x8
OB_WRP_Pages128to159 = 0x10
OB_WRP_Pages160to191 = 0x20
OB_WRP_Pages192to223 = 0x40
OB_WRP_Pages224to255 = 0x80
OB_WRP_AllPages = 0xFFFF
OB_WRP_Pages0to31 = 0x1
OB_WRP_Pages32to63 = 0x2
OB_WRP_Pages64to95 = 0x4
OB_WRP_Pages96to127 = 0x8
OB_WRP_Pages128to159 = 0x10
OB_WRP_Pages160to191 = 0x20
OB_WRP_Pages192to223 = 0x40
OB_WRP_Pages224to255 = 0x80
OB_WRP_Pages256to287 = 0x100
OB_WRP_Pages288to319 = 0x200
OB_WRP_Pages320to351 = 0x400
OB_WRP_Pages352to383 = 0x800
OB_WRP_Pages384to415 = 0x1000
OB_WRP_Pages416to447 = 0x2000
OB_WRP_Pages448to479 = 0x4000
OB_WRP_Pages480to511 = 0x8000
OB_WRP_AllPages = 0xFFFF
OB_WRP_Pages0to31 = 0x1
OB_WRP_Pages32to63 = 0x2
OB_WRP_Pages64to95 = 0x4
OB_WRP_Pages96to127 = 0x8
OB_WRP_Pages128to159 = 0x10
OB_WRP_Pages160to191 = 0x20
OB_WRP_Pages192to223 = 0x40
OB_WRP_Pages224to255 = 0x80
OB_WRP_Pages256to287 = 0x100
OB_WRP_Pages288to319 = 0x200
OB_WRP_Pages320to351 = 0x400
OB_WRP_Pages352to383 = 0x800
OB_WRP_Pages384to415 = 0x1000
OB_WRP_Pages416to447 = 0x2000
OB_WRP_Pages448to479 = 0x4000
OB_WRP_Pages480to511 = 0x8000
# Skip OB_WRP_Pages512to543 : no need parse
# Skip OB_WRP_Pages544to575 : no need parse
# Skip OB_WRP_Pages576to607 : no need parse
# Skip OB_WRP_Pages608to639 : no need parse
# Skip OB_WRP_Pages640to671 : no need parse
# Skip OB_WRP_Pages672to703 : no need parse
# Skip OB_WRP_Pages704to735 : no need parse
# Skip OB_WRP_Pages736to767 : no need parse
# Skip OB_WRP_Pages768to799 : no need parse
# Skip OB_WRP_Pages800to831 : no need parse
# Skip OB_WRP_Pages832to863 : no need parse
# Skip OB_WRP_Pages864to895 : no need parse
# Skip OB_WRP_Pages896to927 : no need parse
# Skip OB_WRP_Pages928to959 : no need parse
# Skip OB_WRP_Pages960to991 : no need parse
# Skip OB_WRP_Pages992to1023 : no need parse
OB_WRP_AllPages = 0xFFFF
# Skip OB_WRP2_Pages1024to1055 : no need parse
# Skip OB_WRP2_Pages1056to1087 : no need parse
# Skip OB_WRP2_Pages1088to1119 : no need parse
# Skip OB_WRP2_Pages1120to1151 : no need parse
# Skip OB_WRP2_Pages1152to1183 : no need parse
# Skip OB_WRP2_Pages1184to1215 : no need parse
# Skip OB_WRP2_Pages1216to1247 : no need parse
# Skip OB_WRP2_Pages1248to1279 : no need parse
# Skip OB_WRP2_Pages1280to1311 : no need parse
# Skip OB_WRP2_Pages1312to1343 : no need parse
# Skip OB_WRP2_Pages1344to1375 : no need parse
# Skip OB_WRP2_Pages1376to1407 : no need parse
# Skip OB_WRP2_Pages1408to1439 : no need parse
# Skip OB_WRP2_Pages1440to1471 : no need parse
# Skip OB_WRP2_Pages1472to1503 : no need parse
# Skip OB_WRP2_Pages1504to1535 : no need parse
# Skip OB_WRP2_AllPages : no need parse
OB_RDP_LEVEL_0 = 0xAA
OB_RDP_LEVEL_1 = 0xBB
OB_RDP_LEVEL_2 = 0xCC
OB_BOR_OFF = 0x0
OB_BOR_LEVEL1 = 0x8
OB_BOR_LEVEL2 = 0x9
OB_BOR_LEVEL3 = 0xA
OB_BOR_LEVEL4 = 0xB
OB_BOR_LEVEL5 = 0xC
OB_IWDG_SW = 0x10
OB_IWDG_HW = 0x0
OB_STOP_NORST = 0x20
OB_STOP_RST = 0x0
OB_STDBY_NORST = 0x40
OB_STDBY_RST = 0x0
OPTIONBYTE_PCROP = 0x1
# Skip OPTIONBYTE_BOOTCONFIG : no need parse
OB_PCROP_STATE_DISABLE = 0x0
OB_PCROP_STATE_ENABLE = 0x1
OB_PCROP_DESELECTED = 0x0
OB_PCROP_SELECTED = 0x100
OB_PCROP_Pages0to31 = 0x1
OB_PCROP_Pages32to63 = 0x2
OB_PCROP_Pages64to95 = 0x4
OB_PCROP_Pages96to127 = 0x8
OB_PCROP_Pages128to159 = 0x10
OB_PCROP_Pages160to191 = 0x20
OB_PCROP_Pages192to223 = 0x40
OB_PCROP_Pages224to255 = 0x80
OB_PCROP_AllPages = 0xFFFF
OB_PCROP_Pages0to31 = 0x1
OB_PCROP_Pages32to63 = 0x2
OB_PCROP_Pages64to95 = 0x4
OB_PCROP_Pages96to127 = 0x8
OB_PCROP_Pages128to159 = 0x10
OB_PCROP_Pages160to191 = 0x20
OB_PCROP_Pages192to223 = 0x40
OB_PCROP_Pages224to255 = 0x80
OB_PCROP_Pages256to287 = 0x100
OB_PCROP_Pages288to319 = 0x200
OB_PCROP_Pages320to351 = 0x400
OB_PCROP_Pages352to383 = 0x800
OB_PCROP_Pages384to415 = 0x1000
OB_PCROP_Pages416to447 = 0x2000
OB_PCROP_Pages448to479 = 0x4000
OB_PCROP_Pages480to511 = 0x8000
OB_PCROP_AllPages = 0xFFFF
OB_PCROP_Pages0to31 = 0x1
OB_PCROP_Pages32to63 = 0x2
OB_PCROP_Pages64to95 = 0x4
OB_PCROP_Pages96to127 = 0x8
OB_PCROP_Pages128to159 = 0x10
OB_PCROP_Pages160to191 = 0x20
OB_PCROP_Pages192to223 = 0x40
OB_PCROP_Pages224to255 = 0x80
OB_PCROP_Pages256to287 = 0x100
OB_PCROP_Pages288to319 = 0x200
OB_PCROP_Pages320to351 = 0x400
OB_PCROP_Pages352to383 = 0x800
OB_PCROP_Pages384to415 = 0x1000
OB_PCROP_Pages416to447 = 0x2000
OB_PCROP_Pages448to479 = 0x4000
OB_PCROP_Pages480to511 = 0x8000
# Skip OB_PCROP_Pages512to543 : no need parse
# Skip OB_PCROP_Pages544to575 : no need parse
# Skip OB_PCROP_Pages576to607 : no need parse
# Skip OB_PCROP_Pages608to639 : no need parse
# Skip OB_PCROP_Pages640to671 : no need parse
# Skip OB_PCROP_Pages672to703 : no need parse
# Skip OB_PCROP_Pages704to735 : no need parse
# Skip OB_PCROP_Pages736to767 : no need parse
# Skip OB_PCROP_Pages768to799 : no need parse
# Skip OB_PCROP_Pages800to831 : no need parse
# Skip OB_PCROP_Pages832to863 : no need parse
# Skip OB_PCROP_Pages864to895 : no need parse
# Skip OB_PCROP_Pages896to927 : no need parse
# Skip OB_PCROP_Pages928to959 : no need parse
# Skip OB_PCROP_Pages960to991 : no need parse
# Skip OB_PCROP_Pages992to1023 : no need parse
OB_PCROP_AllPages = 0xFFFF
# Skip OB_PCROP2_Pages1024to1055 : no need parse
# Skip OB_PCROP2_Pages1056to1087 : no need parse
# Skip OB_PCROP2_Pages1088to1119 : no need parse
# Skip OB_PCROP2_Pages1120to1151 : no need parse
# Skip OB_PCROP2_Pages1152to1183 : no need parse
# Skip OB_PCROP2_Pages1184to1215 : no need parse
# Skip OB_PCROP2_Pages1216to1247 : no need parse
# Skip OB_PCROP2_Pages1248to1279 : no need parse
# Skip OB_PCROP2_Pages1280to1311 : no need parse
# Skip OB_PCROP2_Pages1312to1343 : no need parse
# Skip OB_PCROP2_Pages1344to1375 : no need parse
# Skip OB_PCROP2_Pages1376to1407 : no need parse
# Skip OB_PCROP2_Pages1408to1439 : no need parse
# Skip OB_PCROP2_Pages1440to1471 : no need parse
# Skip OB_PCROP2_Pages1472to1503 : no need parse
# Skip OB_PCROP2_Pages1504to1535 : no need parse
# Skip OB_PCROP2_AllPages : no need parse
OB_BOOT_BIT1_RESET = 0x0
OB_BOOT_BIT1_SET = 0x1
FLASH_TYPEPROGRAMDATA_BYTE = 0x0
FLASH_TYPEPROGRAMDATA_HALFWORD = 0x1
FLASH_TYPEPROGRAMDATA_WORD = 0x2
# Skip OB_BOOT_BANK1 : no need parse
# Skip OB_BOOT_BANK2 : no need parse
# fun define __HAL_FLASH_SET_LATENCY(__LATENCY__) \
#                  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(__LATENCY__))
# fun define __HAL_FLASH_GET_LATENCY()     (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY))
# fun define __HAL_FLASH_PREFETCH_BUFFER_ENABLE()      SET_BIT((FLASH->ACR), FLASH_ACR_PRFTEN)
# fun define __HAL_FLASH_PREFETCH_BUFFER_DISABLE()     CLEAR_BIT((FLASH->ACR), FLASH_ACR_PRFTEN)
# fun define __HAL_FLASH_BUFFER_CACHE_ENABLE()         CLEAR_BIT((FLASH->ACR), FLASH_ACR_DISAB_BUF)
# fun define __HAL_FLASH_BUFFER_CACHE_DISABLE()        SET_BIT((FLASH->ACR), FLASH_ACR_DISAB_BUF)
# fun define __HAL_FLASH_PREREAD_BUFFER_ENABLE()       SET_BIT((FLASH->ACR), FLASH_ACR_PRE_READ)
# fun define __HAL_FLASH_PREREAD_BUFFER_DISABLE()      CLEAR_BIT((FLASH->ACR), FLASH_ACR_PRE_READ)
# fun define __HAL_FLASH_SLEEP_POWERDOWN_ENABLE()      SET_BIT(FLASH->ACR, FLASH_ACR_SLEEP_PD)
# fun define __HAL_FLASH_SLEEP_POWERDOWN_DISABLE()     CLEAR_BIT(FLASH->ACR, FLASH_ACR_SLEEP_PD)
# fun define __HAL_FLASH_POWER_DOWN_ENABLE() do { FLASH->PDKEYR = FLASH_PDKEY1;    \
#                                             FLASH->PDKEYR = FLASH_PDKEY2;    \
#                                             SET_BIT((FLASH->ACR), FLASH_ACR_RUN_PD);  \
#                                           } while (0)
# fun define __HAL_FLASH_POWER_DOWN_DISABLE() do { FLASH->PDKEYR = FLASH_PDKEY1;    \
#                                              FLASH->PDKEYR = FLASH_PDKEY2;    \
#                                             CLEAR_BIT((FLASH->ACR), FLASH_ACR_RUN_PD);  \
#                                            } while (0)
# struct FLASH_EraseInitTypeDef

class FLASH_EraseInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('TypeErase',	ctypes.c_uint32),
		('PageAddress',	ctypes.c_uint32),
		('NbPages',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct FLASH_OBProgramInitTypeDef

class FLASH_OBProgramInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('OptionType',	ctypes.c_uint32),
		('WRPState',	ctypes.c_uint32),
		('WRPSector',	ctypes.c_uint32),
		('RDPLevel',	ctypes.c_uint8),
		('BORLevel',	ctypes.c_uint8),
		('USERConfig',	ctypes.c_uint8),
		('BOOTBit1Config',	ctypes.c_uint8),
	]
	def ref(self):
		return ctypes.byref(self)

# struct FLASH_AdvOBProgramInitTypeDef

class FLASH_AdvOBProgramInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('OptionType',	ctypes.c_uint32),
		('PCROPState',	ctypes.c_uint32),
		('PCROPSector',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_flash.h : 

# Enum FLASH_ProcedureTypeDef
FLASH_PROC_NONE = 0x0
FLASH_PROC_PAGEERASE = 0x1
FLASH_PROC_PROGRAM = 0x2
# empty define __STM32L0xx_HAL_FLASH_H
FLASH_TIMEOUT_VALUE = 0xC350
FLASH_SIZE_DATA_REGISTER = 0x1FF8007C
# fun define IS_FLASH_TYPEPROGRAM(_VALUE_)   ((_VALUE_) == FLASH_TYPEPROGRAM_WORD)
# fun define IS_FLASH_LATENCY(__LATENCY__) (((__LATENCY__) == FLASH_LATENCY_0) || \
#                                       ((__LATENCY__) == FLASH_LATENCY_1))
HAL_FLASH_ERROR_NONE = 0x0
HAL_FLASH_ERROR_PGA = 0x1
HAL_FLASH_ERROR_WRP = 0x2
HAL_FLASH_ERROR_OPTV = 0x4
HAL_FLASH_ERROR_SIZE = 0x8
HAL_FLASH_ERROR_RD = 0x10
HAL_FLASH_ERROR_FWWERR = 0x20
HAL_FLASH_ERROR_NOTZERO = 0x40
# Skip FLASH_SIZE : no time
FLASH_PAGE_SIZE = 0x80
# Skip FLASH_END : no time
# Skip FLASH_BANK2_BASE : no need parse
# Skip FLASH_BANK1_END : no need parse
# Skip FLASH_BANK2_END : no need parse
FLASH_TYPEPROGRAM_WORD = 0x2
FLASH_LATENCY_0 = 0x0
FLASH_LATENCY_1 = 0x1
FLASH_IT_EOP = 0x10000
FLASH_IT_ERR = 0x20000
FLASH_FLAG_BSY = 0x1
FLASH_FLAG_EOP = 0x2
FLASH_FLAG_ENDHV = 0x4
FLASH_FLAG_READY = 0x8
FLASH_FLAG_WRPERR = 0x100
FLASH_FLAG_PGAERR = 0x200
FLASH_FLAG_SIZERR = 0x400
FLASH_FLAG_OPTVERR = 0x800
FLASH_FLAG_RDERR = 0x2000
FLASH_FLAG_FWWERR = 0x20000
FLASH_FLAG_NOTZEROERR = 0x10000
FLASH_PDKEY1 = 0x4152637
FLASH_PDKEY2 = 0xFAFBFCFD
FLASH_PEKEY1 = 0x89ABCDEF
FLASH_PEKEY2 = 0x2030405
FLASH_PRGKEY1 = 0x8C9DAEBF
FLASH_PRGKEY2 = 0x13141516
FLASH_OPTKEY1 = 0xFBEAD9C8
FLASH_OPTKEY2 = 0x24252627
# Skip InterruptType_ACTLR_DISMCYCINT_Msk : no need parse
# fun define __HAL_FLASH_ENABLE_IT(__INTERRUPT__)  SET_BIT((FLASH->PECR), (__INTERRUPT__))
# fun define __HAL_FLASH_DISABLE_IT(__INTERRUPT__)  CLEAR_BIT((FLASH->PECR), (uint32_t)(__INTERRUPT__))
# fun define __HAL_FLASH_GET_FLAG(__FLAG__)   (((FLASH->SR) & (__FLAG__)) == (__FLAG__))
# fun define __HAL_FLASH_CLEAR_FLAG(__FLAG__)   ((FLASH->SR) = (__FLAG__))
# struct FLASH_ProcessTypeDef

class FLASH_ProcessTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ProcedureOnGoing',	ctypes.c_uint32),
		('NbPagesToErase',	ctypes.c_uint32),
		('Address',	ctypes.c_uint32),
		('Page',	ctypes.c_uint32),
		('Lock',	ctypes.c_uint32),
		('ErrorCode',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_flash_ramfunc.h : 

# empty define __STM32L0xx_FLASH_RAMFUNC_H
# ----------------------------------------

# file stm32l0xx_hal_gpio_ex.h : 

# empty define __STM32L0xx_HAL_GPIO_EX_H
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF0_USART1 = 0x0
GPIO_AF0_SPI2 = 0x0
GPIO_AF0_LPTIM1 = 0x0
GPIO_AF0_TIM22 = 0x0
GPIO_AF0_LPUART1 = 0x0
GPIO_AF0_USART2 = 0x0
GPIO_AF0_TIM2 = 0x0
GPIO_AF0_USB = 0x0
GPIO_AF1_I2C1 = 0x1
GPIO_AF1_SPI2 = 0x1
# Skip GPIO_AF1_TIM21 : no need parse
GPIO_AF1_LCD = 0x1
GPIO_AF2_TIM2 = 0x2
# Skip GPIO_AF2_TIM3 : no need parse
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_LPUART1 = 0x2
# Skip GPIO_AF2_MCO : no need parse
GPIO_AF2_RTC = 0x2
GPIO_AF2_SPI2 = 0x2
# Skip GPIO_AF2_USART5 : no need parse
# Skip GPIO_AF2_SPI1 : no need parse
GPIO_AF2_USB = 0x2
GPIO_AF3_EVENTOUT = 0x3
GPIO_AF3_I2C1 = 0x3
GPIO_AF3_TSC = 0x3
GPIO_AF4_USART2 = 0x4
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_USART1 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF4_TIM22 = 0x4
# Skip GPIO_AF4_TIM3 : no need parse
GPIO_AF4_I2C1 = 0x4
GPIO_AF5_TIM2 = 0x5
GPIO_AF5_TIM21 = 0x5
GPIO_AF5_TIM22 = 0x5
# Skip GPIO_AF5_USART1 : no need parse
GPIO_AF5_SPI2 = 0x5
GPIO_AF5_I2C2 = 0x5
# Skip GPIO_AF6_USART4 : no need parse
# Skip GPIO_AF6_LPUART1 : no need parse
GPIO_AF6_EVENTOUT = 0x6
# Skip GPIO_AF6_I2C1 : no need parse
GPIO_AF6_I2C2 = 0x6
# Skip GPIO_AF6_USART5 : no need parse
GPIO_AF6_TIM21 = 0x6
GPIO_AF7_COMP1 = 0x7
GPIO_AF7_COMP2 = 0x7
# Skip GPIO_AF7_I2C3 : no need parse
# Skip GPIO_AF7_LPUART1 : no need parse
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x07)
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF0_USART1 = 0x0
GPIO_AF0_SPI2 = 0x0
GPIO_AF0_LPTIM1 = 0x0
GPIO_AF0_TIM22 = 0x0
GPIO_AF0_LPUART1 = 0x0
GPIO_AF0_USART2 = 0x0
GPIO_AF0_TIM2 = 0x0
GPIO_AF0_USB = 0x0
GPIO_AF1_I2C1 = 0x1
GPIO_AF1_SPI2 = 0x1
# Skip GPIO_AF1_TIM21 : no need parse
GPIO_AF2_TIM2 = 0x2
# Skip GPIO_AF2_TIM3 : no need parse
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_LPUART1 = 0x2
# Skip GPIO_AF2_MCO : no need parse
GPIO_AF2_RTC = 0x2
GPIO_AF2_SPI2 = 0x2
# Skip GPIO_AF2_USART5 : no need parse
# Skip GPIO_AF2_SPI1 : no need parse
GPIO_AF2_USB = 0x2
GPIO_AF3_EVENTOUT = 0x3
GPIO_AF3_I2C1 = 0x3
GPIO_AF3_TSC = 0x3
GPIO_AF4_USART2 = 0x4
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_USART1 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF4_TIM22 = 0x4
# Skip GPIO_AF4_TIM3 : no need parse
GPIO_AF4_I2C1 = 0x4
GPIO_AF5_TIM2 = 0x5
GPIO_AF5_TIM21 = 0x5
GPIO_AF5_TIM22 = 0x5
# Skip GPIO_AF5_USART1 : no need parse
GPIO_AF5_SPI2 = 0x5
GPIO_AF5_I2C2 = 0x5
# Skip GPIO_AF6_USART4 : no need parse
# Skip GPIO_AF6_LPUART1 : no need parse
GPIO_AF6_EVENTOUT = 0x6
# Skip GPIO_AF6_I2C1 : no need parse
GPIO_AF6_I2C2 = 0x6
# Skip GPIO_AF6_USART5 : no need parse
GPIO_AF6_TIM21 = 0x6
GPIO_AF7_COMP1 = 0x7
GPIO_AF7_COMP2 = 0x7
# Skip GPIO_AF7_I2C3 : no need parse
# Skip GPIO_AF7_LPUART1 : no need parse
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x07)
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF0_USART1 = 0x0
GPIO_AF0_SPI2 = 0x0
GPIO_AF0_LPTIM1 = 0x0
GPIO_AF0_TIM22 = 0x0
GPIO_AF0_LPUART1 = 0x0
GPIO_AF0_USART2 = 0x0
GPIO_AF0_TIM2 = 0x0
GPIO_AF1_I2C1 = 0x1
GPIO_AF1_SPI2 = 0x1
# Skip GPIO_AF1_TIM21 : no need parse
GPIO_AF2_TIM2 = 0x2
# Skip GPIO_AF2_TIM3 : no need parse
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_LPUART1 = 0x2
# Skip GPIO_AF2_MCO : no need parse
GPIO_AF2_RTC = 0x2
GPIO_AF2_SPI2 = 0x2
# Skip GPIO_AF2_USART5 : no need parse
# Skip GPIO_AF2_SPI1 : no need parse
GPIO_AF3_EVENTOUT = 0x3
GPIO_AF3_I2C1 = 0x3
GPIO_AF4_USART2 = 0x4
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_USART1 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF4_TIM22 = 0x4
# Skip GPIO_AF4_TIM3 : no need parse
GPIO_AF4_I2C1 = 0x4
GPIO_AF5_TIM2 = 0x5
GPIO_AF5_TIM21 = 0x5
GPIO_AF5_TIM22 = 0x5
# Skip GPIO_AF5_USART1 : no need parse
GPIO_AF5_SPI2 = 0x5
GPIO_AF5_I2C2 = 0x5
# Skip GPIO_AF6_USART4 : no need parse
# Skip GPIO_AF6_LPUART1 : no need parse
GPIO_AF6_EVENTOUT = 0x6
# Skip GPIO_AF6_I2C1 : no need parse
GPIO_AF6_I2C2 = 0x6
# Skip GPIO_AF6_USART5 : no need parse
GPIO_AF6_TIM21 = 0x6
GPIO_AF7_COMP1 = 0x7
GPIO_AF7_COMP2 = 0x7
# Skip GPIO_AF7_I2C3 : no need parse
# Skip GPIO_AF7_LPUART1 : no need parse
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x07)
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_SPI2 = 0x0
GPIO_AF0_USART1 = 0x0
GPIO_AF0_USART2 = 0x0
GPIO_AF0_LPUART1 = 0x0
GPIO_AF0_USB = 0x0
GPIO_AF0_LPTIM1 = 0x0
GPIO_AF0_TSC = 0x0
GPIO_AF0_TIM2 = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_TIM22 = 0x0
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF1_SPI1 = 0x1
GPIO_AF1_SPI2 = 0x1
GPIO_AF1_I2C1 = 0x1
GPIO_AF1_LCD = 0x1
GPIO_AF2_SPI2 = 0x2
GPIO_AF2_LPUART1 = 0x2
GPIO_AF2_USB = 0x2
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_TIM2 = 0x2
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF2_RTC = 0x2
GPIO_AF3_I2C1 = 0x3
GPIO_AF3_TSC = 0x3
GPIO_AF3_EVENTOUT = 0x3
GPIO_AF4_I2C1 = 0x4
GPIO_AF4_USART1 = 0x4
GPIO_AF4_USART2 = 0x4
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_TIM22 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF5_SPI2 = 0x5
GPIO_AF5_I2C2 = 0x5
GPIO_AF5_TIM2 = 0x5
GPIO_AF5_TIM21 = 0x5
GPIO_AF5_TIM22 = 0x5
GPIO_AF6_I2C2 = 0x6
GPIO_AF6_TIM21 = 0x6
GPIO_AF6_EVENTOUT = 0x6
GPIO_AF7_COMP1 = 0x7
GPIO_AF7_COMP2 = 0x7
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x07)
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_SPI2 = 0x0
GPIO_AF0_USART1 = 0x0
GPIO_AF0_USART2 = 0x0
GPIO_AF0_LPUART1 = 0x0
GPIO_AF0_USB = 0x0
GPIO_AF0_LPTIM1 = 0x0
GPIO_AF0_TSC = 0x0
GPIO_AF0_TIM2 = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_TIM22 = 0x0
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF1_SPI1 = 0x1
GPIO_AF1_SPI2 = 0x1
GPIO_AF1_I2C1 = 0x1
GPIO_AF2_SPI2 = 0x2
GPIO_AF2_LPUART1 = 0x2
GPIO_AF2_USB = 0x2
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_TIM2 = 0x2
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF2_RTC = 0x2
GPIO_AF3_I2C1 = 0x3
GPIO_AF3_TSC = 0x3
GPIO_AF3_EVENTOUT = 0x3
GPIO_AF4_I2C1 = 0x4
GPIO_AF4_USART1 = 0x4
GPIO_AF4_USART2 = 0x4
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_TIM22 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF5_SPI2 = 0x5
GPIO_AF5_I2C2 = 0x5
GPIO_AF5_TIM2 = 0x5
GPIO_AF5_TIM21 = 0x5
GPIO_AF5_TIM22 = 0x5
GPIO_AF6_I2C2 = 0x6
GPIO_AF6_TIM21 = 0x6
GPIO_AF6_EVENTOUT = 0x6
GPIO_AF7_COMP1 = 0x7
GPIO_AF7_COMP2 = 0x7
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x07)
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_SPI2 = 0x0
GPIO_AF0_USART1 = 0x0
GPIO_AF0_USART2 = 0x0
GPIO_AF0_LPUART1 = 0x0
GPIO_AF0_LPTIM1 = 0x0
GPIO_AF0_TIM2 = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_TIM22 = 0x0
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF1_SPI1 = 0x1
GPIO_AF1_SPI2 = 0x1
GPIO_AF1_I2C1 = 0x1
GPIO_AF2_SPI2 = 0x2
GPIO_AF2_LPUART1 = 0x2
GPIO_AF2_USB = 0x2
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_TIM2 = 0x2
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF2_RTC = 0x2
GPIO_AF3_I2C1 = 0x3
GPIO_AF3_EVENTOUT = 0x3
GPIO_AF4_I2C1 = 0x4
GPIO_AF4_USART1 = 0x4
GPIO_AF4_USART2 = 0x4
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_TIM22 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF5_SPI2 = 0x5
GPIO_AF5_I2C2 = 0x5
GPIO_AF5_TIM2 = 0x5
GPIO_AF5_TIM21 = 0x5
GPIO_AF5_TIM22 = 0x5
GPIO_AF6_I2C2 = 0x6
GPIO_AF6_TIM21 = 0x6
GPIO_AF6_EVENTOUT = 0x6
GPIO_AF7_COMP1 = 0x7
GPIO_AF7_COMP2 = 0x7
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x07)
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_USART2 = 0x0
GPIO_AF0_LPTIM1 = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF1_SPI1 = 0x1
GPIO_AF1_I2C1 = 0x1
# Skip GPIO_AF1_LPTIM1 : no need parse
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_TIM2 = 0x2
# Skip GPIO_AF2_MCO : no need parse
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF2_RTC = 0x2
GPIO_AF3_I2C1 = 0x3
GPIO_AF3_EVENTOUT = 0x3
GPIO_AF4_I2C1 = 0x4
GPIO_AF4_USART2 = 0x4
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_TIM22 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF5_TIM2 = 0x5
GPIO_AF5_TIM21 = 0x5
GPIO_AF5_TIM22 = 0x5
# Skip GPIO_AF6_LPUART1 : no need parse
GPIO_AF6_EVENTOUT = 0x6
GPIO_AF7_COMP1 = 0x7
GPIO_AF7_COMP2 = 0x7
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x07)
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_USART2 = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF1_SPI1 = 0x1
GPIO_AF1_I2C1 = 0x1
# Skip GPIO_AF1_LPTIM1 : no need parse
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_TIM2 = 0x2
GPIO_AF2_RTC = 0x2
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF3_I2C1 = 0x3
GPIO_AF3_EVENTOUT = 0x3
GPIO_AF4_I2C1 = 0x4
GPIO_AF4_USART2 = 0x4
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF5_TIM2 = 0x5
GPIO_AF5_TIM21 = 0x5
# Skip GPIO_AF5_SPI1 : no need parse
# Skip GPIO_AF6_LPUART1 : no need parse
GPIO_AF6_EVENTOUT = 0x6
GPIO_AF7_COMP1 = 0x7
GPIO_AF7_COMP2 = 0x7
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x07)
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF0_LPTIM1 = 0x0
GPIO_AF0_TIM22 = 0x0
GPIO_AF0_LPUART1 = 0x0
GPIO_AF1_I2C1 = 0x1
GPIO_AF2_TIM2 = 0x2
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_LPUART1 = 0x2
# Skip GPIO_AF2_MCO : no need parse
GPIO_AF2_RTC = 0x2
GPIO_AF3_EVENTOUT = 0x3
GPIO_AF3_I2C1 = 0x3
GPIO_AF4_USART2 = 0x4
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF4_TIM22 = 0x4
GPIO_AF4_I2C1 = 0x4
GPIO_AF5_TIM2 = 0x5
GPIO_AF5_TIM21 = 0x5
GPIO_AF5_TIM22 = 0x5
# Skip GPIO_AF6_LPUART1 : no need parse
GPIO_AF6_EVENTOUT = 0x6
# Skip GPIO_AF6_I2C1 : no need parse
GPIO_AF6_TIM21 = 0x6
# Skip GPIO_AF7_LPUART1 : no need parse
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x07)
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF0_LPTIM1 = 0x0
GPIO_AF0_LPUART1 = 0x0
GPIO_AF1_I2C1 = 0x1
GPIO_AF2_TIM2 = 0x2
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_LPUART1 = 0x2
GPIO_AF2_RTC = 0x2
GPIO_AF3_I2C1 = 0x3
GPIO_AF3_EVENTOUT = 0x3
GPIO_AF4_USART2 = 0x4
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_I2C1 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF5_TIM2 = 0x5
GPIO_AF6_TIM21 = 0x6
GPIO_AF6_EVENTOUT = 0x6
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x06)
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF0_USART2 = 0x0
GPIO_AF0_LPTIM1 = 0x0
GPIO_AF1_I2C1 = 0x1
# Skip GPIO_AF1_LPTIM1 : no need parse
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_TIM2 = 0x2
# Skip GPIO_AF2_MCO : no need parse
# Skip GPIO_AF2_I2C1 : no need parse
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF2_RTC = 0x2
GPIO_AF3_I2C1 = 0x3
GPIO_AF3_EVENTOUT = 0x3
GPIO_AF4_USART2 = 0x4
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_I2C1 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF5_TIM2 = 0x5
GPIO_AF5_TIM21 = 0x5
# Skip GPIO_AF6_LPUART1 : no need parse
GPIO_AF6_EVENTOUT = 0x6
GPIO_AF7_COMP1 = 0x7
GPIO_AF7_COMP2 = 0x7
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x06)
GPIO_AF0_USART2 = 0x0
GPIO_AF0_EVENTOUT = 0x0
GPIO_AF0_TIM21 = 0x0
GPIO_AF0_SPI1 = 0x0
GPIO_AF0_MCO = 0x0
GPIO_AF0_SWDIO = 0x0
GPIO_AF0_SWCLK = 0x0
GPIO_AF1_SPI1 = 0x1
GPIO_AF1_I2C1 = 0x1
# Skip GPIO_AF1_LPTIM1 : no need parse
GPIO_AF2_LPTIM1 = 0x2
GPIO_AF2_TIM2 = 0x2
GPIO_AF2_RTC = 0x2
GPIO_AF2_EVENTOUT = 0x2
GPIO_AF3_I2C1 = 0x3
GPIO_AF3_EVENTOUT = 0x3
# Skip GPIO_AF3_LPUART1 : no need parse
# Skip GPIO_AF3_USART2 : no need parse
GPIO_AF4_USART2 = 0x4
# Skip GPIO_AF4_TIM21 : no need parse
GPIO_AF4_LPUART1 = 0x4
GPIO_AF4_EVENTOUT = 0x4
GPIO_AF5_TIM2 = 0x5
GPIO_AF5_TIM21 = 0x5
# Skip GPIO_AF5_SPI1 : no need parse
# Skip GPIO_AF5_EVENTOUT : no need parse
# Skip GPIO_AF6_LPUART1 : no need parse
# fun define IS_GPIO_AF(AF)         ((AF) <= (uint8_t)0x06)
GPIOA_PIN_AVAILABLE = 0xFFFF
GPIOB_PIN_AVAILABLE = 0xFFFF
GPIOC_PIN_AVAILABLE = 0xFFFF
GPIOD_PIN_AVAILABLE = 0x4
# Skip GPIOE_PIN_AVAILABLE : no need parse
GPIOH_PIN_AVAILABLE = 0x3
# fun define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :\
#                                      ((__GPIOx__) == (GPIOB))? 1U :\
#                                      ((__GPIOx__) == (GPIOC))? 2U :\
#                                      ((__GPIOx__) == (GPIOD))? 3U :\
#                                      ((__GPIOx__) == (GPIOE))? 4U :\
#                                      ((__GPIOx__) == (GPIOH))? 5U : 6U)
# fun define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)  \
#           ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \
#            (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \
#            (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) || \
#            (((__INSTANCE__) == GPIOD) && (((__PIN__) & (GPIOD_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOD_PIN_AVAILABLE)) == (GPIOD_PIN_AVAILABLE))) || \
#            (((__INSTANCE__) == GPIOE) && (((__PIN__) & (GPIOE_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOE_PIN_AVAILABLE)) == (GPIOE_PIN_AVAILABLE))) || \
#            (((__INSTANCE__) == GPIOH) && (((__PIN__) & (GPIOH_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))
GPIOA_PIN_AVAILABLE = 0xFFFF
GPIOB_PIN_AVAILABLE = 0xFFFF
GPIOC_PIN_AVAILABLE = 0xFFFF
GPIOH_PIN_AVAILABLE = 0x3
# fun define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :\
#                                      ((__GPIOx__) == (GPIOB))? 1U :\
#                                      ((__GPIOx__) == (GPIOC))? 2U :\
#                                      ((__GPIOx__) == (GPIOH))? 5U : 6U)
# fun define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)  \
#           ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \
#            (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \
#            (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) || \
#            (((__INSTANCE__) == GPIOH) && (((__PIN__) & (GPIOH_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))
GPIOA_PIN_AVAILABLE = 0xFFFF
GPIOB_PIN_AVAILABLE = 0xFFFF
GPIOC_PIN_AVAILABLE = 0xFFFF
# fun define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :\
#                                      ((__GPIOx__) == (GPIOB))? 1U :\
#                                      ((__GPIOx__) == (GPIOC))? 2U : 6U)
# fun define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)  \
#           ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \
#            (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \
#            (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))))
GPIOA_PIN_AVAILABLE = 0xFFFF
GPIOB_PIN_AVAILABLE = 0xFFFF
GPIOC_PIN_AVAILABLE = 0xFFFF
GPIOD_PIN_AVAILABLE = 0x4
GPIOH_PIN_AVAILABLE = 0x3
# fun define GPIO_GET_INDEX(__GPIOx__)    (((__GPIOx__) == (GPIOA))? 0U :\
#                                      ((__GPIOx__) == (GPIOB))? 1U :\
#                                      ((__GPIOx__) == (GPIOC))? 2U :\
#                                      ((__GPIOx__) == (GPIOD))? 3U :\
#                                      ((__GPIOx__) == (GPIOH))? 5U : 6U)
# fun define IS_GPIO_PIN_AVAILABLE(__INSTANCE__,__PIN__)  \
#                ((((__INSTANCE__) == GPIOA) && (((__PIN__) & (GPIOA_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOA_PIN_AVAILABLE)) == (GPIOA_PIN_AVAILABLE))) || \
#                 (((__INSTANCE__) == GPIOB) && (((__PIN__) & (GPIOB_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOB_PIN_AVAILABLE)) == (GPIOB_PIN_AVAILABLE))) || \
#                 (((__INSTANCE__) == GPIOC) && (((__PIN__) & (GPIOC_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOC_PIN_AVAILABLE)) == (GPIOC_PIN_AVAILABLE))) || \
#                 (((__INSTANCE__) == GPIOD) && (((__PIN__) & (GPIOD_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOD_PIN_AVAILABLE)) == (GPIOD_PIN_AVAILABLE))) || \
#                 (((__INSTANCE__) == GPIOH) && (((__PIN__) & (GPIOH_PIN_AVAILABLE)) != 0U) && (((__PIN__) | (GPIOH_PIN_AVAILABLE)) == (GPIOH_PIN_AVAILABLE))))
# ----------------------------------------

# file stm32l0xx_hal_gpio.h : 

# Enum GPIO_PinState
GPIO_PIN_RESET = 0x0
GPIO_PIN_SET = 0x1
# empty define __STM32L0xx_HAL_GPIO_H
# fun define IS_GPIO_PIN_ACTION(__ACTION__) (((__ACTION__) == GPIO_PIN_RESET) || ((__ACTION__) == GPIO_PIN_SET))
GPIO_PIN_0 = 0x1
GPIO_PIN_1 = 0x2
GPIO_PIN_2 = 0x4
GPIO_PIN_3 = 0x8
GPIO_PIN_4 = 0x10
GPIO_PIN_5 = 0x20
GPIO_PIN_6 = 0x40
GPIO_PIN_7 = 0x80
GPIO_PIN_8 = 0x100
GPIO_PIN_9 = 0x200
GPIO_PIN_10 = 0x400
GPIO_PIN_11 = 0x800
GPIO_PIN_12 = 0x1000
GPIO_PIN_13 = 0x2000
GPIO_PIN_14 = 0x4000
GPIO_PIN_15 = 0x8000
GPIO_PIN_All = 0xFFFF
GPIO_PIN_MASK = 0xFFFF
# fun define IS_GPIO_PIN(__PIN__)        ((((__PIN__) & GPIO_PIN_MASK) != (uint32_t)0x00) &&\
#                                     (((__PIN__) & ~GPIO_PIN_MASK) == (uint32_t)0x00))
GPIO_MODE_INPUT = 0x0
GPIO_MODE_OUTPUT_PP = 0x1
GPIO_MODE_OUTPUT_OD = 0x11
GPIO_MODE_AF_PP = 0x2
GPIO_MODE_AF_OD = 0x12
GPIO_MODE_ANALOG = 0x3
GPIO_MODE_IT_RISING = 0x10110000
GPIO_MODE_IT_FALLING = 0x10210000
GPIO_MODE_IT_RISING_FALLING = 0x10310000
GPIO_MODE_EVT_RISING = 0x10120000
GPIO_MODE_EVT_FALLING = 0x10220000
GPIO_MODE_EVT_RISING_FALLING = 0x10320000
# fun define IS_GPIO_MODE(__MODE__) (((__MODE__) == GPIO_MODE_INPUT)              ||\
#                                ((__MODE__) == GPIO_MODE_OUTPUT_PP)          ||\
#                                ((__MODE__) == GPIO_MODE_OUTPUT_OD)          ||\
#                                ((__MODE__) == GPIO_MODE_AF_PP)              ||\
#                                ((__MODE__) == GPIO_MODE_AF_OD)              ||\
#                                ((__MODE__) == GPIO_MODE_IT_RISING)          ||\
#                                ((__MODE__) == GPIO_MODE_IT_FALLING)         ||\
#                                ((__MODE__) == GPIO_MODE_IT_RISING_FALLING)  ||\
#                                ((__MODE__) == GPIO_MODE_EVT_RISING)         ||\
#                                ((__MODE__) == GPIO_MODE_EVT_FALLING)        ||\
#                                ((__MODE__) == GPIO_MODE_EVT_RISING_FALLING) ||\
#                                ((__MODE__) == GPIO_MODE_ANALOG))
GPIO_SPEED_FREQ_LOW = 0x0
GPIO_SPEED_FREQ_MEDIUM = 0x1
GPIO_SPEED_FREQ_HIGH = 0x2
GPIO_SPEED_FREQ_VERY_HIGH = 0x3
# fun define IS_GPIO_SPEED(__SPEED__) (((__SPEED__) == GPIO_SPEED_FREQ_LOW     )  || ((__SPEED__) == GPIO_SPEED_FREQ_MEDIUM     ) || \
#                                  ((__SPEED__) == GPIO_SPEED_FREQ_HIGH  ) || ((__SPEED__) == GPIO_SPEED_FREQ_VERY_HIGH))
GPIO_NOPULL = 0x0
GPIO_PULLUP = 0x1
GPIO_PULLDOWN = 0x2
# fun define IS_GPIO_PULL(__PULL__) (((__PULL__) == GPIO_NOPULL) || ((__PULL__) == GPIO_PULLUP) || \
#                                ((__PULL__) == GPIO_PULLDOWN))
# fun define __HAL_GPIO_EXTI_GET_FLAG(__EXTI_LINE__) (EXTI->PR & (__EXTI_LINE__))
# fun define __HAL_GPIO_EXTI_CLEAR_FLAG(__EXTI_LINE__) (EXTI->PR = (__EXTI_LINE__))
# fun define __HAL_GPIO_EXTI_GET_IT(__EXTI_LINE__) (EXTI->PR & (__EXTI_LINE__))
# fun define __HAL_GPIO_EXTI_CLEAR_IT(__EXTI_LINE__) (EXTI->PR = (__EXTI_LINE__))
# fun define __HAL_GPIO_EXTI_GENERATE_SWIT(__EXTI_LINE__) (EXTI->SWIER |= (__EXTI_LINE__))
# struct GPIO_InitTypeDef

class GPIO_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Pin',	ctypes.c_uint32),
		('Mode',	ctypes.c_uint32),
		('Pull',	ctypes.c_uint32),
		('Speed',	ctypes.c_uint32),
		('Alternate',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal.h : 

# empty define __STM32L0xx_HAL_H
SYSCFG_BOOT_MAINFLASH = 0x0
SYSCFG_BOOT_SYSTEMFLASH = 0x100
SYSCFG_BOOT_SRAM = 0x300
DBGMCU_SLEEP = 0x1
DBGMCU_STOP = 0x2
DBGMCU_STANDBY = 0x4
# fun define IS_DBGMCU_PERIPH(__PERIPH__) ((((__PERIPH__) & (~(DBGMCU_CR_DBG))) == 0x00U) && ((__PERIPH__) != 0x00U))
SYSCFG_LCD_EXT_CAPA = 0xE
SYSCFG_VLCD_PB2_EXT_CAPA_ON = 0x2
SYSCFG_VLCD_PB12_EXT_CAPA_ON = 0x4
SYSCFG_VLCD_PB0_EXT_CAPA_ON = 0x8
# Skip SYSCFG_VLCD_PE11_EXT_CAPA_ON : no need parse
# Skip SYSCFG_VLCD_PE12_EXT_CAPA_ON : no need parse
SYSCFG_VREFINT_OUT_NONE = 0x0
SYSCFG_VREFINT_OUT_PB0 = 0x10
SYSCFG_VREFINT_OUT_PB1 = 0x20
SYSCFG_VREFINT_OUT_PB0_PB1 = 0x30
# fun define IS_SYSCFG_VREFINT_OUT_SELECT(OUTPUT)   (((OUTPUT) == SYSCFG_VREFINT_OUT_NONE)  || \
#                                                ((OUTPUT) == SYSCFG_VREFINT_OUT_PB0)  || \
#                                                ((OUTPUT) == SYSCFG_VREFINT_OUT_PB1)  || \
#                                                ((OUTPUT) == SYSCFG_VREFINT_OUT_PB0_PB1))
SYSCFG_FLAG_VREFINT_READY = 0x40000000
# fun define IS_SYSCFG_FLAG(FLAG)           ((FLAG) == SYSCFG_FLAG_VREFINT_READY))
SYSCFG_FASTMODEPLUS_PB6 = 0x100
SYSCFG_FASTMODEPLUS_PB7 = 0x200
SYSCFG_FASTMODEPLUS_PB8 = 0x400
SYSCFG_FASTMODEPLUS_PB9 = 0x800
# fun define IS_SYSCFG_FASTMODEPLUS(PIN) ((((PIN) & (SYSCFG_FASTMODEPLUS_PB6)) == SYSCFG_FASTMODEPLUS_PB6)  || \
#                                     (((PIN) & (SYSCFG_FASTMODEPLUS_PB7)) == SYSCFG_FASTMODEPLUS_PB7)  || \
#                                     (((PIN) & (SYSCFG_FASTMODEPLUS_PB8)) == SYSCFG_FASTMODEPLUS_PB8)  || \
#                                     (((PIN) & (SYSCFG_FASTMODEPLUS_PB9)) == SYSCFG_FASTMODEPLUS_PB9)  )
# fun define __HAL_DBGMCU_FREEZE_TIM2()     SET_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM2_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_TIM2()   CLEAR_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM2_STOP)
# fun define __HAL_DBGMCU_FREEZE_TIM3()     SET_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM3_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_TIM3()   CLEAR_BIT(DBGMCU->APB1FZ,DBGMCU_APB1_FZ_DBG_TIM3_STOP)
# fun define __HAL_DBGMCU_FREEZE_TIM6()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM6_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_TIM6()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM6_STOP)
# fun define __HAL_DBGMCU_FREEZE_TIM7()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM7_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_TIM7()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_TIM7_STOP)
# fun define __HAL_DBGMCU_FREEZE_RTC()      SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_RTC_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_RTC()    CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_RTC_STOP)
# fun define __HAL_DBGMCU_FREEZE_WWDG()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_WWDG_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_WWDG()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_WWDG_STOP)
# fun define __HAL_DBGMCU_FREEZE_IWDG()     SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_IWDG_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_IWDG()   CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_IWDG_STOP)
# fun define __HAL_DBGMCU_FREEZE_I2C1_TIMEOUT()   SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C1_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_I2C1_TIMEOUT_DBGMCU() CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C1_STOP)
# fun define __HAL_DBGMCU_FREEZE_I2C2_TIMEOUT_DBGMCU()   SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C2_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_I2C2_TIMEOUT_DBGMCU() CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C2_STOP)
# fun define __HAL_DBGMCU_FREEZE_I2C3_TIMEOUT()   SET_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C3_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_I2C3_TIMEOUT() CLEAR_BIT(DBGMCU->APB1FZ, DBGMCU_APB1_FZ_DBG_I2C3_STOP)
# fun define __HAL_DBGMCU_FREEZE_LPTIMER()        SET_BIT(DBGMCU->APB1FZ ,DBGMCU_APB1_FZ_DBG_LPTIMER_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_LPTIMER()      CLEAR_BIT(DBGMCU->APB1FZ ,DBGMCU_APB1_FZ_DBG_LPTIMER_STOP)
# fun define __HAL_DBGMCU_FREEZE_TIM22()          SET_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM22_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_TIM22()        CLEAR_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM22_STOP)
# fun define __HAL_DBGMCU_FREEZE_TIM21()          SET_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM21_STOP)
# fun define __HAL_DBGMCU_UNFREEZE_TIM21()        CLEAR_BIT(DBGMCU->APB2FZ, DBGMCU_APB2_FZ_DBG_TIM21_STOP)
# fun define __HAL_SYSCFG_REMAPMEMORY_FLASH()     CLEAR_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_MEM_MODE)
# fun define __HAL_SYSCFG_REMAPMEMORY_SYSTEMFLASH()      MODIFY_REG(SYSCFG->CFGR1, SYSCFG_CFGR1_MEM_MODE, SYSCFG_CFGR1_MEM_MODE_0)
# fun define __HAL_SYSCFG_REMAPMEMORY_SRAM()             MODIFY_REG(SYSCFG->CFGR1, SYSCFG_CFGR1_MEM_MODE, SYSCFG_CFGR1_MEM_MODE_0 | SYSCFG_CFGR1_MEM_MODE_1)
# fun define __HAL_SYSCFG_DBG_LP_CONFIG(__DBGLPMODE__)    do {assert_param(IS_DBGMCU_PERIPH(__DBGLPMODE__)); \
#                                                       MODIFY_REG(DBGMCU->CR, DBGMCU_CR_DBG, (__DBGLPMODE__)); \
#                                                     } while (0)
# fun define __HAL_SYSCFG_VLCD_CAPA_CONFIG(__SYSCFG_VLCD_CAPA__) \
#                  MODIFY_REG(SYSCFG->CFGR2, SYSCFG_LCD_EXT_CAPA, (uint32_t)(__SYSCFG_VLCD_CAPA__))
# fun define __HAL_SYSCFG_GET_VLCD_CAPA_CONFIG()          READ_BIT(SYSCFG->CFGR2, SYSCFG_LCD_EXT_CAPA)
# fun define __HAL_SYSCFG_GET_BOOT_MODE()          READ_BIT(SYSCFG->CFGR1, SYSCFG_CFGR1_BOOT_MODE)
# fun define __HAL_SYSCFG_GET_FLAG(__FLAG__) (((SYSCFG->CFGR3) & (__FLAG__)) == (__FLAG__))
# fun define __HAL_SYSCFG_FASTMODEPLUS_ENABLE(__FASTMODEPLUS__)  do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__))); \
#                                                                SET_BIT(SYSCFG->CFGR2, (__FASTMODEPLUS__));                 \
#                                                               }while(0)
# fun define __HAL_SYSCFG_FASTMODEPLUS_DISABLE(__FASTMODEPLUS__) do {assert_param(IS_SYSCFG_FASTMODEPLUS((__FASTMODEPLUS__))); \
#                                                                CLEAR_BIT(SYSCFG->CFGR2, (__FASTMODEPLUS__));               \
#                                                               }while(0)
# Skip uwTick : no need parse
# ----------------------------------------

# file stm32l0xx_hal_i2c_ex.h : 

# empty define STM32L0xx_HAL_I2C_EX_H
I2C_ANALOGFILTER_ENABLE = 0x0
I2C_ANALOGFILTER_DISABLE = 0x1000
I2C_FMP_NOT_SUPPORTED = 0xAAAA0000
I2C_FASTMODEPLUS_PB6 = 0x100
I2C_FASTMODEPLUS_PB7 = 0x200
I2C_FASTMODEPLUS_PB6 = 0x100
I2C_FASTMODEPLUS_PB7 = 0x200
I2C_FASTMODEPLUS_PB8 = 0x400
I2C_FASTMODEPLUS_PB9 = 0x800
I2C_FASTMODEPLUS_PB8 = 0x400
I2C_FASTMODEPLUS_PB9 = 0x800
I2C_FASTMODEPLUS_I2C1 = 0x1000
I2C_FASTMODEPLUS_I2C1 = 0x1000
I2C_FASTMODEPLUS_I2C2 = 0x2000
I2C_FASTMODEPLUS_I2C2 = 0x2000
I2C_FASTMODEPLUS_I2C3 = 0xAAAA0400
I2C_FASTMODEPLUS_I2C3 = 0xAAAA0400
# fun define IS_I2C_ANALOG_FILTER(FILTER)    (((FILTER) == I2C_ANALOGFILTER_ENABLE) || \
#                                          ((FILTER) == I2C_ANALOGFILTER_DISABLE))
# fun define IS_I2C_DIGITAL_FILTER(FILTER)   ((FILTER) <= 0x0000000FU)
# fun define IS_I2C_FASTMODEPLUS(__CONFIG__) ((((__CONFIG__) & I2C_FMP_NOT_SUPPORTED) != I2C_FMP_NOT_SUPPORTED) && \
#                                         ((((__CONFIG__) & (I2C_FASTMODEPLUS_PB6))  == I2C_FASTMODEPLUS_PB6)     || \
#                                          (((__CONFIG__) & (I2C_FASTMODEPLUS_PB7))  == I2C_FASTMODEPLUS_PB7)     || \
#                                          (((__CONFIG__) & (I2C_FASTMODEPLUS_PB8))  == I2C_FASTMODEPLUS_PB8)     || \
#                                          (((__CONFIG__) & (I2C_FASTMODEPLUS_PB9))  == I2C_FASTMODEPLUS_PB9)     || \
#                                          (((__CONFIG__) & (I2C_FASTMODEPLUS_I2C1)) == I2C_FASTMODEPLUS_I2C1)    || \
#                                          (((__CONFIG__) & (I2C_FASTMODEPLUS_I2C2)) == I2C_FASTMODEPLUS_I2C2)    || \
#                                          (((__CONFIG__) & (I2C_FASTMODEPLUS_I2C3)) == I2C_FASTMODEPLUS_I2C3)))
# ----------------------------------------

# file stm32l0xx_hal_i2c.h : 

# Enum HAL_I2C_StateTypeDef
HAL_I2C_STATE_RESET = 0x0
HAL_I2C_STATE_READY = 0x20
HAL_I2C_STATE_BUSY = 0x24
HAL_I2C_STATE_BUSY_TX = 0x21
HAL_I2C_STATE_BUSY_RX = 0x22
HAL_I2C_STATE_LISTEN = 0x28
HAL_I2C_STATE_BUSY_TX_LISTEN = 0x29
HAL_I2C_STATE_BUSY_RX_LISTEN = 0x2A
HAL_I2C_STATE_ABORT = 0x60
HAL_I2C_STATE_TIMEOUT = 0xA0
HAL_I2C_STATE_ERROR = 0xE0
# Enum HAL_I2C_ModeTypeDef
HAL_I2C_MODE_NONE = 0x0
HAL_I2C_MODE_MASTER = 0x10
HAL_I2C_MODE_SLAVE = 0x20
HAL_I2C_MODE_MEM = 0x40
# Enum HAL_I2C_CallbackIDTypeDef
# Skip HAL_I2C_MASTER_TX_COMPLETE_CB_ID : no need parse
# Skip HAL_I2C_MASTER_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_I2C_SLAVE_TX_COMPLETE_CB_ID : no need parse
# Skip HAL_I2C_SLAVE_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_I2C_LISTEN_COMPLETE_CB_ID : no need parse
# Skip HAL_I2C_MEM_TX_COMPLETE_CB_ID : no need parse
# Skip HAL_I2C_MEM_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_I2C_ERROR_CB_ID : no need parse
# Skip HAL_I2C_ABORT_CB_ID : no need parse
# Skip HAL_I2C_MSPINIT_CB_ID : no need parse
# Skip HAL_I2C_MSPDEINIT_CB_ID : no need parse
# empty define STM32L0xx_HAL_I2C_H
HAL_I2C_ERROR_NONE = 0x0
HAL_I2C_ERROR_BERR = 0x1
HAL_I2C_ERROR_ARLO = 0x2
HAL_I2C_ERROR_AF = 0x4
HAL_I2C_ERROR_OVR = 0x8
HAL_I2C_ERROR_DMA = 0x10
HAL_I2C_ERROR_TIMEOUT = 0x20
HAL_I2C_ERROR_SIZE = 0x40
HAL_I2C_ERROR_DMA_PARAM = 0x80
# Skip HAL_I2C_ERROR_INVALID_CALLBACK : no need parse
HAL_I2C_ERROR_INVALID_PARAM = 0x200
I2C_FIRST_FRAME = 0x0
I2C_FIRST_AND_NEXT_FRAME = 0x1000000
I2C_NEXT_FRAME = 0x1000000
I2C_FIRST_AND_LAST_FRAME = 0x2000000
I2C_LAST_FRAME = 0x2000000
I2C_LAST_FRAME_NO_STOP = 0x0
I2C_OTHER_FRAME = 0xAA
I2C_OTHER_AND_LAST_FRAME = 0xAA00
I2C_ADDRESSINGMODE_7BIT = 0x1
I2C_ADDRESSINGMODE_10BIT = 0x2
I2C_DUALADDRESS_DISABLE = 0x0
I2C_DUALADDRESS_ENABLE = 0x8000
I2C_OA2_NOMASK = 0x0
I2C_OA2_MASK01 = 0x1
I2C_OA2_MASK02 = 0x2
I2C_OA2_MASK03 = 0x3
I2C_OA2_MASK04 = 0x4
I2C_OA2_MASK05 = 0x5
I2C_OA2_MASK06 = 0x6
I2C_OA2_MASK07 = 0x7
I2C_GENERALCALL_DISABLE = 0x0
I2C_GENERALCALL_ENABLE = 0x80000
I2C_NOSTRETCH_DISABLE = 0x0
I2C_NOSTRETCH_ENABLE = 0x20000
I2C_MEMADD_SIZE_8BIT = 0x1
I2C_MEMADD_SIZE_16BIT = 0x2
I2C_DIRECTION_TRANSMIT = 0x0
I2C_DIRECTION_RECEIVE = 0x1
I2C_RELOAD_MODE = 0x1000000
I2C_AUTOEND_MODE = 0x2000000
I2C_SOFTEND_MODE = 0x0
I2C_NO_STARTSTOP = 0x0
I2C_GENERATE_STOP = 0x80004000
I2C_GENERATE_START_READ = 0x80002400
I2C_GENERATE_START_WRITE = 0x80002000
I2C_IT_ERRI = 0x80
I2C_IT_TCI = 0x40
I2C_IT_STOPI = 0x20
I2C_IT_NACKI = 0x10
I2C_IT_ADDRI = 0x8
I2C_IT_RXI = 0x4
I2C_IT_TXI = 0x2
I2C_FLAG_TXE = 0x1
I2C_FLAG_TXIS = 0x2
I2C_FLAG_RXNE = 0x4
I2C_FLAG_ADDR = 0x8
I2C_FLAG_AF = 0x10
I2C_FLAG_STOPF = 0x20
I2C_FLAG_TC = 0x40
I2C_FLAG_TCR = 0x80
I2C_FLAG_BERR = 0x100
I2C_FLAG_ARLO = 0x200
I2C_FLAG_OVR = 0x400
I2C_FLAG_PECERR = 0x800
I2C_FLAG_TIMEOUT = 0x1000
I2C_FLAG_ALERT = 0x2000
I2C_FLAG_BUSY = 0x8000
I2C_FLAG_DIR = 0x10000
# fun define __HAL_I2C_RESET_HANDLE_STATE(__HANDLE__)                do{                                                   \
#                                                                    (__HANDLE__)->State = HAL_I2C_STATE_RESET;       \
#                                                                    (__HANDLE__)->MspInitCallback = NULL;            \
#                                                                    (__HANDLE__)->MspDeInitCallback = NULL;          \
#                                                                  } while(0)
# fun define __HAL_I2C_RESET_HANDLE_STATE(__HANDLE__)                ((__HANDLE__)->State = HAL_I2C_STATE_RESET)
# fun define __HAL_I2C_ENABLE_IT(__HANDLE__, __INTERRUPT__)          ((__HANDLE__)->Instance->CR1 |= (__INTERRUPT__))
# fun define __HAL_I2C_DISABLE_IT(__HANDLE__, __INTERRUPT__)         ((__HANDLE__)->Instance->CR1 &= (~(__INTERRUPT__)))
# fun define __HAL_I2C_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)      ((((__HANDLE__)->Instance->CR1 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
I2C_FLAG_MASK = 0x1FFFF
# fun define __HAL_I2C_GET_FLAG(__HANDLE__, __FLAG__) (((((__HANDLE__)->Instance->ISR) & (__FLAG__)) == (__FLAG__)) ? SET : RESET)
# fun define __HAL_I2C_CLEAR_FLAG(__HANDLE__, __FLAG__) (((__FLAG__) == I2C_FLAG_TXE) ? ((__HANDLE__)->Instance->ISR |= (__FLAG__)) \
#                                                                                 : ((__HANDLE__)->Instance->ICR = (__FLAG__)))
# fun define __HAL_I2C_ENABLE(__HANDLE__)                            (SET_BIT((__HANDLE__)->Instance->CR1,  I2C_CR1_PE))
# fun define __HAL_I2C_DISABLE(__HANDLE__)                           (CLEAR_BIT((__HANDLE__)->Instance->CR1, I2C_CR1_PE))
# fun define __HAL_I2C_GENERATE_NACK(__HANDLE__)                     (SET_BIT((__HANDLE__)->Instance->CR2, I2C_CR2_NACK))
# fun define IS_I2C_ADDRESSING_MODE(MODE)    (((MODE) == I2C_ADDRESSINGMODE_7BIT) || \
#                                         ((MODE) == I2C_ADDRESSINGMODE_10BIT))
# fun define IS_I2C_DUAL_ADDRESS(ADDRESS)    (((ADDRESS) == I2C_DUALADDRESS_DISABLE) || \
#                                         ((ADDRESS) == I2C_DUALADDRESS_ENABLE))
# fun define IS_I2C_OWN_ADDRESS2_MASK(MASK)  (((MASK) == I2C_OA2_NOMASK)  || \
#                                         ((MASK) == I2C_OA2_MASK01) || \
#                                         ((MASK) == I2C_OA2_MASK02) || \
#                                         ((MASK) == I2C_OA2_MASK03) || \
#                                         ((MASK) == I2C_OA2_MASK04) || \
#                                         ((MASK) == I2C_OA2_MASK05) || \
#                                         ((MASK) == I2C_OA2_MASK06) || \
#                                         ((MASK) == I2C_OA2_MASK07))
# fun define IS_I2C_GENERAL_CALL(CALL)       (((CALL) == I2C_GENERALCALL_DISABLE) || \
#                                         ((CALL) == I2C_GENERALCALL_ENABLE))
# fun define IS_I2C_NO_STRETCH(STRETCH)      (((STRETCH) == I2C_NOSTRETCH_DISABLE) || \
#                                         ((STRETCH) == I2C_NOSTRETCH_ENABLE))
# fun define IS_I2C_MEMADD_SIZE(SIZE)        (((SIZE) == I2C_MEMADD_SIZE_8BIT) || \
#                                         ((SIZE) == I2C_MEMADD_SIZE_16BIT))
# fun define IS_TRANSFER_MODE(MODE)          (((MODE) == I2C_RELOAD_MODE)   || \
#                                         ((MODE) == I2C_AUTOEND_MODE) || \
#                                         ((MODE) == I2C_SOFTEND_MODE))
# fun define IS_TRANSFER_REQUEST(REQUEST)    (((REQUEST) == I2C_GENERATE_STOP)        || \
#                                         ((REQUEST) == I2C_GENERATE_START_READ)  || \
#                                         ((REQUEST) == I2C_GENERATE_START_WRITE) || \
#                                         ((REQUEST) == I2C_NO_STARTSTOP))
# fun define IS_I2C_TRANSFER_OPTIONS_REQUEST(REQUEST)  (((REQUEST) == I2C_FIRST_FRAME)          || \
#                                                   ((REQUEST) == I2C_FIRST_AND_NEXT_FRAME) || \
#                                                   ((REQUEST) == I2C_NEXT_FRAME)           || \
#                                                   ((REQUEST) == I2C_FIRST_AND_LAST_FRAME) || \
#                                                   ((REQUEST) == I2C_LAST_FRAME)           || \
#                                                   ((REQUEST) == I2C_LAST_FRAME_NO_STOP)   || \
#                                                   IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(REQUEST))
# fun define IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(REQUEST) (((REQUEST) == I2C_OTHER_FRAME)     || \
#                                                        ((REQUEST) == I2C_OTHER_AND_LAST_FRAME))
# fun define I2C_RESET_CR2(__HANDLE__)                 ((__HANDLE__)->Instance->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN)))
# fun define I2C_GET_ADDR_MATCH(__HANDLE__)            ((uint16_t)(((__HANDLE__)->Instance->ISR & I2C_ISR_ADDCODE) >> 16U))
# fun define I2C_GET_DIR(__HANDLE__)                   ((uint8_t)(((__HANDLE__)->Instance->ISR & I2C_ISR_DIR) >> 16U))
# fun define I2C_GET_STOP_MODE(__HANDLE__)             ((__HANDLE__)->Instance->CR2 & I2C_CR2_AUTOEND)
# fun define I2C_GET_OWN_ADDRESS1(__HANDLE__)          ((uint16_t)((__HANDLE__)->Instance->OAR1 & I2C_OAR1_OA1))
# fun define I2C_GET_OWN_ADDRESS2(__HANDLE__)          ((uint16_t)((__HANDLE__)->Instance->OAR2 & I2C_OAR2_OA2))
# fun define IS_I2C_OWN_ADDRESS1(ADDRESS1)             ((ADDRESS1) <= 0x000003FFU)
# fun define IS_I2C_OWN_ADDRESS2(ADDRESS2)             ((ADDRESS2) <= (uint16_t)0x00FFU)
# fun define I2C_MEM_ADD_MSB(__ADDRESS__)              ((uint8_t)((uint16_t)(((uint16_t)((__ADDRESS__) & (uint16_t)(0xFF00U))) >> 8U)))
# fun define I2C_MEM_ADD_LSB(__ADDRESS__)              ((uint8_t)((uint16_t)((__ADDRESS__) & (uint16_t)(0x00FFU))))
# fun define I2C_GENERATE_START(__ADDMODE__,__ADDRESS__) (((__ADDMODE__) == I2C_ADDRESSINGMODE_7BIT) ? (uint32_t)((((uint32_t)(__ADDRESS__) & (I2C_CR2_SADD)) | (I2C_CR2_START) | (I2C_CR2_AUTOEND)) & (~I2C_CR2_RD_WRN)) : \
#                                                          (uint32_t)((((uint32_t)(__ADDRESS__) & (I2C_CR2_SADD)) | (I2C_CR2_ADD10) | (I2C_CR2_START)) & (~I2C_CR2_RD_WRN)))
# fun define I2C_CHECK_FLAG(__ISR__, __FLAG__)         ((((__ISR__) & ((__FLAG__) & I2C_FLAG_MASK)) == ((__FLAG__) & I2C_FLAG_MASK)) ? SET : RESET)
# fun define I2C_CHECK_IT_SOURCE(__CR1__, __IT__)      ((((__CR1__) & (__IT__)) == (__IT__)) ? SET : RESET)
# struct I2C_InitTypeDef

class I2C_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Timing',	ctypes.c_uint32),
		('OwnAddress1',	ctypes.c_uint32),
		('AddressingMode',	ctypes.c_uint32),
		('DualAddressMode',	ctypes.c_uint32),
		('OwnAddress2',	ctypes.c_uint32),
		('OwnAddress2Masks',	ctypes.c_uint32),
		('GeneralCallMode',	ctypes.c_uint32),
		('NoStretchMode',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct I2C_HandleTypeDef
# struct I2C_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_i2s.h : 

# Enum HAL_I2S_StateTypeDef
HAL_I2S_STATE_RESET = 0x0
HAL_I2S_STATE_READY = 0x1
HAL_I2S_STATE_BUSY = 0x2
HAL_I2S_STATE_BUSY_TX = 0x3
HAL_I2S_STATE_BUSY_RX = 0x4
HAL_I2S_STATE_TIMEOUT = 0x6
HAL_I2S_STATE_ERROR = 0x7
# Enum HAL_I2S_CallbackIDTypeDef
# Skip HAL_I2S_TX_COMPLETE_CB_ID : no need parse
# Skip HAL_I2S_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_I2S_TX_HALF_COMPLETE_CB_ID : no need parse
# Skip HAL_I2S_RX_HALF_COMPLETE_CB_ID : no need parse
# Skip HAL_I2S_ERROR_CB_ID : no need parse
# Skip HAL_I2S_MSPINIT_CB_ID : no need parse
# Skip HAL_I2S_MSPDEINIT_CB_ID : no need parse
# empty define STM32L0xx_HAL_I2S_H
HAL_I2S_ERROR_NONE = 0x0
HAL_I2S_ERROR_TIMEOUT = 0x1
HAL_I2S_ERROR_OVR = 0x2
HAL_I2S_ERROR_UDR = 0x4
HAL_I2S_ERROR_DMA = 0x8
HAL_I2S_ERROR_PRESCALER = 0x10
# Skip HAL_I2S_ERROR_INVALID_CALLBACK : no need parse
I2S_MODE_SLAVE_TX = 0x0
I2S_MODE_SLAVE_RX = 0x100
I2S_MODE_MASTER_TX = 0x200
I2S_MODE_MASTER_RX = 0x300
I2S_STANDARD_PHILIPS = 0x0
I2S_STANDARD_MSB = 0x10
I2S_STANDARD_LSB = 0x20
I2S_STANDARD_PCM_SHORT = 0x30
I2S_STANDARD_PCM_LONG = 0xB0
I2S_DATAFORMAT_16B = 0x0
I2S_DATAFORMAT_16B_EXTENDED = 0x1
I2S_DATAFORMAT_24B = 0x3
I2S_DATAFORMAT_32B = 0x5
I2S_MCLKOUTPUT_ENABLE = 0x200
I2S_MCLKOUTPUT_DISABLE = 0x0
I2S_AUDIOFREQ_192K = 0x2EE00
I2S_AUDIOFREQ_96K = 0x17700
I2S_AUDIOFREQ_48K = 0xBB80
I2S_AUDIOFREQ_44K = 0xAC44
I2S_AUDIOFREQ_32K = 0x7D00
I2S_AUDIOFREQ_22K = 0x5622
I2S_AUDIOFREQ_16K = 0x3E80
I2S_AUDIOFREQ_11K = 0x2B11
I2S_AUDIOFREQ_8K = 0x1F40
I2S_AUDIOFREQ_DEFAULT = 0x2
I2S_CPOL_LOW = 0x0
I2S_CPOL_HIGH = 0x8
I2S_IT_TXE = 0x80
I2S_IT_RXNE = 0x40
I2S_IT_ERR = 0x20
I2S_FLAG_TXE = 0x2
I2S_FLAG_RXNE = 0x1
I2S_FLAG_UDR = 0x8
I2S_FLAG_OVR = 0x40
I2S_FLAG_FRE = 0x100
I2S_FLAG_CHSIDE = 0x4
I2S_FLAG_BSY = 0x80
# fun define __HAL_I2S_RESET_HANDLE_STATE(__HANDLE__)                do{                                                  \
#                                                                    (__HANDLE__)->State = HAL_I2S_STATE_RESET;       \
#                                                                    (__HANDLE__)->MspInitCallback = NULL;            \
#                                                                    (__HANDLE__)->MspDeInitCallback = NULL;          \
#                                                                  } while(0)
# fun define __HAL_I2S_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_I2S_STATE_RESET)
# fun define __HAL_I2S_ENABLE(__HANDLE__)    (SET_BIT((__HANDLE__)->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
# fun define __HAL_I2S_DISABLE(__HANDLE__) (CLEAR_BIT((__HANDLE__)->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
# fun define __HAL_I2S_ENABLE_IT(__HANDLE__, __INTERRUPT__)    (SET_BIT((__HANDLE__)->Instance->CR2,(__INTERRUPT__)))
# fun define __HAL_I2S_DISABLE_IT(__HANDLE__, __INTERRUPT__) (CLEAR_BIT((__HANDLE__)->Instance->CR2,(__INTERRUPT__)))
# fun define __HAL_I2S_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->CR2 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
# fun define __HAL_I2S_GET_FLAG(__HANDLE__, __FLAG__) ((((__HANDLE__)->Instance->SR) & (__FLAG__)) == (__FLAG__))
# fun define __HAL_I2S_CLEAR_OVRFLAG(__HANDLE__) do{ \
#                                               __IO uint32_t tmpreg_ovr = 0x00U; \
#                                               tmpreg_ovr = (__HANDLE__)->Instance->DR; \
#                                               tmpreg_ovr = (__HANDLE__)->Instance->SR; \
#                                               UNUSED(tmpreg_ovr); \
#                                              }while(0U)
# fun define __HAL_I2S_CLEAR_UDRFLAG(__HANDLE__) do{\
#                                               __IO uint32_t tmpreg_udr = 0x00U;\
#                                               tmpreg_udr = ((__HANDLE__)->Instance->SR);\
#                                               UNUSED(tmpreg_udr); \
#                                              }while(0U)
# fun define IS_I2S_MODE(MODE) (((MODE) == I2S_MODE_SLAVE_TX)  || \
#                           ((MODE) == I2S_MODE_SLAVE_RX)  || \
#                           ((MODE) == I2S_MODE_MASTER_TX) || \
#                           ((MODE) == I2S_MODE_MASTER_RX))
# fun define IS_I2S_STANDARD(STANDARD) (((STANDARD) == I2S_STANDARD_PHILIPS)   || \
#                                   ((STANDARD) == I2S_STANDARD_MSB)       || \
#                                   ((STANDARD) == I2S_STANDARD_LSB)       || \
#                                   ((STANDARD) == I2S_STANDARD_PCM_SHORT) || \
#                                   ((STANDARD) == I2S_STANDARD_PCM_LONG))
# fun define IS_I2S_DATA_FORMAT(FORMAT) (((FORMAT) == I2S_DATAFORMAT_16B)          || \
#                                    ((FORMAT) == I2S_DATAFORMAT_16B_EXTENDED) || \
#                                    ((FORMAT) == I2S_DATAFORMAT_24B)          || \
#                                    ((FORMAT) == I2S_DATAFORMAT_32B))
# fun define IS_I2S_MCLK_OUTPUT(OUTPUT) (((OUTPUT) == I2S_MCLKOUTPUT_ENABLE) || \
#                                    ((OUTPUT) == I2S_MCLKOUTPUT_DISABLE))
# fun define IS_I2S_AUDIO_FREQ(FREQ) ((((FREQ) >= I2S_AUDIOFREQ_8K)    && \
#                                  ((FREQ) <= I2S_AUDIOFREQ_192K)) || \
#                                  ((FREQ) == I2S_AUDIOFREQ_DEFAULT))
# fun define IS_I2S_CPOL(CPOL) (((CPOL) == I2S_CPOL_LOW) || \
#                           ((CPOL) == I2S_CPOL_HIGH))
# struct I2S_InitTypeDef

class I2S_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Mode',	ctypes.c_uint32),
		('Standard',	ctypes.c_uint32),
		('DataFormat',	ctypes.c_uint32),
		('MCLKOutput',	ctypes.c_uint32),
		('AudioFreq',	ctypes.c_uint32),
		('CPOL',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct I2S_HandleTypeDef
# struct I2S_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_irda_ex.h : 

# empty define STM32L0xx_HAL_IRDA_EX_H
IRDA_WORDLENGTH_7B = 0x10000000
IRDA_WORDLENGTH_8B = 0x0
IRDA_WORDLENGTH_9B = 0x1000
# fun define IRDA_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__) \
#  do {                                                        \
#    if((__HANDLE__)->Instance == USART2)                      \
#    {                                                         \
#       switch(__HAL_RCC_GET_USART2_SOURCE())                  \
#       {                                                      \
#        case RCC_USART2CLKSOURCE_PCLK1:                       \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_PCLK1;         \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_HSI:                         \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_SYSCLK:                      \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_LSE:                         \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else if((__HANDLE__)->Instance == LPUART1)                \
#    {                                                         \
#       switch(__HAL_RCC_GET_LPUART1_SOURCE())                 \
#       {                                                      \
#        case RCC_LPUART1CLKSOURCE_PCLK1:                      \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_PCLK1;         \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_HSI:                        \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_SYSCLK:                     \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_LSE:                        \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else                                                      \
#    {                                                         \
#      (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_UNDEFINED;         \
#    }                                                         \
#  } while(0U)
# fun define IRDA_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__) \
#  do {                                                        \
#    if((__HANDLE__)->Instance == USART1)                      \
#    {                                                         \
#       switch(__HAL_RCC_GET_USART1_SOURCE())                  \
#       {                                                      \
#        case RCC_USART1CLKSOURCE_PCLK2:                       \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_PCLK2;         \
#          break;                                              \
#        case RCC_USART1CLKSOURCE_HSI:                         \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_USART1CLKSOURCE_SYSCLK:                      \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_USART1CLKSOURCE_LSE:                         \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else if((__HANDLE__)->Instance == USART2)                 \
#    {                                                         \
#       switch(__HAL_RCC_GET_USART2_SOURCE())                  \
#       {                                                      \
#        case RCC_USART2CLKSOURCE_PCLK1:                       \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_PCLK1;         \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_HSI:                         \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_SYSCLK:                      \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_LSE:                         \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else if((__HANDLE__)->Instance == LPUART1)                \
#    {                                                         \
#       switch(__HAL_RCC_GET_LPUART1_SOURCE())                 \
#       {                                                      \
#        case RCC_LPUART1CLKSOURCE_PCLK1:                      \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_PCLK1;         \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_HSI:                        \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_SYSCLK:                     \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_LSE:                        \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else                                                      \
#    {                                                         \
#      (__CLOCKSOURCE__) = IRDA_CLOCKSOURCE_UNDEFINED;         \
#    }                                                         \
#  } while(0U)
# fun define IRDA_MASK_COMPUTATION(__HANDLE__)                             \
#  do {                                                                \
#  if ((__HANDLE__)->Init.WordLength == IRDA_WORDLENGTH_9B)            \
#  {                                                                   \
#     if ((__HANDLE__)->Init.Parity == IRDA_PARITY_NONE)               \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x01FFU ;                                \
#     }                                                                \
#     else                                                             \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x00FFU ;                                \
#     }                                                                \
#  }                                                                   \
#  else if ((__HANDLE__)->Init.WordLength == IRDA_WORDLENGTH_8B)       \
#  {                                                                   \
#     if ((__HANDLE__)->Init.Parity == IRDA_PARITY_NONE)               \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x00FFU ;                                \
#     }                                                                \
#     else                                                             \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x007FU ;                                \
#     }                                                                \
#  }                                                                   \
#  else if ((__HANDLE__)->Init.WordLength == IRDA_WORDLENGTH_7B)       \
#  {                                                                   \
#     if ((__HANDLE__)->Init.Parity == IRDA_PARITY_NONE)               \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x007FU ;                                \
#     }                                                                \
#     else                                                             \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x003FU ;                                \
#     }                                                                \
#  }                                                                   \
#  else                                                                \
#  {                                                                   \
#    (__HANDLE__)->Mask = 0x0000U;                                     \
#  }                                                                   \
#} while(0U)
# fun define IS_IRDA_WORD_LENGTH(__LENGTH__) (((__LENGTH__) == IRDA_WORDLENGTH_7B) || \
#                                         ((__LENGTH__) == IRDA_WORDLENGTH_8B) || \
#                                         ((__LENGTH__) == IRDA_WORDLENGTH_9B))
# ----------------------------------------

# file stm32l0xx_hal_irda.h : 

# Enum IRDA_ClockSourceTypeDef
IRDA_CLOCKSOURCE_PCLK1 = 0x0
IRDA_CLOCKSOURCE_PCLK2 = 0x1
IRDA_CLOCKSOURCE_HSI = 0x2
IRDA_CLOCKSOURCE_SYSCLK = 0x4
IRDA_CLOCKSOURCE_LSE = 0x10
IRDA_CLOCKSOURCE_UNDEFINED = 0x20
# Enum HAL_IRDA_CallbackIDTypeDef
# Skip HAL_IRDA_TX_HALFCOMPLETE_CB_ID : no need parse
# Skip HAL_IRDA_TX_COMPLETE_CB_ID : no need parse
# Skip HAL_IRDA_RX_HALFCOMPLETE_CB_ID : no need parse
# Skip HAL_IRDA_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_IRDA_ERROR_CB_ID : no need parse
# Skip HAL_IRDA_ABORT_COMPLETE_CB_ID : no need parse
# Skip HAL_IRDA_ABORT_TRANSMIT_COMPLETE_CB_ID : no need parse
# Skip HAL_IRDA_ABORT_RECEIVE_COMPLETE_CB_ID : no need parse
# Skip HAL_IRDA_MSPINIT_CB_ID : no need parse
# Skip HAL_IRDA_MSPDEINIT_CB_ID : no need parse
# empty define STM32L0xx_HAL_IRDA_H
HAL_IRDA_STATE_RESET = 0x0
HAL_IRDA_STATE_READY = 0x20
HAL_IRDA_STATE_BUSY = 0x24
HAL_IRDA_STATE_BUSY_TX = 0x21
HAL_IRDA_STATE_BUSY_RX = 0x22
HAL_IRDA_STATE_BUSY_TX_RX = 0x23
HAL_IRDA_STATE_TIMEOUT = 0xA0
HAL_IRDA_STATE_ERROR = 0xE0
HAL_IRDA_ERROR_NONE = 0x0
HAL_IRDA_ERROR_PE = 0x1
HAL_IRDA_ERROR_NE = 0x2
HAL_IRDA_ERROR_FE = 0x4
HAL_IRDA_ERROR_ORE = 0x8
HAL_IRDA_ERROR_DMA = 0x10
HAL_IRDA_ERROR_BUSY = 0x20
# Skip HAL_IRDA_ERROR_INVALID_CALLBACK : no need parse
IRDA_PARITY_NONE = 0x0
IRDA_PARITY_EVEN = 0x400
IRDA_PARITY_ODD = 0x600
IRDA_MODE_RX = 0x4
IRDA_MODE_TX = 0x8
IRDA_MODE_TX_RX = 0xC
IRDA_POWERMODE_NORMAL = 0x0
IRDA_POWERMODE_LOWPOWER = 0x4
IRDA_STATE_DISABLE = 0x0
IRDA_STATE_ENABLE = 0x1
IRDA_MODE_DISABLE = 0x0
IRDA_MODE_ENABLE = 0x2
IRDA_ONE_BIT_SAMPLE_DISABLE = 0x0
IRDA_ONE_BIT_SAMPLE_ENABLE = 0x800
IRDA_DMA_TX_DISABLE = 0x0
IRDA_DMA_TX_ENABLE = 0x80
IRDA_DMA_RX_DISABLE = 0x0
IRDA_DMA_RX_ENABLE = 0x40
IRDA_AUTOBAUD_REQUEST = 0x1
IRDA_RXDATA_FLUSH_REQUEST = 0x8
IRDA_TXDATA_FLUSH_REQUEST = 0x10
IRDA_FLAG_REACK = 0x400000
IRDA_FLAG_TEACK = 0x200000
IRDA_FLAG_BUSY = 0x10000
IRDA_FLAG_ABRF = 0x8000
IRDA_FLAG_ABRE = 0x4000
IRDA_FLAG_TXE = 0x80
IRDA_FLAG_TC = 0x40
IRDA_FLAG_RXNE = 0x20
IRDA_FLAG_ORE = 0x8
IRDA_FLAG_NE = 0x4
IRDA_FLAG_FE = 0x2
IRDA_FLAG_PE = 0x1
IRDA_IT_PE = 0x28
IRDA_IT_TXE = 0x727
IRDA_IT_TC = 0x626
IRDA_IT_RXNE = 0x525
IRDA_IT_IDLE = 0x424
IRDA_IT_ERR = 0x60
IRDA_IT_ORE = 0x300
IRDA_IT_NE = 0x200
IRDA_IT_FE = 0x100
IRDA_CLEAR_PEF = 0x1
IRDA_CLEAR_FEF = 0x2
IRDA_CLEAR_NEF = 0x4
IRDA_CLEAR_OREF = 0x8
IRDA_CLEAR_IDLEF = 0x10
IRDA_CLEAR_TCF = 0x40
IRDA_IT_MASK = 0x1F
IRDA_CR_MASK = 0xE0
IRDA_CR_POS = 0x5
IRDA_ISR_MASK = 0x1F00
IRDA_ISR_POS = 0x8
# fun define __HAL_IRDA_RESET_HANDLE_STATE(__HANDLE__)  do{                                                   \
#                                                       (__HANDLE__)->gState = HAL_IRDA_STATE_RESET;      \
#                                                       (__HANDLE__)->RxState = HAL_IRDA_STATE_RESET;     \
#                                                       (__HANDLE__)->MspInitCallback = NULL;             \
#                                                       (__HANDLE__)->MspDeInitCallback = NULL;           \
#                                                     } while(0U)
# fun define __HAL_IRDA_RESET_HANDLE_STATE(__HANDLE__)  do{                                                   \
#                                                       (__HANDLE__)->gState = HAL_IRDA_STATE_RESET;      \
#                                                       (__HANDLE__)->RxState = HAL_IRDA_STATE_RESET;     \
#                                                     } while(0U)
# fun define __HAL_IRDA_FLUSH_DRREGISTER(__HANDLE__)                            \
#    do{                                                                    \
#         SET_BIT((__HANDLE__)->Instance->RQR, IRDA_RXDATA_FLUSH_REQUEST); \
#         SET_BIT((__HANDLE__)->Instance->RQR, IRDA_TXDATA_FLUSH_REQUEST); \
#      } while(0U)
# fun define __HAL_IRDA_CLEAR_FLAG(__HANDLE__, __FLAG__) ((__HANDLE__)->Instance->ICR = (__FLAG__))
# fun define __HAL_IRDA_CLEAR_PEFLAG(__HANDLE__)    __HAL_IRDA_CLEAR_FLAG((__HANDLE__), IRDA_CLEAR_PEF)
# fun define __HAL_IRDA_CLEAR_FEFLAG(__HANDLE__)    __HAL_IRDA_CLEAR_FLAG((__HANDLE__), IRDA_CLEAR_FEF)
# fun define __HAL_IRDA_CLEAR_NEFLAG(__HANDLE__)    __HAL_IRDA_CLEAR_FLAG((__HANDLE__), IRDA_CLEAR_NEF)
# fun define __HAL_IRDA_CLEAR_OREFLAG(__HANDLE__)    __HAL_IRDA_CLEAR_FLAG((__HANDLE__), IRDA_CLEAR_OREF)
# fun define __HAL_IRDA_CLEAR_IDLEFLAG(__HANDLE__)   __HAL_IRDA_CLEAR_FLAG((__HANDLE__), IRDA_CLEAR_IDLEF)
# fun define __HAL_IRDA_GET_FLAG(__HANDLE__, __FLAG__) (((__HANDLE__)->Instance->ISR & (__FLAG__)) == (__FLAG__))
# fun define __HAL_IRDA_ENABLE_IT(__HANDLE__, __INTERRUPT__)   (((((__INTERRUPT__) & IRDA_CR_MASK) >> IRDA_CR_POS) == 1U)? ((__HANDLE__)->Instance->CR1 |= ((uint32_t)1U << ((__INTERRUPT__) & IRDA_IT_MASK))): \
#                                                           ((((__INTERRUPT__) & IRDA_CR_MASK) >> IRDA_CR_POS) == 2U)? ((__HANDLE__)->Instance->CR2 |= ((uint32_t)1U << ((__INTERRUPT__) & IRDA_IT_MASK))): \
#                                                           ((__HANDLE__)->Instance->CR3 |= ((uint32_t)1U << ((__INTERRUPT__) & IRDA_IT_MASK))))
# fun define __HAL_IRDA_DISABLE_IT(__HANDLE__, __INTERRUPT__)  (((((__INTERRUPT__) & IRDA_CR_MASK) >> IRDA_CR_POS) == 1U)? ((__HANDLE__)->Instance->CR1 &= ~ ((uint32_t)1U << ((__INTERRUPT__) & IRDA_IT_MASK))): \
#                                                           ((((__INTERRUPT__) & IRDA_CR_MASK) >> IRDA_CR_POS) == 2U)? ((__HANDLE__)->Instance->CR2 &= ~ ((uint32_t)1U << ((__INTERRUPT__) & IRDA_IT_MASK))): \
#                                                           ((__HANDLE__)->Instance->CR3 &= ~ ((uint32_t)1U << ((__INTERRUPT__) & IRDA_IT_MASK))))
# fun define __HAL_IRDA_GET_IT(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->ISR & (0x01U << (((__INTERRUPT__) & IRDA_ISR_MASK)>> IRDA_ISR_POS))) != 0U) ? SET : RESET)
# fun define __HAL_IRDA_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((((((__INTERRUPT__) & IRDA_CR_MASK) >> IRDA_CR_POS) == 0x01U)? (__HANDLE__)->Instance->CR1 : \
#                                                               (((((__INTERRUPT__) & IRDA_CR_MASK) >> IRDA_CR_POS) == 0x02U)? (__HANDLE__)->Instance->CR2 : \
#                                                               (__HANDLE__)->Instance->CR3)) & ((uint32_t)0x01U << (((uint16_t)(__INTERRUPT__)) & IRDA_IT_MASK))) != 0U) ? SET : RESET)
# fun define __HAL_IRDA_CLEAR_IT(__HANDLE__, __IT_CLEAR__) ((__HANDLE__)->Instance->ICR = (uint32_t)(__IT_CLEAR__))
# fun define __HAL_IRDA_SEND_REQ(__HANDLE__, __REQ__) ((__HANDLE__)->Instance->RQR |= (uint16_t)(__REQ__))
# fun define __HAL_IRDA_ONE_BIT_SAMPLE_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3|= USART_CR3_ONEBIT)
# fun define __HAL_IRDA_ONE_BIT_SAMPLE_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT))
# fun define __HAL_IRDA_ENABLE(__HANDLE__)                   ((__HANDLE__)->Instance->CR1 |=  USART_CR1_UE)
# fun define __HAL_IRDA_DISABLE(__HANDLE__)                  ((__HANDLE__)->Instance->CR1 &=  ~USART_CR1_UE)
# fun define IS_IRDA_BAUDRATE(__BAUDRATE__) ((__BAUDRATE__) < 115201U)
# fun define IS_IRDA_PRESCALER(__PRESCALER__) ((__PRESCALER__) > 0U)
# fun define IS_IRDA_PARITY(__PARITY__) (((__PARITY__) == IRDA_PARITY_NONE) || \
#                                    ((__PARITY__) == IRDA_PARITY_EVEN) || \
#                                    ((__PARITY__) == IRDA_PARITY_ODD))
# fun define IS_IRDA_TX_RX_MODE(__MODE__) ((((__MODE__) & (~((uint32_t)(IRDA_MODE_TX_RX)))) == 0x00U) && ((__MODE__) != 0x00U))
# fun define IS_IRDA_POWERMODE(__MODE__) (((__MODE__) == IRDA_POWERMODE_LOWPOWER) || \
#                                     ((__MODE__) == IRDA_POWERMODE_NORMAL))
# fun define IS_IRDA_STATE(__STATE__) (((__STATE__) == IRDA_STATE_DISABLE) || \
#                                  ((__STATE__) == IRDA_STATE_ENABLE))
# fun define IS_IRDA_MODE(__MODE__)  (((__MODE__) == IRDA_MODE_DISABLE) || \
#                                 ((__MODE__) == IRDA_MODE_ENABLE))
# fun define IS_IRDA_ONE_BIT_SAMPLE(__ONEBIT__)      (((__ONEBIT__) == IRDA_ONE_BIT_SAMPLE_DISABLE) || \
#                                                 ((__ONEBIT__) == IRDA_ONE_BIT_SAMPLE_ENABLE))
# fun define IS_IRDA_DMA_TX(__DMATX__)     (((__DMATX__) == IRDA_DMA_TX_DISABLE) || \
#                                       ((__DMATX__) == IRDA_DMA_TX_ENABLE))
# fun define IS_IRDA_DMA_RX(__DMARX__) (((__DMARX__) == IRDA_DMA_RX_DISABLE) || \
#                                   ((__DMARX__) == IRDA_DMA_RX_ENABLE))
# fun define IS_IRDA_REQUEST_PARAMETER(__PARAM__) (((__PARAM__) == IRDA_AUTOBAUD_REQUEST) || \
#                                              ((__PARAM__) == IRDA_RXDATA_FLUSH_REQUEST) || \
#                                              ((__PARAM__) == IRDA_TXDATA_FLUSH_REQUEST))
# Skip Instance : no need parse
# Skip Init : no need parse
# Skip pTxBuffPtr : no need parse
# Skip TxXferSize : no need parse
# Skip TxXferCount : no need parse
# Skip pRxBuffPtr : no need parse
# Skip RxXferSize : no need parse
# Skip RxXferCount : no need parse
# Skip Mask : no need parse
# Skip hdmatx : no need parse
# Skip hdmarx : no need parse
# Skip Lock : no need parse
# Skip gState : no need parse
# Skip RxState : no need parse
# Skip ErrorCode : no need parse
# Skip TxHalfCpltCallback : no need parse
# Skip TxCpltCallback : no need parse
# Skip RxHalfCpltCallback : no need parse
# Skip RxCpltCallback : no need parse
# Skip ErrorCallback : no need parse
# Skip AbortCpltCallback : no need parse
# Skip AbortTransmitCpltCallback : no need parse
# Skip AbortReceiveCpltCallback : no need parse
# Skip MspInitCallback : no need parse
# Skip MspDeInitCallback : no need parse
# struct IRDA_InitTypeDef

class IRDA_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('BaudRate',	ctypes.c_uint32),
		('WordLength',	ctypes.c_uint32),
		('Parity',	ctypes.c_uint32),
		('Mode',	ctypes.c_uint32),
		('Prescaler',	ctypes.c_uint8),
		('PowerMode',	ctypes.c_uint16),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_iwdg.h : 

# empty define __STM32L0xx_HAL_IWDG_H
IWDG_PRESCALER_4 = 0x0
IWDG_PRESCALER_8 = 0x1
IWDG_PRESCALER_16 = 0x2
IWDG_PRESCALER_32 = 0x3
IWDG_PRESCALER_64 = 0x4
IWDG_PRESCALER_128 = 0x5
IWDG_PRESCALER_256 = 0x6
IWDG_WINDOW_DISABLE = 0xFFF
# fun define __HAL_IWDG_START(__HANDLE__)                WRITE_REG((__HANDLE__)->Instance->KR, IWDG_KEY_ENABLE)
# fun define __HAL_IWDG_RELOAD_COUNTER(__HANDLE__)       WRITE_REG((__HANDLE__)->Instance->KR, IWDG_KEY_RELOAD)
IWDG_KEY_RELOAD = 0xAAAA
IWDG_KEY_ENABLE = 0xCCCC
IWDG_KEY_WRITE_ACCESS_ENABLE = 0x5555
IWDG_KEY_WRITE_ACCESS_DISABLE = 0x0
# fun define IWDG_ENABLE_WRITE_ACCESS(__HANDLE__)  WRITE_REG((__HANDLE__)->Instance->KR, IWDG_KEY_WRITE_ACCESS_ENABLE)
# fun define IWDG_DISABLE_WRITE_ACCESS(__HANDLE__) WRITE_REG((__HANDLE__)->Instance->KR, IWDG_KEY_WRITE_ACCESS_DISABLE)
# fun define IS_IWDG_PRESCALER(__PRESCALER__)      (((__PRESCALER__) == IWDG_PRESCALER_4)  || \
#                                               ((__PRESCALER__) == IWDG_PRESCALER_8)  || \
#                                               ((__PRESCALER__) == IWDG_PRESCALER_16) || \
#                                               ((__PRESCALER__) == IWDG_PRESCALER_32) || \
#                                               ((__PRESCALER__) == IWDG_PRESCALER_64) || \
#                                               ((__PRESCALER__) == IWDG_PRESCALER_128)|| \
#                                               ((__PRESCALER__) == IWDG_PRESCALER_256))
# fun define IS_IWDG_RELOAD(__RELOAD__)            ((__RELOAD__) <= IWDG_RLR_RL)
# fun define IS_IWDG_WINDOW(__WINDOW__)            ((__WINDOW__) <= IWDG_WINR_WIN)
# struct IWDG_InitTypeDef

class IWDG_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Prescaler',	ctypes.c_uint32),
		('Reload',	ctypes.c_uint32),
		('Window',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct IWDG_HandleTypeDef
# struct IWDG_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_lcd.h : 

# Enum HAL_LCD_StateTypeDef
HAL_LCD_STATE_RESET = 0x0
HAL_LCD_STATE_READY = 0x1
HAL_LCD_STATE_BUSY = 0x2
HAL_LCD_STATE_TIMEOUT = 0x3
HAL_LCD_STATE_ERROR = 0x4
# empty define __STM32L0xx_HAL_LCD_H
HAL_LCD_ERROR_NONE = 0x0
HAL_LCD_ERROR_FCRSF = 0x1
HAL_LCD_ERROR_UDR = 0x2
HAL_LCD_ERROR_UDD = 0x4
HAL_LCD_ERROR_ENS = 0x8
HAL_LCD_ERROR_RDY = 0x10
LCD_PRESCALER_1 = 0x0
LCD_PRESCALER_2 = 0x400000
LCD_PRESCALER_4 = 0x800000
LCD_PRESCALER_8 = 0xC00000
LCD_PRESCALER_16 = 0x1000000
LCD_PRESCALER_32 = 0x1400000
LCD_PRESCALER_64 = 0x1800000
LCD_PRESCALER_128 = 0x1C00000
LCD_PRESCALER_256 = 0x2000000
LCD_PRESCALER_512 = 0x2400000
LCD_PRESCALER_1024 = 0x2800000
LCD_PRESCALER_2048 = 0x2C00000
LCD_PRESCALER_4096 = 0x3000000
LCD_PRESCALER_8192 = 0x3400000
LCD_PRESCALER_16384 = 0x3800000
LCD_PRESCALER_32768 = 0x3C00000
# fun define IS_LCD_PRESCALER(__PRESCALER__) (((__PRESCALER__) == LCD_PRESCALER_1)     || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_2)     || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_4)     || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_8)     || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_16)    || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_32)    || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_64)    || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_128)   || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_256)   || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_512)   || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_1024)  || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_2048)  || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_4096)  || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_8192)  || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_16384) || \
#                                         ((__PRESCALER__) == LCD_PRESCALER_32768))
LCD_DIVIDER_16 = 0x0
LCD_DIVIDER_17 = 0x40000
LCD_DIVIDER_18 = 0x80000
LCD_DIVIDER_19 = 0xC0000
LCD_DIVIDER_20 = 0x100000
LCD_DIVIDER_21 = 0x140000
LCD_DIVIDER_22 = 0x180000
LCD_DIVIDER_23 = 0x1C0000
LCD_DIVIDER_24 = 0x200000
LCD_DIVIDER_25 = 0x240000
LCD_DIVIDER_26 = 0x280000
LCD_DIVIDER_27 = 0x2C0000
LCD_DIVIDER_28 = 0x300000
LCD_DIVIDER_29 = 0x340000
LCD_DIVIDER_30 = 0x380000
LCD_DIVIDER_31 = 0x3C0000
# fun define IS_LCD_DIVIDER(__DIVIDER__) (((__DIVIDER__) == LCD_DIVIDER_16) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_17) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_18) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_19) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_20) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_21) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_22) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_23) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_24) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_25) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_26) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_27) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_28) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_29) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_30) || \
#                                     ((__DIVIDER__) == LCD_DIVIDER_31))
LCD_DUTY_STATIC = 0x0
LCD_DUTY_1_2 = 0x4
LCD_DUTY_1_3 = 0x8
LCD_DUTY_1_4 = 0xC
LCD_DUTY_1_8 = 0x10
# fun define IS_LCD_DUTY(__DUTY__) (((__DUTY__) == LCD_DUTY_STATIC)  || \
#                               ((__DUTY__) == LCD_DUTY_1_2)     || \
#                               ((__DUTY__) == LCD_DUTY_1_3)     || \
#                               ((__DUTY__) == LCD_DUTY_1_4)     || \
#                               ((__DUTY__) == LCD_DUTY_1_8))
LCD_BIAS_1_4 = 0x0
LCD_BIAS_1_2 = 0x20
LCD_BIAS_1_3 = 0x40
# fun define IS_LCD_BIAS(__BIAS__) (((__BIAS__) == LCD_BIAS_1_4) || \
#                               ((__BIAS__) == LCD_BIAS_1_2) || \
#                               ((__BIAS__) == LCD_BIAS_1_3))
LCD_VOLTAGESOURCE_INTERNAL = 0x0
LCD_VOLTAGESOURCE_EXTERNAL = 0x2
# fun define IS_LCD_VOLTAGE_SOURCE(SOURCE) (((SOURCE) == LCD_VOLTAGESOURCE_INTERNAL) || \
#                                       ((SOURCE) == LCD_VOLTAGESOURCE_EXTERNAL))
LCD_IT_SOF = 0x2
LCD_IT_UDD = 0x8
LCD_PULSEONDURATION_0 = 0x0
LCD_PULSEONDURATION_1 = 0x10
LCD_PULSEONDURATION_2 = 0x20
LCD_PULSEONDURATION_3 = 0x30
LCD_PULSEONDURATION_4 = 0x40
LCD_PULSEONDURATION_5 = 0x50
LCD_PULSEONDURATION_6 = 0x60
LCD_PULSEONDURATION_7 = 0x70
# fun define IS_LCD_PULSE_ON_DURATION(__DURATION__) (((__DURATION__) == LCD_PULSEONDURATION_0) || \
#                                                ((__DURATION__) == LCD_PULSEONDURATION_1) || \
#                                                ((__DURATION__) == LCD_PULSEONDURATION_2) || \
#                                                ((__DURATION__) == LCD_PULSEONDURATION_3) || \
#                                                ((__DURATION__) == LCD_PULSEONDURATION_4) || \
#                                                ((__DURATION__) == LCD_PULSEONDURATION_5) || \
#                                                ((__DURATION__) == LCD_PULSEONDURATION_6) || \
#                                                ((__DURATION__) == LCD_PULSEONDURATION_7))
LCD_HIGHDRIVE_0 = 0x0
LCD_HIGHDRIVE_1 = 0x1
# fun define IS_LCD_HIGHDRIVE(__HIGHDRIVE__) (((__HIGHDRIVE__) == LCD_HIGHDRIVE_0) || \
#                                         ((__HIGHDRIVE__) == LCD_HIGHDRIVE_1))
LCD_DEADTIME_0 = 0x0
LCD_DEADTIME_1 = 0x80
LCD_DEADTIME_2 = 0x100
LCD_DEADTIME_3 = 0x180
LCD_DEADTIME_4 = 0x200
LCD_DEADTIME_5 = 0x280
LCD_DEADTIME_6 = 0x300
LCD_DEADTIME_7 = 0x380
# fun define IS_LCD_DEAD_TIME(__TIME__) (((__TIME__) == LCD_DEADTIME_0) || \
#                                    ((__TIME__) == LCD_DEADTIME_1) || \
#                                    ((__TIME__) == LCD_DEADTIME_2) || \
#                                    ((__TIME__) == LCD_DEADTIME_3) || \
#                                    ((__TIME__) == LCD_DEADTIME_4) || \
#                                    ((__TIME__) == LCD_DEADTIME_5) || \
#                                    ((__TIME__) == LCD_DEADTIME_6) || \
#                                    ((__TIME__) == LCD_DEADTIME_7))
LCD_BLINKMODE_OFF = 0x0
LCD_BLINKMODE_SEG0_COM0 = 0x10000
LCD_BLINKMODE_SEG0_ALLCOM = 0x20000
LCD_BLINKMODE_ALLSEG_ALLCOM = 0x30000
# fun define IS_LCD_BLINK_MODE(__MODE__) (((__MODE__) == LCD_BLINKMODE_OFF)            || \
#                                     ((__MODE__) == LCD_BLINKMODE_SEG0_COM0)      || \
#                                     ((__MODE__) == LCD_BLINKMODE_SEG0_ALLCOM)    || \
#                                     ((__MODE__) == LCD_BLINKMODE_ALLSEG_ALLCOM))
LCD_BLINKFREQUENCY_DIV8 = 0x0
LCD_BLINKFREQUENCY_DIV16 = 0x2000
LCD_BLINKFREQUENCY_DIV32 = 0x4000
LCD_BLINKFREQUENCY_DIV64 = 0x6000
LCD_BLINKFREQUENCY_DIV128 = 0x8000
LCD_BLINKFREQUENCY_DIV256 = 0xA000
LCD_BLINKFREQUENCY_DIV512 = 0xC000
LCD_BLINKFREQUENCY_DIV1024 = 0xE000
# fun define IS_LCD_BLINK_FREQUENCY(__FREQUENCY__) (((__FREQUENCY__) == LCD_BLINKFREQUENCY_DIV8)   || \
#                                               ((__FREQUENCY__) == LCD_BLINKFREQUENCY_DIV16)  || \
#                                               ((__FREQUENCY__) == LCD_BLINKFREQUENCY_DIV32)  || \
#                                               ((__FREQUENCY__) == LCD_BLINKFREQUENCY_DIV64)  || \
#                                               ((__FREQUENCY__) == LCD_BLINKFREQUENCY_DIV128) || \
#                                               ((__FREQUENCY__) == LCD_BLINKFREQUENCY_DIV256) || \
#                                               ((__FREQUENCY__) == LCD_BLINKFREQUENCY_DIV512) || \
#                                               ((__FREQUENCY__) == LCD_BLINKFREQUENCY_DIV1024))
LCD_CONTRASTLEVEL_0 = 0x0
LCD_CONTRASTLEVEL_1 = 0x400
LCD_CONTRASTLEVEL_2 = 0x800
LCD_CONTRASTLEVEL_3 = 0xC00
LCD_CONTRASTLEVEL_4 = 0x1000
LCD_CONTRASTLEVEL_5 = 0x1400
LCD_CONTRASTLEVEL_6 = 0x1800
LCD_CONTRASTLEVEL_7 = 0x1C00
# fun define IS_LCD_CONTRAST(__CONTRAST__) (((__CONTRAST__) == LCD_CONTRASTLEVEL_0) || \
#                                       ((__CONTRAST__) == LCD_CONTRASTLEVEL_1) || \
#                                       ((__CONTRAST__) == LCD_CONTRASTLEVEL_2) || \
#                                       ((__CONTRAST__) == LCD_CONTRASTLEVEL_3) || \
#                                       ((__CONTRAST__) == LCD_CONTRASTLEVEL_4) || \
#                                       ((__CONTRAST__) == LCD_CONTRASTLEVEL_5) || \
#                                       ((__CONTRAST__) == LCD_CONTRASTLEVEL_6) || \
#                                       ((__CONTRAST__) == LCD_CONTRASTLEVEL_7))
LCD_MUXSEGMENT_DISABLE = 0x0
LCD_MUXSEGMENT_ENABLE = 0x80
# fun define IS_LCD_MUXSEGMENT(__VALUE__) (((__VALUE__) == LCD_MUXSEGMENT_ENABLE) || \
#                                      ((__VALUE__) == LCD_MUXSEGMENT_DISABLE))
LCD_VOLTBUFOUT_DISABLE = 0x0
LCD_VOLTBUFOUT_ENABLE = 0x100
# fun define IS_LCD_VOLTBUFOUT(__VALUE__) (((__VALUE__) == LCD_VOLTBUFOUT_ENABLE) || \
#                                      ((__VALUE__) == LCD_VOLTBUFOUT_DISABLE))
LCD_FLAG_ENS = 0x1
LCD_FLAG_SOF = 0x2
LCD_FLAG_UDR = 0x4
LCD_FLAG_UDD = 0x8
LCD_FLAG_RDY = 0x10
LCD_FLAG_FCRSF = 0x20
LCD_RAM_REGISTER0 = 0x0
LCD_RAM_REGISTER1 = 0x1
LCD_RAM_REGISTER2 = 0x2
LCD_RAM_REGISTER3 = 0x3
LCD_RAM_REGISTER4 = 0x4
LCD_RAM_REGISTER5 = 0x5
LCD_RAM_REGISTER6 = 0x6
LCD_RAM_REGISTER7 = 0x7
LCD_RAM_REGISTER8 = 0x8
LCD_RAM_REGISTER9 = 0x9
LCD_RAM_REGISTER10 = 0xA
LCD_RAM_REGISTER11 = 0xB
LCD_RAM_REGISTER12 = 0xC
LCD_RAM_REGISTER13 = 0xD
LCD_RAM_REGISTER14 = 0xE
LCD_RAM_REGISTER15 = 0xF
# fun define IS_LCD_RAM_REGISTER(__REGISTER__) (((__REGISTER__) == LCD_RAM_REGISTER0)  || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER1)  || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER2)  || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER3)  || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER4)  || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER5)  || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER6)  || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER7)  || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER8)  || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER9)  || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER10) || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER11) || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER12) || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER13) || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER14) || \
#                                           ((__REGISTER__) == LCD_RAM_REGISTER15))
# fun define __HAL_LCD_RESET_HANDLE_STATE(__HANDLE__)  ((__HANDLE__)->State = HAL_LCD_STATE_RESET)
# fun define __HAL_LCD_ENABLE(__HANDLE__)              (SET_BIT((__HANDLE__)->Instance->CR, LCD_CR_LCDEN))
# fun define __HAL_LCD_DISABLE(__HANDLE__)             (CLEAR_BIT((__HANDLE__)->Instance->CR, LCD_CR_LCDEN))
# fun define __HAL_LCD_VOLTOUTBUFFER_ENABLE(__HANDLE__)              (SET_BIT((__HANDLE__)->Instance->CR, LCD_CR_BUFEN))
# fun define __HAL_LCD_VOLTOUTBUFFER_DISABLE(__HANDLE__)             (CLEAR_BIT((__HANDLE__)->Instance->CR, LCD_CR_BUFEN))
# fun define __HAL_LCD_HIGHDRIVER_ENABLE(__HANDLE__)                                \
#                              do{                                              \
#                                  SET_BIT((__HANDLE__)->Instance->FCR, LCD_FCR_HD); \
#                                  LCD_WaitForSynchro(__HANDLE__);              \
#                                 }while(0)
# fun define __HAL_LCD_HIGHDRIVER_DISABLE(__HANDLE__)                               \
#                              do{                                              \
#                                  CLEAR_BIT((__HANDLE__)->Instance->FCR, LCD_FCR_HD); \
#                                  LCD_WaitForSynchro(__HANDLE__);              \
#                                 }while(0)
# fun define __HAL_LCD_PULSEONDURATION_CONFIG(__HANDLE__, __DURATION__)                \
#        do{                                                                       \
#            MODIFY_REG((__HANDLE__)->Instance->FCR, LCD_FCR_PON, (__DURATION__)); \
#            LCD_WaitForSynchro(__HANDLE__);                                       \
#           }while(0)
# fun define __HAL_LCD_DEADTIME_CONFIG(__HANDLE__, __DEADTIME__)                        \
#        do{                                                                        \
#            MODIFY_REG((__HANDLE__)->Instance->FCR, LCD_FCR_DEAD, (__DEADTIME__)); \
#            LCD_WaitForSynchro(__HANDLE__);                                        \
#           }while(0)
# fun define __HAL_LCD_CONTRAST_CONFIG(__HANDLE__, __CONTRAST__)                       \
#        do{                                                                       \
#            MODIFY_REG((__HANDLE__)->Instance->FCR, LCD_FCR_CC, (__CONTRAST__));  \
#            LCD_WaitForSynchro(__HANDLE__);                                       \
#           } while(0)
# fun define __HAL_LCD_BLINK_CONFIG(__HANDLE__, __BLINKMODE__, __BLINKFREQUENCY__)  \
#        do{                                                                    \
#            MODIFY_REG((__HANDLE__)->Instance->FCR, (LCD_FCR_BLINKF | LCD_FCR_BLINK), ((__BLINKMODE__) | (__BLINKFREQUENCY__))); \
#            LCD_WaitForSynchro(__HANDLE__);                                    \
#          }while(0)
# fun define __HAL_LCD_ENABLE_IT(__HANDLE__, __INTERRUPT__)                                \
#                         do{                                                          \
#                             SET_BIT((__HANDLE__)->Instance->FCR, (__INTERRUPT__));   \
#                             LCD_WaitForSynchro(__HANDLE__);                          \
#                            }while(0)
# fun define __HAL_LCD_DISABLE_IT(__HANDLE__, __INTERRUPT__)                               \
#                         do{                                                          \
#                             CLEAR_BIT((__HANDLE__)->Instance->FCR, (__INTERRUPT__)); \
#                             LCD_WaitForSynchro(__HANDLE__);                          \
#                            }while(0)
# fun define __HAL_LCD_GET_IT_SOURCE(__HANDLE__, __IT__) (((__HANDLE__)->Instance->FCR) & (__IT__))
# fun define __HAL_LCD_GET_FLAG(__HANDLE__, __FLAG__)    (((__HANDLE__)->Instance->SR & (__FLAG__)) == (__FLAG__))
# fun define __HAL_LCD_CLEAR_FLAG(__HANDLE__, __FLAG__)  ((__HANDLE__)->Instance->CLR = (__FLAG__))
# struct LCD_InitTypeDef

class LCD_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Prescaler',	ctypes.c_uint32),
		('Divider',	ctypes.c_uint32),
		('Duty',	ctypes.c_uint32),
		('Bias',	ctypes.c_uint32),
		('VoltageSource',	ctypes.c_uint32),
		('Contrast',	ctypes.c_uint32),
		('DeadTime',	ctypes.c_uint32),
		('PulseOnDuration',	ctypes.c_uint32),
		('HighDrive',	ctypes.c_uint32),
		('BlinkMode',	ctypes.c_uint32),
		('BlinkFrequency',	ctypes.c_uint32),
		('MuxSegment',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LCD_HandleTypeDef
# struct LCD_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_lptim_ex.h : 

# empty define __STM32L0xx_HAL_LPTIM_EX_H
LPTIM_TRIGSOURCE_SOFTWARE = 0xFFFF
LPTIM_TRIGSOURCE_0 = 0x0
LPTIM_TRIGSOURCE_1 = 0x2000
LPTIM_TRIGSOURCE_2 = 0x4000
LPTIM_TRIGSOURCE_3 = 0x6000
LPTIM_TRIGSOURCE_4 = 0x8000
LPTIM_TRIGSOURCE_5 = 0xA000
LPTIM_TRIGSOURCE_6 = 0xC000
LPTIM_TRIGSOURCE_7 = 0xE000
# fun define IS_LPTIM_TRG_SOURCE(__TRIG__)           (((__TRIG__) == LPTIM_TRIGSOURCE_SOFTWARE) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_0) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_1) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_2) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_3) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_4) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_5) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_6) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_7))
# fun define IS_LPTIM_TRG_SOURCE(__TRIG__)           (((__TRIG__) == LPTIM_TRIGSOURCE_SOFTWARE) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_0) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_1) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_2) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_3) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_4) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_5))
# fun define IS_LPTIM_TRG_SOURCE(__TRIG__)           (((__TRIG__) == LPTIM_TRIGSOURCE_SOFTWARE) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_0) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_1) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_2) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_3) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_4) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_6) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_7))
# ----------------------------------------

# file stm32l0xx_hal_lptim.h : 

# Enum HAL_LPTIM_StateTypeDef
HAL_LPTIM_STATE_RESET = 0x0
HAL_LPTIM_STATE_READY = 0x1
HAL_LPTIM_STATE_BUSY = 0x2
HAL_LPTIM_STATE_TIMEOUT = 0x3
HAL_LPTIM_STATE_ERROR = 0x4
# Enum HAL_LPTIM_CallbackIDTypeDef
# Skip HAL_LPTIM_MSPINIT_CB_ID : no need parse
# Skip HAL_LPTIM_MSPDEINIT_CB_ID : no need parse
# Skip HAL_LPTIM_COMPARE_MATCH_CB_ID : no need parse
# Skip HAL_LPTIM_AUTORELOAD_MATCH_CB_ID : no need parse
# Skip HAL_LPTIM_TRIGGER_CB_ID : no need parse
# Skip HAL_LPTIM_COMPARE_WRITE_CB_ID : no need parse
# Skip HAL_LPTIM_AUTORELOAD_WRITE_CB_ID : no need parse
# Skip HAL_LPTIM_DIRECTION_UP_CB_ID : no need parse
# Skip HAL_LPTIM_DIRECTION_DOWN_CB_ID : no need parse
# empty define STM32L0xx_HAL_LPTIM_H
LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT = 0x20000000
LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC = 0x0
LPTIM_CLOCKSOURCE_ULPTIM = 0x1
LPTIM_PRESCALER_DIV1 = 0x0
LPTIM_PRESCALER_DIV2 = 0x200
LPTIM_PRESCALER_DIV4 = 0x400
LPTIM_PRESCALER_DIV8 = 0x600
LPTIM_PRESCALER_DIV16 = 0x800
LPTIM_PRESCALER_DIV32 = 0xA00
LPTIM_PRESCALER_DIV64 = 0xC00
LPTIM_PRESCALER_DIV128 = 0xE00
LPTIM_OUTPUTPOLARITY_HIGH = 0x0
LPTIM_OUTPUTPOLARITY_LOW = 0x200000
LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION = 0x0
LPTIM_CLOCKSAMPLETIME_2TRANSITIONS = 0x8
LPTIM_CLOCKSAMPLETIME_4TRANSITIONS = 0x10
LPTIM_CLOCKSAMPLETIME_8TRANSITIONS = 0x18
LPTIM_CLOCKPOLARITY_RISING = 0x0
LPTIM_CLOCKPOLARITY_FALLING = 0x2
LPTIM_CLOCKPOLARITY_RISING_FALLING = 0x4
LPTIM_TRIGSOURCE_SOFTWARE = 0xFFFF
LPTIM_TRIGSOURCE_0 = 0x0
LPTIM_TRIGSOURCE_1 = 0x2000
LPTIM_TRIGSOURCE_2 = 0x4000
LPTIM_TRIGSOURCE_3 = 0x6000
LPTIM_TRIGSOURCE_4 = 0x8000
LPTIM_TRIGSOURCE_5 = 0xA000
LPTIM_TRIGSOURCE_6 = 0xC000
LPTIM_TRIGSOURCE_7 = 0xE000
LPTIM_ACTIVEEDGE_RISING = 0x20000
LPTIM_ACTIVEEDGE_FALLING = 0x40000
LPTIM_ACTIVEEDGE_RISING_FALLING = 0x60000
LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION = 0x0
LPTIM_TRIGSAMPLETIME_2TRANSITIONS = 0x40
LPTIM_TRIGSAMPLETIME_4TRANSITIONS = 0x80
LPTIM_TRIGSAMPLETIME_8TRANSITIONS = 0xC0
LPTIM_UPDATE_IMMEDIATE = 0x0
LPTIM_UPDATE_ENDOFPERIOD = 0x400000
LPTIM_COUNTERSOURCE_INTERNAL = 0x0
LPTIM_COUNTERSOURCE_EXTERNAL = 0x800000
LPTIM_FLAG_DOWN = 0x40
LPTIM_FLAG_UP = 0x20
LPTIM_FLAG_ARROK = 0x10
LPTIM_FLAG_CMPOK = 0x8
LPTIM_FLAG_EXTTRIG = 0x4
LPTIM_FLAG_ARRM = 0x2
LPTIM_FLAG_CMPM = 0x1
LPTIM_IT_DOWN = 0x40
LPTIM_IT_UP = 0x20
LPTIM_IT_ARROK = 0x10
LPTIM_IT_CMPOK = 0x8
LPTIM_IT_EXTTRIG = 0x4
LPTIM_IT_ARRM = 0x2
LPTIM_IT_CMPM = 0x1
# fun define __HAL_LPTIM_RESET_HANDLE_STATE(__HANDLE__) do {                                                        \
#                                                      (__HANDLE__)->State             = HAL_LPTIM_STATE_RESET; \
#                                                      (__HANDLE__)->MspInitCallback   = NULL;                  \
#                                                      (__HANDLE__)->MspDeInitCallback = NULL;                  \
#                                                     } while(0)
# fun define __HAL_LPTIM_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_LPTIM_STATE_RESET)
# fun define __HAL_LPTIM_ENABLE(__HANDLE__)   ((__HANDLE__)->Instance->CR |= (LPTIM_CR_ENABLE))
# fun define __HAL_LPTIM_DISABLE(__HANDLE__)   LPTIM_Disable(__HANDLE__)
# fun define __HAL_LPTIM_START_CONTINUOUS(__HANDLE__)  ((__HANDLE__)->Instance->CR |=  LPTIM_CR_CNTSTRT)
# fun define __HAL_LPTIM_START_SINGLE(__HANDLE__)      ((__HANDLE__)->Instance->CR |=  LPTIM_CR_SNGSTRT)
# fun define __HAL_LPTIM_AUTORELOAD_SET(__HANDLE__ , __VALUE__)  ((__HANDLE__)->Instance->ARR =  (__VALUE__))
# fun define __HAL_LPTIM_COMPARE_SET(__HANDLE__ , __VALUE__)     ((__HANDLE__)->Instance->CMP =  (__VALUE__))
# fun define __HAL_LPTIM_GET_FLAG(__HANDLE__, __FLAG__)          (((__HANDLE__)->Instance->ISR &(__FLAG__)) == (__FLAG__))
# fun define __HAL_LPTIM_CLEAR_FLAG(__HANDLE__, __FLAG__)        ((__HANDLE__)->Instance->ICR  = (__FLAG__))
# fun define __HAL_LPTIM_ENABLE_IT(__HANDLE__, __INTERRUPT__)    ((__HANDLE__)->Instance->IER  |= (__INTERRUPT__))
# fun define __HAL_LPTIM_DISABLE_IT(__HANDLE__, __INTERRUPT__)   ((__HANDLE__)->Instance->IER  &= (~(__INTERRUPT__)))
# fun define __HAL_LPTIM_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->IER & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
# fun define __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_IT()       (EXTI->IMR |= LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT)
# fun define __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_IT()      (EXTI->IMR &= ~(LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT))
# fun define __HAL_LPTIM_WAKEUPTIMER_EXTI_ENABLE_EVENT()    (EXTI->EMR |= LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT)
# fun define __HAL_LPTIM_WAKEUPTIMER_EXTI_DISABLE_EVENT()   (EXTI->EMR &= ~(LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT))
# fun define IS_LPTIM_CLOCK_SOURCE(__SOURCE__)       (((__SOURCE__) == LPTIM_CLOCKSOURCE_ULPTIM) || \
#                                                 ((__SOURCE__) == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC))
# fun define IS_LPTIM_CLOCK_PRESCALER(__PRESCALER__) (((__PRESCALER__) ==  LPTIM_PRESCALER_DIV1  ) || \
#                                                 ((__PRESCALER__) ==  LPTIM_PRESCALER_DIV2  ) || \
#                                                 ((__PRESCALER__) ==  LPTIM_PRESCALER_DIV4  ) || \
#                                                 ((__PRESCALER__) ==  LPTIM_PRESCALER_DIV8  ) || \
#                                                 ((__PRESCALER__) ==  LPTIM_PRESCALER_DIV16 ) || \
#                                                 ((__PRESCALER__) ==  LPTIM_PRESCALER_DIV32 ) || \
#                                                 ((__PRESCALER__) ==  LPTIM_PRESCALER_DIV64 ) || \
#                                                 ((__PRESCALER__) ==  LPTIM_PRESCALER_DIV128))
# fun define IS_LPTIM_CLOCK_PRESCALERDIV1(__PRESCALER__) ((__PRESCALER__) ==  LPTIM_PRESCALER_DIV1)
# fun define IS_LPTIM_OUTPUT_POLARITY(__POLARITY__)  (((__POLARITY__) == LPTIM_OUTPUTPOLARITY_LOW ) || \
#                                                 ((__POLARITY__) == LPTIM_OUTPUTPOLARITY_HIGH))
# fun define IS_LPTIM_CLOCK_SAMPLE_TIME(__SAMPLETIME__) (((__SAMPLETIME__) == LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION) || \
#                                                    ((__SAMPLETIME__) == LPTIM_CLOCKSAMPLETIME_2TRANSITIONS)     || \
#                                                    ((__SAMPLETIME__) == LPTIM_CLOCKSAMPLETIME_4TRANSITIONS)     || \
#                                                    ((__SAMPLETIME__) == LPTIM_CLOCKSAMPLETIME_8TRANSITIONS))
# fun define IS_LPTIM_CLOCK_POLARITY(__POLARITY__)   (((__POLARITY__) == LPTIM_CLOCKPOLARITY_RISING)  || \
#                                                 ((__POLARITY__) == LPTIM_CLOCKPOLARITY_FALLING) || \
#                                                 ((__POLARITY__) == LPTIM_CLOCKPOLARITY_RISING_FALLING))
# fun define IS_LPTIM_TRG_SOURCE(__TRIG__)           (((__TRIG__) == LPTIM_TRIGSOURCE_SOFTWARE) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_0) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_1) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_2) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_3) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_4) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_5) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_6) || \
#                                                 ((__TRIG__) == LPTIM_TRIGSOURCE_7))
# fun define IS_LPTIM_EXT_TRG_POLARITY(__POLARITY__) (((__POLARITY__) == LPTIM_ACTIVEEDGE_RISING         ) || \
#                                                 ((__POLARITY__) == LPTIM_ACTIVEEDGE_FALLING        ) || \
#                                                 ((__POLARITY__) == LPTIM_ACTIVEEDGE_RISING_FALLING ))
# fun define IS_LPTIM_TRIG_SAMPLE_TIME(__SAMPLETIME__) (((__SAMPLETIME__) == LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION) || \
#                                                   ((__SAMPLETIME__) == LPTIM_TRIGSAMPLETIME_2TRANSITIONS    ) || \
#                                                   ((__SAMPLETIME__) == LPTIM_TRIGSAMPLETIME_4TRANSITIONS    ) || \
#                                                   ((__SAMPLETIME__) == LPTIM_TRIGSAMPLETIME_8TRANSITIONS    ))
# fun define IS_LPTIM_UPDATE_MODE(__MODE__)          (((__MODE__) == LPTIM_UPDATE_IMMEDIATE) || \
#                                                 ((__MODE__) == LPTIM_UPDATE_ENDOFPERIOD))
# fun define IS_LPTIM_COUNTER_SOURCE(__SOURCE__)     (((__SOURCE__) == LPTIM_COUNTERSOURCE_INTERNAL) || \
#                                                 ((__SOURCE__) == LPTIM_COUNTERSOURCE_EXTERNAL))
# fun define IS_LPTIM_AUTORELOAD(__AUTORELOAD__)     ((__AUTORELOAD__) <= 0x0000FFFFUL)
# fun define IS_LPTIM_COMPARE(__COMPARE__)           ((__COMPARE__) <= 0x0000FFFFUL)
# fun define IS_LPTIM_PERIOD(__PERIOD__)             ((__PERIOD__) <= 0x0000FFFFUL)
# fun define IS_LPTIM_PULSE(__PULSE__)               ((__PULSE__) <= 0x0000FFFFUL)
# Skip Instance : no need parse
# Skip Init : no need parse
# Skip Status : no need parse
# Skip Lock : no need parse
# Skip State : no need parse
# Skip MspInitCallback : no need parse
# Skip MspDeInitCallback : no need parse
# Skip CompareMatchCallback : no need parse
# Skip AutoReloadMatchCallback : no need parse
# Skip TriggerCallback : no need parse
# Skip CompareWriteCallback : no need parse
# Skip AutoReloadWriteCallback : no need parse
# Skip DirectionUpCallback : no need parse
# Skip DirectionDownCallback : no need parse
# struct LPTIM_ClockConfigTypeDef

class LPTIM_ClockConfigTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Source',	ctypes.c_uint32),
		('Prescaler',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LPTIM_ULPClockConfigTypeDef

class LPTIM_ULPClockConfigTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Polarity',	ctypes.c_uint32),
		('SampleTime',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LPTIM_TriggerConfigTypeDef

class LPTIM_TriggerConfigTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Source',	ctypes.c_uint32),
		('ActiveEdge',	ctypes.c_uint32),
		('SampleTime',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LPTIM_InitTypeDef
# struct LPTIM_InitTypeDef : field is class : Clock
# ----------------------------------------

# file stm32l0xx_hal_rcc_ex.h : 

# empty define __STM32L0xx_HAL_RCC_EX_H
RCC_CRS_IT_ERROR_MASK = 0x4
RCC_CRS_FLAG_ERROR_MASK = 0x700
# fun define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
#                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |  \
#                                                 RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1))
# fun define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
#                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |  \
#                                                 RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1 | RCC_PERIPHCLK_LCD))
# fun define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
#                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |  \
#                                                 RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1  | RCC_PERIPHCLK_I2C3 ))
# fun define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
#                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC  |  \
#                                                 RCC_PERIPHCLK_USB | RCC_PERIPHCLK_LPTIM1  | RCC_PERIPHCLK_I2C3 | \
#                                                 RCC_PERIPHCLK_LCD))
# fun define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= ( RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
#                                                  RCC_PERIPHCLK_I2C1   |  RCC_PERIPHCLK_RTC    | \
#                                                  RCC_PERIPHCLK_LPTIM1))
# fun define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
#                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |  \
#                                                 RCC_PERIPHCLK_LPTIM1))
# fun define IS_RCC_PERIPHCLOCK(__CLK__) ((__CLK__) <= (RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_USART2 | RCC_PERIPHCLK_LPUART1 | \
#                                                 RCC_PERIPHCLK_I2C1   | RCC_PERIPHCLK_I2C2 | RCC_PERIPHCLK_RTC       |  \
#                                                 RCC_PERIPHCLK_LPTIM1 | RCC_PERIPHCLK_I2C3))
# fun define IS_RCC_USART1CLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_USART1CLKSOURCE_PCLK2)  || \
#                                             ((__SOURCE__) == RCC_USART1CLKSOURCE_SYSCLK) || \
#                                             ((__SOURCE__) == RCC_USART1CLKSOURCE_LSE)    || \
#                                             ((__SOURCE__) == RCC_USART1CLKSOURCE_HSI))
# fun define IS_RCC_USART2CLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_USART2CLKSOURCE_PCLK1)  || \
#                                             ((__SOURCE__) == RCC_USART2CLKSOURCE_SYSCLK) || \
#                                             ((__SOURCE__) == RCC_USART2CLKSOURCE_LSE)    || \
#                                             ((__SOURCE__) == RCC_USART2CLKSOURCE_HSI))
# fun define IS_RCC_LPUART1CLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_LPUART1CLKSOURCE_PCLK1)  || \
#                                             ((__SOURCE__) == RCC_LPUART1CLKSOURCE_SYSCLK) || \
#                                             ((__SOURCE__) == RCC_LPUART1CLKSOURCE_LSE)    || \
#                                             ((__SOURCE__) == RCC_LPUART1CLKSOURCE_HSI))
# fun define IS_RCC_I2C1CLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_I2C1CLKSOURCE_PCLK1) || \
#                                          ((__SOURCE__) == RCC_I2C1CLKSOURCE_SYSCLK)|| \
#                                          ((__SOURCE__) == RCC_I2C1CLKSOURCE_HSI))
# fun define IS_RCC_I2C3CLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_I2C3CLKSOURCE_PCLK1) || \
#                                           ((__SOURCE__) == RCC_I2C3CLKSOURCE_SYSCLK)|| \
#                                           ((__SOURCE__) == RCC_I2C3CLKSOURCE_HSI))
# fun define IS_RCC_USBCLKSOURCE(__SOURCE__)  (((__SOURCE__) == RCC_USBCLKSOURCE_HSI48) || \
#                                          ((__SOURCE__) == RCC_USBCLKSOURCE_PLL))
# fun define IS_RCC_RNGCLKSOURCE(_SOURCE_)  (((_SOURCE_) == RCC_RNGCLKSOURCE_HSI48) || \
#                                      ((_SOURCE_) == RCC_RNGCLKSOURCE_PLLCLK))
# fun define IS_RCC_HSI48MCLKSOURCE(__HSI48MCLK__) (((__HSI48MCLK__) == RCC_HSI48M_PLL) || ((__HSI48MCLK__) == RCC_HSI48M_HSI48))
# fun define IS_RCC_LPTIMCLK(__LPTIMCLK_)     (((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_PCLK1) || \
#                                          ((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_LSI)   || \
#                                          ((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_HSI)   || \
#                                          ((__LPTIMCLK_) == RCC_LPTIM1CLKSOURCE_LSE))
# fun define IS_RCC_STOPWAKEUP_CLOCK(__SOURCE__) (((__SOURCE__) == RCC_STOP_WAKEUPCLOCK_MSI) || \
#                                             ((__SOURCE__) == RCC_STOP_WAKEUPCLOCK_HSI))
# fun define IS_RCC_LSE_DRIVE(__DRIVE__) (((__DRIVE__) == RCC_LSEDRIVE_LOW)        || ((__SOURCE__) == RCC_LSEDRIVE_MEDIUMLOW) || \
#                                     ((__DRIVE__) == RCC_LSEDRIVE_MEDIUMHIGH) || ((__SOURCE__) == RCC_LSEDRIVE_HIGH))
# fun define IS_RCC_CRS_SYNC_SOURCE(_SOURCE_) (((_SOURCE_) == RCC_CRS_SYNC_SOURCE_GPIO) || \
#                                          ((_SOURCE_) == RCC_CRS_SYNC_SOURCE_LSE)  || \
#                                          ((_SOURCE_) == RCC_CRS_SYNC_SOURCE_USB))
# fun define IS_RCC_CRS_SYNC_DIV(_DIV_) (((_DIV_) == RCC_CRS_SYNC_DIV1)  || ((_DIV_) == RCC_CRS_SYNC_DIV2)  || \
#                                    ((_DIV_) == RCC_CRS_SYNC_DIV4)  || ((_DIV_) == RCC_CRS_SYNC_DIV8)  || \
#                                    ((_DIV_) == RCC_CRS_SYNC_DIV16) || ((_DIV_) == RCC_CRS_SYNC_DIV32) || \
#                                    ((_DIV_) == RCC_CRS_SYNC_DIV64) || ((_DIV_) == RCC_CRS_SYNC_DIV128))
# fun define IS_RCC_CRS_SYNC_POLARITY(_POLARITY_) (((_POLARITY_) == RCC_CRS_SYNC_POLARITY_RISING) || \
#                                              ((_POLARITY_) == RCC_CRS_SYNC_POLARITY_FALLING))
# fun define IS_RCC_CRS_RELOADVALUE(_VALUE_) (((_VALUE_) <= 0xFFFFU))
# fun define IS_RCC_CRS_ERRORLIMIT(_VALUE_) (((_VALUE_) <= 0xFFU))
# fun define IS_RCC_CRS_HSI48CALIBRATION(_VALUE_) (((_VALUE_) <= 0x3FU))
# fun define IS_RCC_CRS_FREQERRORDIR(_DIR_) (((_DIR_) == RCC_CRS_FREQERRORDIR_UP) || \
#                                        ((_DIR_) == RCC_CRS_FREQERRORDIR_DOWN))
RCC_EXTI_LINE_LSECSS = 0x80000
RCC_PERIPHCLK_USART1 = 0x1
RCC_PERIPHCLK_USART2 = 0x2
RCC_PERIPHCLK_LPUART1 = 0x4
RCC_PERIPHCLK_I2C1 = 0x8
RCC_PERIPHCLK_I2C2 = 0x10
RCC_PERIPHCLK_RTC = 0x20
RCC_PERIPHCLK_USB = 0x40
RCC_PERIPHCLK_LPTIM1 = 0x80
RCC_PERIPHCLK_LCD = 0x800
# Skip RCC_PERIPHCLK_I2C3 : no need parse
RCC_USART1CLKSOURCE_PCLK2 = 0x0
RCC_USART1CLKSOURCE_SYSCLK = 0x1
RCC_USART1CLKSOURCE_HSI = 0x2
RCC_USART1CLKSOURCE_LSE = 0x3
RCC_USART2CLKSOURCE_PCLK1 = 0x0
RCC_USART2CLKSOURCE_SYSCLK = 0x4
RCC_USART2CLKSOURCE_HSI = 0x8
RCC_USART2CLKSOURCE_LSE = 0xC
RCC_LPUART1CLKSOURCE_PCLK1 = 0x0
RCC_LPUART1CLKSOURCE_SYSCLK = 0x400
RCC_LPUART1CLKSOURCE_HSI = 0x800
RCC_LPUART1CLKSOURCE_LSE = 0xC00
RCC_I2C1CLKSOURCE_PCLK1 = 0x0
RCC_I2C1CLKSOURCE_SYSCLK = 0x1000
RCC_I2C1CLKSOURCE_HSI = 0x2000
# Skip RCC_I2C3CLKSOURCE_PCLK1 : no need parse
# Skip RCC_I2C3CLKSOURCE_SYSCLK : no need parse
# Skip RCC_I2C3CLKSOURCE_HSI : no need parse
RCC_TIMPRES_DESACTIVATED = 0x0
RCC_TIMPRES_ACTIVATED = 0x1
RCC_USBCLKSOURCE_HSI48 = 0x4000000
RCC_USBCLKSOURCE_PLL = 0x0
RCC_RNGCLKSOURCE_HSI48 = 0x4000000
RCC_RNGCLKSOURCE_PLLCLK = 0x0
RCC_FLAG_HSI48 = 0x40000000
RCC_HSI48M_PLL = 0x0
RCC_HSI48M_HSI48 = 0x4000000
RCC_LPTIM1CLKSOURCE_PCLK1 = 0x0
RCC_LPTIM1CLKSOURCE_LSI = 0x40000
RCC_LPTIM1CLKSOURCE_HSI = 0x80000
RCC_LPTIM1CLKSOURCE_LSE = 0xC0000
RCC_STOP_WAKEUPCLOCK_MSI = 0x0
RCC_STOP_WAKEUPCLOCK_HSI = 0x8000
RCC_LSEDRIVE_LOW = 0x0
RCC_LSEDRIVE_MEDIUMLOW = 0x800
RCC_LSEDRIVE_MEDIUMHIGH = 0x1000
RCC_LSEDRIVE_HIGH = 0x1800
RCC_CRS_NONE = 0x0
RCC_CRS_TIMEOUT = 0x1
RCC_CRS_SYNCOK = 0x2
RCC_CRS_SYNCWARN = 0x4
RCC_CRS_SYNCERR = 0x8
RCC_CRS_SYNCMISS = 0x10
RCC_CRS_TRIMOVF = 0x20
RCC_CRS_SYNC_SOURCE_GPIO = 0x0
RCC_CRS_SYNC_SOURCE_LSE = 0x10000000
RCC_CRS_SYNC_SOURCE_USB = 0x20000000
RCC_CRS_SYNC_DIV1 = 0x0
RCC_CRS_SYNC_DIV2 = 0x1000000
RCC_CRS_SYNC_DIV4 = 0x2000000
RCC_CRS_SYNC_DIV8 = 0x3000000
RCC_CRS_SYNC_DIV16 = 0x4000000
RCC_CRS_SYNC_DIV32 = 0x5000000
RCC_CRS_SYNC_DIV64 = 0x6000000
RCC_CRS_SYNC_DIV128 = 0x7000000
RCC_CRS_SYNC_POLARITY_RISING = 0x0
RCC_CRS_SYNC_POLARITY_FALLING = 0x80000000
RCC_CRS_RELOADVALUE_DEFAULT = 0xBB7F
RCC_CRS_ERRORLIMIT_DEFAULT = 0x22
RCC_CRS_HSI48CALIBRATION_DEFAULT = 0x20
RCC_CRS_FREQERRORDIR_UP = 0x0
RCC_CRS_FREQERRORDIR_DOWN = 0x8000
RCC_CRS_IT_SYNCOK = 0x1
RCC_CRS_IT_SYNCWARN = 0x2
RCC_CRS_IT_ERR = 0x4
RCC_CRS_IT_ESYNC = 0x8
RCC_CRS_IT_SYNCERR = 0x4
RCC_CRS_IT_SYNCMISS = 0x4
RCC_CRS_IT_TRIMOVF = 0x4
RCC_CRS_FLAG_SYNCOK = 0x1
RCC_CRS_FLAG_SYNCWARN = 0x2
RCC_CRS_FLAG_ERR = 0x4
RCC_CRS_FLAG_ESYNC = 0x8
RCC_CRS_FLAG_SYNCERR = 0x100
RCC_CRS_FLAG_SYNCMISS = 0x200
RCC_CRS_FLAG_TRIMOVF = 0x400
# fun define __HAL_RCC_AES_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_CRYPEN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_CRYPEN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_AES_CLK_DISABLE()         CLEAR_BIT(RCC->AHBENR, (RCC_AHBENR_CRYPEN))
# fun define __HAL_RCC_AES_IS_CLK_ENABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_CRYPEN) != 0U)
# fun define __HAL_RCC_AES_IS_CLK_DISABLED()       (READ_BIT(RCC->AHBENR, RCC_AHBENR_CRYPEN) == 0U)
# fun define __HAL_RCC_TSC_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_TSC_CLK_DISABLE()            CLEAR_BIT(RCC->AHBENR, (RCC_AHBENR_TSCEN))
# fun define __HAL_RCC_TSC_IS_CLK_ENABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN) != 0U)
# fun define __HAL_RCC_TSC_IS_CLK_DISABLED()       (READ_BIT(RCC->AHBENR, RCC_AHBENR_TSCEN) == 0U)
# fun define __HAL_RCC_RNG_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_RNGEN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_RNGEN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_RNG_CLK_DISABLE()           CLEAR_BIT(RCC->AHBENR, (RCC_AHBENR_RNGEN))
# fun define __HAL_RCC_RNG_IS_CLK_ENABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_RNGEN) != 0U)
# fun define __HAL_RCC_RNG_IS_CLK_DISABLED()       (READ_BIT(RCC->AHBENR, RCC_AHBENR_RNGEN) == 0U)
# fun define __HAL_RCC_GPIOE_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOEEN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOEEN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_GPIOE_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR,(RCC_IOPENR_GPIOEEN))
# fun define __HAL_RCC_GPIOE_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOEEN) != 0U)
# fun define __HAL_RCC_GPIOE_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOEEN) == 0U)
# fun define __HAL_RCC_GPIOD_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIODEN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIODEN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_GPIOD_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR,(RCC_IOPENR_GPIODEN))
# fun define __HAL_RCC_GPIOD_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIODEN) != 0U)
# fun define __HAL_RCC_GPIOD_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIODEN) == 0U)
# fun define __HAL_RCC_USB_CLK_ENABLE()        SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USBEN))
# fun define __HAL_RCC_USB_CLK_DISABLE()       CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USBEN))
# fun define __HAL_RCC_USB_IS_CLK_ENABLED()        (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USBEN) != 0U)
# fun define __HAL_RCC_USB_IS_CLK_DISABLED()       (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USBEN) == 0U)
# fun define __HAL_RCC_CRS_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_CRSEN))
# fun define __HAL_RCC_CRS_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR,(RCC_APB1ENR_CRSEN))
# fun define __HAL_RCC_CRS_IS_CLK_ENABLED()        (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_CRSEN) != 0U)
# fun define __HAL_RCC_CRS_IS_CLK_DISABLED()       (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_CRSEN) == 0U)
# fun define __HAL_RCC_LCD_CLK_ENABLE()          SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LCDEN))
# fun define __HAL_RCC_LCD_CLK_DISABLE()         CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LCDEN))
# fun define __HAL_RCC_LCD_IS_CLK_ENABLED()        (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LCDEN) != 0U)
# fun define __HAL_RCC_LCD_IS_CLK_DISABLED()       (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LCDEN) == 0U)
# fun define __HAL_RCC_TIM2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
# fun define __HAL_RCC_TIM6_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM6EN))
# fun define __HAL_RCC_SPI2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_SPI2EN))
# fun define __HAL_RCC_USART2_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
# fun define __HAL_RCC_LPUART1_CLK_ENABLE() SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
# fun define __HAL_RCC_I2C1_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
# fun define __HAL_RCC_I2C2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))
# fun define __HAL_RCC_DAC_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_DACEN))
# fun define __HAL_RCC_LPTIM1_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
# fun define __HAL_RCC_TIM2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
# fun define __HAL_RCC_TIM6_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM6EN))
# fun define __HAL_RCC_SPI2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_SPI2EN))
# fun define __HAL_RCC_USART2_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
# fun define __HAL_RCC_LPUART1_CLK_DISABLE() CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
# fun define __HAL_RCC_I2C1_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
# fun define __HAL_RCC_I2C2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))
# fun define __HAL_RCC_DAC_CLK_DISABLE()     CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_DACEN))
# fun define __HAL_RCC_LPTIM1_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
# fun define __HAL_RCC_TIM2_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) != 0U)
# fun define __HAL_RCC_TIM6_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN) != 0U)
# fun define __HAL_RCC_SPI2_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN) != 0U)
# fun define __HAL_RCC_USART2_IS_CLK_ENABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) != 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) != 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) != 0U)
# fun define __HAL_RCC_I2C2_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN) != 0U)
# fun define __HAL_RCC_DAC_IS_CLK_ENABLED()      (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN) != 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_ENABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) != 0U)
# fun define __HAL_RCC_TIM2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) == 0U)
# fun define __HAL_RCC_TIM6_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN) == 0U)
# fun define __HAL_RCC_SPI2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN) == 0U)
# fun define __HAL_RCC_USART2_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) == 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_DISABLED() (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) == 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) == 0U)
# fun define __HAL_RCC_I2C2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN) == 0U)
# fun define __HAL_RCC_DAC_IS_CLK_DISABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN) == 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) == 0U)
# fun define __HAL_RCC_TIM2_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
# fun define __HAL_RCC_USART2_CLK_ENABLE()   SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
# fun define __HAL_RCC_LPUART1_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
# fun define __HAL_RCC_I2C1_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
# fun define __HAL_RCC_LPTIM1_CLK_ENABLE()   SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
# fun define __HAL_RCC_TIM2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
# fun define __HAL_RCC_USART2_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
# fun define __HAL_RCC_LPUART1_CLK_DISABLE() CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
# fun define __HAL_RCC_I2C1_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
# fun define __HAL_RCC_LPTIM1_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
# fun define __HAL_RCC_TIM2_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) != 0U)
# fun define __HAL_RCC_USART2_IS_CLK_ENABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) != 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) != 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) != 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_ENABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) != 0U)
# fun define __HAL_RCC_TIM2_IS_CLK_DISABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) == 0U)
# fun define __HAL_RCC_USART2_IS_CLK_DISABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) == 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) == 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_DISABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) == 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_DISABLED()   (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) == 0U)
# fun define __HAL_RCC_TIM2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
# fun define __HAL_RCC_TIM3_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM3EN))
# fun define __HAL_RCC_TIM6_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM6EN))
# fun define __HAL_RCC_TIM7_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM7EN))
# fun define __HAL_RCC_SPI2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_SPI2EN))
# fun define __HAL_RCC_USART2_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
# fun define __HAL_RCC_USART4_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART4EN))
# fun define __HAL_RCC_USART5_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART5EN))
# fun define __HAL_RCC_LPUART1_CLK_ENABLE() SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
# fun define __HAL_RCC_I2C1_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
# fun define __HAL_RCC_I2C2_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))
# fun define __HAL_RCC_I2C3_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C3EN))
# fun define __HAL_RCC_DAC_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_DACEN))
# fun define __HAL_RCC_LPTIM1_CLK_ENABLE()  SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
# fun define __HAL_RCC_TIM2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM2EN))
# fun define __HAL_RCC_TIM3_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM3EN))
# fun define __HAL_RCC_TIM6_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM6EN))
# fun define __HAL_RCC_TIM7_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_TIM7EN))
# fun define __HAL_RCC_SPI2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_SPI2EN))
# fun define __HAL_RCC_USART2_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART2EN))
# fun define __HAL_RCC_USART4_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART4EN))
# fun define __HAL_RCC_USART5_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_USART5EN))
# fun define __HAL_RCC_LPUART1_CLK_DISABLE() CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPUART1EN))
# fun define __HAL_RCC_I2C1_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN))
# fun define __HAL_RCC_I2C2_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C2EN))
# fun define __HAL_RCC_I2C3_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C3EN))
# fun define __HAL_RCC_DAC_CLK_DISABLE()     CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_DACEN))
# fun define __HAL_RCC_LPTIM1_CLK_DISABLE()  CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_LPTIM1EN))
# fun define __HAL_RCC_TIM2_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) != 0U)
# fun define __HAL_RCC_TIM3_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN) != 0U)
# fun define __HAL_RCC_TIM6_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN) != 0U)
# fun define __HAL_RCC_TIM7_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM7EN) != 0U)
# fun define __HAL_RCC_SPI2_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN) != 0U)
# fun define __HAL_RCC_USART2_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) != 0U)
# fun define __HAL_RCC_USART4_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART4EN) != 0U)
# fun define __HAL_RCC_USART5_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART5EN) != 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_ENABLED() (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) != 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) != 0U)
# fun define __HAL_RCC_I2C2_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN) != 0U)
# fun define __HAL_RCC_I2C3_IS_CLK_ENABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C3EN) != 0U)
# fun define __HAL_RCC_DAC_IS_CLK_ENABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN) != 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_ENABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) != 0U)
# fun define __HAL_RCC_TIM2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM2EN) == 0U)
# fun define __HAL_RCC_TIM3_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM3EN) == 0U)
# fun define __HAL_RCC_TIM6_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM6EN) == 0U)
# fun define __HAL_RCC_TIM7_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_TIM7EN) == 0U)
# fun define __HAL_RCC_SPI2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_SPI2EN) == 0U)
# fun define __HAL_RCC_USART2_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART2EN) == 0U)
# fun define __HAL_RCC_USART4_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART4EN) == 0U)
# fun define __HAL_RCC_USART5_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_USART5EN) == 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_DISABLED() (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPUART1EN) == 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C1EN) == 0U)
# fun define __HAL_RCC_I2C2_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C2EN) == 0U)
# fun define __HAL_RCC_I2C3_IS_CLK_DISABLED()    (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_I2C3EN) == 0U)
# fun define __HAL_RCC_DAC_IS_CLK_DISABLED()     (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_DACEN) == 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_DISABLED()  (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_LPTIM1EN) == 0U)
# fun define __HAL_RCC_TIM21_CLK_ENABLE()    SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_TIM21EN))
# fun define __HAL_RCC_TIM22_CLK_ENABLE()    SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_TIM22EN))
# fun define __HAL_RCC_ADC1_CLK_ENABLE()     SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_ADC1EN))
# fun define __HAL_RCC_SPI1_CLK_ENABLE()     SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_SPI1EN))
# fun define __HAL_RCC_USART1_CLK_ENABLE()   SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_USART1EN))
# fun define __HAL_RCC_TIM21_CLK_DISABLE()    CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_TIM21EN))
# fun define __HAL_RCC_TIM22_CLK_DISABLE()    CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_TIM22EN))
# fun define __HAL_RCC_ADC1_CLK_DISABLE()     CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_ADC1EN))
# fun define __HAL_RCC_SPI1_CLK_DISABLE()     CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_SPI1EN))
# fun define __HAL_RCC_USART1_CLK_DISABLE()   CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_USART1EN))
# fun define __HAL_RCC_FIREWALL_CLK_ENABLE()  SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_MIFIEN))
# fun define __HAL_RCC_FIREWALL_CLK_DISABLE() CLEAR_BIT(RCC->APB2ENR,  (RCC_APB2ENR_MIFIEN))
# fun define __HAL_RCC_TIM21_IS_CLK_ENABLED()    (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM21EN) != 0U)
# fun define __HAL_RCC_TIM22_IS_CLK_ENABLED()    (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_TIM22EN) != 0U)
# fun define __HAL_RCC_ADC1_IS_CLK_ENABLED()     (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_ADC1EN) != 0U)
# fun define __HAL_RCC_SPI1_IS_CLK_ENABLED()     (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SPI1EN) != 0U)
# fun define __HAL_RCC_USART1_IS_CLK_ENABLED()   (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_USART1EN) != 0U)
# fun define __HAL_RCC_TIM21_IS_CLK_DISABLED()    (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_TIM21EN) == 0U)
# fun define __HAL_RCC_TIM22_IS_CLK_DISABLED()    (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_TIM22EN) == 0U)
# fun define __HAL_RCC_ADC1_IS_CLK_DISABLED()     (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_ADC1EN) == 0U)
# fun define __HAL_RCC_SPI1_IS_CLK_DISABLED()     (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_SPI1EN) == 0U)
# fun define __HAL_RCC_USART1_IS_CLK_DISABLED()   (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_USART1EN) == 0U)
# fun define __HAL_RCC_FIREWALL_IS_CLK_ENABLED()  (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_MIFIEN) != 0U)
# fun define __HAL_RCC_FIREWALL_IS_CLK_DISABLED() (READ_BIT(RCC->APB2ENR,  (RCC_APB2ENR_MIFIEN) == 0U)
# fun define __HAL_RCC_AES_FORCE_RESET()     SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_CRYPRST))
# fun define __HAL_RCC_AES_RELEASE_RESET()   CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_CRYPRST))
# fun define __HAL_RCC_TSC_FORCE_RESET()        SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_TSCRST))
# fun define __HAL_RCC_TSC_RELEASE_RESET()      CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_TSCRST))
# fun define __HAL_RCC_RNG_FORCE_RESET()        SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_RNGRST))
# fun define __HAL_RCC_RNG_RELEASE_RESET()      CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_RNGRST))
# fun define __HAL_RCC_GPIOE_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOERST))
# fun define __HAL_RCC_GPIOE_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR,(RCC_IOPRSTR_GPIOERST))
# fun define __HAL_RCC_GPIOD_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIODRST))
# fun define __HAL_RCC_GPIOD_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR,(RCC_IOPRSTR_GPIODRST))
# fun define __HAL_RCC_TIM2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
# fun define __HAL_RCC_TIM6_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM6RST))
# fun define __HAL_RCC_LPTIM1_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
# fun define __HAL_RCC_I2C1_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
# fun define __HAL_RCC_I2C2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C2RST))
# fun define __HAL_RCC_USART2_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
# fun define __HAL_RCC_LPUART1_FORCE_RESET()  SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
# fun define __HAL_RCC_SPI2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_SPI2RST))
# fun define __HAL_RCC_DAC_FORCE_RESET()      SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_DACRST))
# fun define __HAL_RCC_TIM2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
# fun define __HAL_RCC_TIM6_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM6RST))
# fun define __HAL_RCC_LPTIM1_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
# fun define __HAL_RCC_I2C1_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
# fun define __HAL_RCC_I2C2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C2RST))
# fun define __HAL_RCC_USART2_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
# fun define __HAL_RCC_LPUART1_RELEASE_RESET()  CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
# fun define __HAL_RCC_SPI2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_SPI2RST))
# fun define __HAL_RCC_DAC_RELEASE_RESET()      CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_DACRST))
# fun define __HAL_RCC_TIM2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
# fun define __HAL_RCC_LPTIM1_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
# fun define __HAL_RCC_I2C1_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
# fun define __HAL_RCC_USART2_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
# fun define __HAL_RCC_LPUART1_FORCE_RESET()  SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
# fun define __HAL_RCC_TIM2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
# fun define __HAL_RCC_LPTIM1_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
# fun define __HAL_RCC_I2C1_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
# fun define __HAL_RCC_USART2_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
# fun define __HAL_RCC_LPUART1_RELEASE_RESET()  CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
# fun define __HAL_RCC_TIM2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
# fun define __HAL_RCC_TIM3_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM3RST))
# fun define __HAL_RCC_TIM6_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM6RST))
# fun define __HAL_RCC_TIM7_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM7RST))
# fun define __HAL_RCC_LPTIM1_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
# fun define __HAL_RCC_I2C1_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
# fun define __HAL_RCC_I2C2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C2RST))
# fun define __HAL_RCC_I2C3_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C3RST))
# fun define __HAL_RCC_USART2_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
# fun define __HAL_RCC_USART4_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART4RST))
# fun define __HAL_RCC_USART5_FORCE_RESET()   SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART5RST))
# fun define __HAL_RCC_LPUART1_FORCE_RESET()  SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
# fun define __HAL_RCC_SPI2_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_SPI2RST))
# fun define __HAL_RCC_DAC_FORCE_RESET()      SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_DACRST))
# fun define __HAL_RCC_TIM2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM2RST))
# fun define __HAL_RCC_TIM3_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM3RST))
# fun define __HAL_RCC_TIM6_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM6RST))
# fun define __HAL_RCC_TIM7_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_TIM7RST))
# fun define __HAL_RCC_LPTIM1_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPTIM1RST))
# fun define __HAL_RCC_I2C1_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C1RST))
# fun define __HAL_RCC_I2C2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C2RST))
# fun define __HAL_RCC_I2C3_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_I2C3RST))
# fun define __HAL_RCC_USART2_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART2RST))
# fun define __HAL_RCC_USART4_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART4RST))
# fun define __HAL_RCC_USART5_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USART5RST))
# fun define __HAL_RCC_LPUART1_RELEASE_RESET()  CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LPUART1RST))
# fun define __HAL_RCC_SPI2_RELEASE_RESET()     CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_SPI2RST))
# fun define __HAL_RCC_DAC_RELEASE_RESET()      CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_DACRST))
# fun define __HAL_RCC_USB_FORCE_RESET()        SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USBRST))
# fun define __HAL_RCC_USB_RELEASE_RESET()      CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_USBRST))
# fun define __HAL_RCC_CRS_FORCE_RESET()        SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_CRSRST))
# fun define __HAL_RCC_CRS_RELEASE_RESET()      CLEAR_BIT(RCC->APB1RSTR,(RCC_APB1RSTR_CRSRST))
# fun define __HAL_RCC_LCD_FORCE_RESET()           SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LCDRST))
# fun define __HAL_RCC_LCD_RELEASE_RESET()         CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_LCDRST))
# fun define __HAL_RCC_USART1_FORCE_RESET()     SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_USART1RST))
# fun define __HAL_RCC_ADC1_FORCE_RESET()       SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_ADC1RST))
# fun define __HAL_RCC_SPI1_FORCE_RESET()       SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SPI1RST))
# fun define __HAL_RCC_TIM21_FORCE_RESET()      SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM21RST))
# fun define __HAL_RCC_TIM22_FORCE_RESET()      SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM22RST))
# fun define __HAL_RCC_USART1_RELEASE_RESET()     CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_USART1RST))
# fun define __HAL_RCC_ADC1_RELEASE_RESET()       CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_ADC1RST))
# fun define __HAL_RCC_SPI1_RELEASE_RESET()       CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SPI1RST))
# fun define __HAL_RCC_TIM21_RELEASE_RESET()      CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM21RST))
# fun define __HAL_RCC_TIM22_RELEASE_RESET()      CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM22RST))
# fun define __HAL_RCC_ADC1_FORCE_RESET()       SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_ADC1RST))
# fun define __HAL_RCC_SPI1_FORCE_RESET()       SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SPI1RST))
# fun define __HAL_RCC_TIM21_FORCE_RESET()      SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM21RST))
# fun define __HAL_RCC_TIM22_FORCE_RESET()      SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM22RST))
# fun define __HAL_RCC_ADC1_RELEASE_RESET()       CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_ADC1RST))
# fun define __HAL_RCC_SPI1_RELEASE_RESET()       CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SPI1RST))
# fun define __HAL_RCC_TIM21_RELEASE_RESET()      CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM21RST))
# fun define __HAL_RCC_TIM22_RELEASE_RESET()      CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_TIM22RST))
# fun define __HAL_RCC_TSC_CLK_SLEEP_ENABLE()           SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_TSCSMEN))
# fun define __HAL_RCC_RNG_CLK_SLEEP_ENABLE()           SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_RNGSMEN))
# fun define __HAL_RCC_TSC_CLK_SLEEP_DISABLE()          CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_TSCSMEN))
# fun define __HAL_RCC_RNG_CLK_SLEEP_DISABLE()          CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_RNGSMEN))
# fun define __HAL_RCC_TSC_IS_CLK_SLEEP_ENABLED()      (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_TSCSMEN) != 0U)
# fun define __HAL_RCC_RNG_IS_CLK_SLEEP_ENABLED()      (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_RNGSMEN) != 0U)
# fun define __HAL_RCC_TSC_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_TSCSMEN) == 0U)
# fun define __HAL_RCC_RNG_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_RNGSMEN) == 0U)
# fun define __HAL_RCC_AES_CLK_SLEEP_ENABLE()          SET_BIT(RCC->AHBLPENR, (RCC_AHBSMENR_CRYPSMEN))
# fun define __HAL_RCC_AES_CLK_SLEEP_DISABLE()         CLEAR_BIT(RCC->AHBLPENR, (RCC_AHBSMENR_CRYPSMEN))
# fun define __HAL_RCC_AES_IS_CLK_SLEEP_ENABLED()      (READ_BIT(RCC->AHBLPENR, RCC_AHBSMENR_CRYPSMEN) != 0U)
# fun define __HAL_RCC_AES_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->AHBLPENR, RCC_AHBSMENR_CRYPSMEN) == 0U)
# fun define __HAL_RCC_GPIOE_CLK_SLEEP_ENABLE()         SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOESMEN))
# fun define __HAL_RCC_GPIOE_CLK_SLEEP_DISABLE()        CLEAR_BIT(RCC->IOPSMENR,(RCC_IOPSMENR_GPIOESMEN))
# fun define __HAL_RCC_GPIOE_IS_CLK_SLEEP_ENABLED()        (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOESMEN) != 0U)
# fun define __HAL_RCC_GPIOE_IS_CLK_SLEEP_DISABLED()       (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOESMEN) == 0U)
# fun define __HAL_RCC_GPIOD_CLK_SLEEP_ENABLE()    SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIODSMEN))
# fun define __HAL_RCC_GPIOD_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->IOPSMENR,(RCC_IOPSMENR_GPIODSMEN))
# fun define __HAL_RCC_GPIOD_IS_CLK_SLEEP_ENABLED()        (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIODSMEN) != 0U)
# fun define __HAL_RCC_GPIOD_IS_CLK_SLEEP_DISABLED()       (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIODSMEN) == 0U)
# fun define __HAL_RCC_TIM2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
# fun define __HAL_RCC_TIM6_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM6SMEN))
# fun define __HAL_RCC_SPI2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_SPI2SMEN))
# fun define __HAL_RCC_USART2_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
# fun define __HAL_RCC_LPUART1_CLK_SLEEP_ENABLE() SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
# fun define __HAL_RCC_I2C1_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
# fun define __HAL_RCC_I2C2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C2SMEN))
# fun define __HAL_RCC_DAC_CLK_SLEEP_ENABLE()     SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_DACSMEN))
# fun define __HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
# fun define __HAL_RCC_TIM2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
# fun define __HAL_RCC_TIM6_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM6SMEN))
# fun define __HAL_RCC_SPI2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_SPI2SMEN))
# fun define __HAL_RCC_USART2_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
# fun define __HAL_RCC_LPUART1_CLK_SLEEP_DISABLE() CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
# fun define __HAL_RCC_I2C1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
# fun define __HAL_RCC_I2C2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C2SMEN))
# fun define __HAL_RCC_DAC_CLK_SLEEP_DISABLE()     CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_DACSMEN))
# fun define __HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
# fun define __HAL_RCC_TIM2_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) != 0U)
# fun define __HAL_RCC_TIM6_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM6SMEN) != 0U)
# fun define __HAL_RCC_SPI2_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_SPI2SMEN) != 0U)
# fun define __HAL_RCC_USART2_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) != 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) != 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) != 0U)
# fun define __HAL_RCC_I2C2_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C2SMEN) != 0U)
# fun define __HAL_RCC_DAC_IS_CLK_SLEEP_ENABLED()      (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_DACSMEN) != 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) != 0U)
# fun define __HAL_RCC_TIM2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) == 0U)
# fun define __HAL_RCC_TIM6_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM6SMEN) == 0U)
# fun define __HAL_RCC_SPI2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_SPI2SMEN) == 0U)
# fun define __HAL_RCC_USART2_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) == 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_SLEEP_DISABLED() (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) == 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) == 0U)
# fun define __HAL_RCC_I2C2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C2SMEN) == 0U)
# fun define __HAL_RCC_DAC_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_DACSMEN) == 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) == 0U)
# fun define __HAL_RCC_TIM2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
# fun define __HAL_RCC_TIM3_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM3SMEN))
# fun define __HAL_RCC_TIM6_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM6SMEN))
# fun define __HAL_RCC_TIM7_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM7SMEN))
# fun define __HAL_RCC_SPI2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_SPI2SMEN))
# fun define __HAL_RCC_USART2_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
# fun define __HAL_RCC_USART4_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART4SMEN))
# fun define __HAL_RCC_USART5_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART5SMEN))
# fun define __HAL_RCC_LPUART1_CLK_SLEEP_ENABLE() SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
# fun define __HAL_RCC_I2C1_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
# fun define __HAL_RCC_I2C2_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C2SMEN))
# fun define __HAL_RCC_I2C3_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C3SMEN))
# fun define __HAL_RCC_DAC_CLK_SLEEP_ENABLE()     SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_DACSMEN))
# fun define __HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
# fun define __HAL_RCC_TIM2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
# fun define __HAL_RCC_TIM3_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM3SMEN))
# fun define __HAL_RCC_TIM6_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM6SMEN))
# fun define __HAL_RCC_TIM7_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM7SMEN))
# fun define __HAL_RCC_SPI2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_SPI2SMEN))
# fun define __HAL_RCC_USART2_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
# fun define __HAL_RCC_USART4_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART4SMEN))
# fun define __HAL_RCC_USART5_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART5SMEN))
# fun define __HAL_RCC_LPUART1_CLK_SLEEP_DISABLE() CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
# fun define __HAL_RCC_I2C1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
# fun define __HAL_RCC_I2C2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C2SMEN))
# fun define __HAL_RCC_I2C3_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C3SMEN))
# fun define __HAL_RCC_DAC_CLK_SLEEP_DISABLE()     CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_DACSMEN))
# fun define __HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
# fun define __HAL_RCC_TIM2_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) != 0U)
# fun define __HAL_RCC_TIM3_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM3SMEN) != 0U)
# fun define __HAL_RCC_TIM6_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM6SMEN) != 0U)
# fun define __HAL_RCC_TIM7_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM7SMEN) != 0U)
# fun define __HAL_RCC_SPI2_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_SPI2SMEN) != 0U)
# fun define __HAL_RCC_USART2_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) != 0U)
# fun define __HAL_RCC_USART4_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART4SMEN) != 0U)
# fun define __HAL_RCC_USART5_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART5SMEN) != 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_SLEEP_ENABLED() (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) != 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) != 0U)
# fun define __HAL_RCC_I2C2_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C2SMEN) != 0U)
# fun define __HAL_RCC_I2C3_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C3SMEN) != 0U)
# fun define __HAL_RCC_DAC_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_DACSMEN) != 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) != 0U)
# fun define __HAL_RCC_TIM2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) == 0U)
# fun define __HAL_RCC_TIM3_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM3SMEN) == 0U)
# fun define __HAL_RCC_TIM6_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM6SMEN) == 0U)
# fun define __HAL_RCC_TIM7_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM7SMEN) == 0U)
# fun define __HAL_RCC_SPI2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_SPI2SMEN) == 0U)
# fun define __HAL_RCC_USART2_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) == 0U)
# fun define __HAL_RCC_USART4_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART4SMEN) == 0U)
# fun define __HAL_RCC_USART5_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART5SMEN) == 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_SLEEP_DISABLED() (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) == 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) == 0U)
# fun define __HAL_RCC_I2C2_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C2SMEN) == 0U)
# fun define __HAL_RCC_I2C3_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C3SMEN) == 0U)
# fun define __HAL_RCC_DAC_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_DACSMEN) == 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) == 0U)
# fun define __HAL_RCC_TIM2_CLK_SLEEP_ENABLE()     SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
# fun define __HAL_RCC_USART2_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
# fun define __HAL_RCC_LPUART1_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
# fun define __HAL_RCC_I2C1_CLK_SLEEP_ENABLE()     SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
# fun define __HAL_RCC_LPTIM1_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
# fun define __HAL_RCC_TIM2_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_TIM2SMEN))
# fun define __HAL_RCC_USART2_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USART2SMEN))
# fun define __HAL_RCC_LPUART1_CLK_SLEEP_DISABLE() CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPUART1SMEN))
# fun define __HAL_RCC_I2C1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_I2C1SMEN))
# fun define __HAL_RCC_LPTIM1_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LPTIM1SMEN))
# fun define __HAL_RCC_TIM2_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) != 0U)
# fun define __HAL_RCC_USART2_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) != 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_SLEEP_ENABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) != 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) != 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) != 0U)
# fun define __HAL_RCC_TIM2_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_TIM2SMEN) == 0U)
# fun define __HAL_RCC_USART2_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USART2SMEN) == 0U)
# fun define __HAL_RCC_LPUART1_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPUART1SMEN) == 0U)
# fun define __HAL_RCC_I2C1_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_I2C1SMEN) == 0U)
# fun define __HAL_RCC_LPTIM1_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LPTIM1SMEN) == 0U)
# fun define __HAL_RCC_USB_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USBSMEN))
# fun define __HAL_RCC_USB_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_USBSMEN))
# fun define __HAL_RCC_CRS_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_CRSSMEN))
# fun define __HAL_RCC_CRS_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_CRSSMEN))
# fun define __HAL_RCC_USB_IS_CLK_SLEEP_ENABLED()        (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USBSMEN) != 0U)
# fun define __HAL_RCC_USB_IS_CLK_SLEEP_DISABLED()       (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_USBSMEN) == 0U)
# fun define __HAL_RCC_CRS_IS_CLK_SLEEP_ENABLED()        (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_CRSSMEN) != 0U)
# fun define __HAL_RCC_CRS_IS_CLK_SLEEP_DISABLED()       (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_CRSSMEN) == 0U)
# fun define __HAL_RCC_LCD_CLK_SLEEP_ENABLE()      SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LCDSMEN))
# fun define __HAL_RCC_LCD_CLK_SLEEP_DISABLE()     CLEAR_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_LCDSMEN))
# fun define __HAL_RCC_LCD_IS_CLK_SLEEP_ENABLED()        (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LCDSMEN) != 0U)
# fun define __HAL_RCC_LCD_IS_CLK_SLEEP_DISABLED()       (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_LCDSMEN) == 0U)
# fun define __HAL_RCC_TIM21_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_TIM21SMEN))
# fun define __HAL_RCC_TIM22_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_TIM22SMEN))
# fun define __HAL_RCC_ADC1_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_ADC1SMEN))
# fun define __HAL_RCC_SPI1_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_SPI1SMEN))
# fun define __HAL_RCC_USART1_CLK_SLEEP_ENABLE()  SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_USART1SMEN))
# fun define __HAL_RCC_TIM21_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_TIM21SMEN))
# fun define __HAL_RCC_TIM22_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_TIM22SMEN))
# fun define __HAL_RCC_ADC1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_ADC1SMEN))
# fun define __HAL_RCC_SPI1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_SPI1SMEN))
# fun define __HAL_RCC_USART1_CLK_SLEEP_DISABLE()  CLEAR_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_USART1SMEN))
# fun define __HAL_RCC_TIM21_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_TIM21SMEN) != 0U)
# fun define __HAL_RCC_TIM22_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_TIM22SMEN) != 0U)
# fun define __HAL_RCC_ADC1_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_ADC1SMEN) != 0U)
# fun define __HAL_RCC_SPI1_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_SPI1SMEN) != 0U)
# fun define __HAL_RCC_USART1_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_USART1SMEN) != 0U)
# fun define __HAL_RCC_TIM21_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_TIM21SMEN) == 0U)
# fun define __HAL_RCC_TIM22_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_TIM22SMEN) == 0U)
# fun define __HAL_RCC_ADC1_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_ADC1SMEN) == 0U)
# fun define __HAL_RCC_SPI1_IS_CLK_SLEEP_DISABLED()     (READ_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_SPI1SMEN) == 0U)
# fun define __HAL_RCC_USART1_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB2SMENR,  (RCC_APB2SMENR_USART1SMEN) == 0U)
# fun define __HAL_RCC_LSECSS_EXTI_ENABLE_IT()      SET_BIT(EXTI->IMR, RCC_EXTI_LINE_LSECSS)
# fun define __HAL_RCC_LSECSS_EXTI_DISABLE_IT()     CLEAR_BIT(EXTI->IMR, RCC_EXTI_LINE_LSECSS)
# fun define __HAL_RCC_LSECSS_EXTI_ENABLE_EVENT()   SET_BIT(EXTI->EMR, RCC_EXTI_LINE_LSECSS)
# fun define __HAL_RCC_LSECSS_EXTI_DISABLE_EVENT()  CLEAR_BIT(EXTI->EMR, RCC_EXTI_LINE_LSECSS)
# fun define __HAL_RCC_LSECSS_EXTI_ENABLE_FALLING_EDGE()  SET_BIT(EXTI->FTSR, RCC_EXTI_LINE_LSECSS)
# fun define __HAL_RCC_LSECSS_EXTI_DISABLE_FALLING_EDGE()  CLEAR_BIT(EXTI->FTSR, RCC_EXTI_LINE_LSECSS)
# fun define __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE()   SET_BIT(EXTI->RTSR, RCC_EXTI_LINE_LSECSS)
# fun define __HAL_RCC_LSECSS_EXTI_DISABLE_RISING_EDGE()  CLEAR_BIT(EXTI->RTSR, RCC_EXTI_LINE_LSECSS)
# fun define __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_FALLING_EDGE()  \
#  do {                                                      \
#    __HAL_RCC_LSECSS_EXTI_ENABLE_RISING_EDGE();             \
#    __HAL_RCC_LSECSS_EXTI_ENABLE_FALLING_EDGE();            \
#  } while(0)
# fun define __HAL_RCC_LSECSS_EXTI_DISABLE_RISING_FALLING_EDGE()  \
#  do {                                                       \
#    __HAL_RCC_LSECSS_EXTI_DISABLE_RISING_EDGE();             \
#    __HAL_RCC_LSECSS_EXTI_DISABLE_FALLING_EDGE();            \
#  } while(0)
# fun define __HAL_RCC_LSECSS_EXTI_GET_FLAG()       (EXTI->PR & (RCC_EXTI_LINE_LSECSS))
# fun define __HAL_RCC_LSECSS_EXTI_CLEAR_FLAG()     (EXTI->PR = (RCC_EXTI_LINE_LSECSS))
# fun define __HAL_RCC_LSECSS_EXTI_GENERATE_SWIT()  SET_BIT(EXTI->SWIER, RCC_EXTI_LINE_LSECSS)
# fun define __HAL_RCC_LCD_CONFIG(__LCD_CLKSOURCE__) __HAL_RCC_RTC_CONFIG(__LCD_CLKSOURCE__)
# fun define __HAL_RCC_GET_LCD_SOURCE()              __HAL_RCC_GET_RTC_SOURCE()
# fun define __HAL_RCC_GET_LCD_HSE_PRESCALER()      __HAL_RCC_GET_RTC_HSE_PRESCALER()
# fun define __HAL_RCC_I2C1_CONFIG(__I2C1_CLKSOURCE__) \
#                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2C1SEL, (uint32_t)(__I2C1_CLKSOURCE__))
# fun define __HAL_RCC_GET_I2C1_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_I2C1SEL)))
# fun define __HAL_RCC_I2C3_CONFIG(__I2C3_CLKSOURCE__) \
#                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2C3SEL, (uint32_t)(__I2C3_CLKSOURCE__))
# fun define __HAL_RCC_GET_I2C3_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_I2C3SEL)))
# fun define __HAL_RCC_USART1_CONFIG(__USART1_CLKSOURCE__) \
#                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART1SEL, (uint32_t)(__USART1_CLKSOURCE__))
# fun define __HAL_RCC_GET_USART1_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_USART1SEL)))
# fun define __HAL_RCC_USART2_CONFIG(__USART2_CLKSOURCE__) \
#                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_USART2SEL, (uint32_t)(__USART2_CLKSOURCE__))
# fun define __HAL_RCC_GET_USART2_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_USART2SEL)))
# fun define __HAL_RCC_LPUART1_CONFIG(__LPUART1_CLKSOURCE__) \
#                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, (uint32_t)(__LPUART1_CLKSOURCE__))
# fun define __HAL_RCC_GET_LPUART1_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_LPUART1SEL)))
# fun define __HAL_RCC_LPTIM1_CONFIG(__LPTIM1_CLKSOURCE__) \
#                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL, (uint32_t)(__LPTIM1_CLKSOURCE__))
# fun define __HAL_RCC_GET_LPTIM1_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_LPTIM1SEL)))
# fun define __HAL_RCC_USB_CONFIG(__USB_CLKSOURCE__) \
#                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_HSI48SEL, (uint32_t)(__USB_CLKSOURCE__))
# fun define __HAL_RCC_GET_USB_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_HSI48SEL)))
# fun define __HAL_RCC_RNG_CONFIG(__RNG_CLKSOURCE__) \
#                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_HSI48SEL, (uint32_t)(__RNG_CLKSOURCE__))
# fun define __HAL_RCC_GET_RNG_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_HSI48SEL)))
# fun define __HAL_RCC_HSI48M_CONFIG(__HSI48M_CLKSOURCE__) \
#                  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_HSI48SEL, (uint32_t)(__HSI48M_CLKSOURCE__))
# fun define __HAL_RCC_GET_HSI48M_SOURCE() ((uint32_t)(READ_BIT(RCC->CCIPR, RCC_CCIPR_HSI48SEL)))
# fun define __HAL_RCC_HSISTOP_ENABLE()  SET_BIT(RCC->CR, RCC_CR_HSIKERON)
# fun define __HAL_RCC_HSISTOP_DISABLE() CLEAR_BIT(RCC->CR, RCC_CR_HSIKERON)
# fun define __HAL_RCC_LSEDRIVE_CONFIG(__RCC_LSEDRIVE__) (MODIFY_REG(RCC->CSR,\
#        RCC_CSR_LSEDRV, (uint32_t)(__RCC_LSEDRIVE__) ))
# fun define __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(__RCC_STOPWUCLK__) (MODIFY_REG(RCC->CFGR,\
#        RCC_CFGR_STOPWUCK, (uint32_t)(__RCC_STOPWUCLK__) ))
# fun define __HAL_RCC_CRS_ENABLE_IT(__INTERRUPT__)   SET_BIT(CRS->CR, (__INTERRUPT__))
# fun define __HAL_RCC_CRS_DISABLE_IT(__INTERRUPT__)  CLEAR_BIT(CRS->CR,(__INTERRUPT__))
# fun define __HAL_RCC_CRS_GET_IT_SOURCE(__INTERRUPT__)     ((CRS->CR & (__INTERRUPT__))? SET : RESET)
# fun define __HAL_RCC_CRS_CLEAR_IT(__INTERRUPT__)  do { \
#                                                 if(((__INTERRUPT__) & RCC_CRS_IT_ERROR_MASK) != 0U) \
#                                                 { \
#                                                   WRITE_REG(CRS->ICR, CRS_ICR_ERRC | ((__INTERRUPT__) & ~RCC_CRS_IT_ERROR_MASK)); \
#                                                 } \
#                                                 else \
#                                                 { \
#                                                   WRITE_REG(CRS->ICR, (__INTERRUPT__)); \
#                                                 } \
#                                               } while(0)
# fun define __HAL_RCC_CRS_GET_FLAG(__FLAG__)  ((CRS->ISR & (__FLAG__)) == (__FLAG__))
# fun define __HAL_RCC_CRS_CLEAR_FLAG(__FLAG__)     do { \
#                                                 if(((__FLAG__) & RCC_CRS_FLAG_ERROR_MASK) != 0U) \
#                                                 { \
#                                                   WRITE_REG(CRS->ICR, CRS_ICR_ERRC | ((__FLAG__) & ~RCC_CRS_FLAG_ERROR_MASK)); \
#                                                 } \
#                                                 else \
#                                                 { \
#                                                   WRITE_REG(CRS->ICR, (__FLAG__)); \
#                                                 } \
#                                               } while(0)
# fun define __HAL_RCC_CRS_FREQ_ERROR_COUNTER_ENABLE() SET_BIT(CRS->CR, CRS_CR_CEN)
# fun define __HAL_RCC_CRS_FREQ_ERROR_COUNTER_DISABLE()  CLEAR_BIT(CRS->CR, CRS_CR_CEN)
# fun define __HAL_RCC_CRS_AUTOMATIC_CALIB_ENABLE()  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN)
# fun define __HAL_RCC_CRS_AUTOMATIC_CALIB_DISABLE()  CLEAR_BIT(CRS->CR, CRS_CR_AUTOTRIMEN)
# fun define __HAL_RCC_CRS_RELOADVALUE_CALCULATE(__FTARGET__, __FSYNC__)  (((__FTARGET__) / (__FSYNC__)) - 1)
# fun define __HAL_RCC_HSI_OUT_ENABLE()   SET_BIT(RCC->CR, RCC_CR_HSIOUTEN)
# fun define __HAL_RCC_HSI_OUT_DISABLE()  CLEAR_BIT(RCC->CR, RCC_CR_HSIOUTEN)
# fun define __HAL_RCC_HSI48_ENABLE()  do { SET_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);            \
#                                       SET_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN);       \
#                                       SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENREF_HSI48);  \
#                                  } while (0)
# fun define __HAL_RCC_HSI48_DISABLE()  do { CLEAR_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON);   \
#                                        CLEAR_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENREF_HSI48);  \
#                                   } while (0)
# fun define __HAL_RCC_GET_HSI48_STATE() \
#                  (((uint32_t)(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48ON)) != 0U) ? RCC_HSI48_ON : RCC_HSI48_OFF)
# fun define __HAL_RCC_HSI48M_DIV6_OUT_ENABLE()   SET_BIT(RCC->CR, RCC_CRRCR_HSI48DIV6OUTEN)
# fun define __HAL_RCC_HSI48M_DIV6_OUT_DISABLE()  CLEAR_BIT(RCC->CR, RCC_CRRCR_HSI48DIV6OUTEN)
# struct RCC_PeriphCLKInitTypeDef

class RCC_PeriphCLKInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('PeriphClockSelection',	ctypes.c_uint32),
		('RTCClockSelection',	ctypes.c_uint32),
		('LCDClockSelection',	ctypes.c_uint32),
		('Usart1ClockSelection',	ctypes.c_uint32),
		('Usart2ClockSelection',	ctypes.c_uint32),
		('Lpuart1ClockSelection',	ctypes.c_uint32),
		('I2c1ClockSelection',	ctypes.c_uint32),
		('LptimClockSelection',	ctypes.c_uint32),
		('UsbClockSelection',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct RCC_CRSInitTypeDef

class RCC_CRSInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Prescaler',	ctypes.c_uint32),
		('Source',	ctypes.c_uint32),
		('Polarity',	ctypes.c_uint32),
		('ReloadValue',	ctypes.c_uint32),
		('ErrorLimitValue',	ctypes.c_uint32),
		('HSI48CalibrationValue',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct RCC_CRSSynchroInfoTypeDef

class RCC_CRSSynchroInfoTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ReloadValue',	ctypes.c_uint32),
		('HSI48CalibrationValue',	ctypes.c_uint32),
		('FreqErrorCapture',	ctypes.c_uint32),
		('FreqErrorDirection',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_rcc.h : 

# empty define __STM32L0xx_HAL_RCC_H
RCC_DBP_TIMEOUT_VALUE = 0x64
RCC_LSE_TIMEOUT_VALUE = 0x1388
CLOCKSWITCH_TIMEOUT_VALUE = 0x1388
HSE_TIMEOUT_VALUE = 0x64
MSI_TIMEOUT_VALUE = 0x2
HSI_TIMEOUT_VALUE = 0x2
LSI_TIMEOUT_VALUE = 0x2
PLL_TIMEOUT_VALUE = 0x2
HSI48_TIMEOUT_VALUE = 0x2
RCC_OFFSET = 0x21000
RCC_CR_OFFSET = 0x21000
RCC_CFGR_OFFSET = 0x21008
RCC_CSR_OFFSET = 0x21074
RCC_CR_BYTE2_ADDRESS = 0x40023802
CIER_BYTE0_ADDRESS = 0x40021010
CR_REG_INDEX = 0x1
CSR_REG_INDEX = 0x2
CRRCR_REG_INDEX = 0x3
RCC_FLAG_MASK = 0x1F
# fun define IS_RCC_OSCILLATORTYPE(__OSCILLATOR__) (((__OSCILLATOR__) == RCC_OSCILLATORTYPE_NONE)                               || \
#                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSE)   == RCC_OSCILLATORTYPE_HSE)   || \
#                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSI)   == RCC_OSCILLATORTYPE_HSI)   || \
#                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48) || \
#                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSI)   == RCC_OSCILLATORTYPE_LSI)   || \
#                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSE)   == RCC_OSCILLATORTYPE_LSE)   || \
#                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_MSI)   == RCC_OSCILLATORTYPE_MSI))
# fun define IS_RCC_HSI48(__HSI48__) (((__HSI48__) == RCC_HSI48_OFF) || ((__HSI48__) == RCC_HSI48_ON))
# fun define IS_RCC_OSCILLATORTYPE(__OSCILLATOR__) (((__OSCILLATOR__) == RCC_OSCILLATORTYPE_NONE)                           || \
#                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE) || \
#                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI) || \
#                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI) || \
#                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE) || \
#                                               (((__OSCILLATOR__) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI))
# fun define IS_RCC_PLLSOURCE(__SOURCE__) (((__SOURCE__) == RCC_PLLSOURCE_HSI) || \
#                                      ((__SOURCE__) == RCC_PLLSOURCE_HSE))
# fun define IS_RCC_HSE(__HSE__) (((__HSE__) == RCC_HSE_OFF) || ((__HSE__) == RCC_HSE_ON) || \
#                             ((__HSE__) == RCC_HSE_BYPASS))
# fun define IS_RCC_LSE(__LSE__) (((__LSE__) == RCC_LSE_OFF) || ((__LSE__) == RCC_LSE_ON) || \
#                             ((__LSE__) == RCC_LSE_BYPASS))
# fun define IS_RCC_HSI(__HSI__) (((__HSI__) == RCC_HSI_OFF)  || ((__HSI__) == RCC_HSI_ON)     || \
#                             ((__HSI__) == RCC_HSI_DIV4) || ((__HSI__) == RCC_HSI_OUTEN)  || \
#                             ((__HSI__) == (RCC_HSI_OUTEN|RCC_HSI_ON)) || ((__HSI__) == (RCC_HSI_OUTEN|RCC_HSI_DIV4)))
# fun define IS_RCC_HSI(__HSI__) (((__HSI__) == RCC_HSI_OFF) || ((__HSI__) == RCC_HSI_ON) || \
#                             ((__HSI__) == RCC_HSI_DIV4))
# fun define IS_RCC_CALIBRATION_VALUE(__VALUE__) ((__VALUE__) <= 0x1FU)
# fun define IS_RCC_MSICALIBRATION_VALUE(__VALUE__) ((__VALUE__) <= 0xFFU)
# fun define IS_RCC_MSI_CLOCK_RANGE(__RANGE__)  (((__RANGE__) == RCC_MSIRANGE_0) || \
#                                            ((__RANGE__) == RCC_MSIRANGE_1) || \
#                                            ((__RANGE__) == RCC_MSIRANGE_2) || \
#                                            ((__RANGE__) == RCC_MSIRANGE_3) || \
#                                            ((__RANGE__) == RCC_MSIRANGE_4) || \
#                                            ((__RANGE__) == RCC_MSIRANGE_5) || \
#                                            ((__RANGE__) == RCC_MSIRANGE_6))
# fun define IS_RCC_LSI(__LSI__) (((__LSI__) == RCC_LSI_OFF) || ((__LSI__) == RCC_LSI_ON))
# fun define IS_RCC_MSI(__MSI__) (((__MSI__) == RCC_MSI_OFF) || ((__MSI__) == RCC_MSI_ON))
# fun define IS_RCC_PLL(__PLL__) (((__PLL__) == RCC_PLL_NONE) || ((__PLL__) == RCC_PLL_OFF) || \
#                             ((__PLL__) == RCC_PLL_ON))
# fun define IS_RCC_PLL_DIV(__DIV__) (((__DIV__) == RCC_PLL_DIV2) || \
#                                 ((__DIV__) == RCC_PLL_DIV3) || ((__DIV__) == RCC_PLL_DIV4))
# fun define IS_RCC_PLL_MUL(__MUL__) (((__MUL__) == RCC_PLL_MUL3)  || ((__MUL__) == RCC_PLL_MUL4)  || \
#                                 ((__MUL__) == RCC_PLL_MUL6)  || ((__MUL__) == RCC_PLL_MUL8)  || \
#                                 ((__MUL__) == RCC_PLL_MUL12) || ((__MUL__) == RCC_PLL_MUL16) || \
#                                 ((__MUL__) == RCC_PLL_MUL24) || ((__MUL__) == RCC_PLL_MUL32) || \
#                                 ((__MUL__) == RCC_PLL_MUL48))
# fun define IS_RCC_CLOCKTYPE(CLK) ((((CLK) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK) || \
#                               (((CLK) & RCC_CLOCKTYPE_HCLK)   == RCC_CLOCKTYPE_HCLK)   || \
#                               (((CLK) & RCC_CLOCKTYPE_PCLK1)  == RCC_CLOCKTYPE_PCLK1)  || \
#                               (((CLK) & RCC_CLOCKTYPE_PCLK2)  == RCC_CLOCKTYPE_PCLK2))
# fun define IS_RCC_SYSCLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_SYSCLKSOURCE_MSI) || \
#                                         ((__SOURCE__) == RCC_SYSCLKSOURCE_HSI) || \
#                                         ((__SOURCE__) == RCC_SYSCLKSOURCE_HSE) || \
#                                         ((__SOURCE__) == RCC_SYSCLKSOURCE_PLLCLK))
# fun define IS_RCC_SYSCLKSOURCE_STATUS(__SOURCE__) (((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_MSI) || \
#                                                ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_HSI) || \
#                                                ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_HSE) || \
#                                                ((__SOURCE__) == RCC_SYSCLKSOURCE_STATUS_PLLCLK))
# fun define IS_RCC_HCLK(__HCLK__) (((__HCLK__) == RCC_SYSCLK_DIV1) || ((__HCLK__) == RCC_SYSCLK_DIV2) || \
#                               ((__HCLK__) == RCC_SYSCLK_DIV4) || ((__HCLK__) == RCC_SYSCLK_DIV8) || \
#                               ((__HCLK__) == RCC_SYSCLK_DIV16) || ((__HCLK__) == RCC_SYSCLK_DIV64) || \
#                               ((__HCLK__) == RCC_SYSCLK_DIV128) || ((__HCLK__) == RCC_SYSCLK_DIV256) || \
#                               ((__HCLK__) == RCC_SYSCLK_DIV512))
# fun define IS_RCC_PCLK(__PCLK__) (((__PCLK__) == RCC_HCLK_DIV1) || ((__PCLK__) == RCC_HCLK_DIV2) || \
#                               ((__PCLK__) == RCC_HCLK_DIV4) || ((__PCLK__) == RCC_HCLK_DIV8) || \
#                               ((__PCLK__) == RCC_HCLK_DIV16))
# fun define IS_RCC_MCO(__MCO__) (((__MCO__) == RCC_MCO1) || ((__MCO__) == RCC_MCO2) || ((__MCO__) == RCC_MCO3))
# fun define IS_RCC_MCO(__MCO__) (((__MCO__) == RCC_MCO1) || ((__MCO__) == RCC_MCO2))
# fun define IS_RCC_MCODIV(__DIV__) (((__DIV__) == RCC_MCODIV_1) || ((__DIV__) == RCC_MCODIV_2) || \
#                                ((__DIV__) == RCC_MCODIV_4) || ((__DIV__) == RCC_MCODIV_8) || \
#                                ((__DIV__) == RCC_MCODIV_16))
# fun define IS_RCC_MCO1SOURCE(__SOURCE__) (((__SOURCE__) == RCC_MCO1SOURCE_NOCLOCK) || ((__SOURCE__) == RCC_MCO1SOURCE_SYSCLK) || \
#                                      ((__SOURCE__) == RCC_MCO1SOURCE_HSI)  || ((__SOURCE__) == RCC_MCO1SOURCE_MSI) || \
#                                      ((__SOURCE__) == RCC_MCO1SOURCE_HSE)  || ((__SOURCE__) == RCC_MCO1SOURCE_PLLCLK) || \
#                                      ((__SOURCE__) == RCC_MCO1SOURCE_LSI) || ((__SOURCE__) == RCC_MCO1SOURCE_LSE) || \
#                                      ((__SOURCE__) == RCC_MCO1SOURCE_HSI48))
# fun define IS_RCC_MCO1SOURCE(__SOURCE__) (((__SOURCE__) == RCC_MCO1SOURCE_NOCLOCK) || ((__SOURCE__) == RCC_MCO1SOURCE_SYSCLK) || \
#                                      ((__SOURCE__) == RCC_MCO1SOURCE_HSI)  || ((__SOURCE__) == RCC_MCO1SOURCE_MSI) || \
#                                      ((__SOURCE__) == RCC_MCO1SOURCE_HSE)  || ((__SOURCE__) == RCC_MCO1SOURCE_PLLCLK) || \
#                                      ((__SOURCE__) == RCC_MCO1SOURCE_LSI) || ((__SOURCE__) == RCC_MCO1SOURCE_LSE))
# fun define IS_RCC_RTCCLKSOURCE(__SOURCE__) (((__SOURCE__) == RCC_RTCCLKSOURCE_NO_CLK)   || \
#                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_LSE)      || \
#                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_LSI)      || \
#                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV2) || \
#                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV4) || \
#                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV8) || \
#                                         ((__SOURCE__) == RCC_RTCCLKSOURCE_HSE_DIV16))
RCC_PLLSOURCE_HSI = 0x0
RCC_PLLSOURCE_HSE = 0x10000
RCC_OSCILLATORTYPE_NONE = 0x0
RCC_OSCILLATORTYPE_HSE = 0x1
RCC_OSCILLATORTYPE_HSI = 0x2
RCC_OSCILLATORTYPE_LSE = 0x4
RCC_OSCILLATORTYPE_LSI = 0x8
RCC_OSCILLATORTYPE_MSI = 0x10
RCC_OSCILLATORTYPE_HSI48 = 0x20
RCC_HSE_OFF = 0x0
RCC_HSE_ON = 0x10000
RCC_HSE_BYPASS = 0x50000
RCC_LSE_OFF = 0x0
RCC_LSE_ON = 0x100
RCC_LSE_BYPASS = 0x500
RCC_HSI_OFF = 0x0
RCC_HSI_ON = 0x1
RCC_HSI_DIV4 = 0x9
# Skip RCC_HSI_OUTEN : no need parse
RCC_HSICALIBRATION_DEFAULT = 0x10
RCC_MSIRANGE_0 = 0x0
RCC_MSIRANGE_1 = 0x2000
RCC_MSIRANGE_2 = 0x4000
RCC_MSIRANGE_3 = 0x6000
RCC_MSIRANGE_4 = 0x8000
RCC_MSIRANGE_5 = 0xA000
RCC_MSIRANGE_6 = 0xC000
RCC_LSI_OFF = 0x0
RCC_LSI_ON = 0x1
RCC_MSI_OFF = 0x0
RCC_MSI_ON = 0x1
RCC_MSICALIBRATION_DEFAULT = 0x0
RCC_HSI48_OFF = 0x0
RCC_HSI48_ON = 0x1
RCC_PLL_NONE = 0x0
RCC_PLL_OFF = 0x1
RCC_PLL_ON = 0x2
RCC_CLOCKTYPE_SYSCLK = 0x1
RCC_CLOCKTYPE_HCLK = 0x2
RCC_CLOCKTYPE_PCLK1 = 0x4
RCC_CLOCKTYPE_PCLK2 = 0x8
RCC_SYSCLKSOURCE_MSI = 0x0
RCC_SYSCLKSOURCE_HSI = 0x1
RCC_SYSCLKSOURCE_HSE = 0x2
RCC_SYSCLKSOURCE_PLLCLK = 0x3
RCC_SYSCLKSOURCE_STATUS_MSI = 0x0
RCC_SYSCLKSOURCE_STATUS_HSI = 0x4
RCC_SYSCLKSOURCE_STATUS_HSE = 0x8
RCC_SYSCLKSOURCE_STATUS_PLLCLK = 0xC
RCC_SYSCLK_DIV1 = 0x0
RCC_SYSCLK_DIV2 = 0x80
RCC_SYSCLK_DIV4 = 0x90
RCC_SYSCLK_DIV8 = 0xA0
RCC_SYSCLK_DIV16 = 0xB0
RCC_SYSCLK_DIV64 = 0xC0
RCC_SYSCLK_DIV128 = 0xD0
RCC_SYSCLK_DIV256 = 0xE0
RCC_SYSCLK_DIV512 = 0xF0
RCC_HCLK_DIV1 = 0x0
RCC_HCLK_DIV2 = 0x400
RCC_HCLK_DIV4 = 0x500
RCC_HCLK_DIV8 = 0x600
RCC_HCLK_DIV16 = 0x700
RCC_RTC_HSE_DIV_2 = 0x0
RCC_RTC_HSE_DIV_4 = 0x100000
RCC_RTC_HSE_DIV_8 = 0x200000
RCC_RTC_HSE_DIV_16 = 0x300000
RCC_RTCCLKSOURCE_NO_CLK = 0x0
RCC_RTCCLKSOURCE_LSE = 0x10000
RCC_RTCCLKSOURCE_LSI = 0x20000
RCC_RTCCLKSOURCE_HSE_DIVX = 0x30000
RCC_RTCCLKSOURCE_HSE_DIV2 = 0x30000
RCC_RTCCLKSOURCE_HSE_DIV4 = 0x130000
RCC_RTCCLKSOURCE_HSE_DIV8 = 0x230000
RCC_RTCCLKSOURCE_HSE_DIV16 = 0x330000
RCC_PLL_DIV2 = 0x400000
RCC_PLL_DIV3 = 0x800000
RCC_PLL_DIV4 = 0xC00000
RCC_PLL_MUL3 = 0x0
RCC_PLL_MUL4 = 0x40000
RCC_PLL_MUL6 = 0x80000
RCC_PLL_MUL8 = 0xC0000
RCC_PLL_MUL12 = 0x100000
RCC_PLL_MUL16 = 0x140000
RCC_PLL_MUL24 = 0x180000
RCC_PLL_MUL32 = 0x1C0000
RCC_PLL_MUL48 = 0x200000
RCC_MCO1 = 0x0
RCC_MCO2 = 0x1
# Skip RCC_MCO3 : no need parse
RCC_MCODIV_1 = 0x0
RCC_MCODIV_2 = 0x10000000
RCC_MCODIV_4 = 0x20000000
RCC_MCODIV_8 = 0x30000000
RCC_MCODIV_16 = 0x40000000
RCC_MCO1SOURCE_NOCLOCK = 0x0
RCC_MCO1SOURCE_SYSCLK = 0x1000000
RCC_MCO1SOURCE_MSI = 0x3000000
RCC_MCO1SOURCE_HSI = 0x2000000
RCC_MCO1SOURCE_LSE = 0x7000000
RCC_MCO1SOURCE_LSI = 0x6000000
RCC_MCO1SOURCE_HSE = 0x4000000
RCC_MCO1SOURCE_PLLCLK = 0x5000000
RCC_MCO1SOURCE_HSI48 = 0x8000000
RCC_IT_LSIRDY = 0x1
RCC_IT_LSERDY = 0x2
RCC_IT_HSIRDY = 0x4
RCC_IT_HSERDY = 0x8
RCC_IT_PLLRDY = 0x10
RCC_IT_MSIRDY = 0x20
RCC_IT_LSECSS = 0x80
RCC_IT_CSS = 0x100
RCC_IT_HSI48RDY = 0x40
RCC_FLAG_HSIRDY = 0x22
RCC_FLAG_HSIDIV = 0x24
RCC_FLAG_MSIRDY = 0x29
RCC_FLAG_HSERDY = 0x31
RCC_FLAG_PLLRDY = 0x39
RCC_FLAG_LSIRDY = 0x41
RCC_FLAG_LSERDY = 0x49
RCC_FLAG_LSECSS = 0x4E
RCC_FLAG_OBLRST = 0x59
RCC_FLAG_PINRST = 0x5A
RCC_FLAG_PORRST = 0x5B
RCC_FLAG_SFTRST = 0x5C
RCC_FLAG_IWDGRST = 0x5D
RCC_FLAG_WWDGRST = 0x5E
RCC_FLAG_LPWRRST = 0x5F
RCC_FLAG_FWRST = 0x58
RCC_FLAG_HSI48RDY = 0x61
# fun define __HAL_RCC_DMA1_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_MIF_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_CRC_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_DMA1_CLK_DISABLE()          CLEAR_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN)
# fun define __HAL_RCC_MIF_CLK_DISABLE()           CLEAR_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN)
# fun define __HAL_RCC_CRC_CLK_DISABLE()           CLEAR_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN)
# fun define __HAL_RCC_GPIOA_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_GPIOB_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_GPIOC_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_GPIOH_CLK_ENABLE()   do { \
#                                        __IO uint32_t tmpreg; \
#                                        SET_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN);\
#                                        /* Delay after an RCC peripheral clock enabling */ \
#                                        tmpreg = READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN);\
#                                        UNUSED(tmpreg); \
#                                      } while(0)
# fun define __HAL_RCC_GPIOA_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN)
# fun define __HAL_RCC_GPIOB_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN)
# fun define __HAL_RCC_GPIOC_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN)
# fun define __HAL_RCC_GPIOH_CLK_DISABLE()        CLEAR_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN)
# fun define __HAL_RCC_WWDG_CLK_ENABLE()    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_WWDGEN))
# fun define __HAL_RCC_PWR_CLK_ENABLE()     SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_PWREN))
# fun define __HAL_RCC_WWDG_CLK_DISABLE()    CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_WWDGEN))
# fun define __HAL_RCC_PWR_CLK_DISABLE()     CLEAR_BIT(RCC->APB1ENR, (RCC_APB1ENR_PWREN))
# fun define __HAL_RCC_SYSCFG_CLK_ENABLE()   SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_SYSCFGEN))
# fun define __HAL_RCC_DBGMCU_CLK_ENABLE()   SET_BIT(RCC->APB2ENR, (RCC_APB2ENR_DBGMCUEN))
# fun define __HAL_RCC_SYSCFG_CLK_DISABLE()   CLEAR_BIT(RCC->APB2ENR, (RCC_APB2ENR_SYSCFGEN))
# fun define __HAL_RCC_DBGMCU_CLK_DISABLE()   CLEAR_BIT(RCC->APB2ENR, (RCC_APB2ENR_DBGMCUEN))
# fun define __HAL_RCC_DMA1_IS_CLK_ENABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN) != 0U)
# fun define __HAL_RCC_MIF_IS_CLK_ENABLED()         (READ_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN) != 0U)
# fun define __HAL_RCC_CRC_IS_CLK_ENABLED()         (READ_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN) != 0U)
# fun define __HAL_RCC_DMA1_IS_CLK_DISABLED()       (READ_BIT(RCC->AHBENR, RCC_AHBENR_DMA1EN) == 0U)
# fun define __HAL_RCC_MIF_IS_CLK_DISABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_MIFEN) == 0U)
# fun define __HAL_RCC_CRC_IS_CLK_DISABLED()        (READ_BIT(RCC->AHBENR, RCC_AHBENR_CRCEN) == 0U)
# fun define __HAL_RCC_GPIOA_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN) != 0U)
# fun define __HAL_RCC_GPIOB_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN) != 0U)
# fun define __HAL_RCC_GPIOC_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN) != 0U)
# fun define __HAL_RCC_GPIOH_IS_CLK_ENABLED()        (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN) != 0U)
# fun define __HAL_RCC_GPIOA_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOAEN) == 0U)
# fun define __HAL_RCC_GPIOB_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOBEN) == 0U)
# fun define __HAL_RCC_GPIOC_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOCEN) == 0U)
# fun define __HAL_RCC_GPIOH_IS_CLK_DISABLED()       (READ_BIT(RCC->IOPENR, RCC_IOPENR_GPIOHEN) == 0U)
# fun define __HAL_RCC_WWDG_IS_CLK_ENABLED()        (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN) != 0U)
# fun define __HAL_RCC_PWR_IS_CLK_ENABLED()         (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN) != 0U)
# fun define __HAL_RCC_WWDG_IS_CLK_DISABLED()       (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_WWDGEN) == 0U)
# fun define __HAL_RCC_PWR_IS_CLK_DISABLED()        (READ_BIT(RCC->APB1ENR, RCC_APB1ENR_PWREN) == 0U)
# fun define __HAL_RCC_SYSCFG_IS_CLK_ENABLED()        (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN) != 0U)
# fun define __HAL_RCC_DBGMCU_IS_CLK_ENABLED()        (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_DBGMCUEN) != 0U)
# fun define __HAL_RCC_SYSCFG_IS_CLK_DISABLED()       (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_SYSCFGEN) == 0U)
# fun define __HAL_RCC_DBGMCU_IS_CLK_DISABLED()       (READ_BIT(RCC->APB2ENR, RCC_APB2ENR_DBGMCUEN) == 0U)
# fun define __HAL_RCC_AHB_FORCE_RESET()     (RCC->AHBRSTR = 0xFFFFFFFFU)
# fun define __HAL_RCC_DMA1_FORCE_RESET()    SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_DMA1RST))
# fun define __HAL_RCC_MIF_FORCE_RESET()     SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_MIFRST))
# fun define __HAL_RCC_CRC_FORCE_RESET()     SET_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_CRCRST))
# fun define __HAL_RCC_AHB_RELEASE_RESET()     (RCC->AHBRSTR = 0x00000000U)
# fun define __HAL_RCC_CRC_RELEASE_RESET()     CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_CRCRST))
# fun define __HAL_RCC_DMA1_RELEASE_RESET()    CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_DMA1RST))
# fun define __HAL_RCC_MIF_RELEASE_RESET()     CLEAR_BIT(RCC->AHBRSTR, (RCC_AHBRSTR_MIFRST))
# fun define __HAL_RCC_IOP_FORCE_RESET()     (RCC->IOPRSTR = 0xFFFFFFFFU)
# fun define __HAL_RCC_GPIOA_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOARST))
# fun define __HAL_RCC_GPIOB_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOBRST))
# fun define __HAL_RCC_GPIOC_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOCRST))
# fun define __HAL_RCC_GPIOH_FORCE_RESET()   SET_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOHRST))
# fun define __HAL_RCC_IOP_RELEASE_RESET()   (RCC->IOPRSTR = 0x00000000U)
# fun define __HAL_RCC_GPIOA_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOARST))
# fun define __HAL_RCC_GPIOB_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOBRST))
# fun define __HAL_RCC_GPIOC_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOCRST))
# fun define __HAL_RCC_GPIOH_RELEASE_RESET() CLEAR_BIT(RCC->IOPRSTR, (RCC_IOPRSTR_GPIOHRST))
# fun define __HAL_RCC_APB1_FORCE_RESET()     (RCC->APB1RSTR = 0xFFFFFFFFU)
# fun define __HAL_RCC_WWDG_FORCE_RESET()     SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_WWDGRST))
# fun define __HAL_RCC_PWR_FORCE_RESET()      SET_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_PWRRST))
# fun define __HAL_RCC_APB1_RELEASE_RESET()   (RCC->APB1RSTR = 0x00000000U)
# fun define __HAL_RCC_WWDG_RELEASE_RESET()   CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_WWDGRST))
# fun define __HAL_RCC_PWR_RELEASE_RESET()    CLEAR_BIT(RCC->APB1RSTR, (RCC_APB1RSTR_PWRRST))
# fun define __HAL_RCC_APB2_FORCE_RESET()     (RCC->APB2RSTR = 0xFFFFFFFFU)
# fun define __HAL_RCC_DBGMCU_FORCE_RESET()   SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_DBGMCURST))
# fun define __HAL_RCC_SYSCFG_FORCE_RESET()   SET_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SYSCFGRST))
# fun define __HAL_RCC_APB2_RELEASE_RESET()   (RCC->APB2RSTR = 0x00000000U)
# fun define __HAL_RCC_DBGMCU_RELEASE_RESET() CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_DBGMCURST))
# fun define __HAL_RCC_SYSCFG_RELEASE_RESET() CLEAR_BIT(RCC->APB2RSTR, (RCC_APB2RSTR_SYSCFGRST))
# fun define __HAL_RCC_CRC_CLK_SLEEP_ENABLE()      SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_CRCSMEN))
# fun define __HAL_RCC_MIF_CLK_SLEEP_ENABLE()      SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_MIFSMEN))
# fun define __HAL_RCC_SRAM_CLK_SLEEP_ENABLE()     SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_SRAMSMEN))
# fun define __HAL_RCC_DMA1_CLK_SLEEP_ENABLE()     SET_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_DMA1SMEN))
# fun define __HAL_RCC_CRC_CLK_SLEEP_DISABLE()     CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_CRCSMEN))
# fun define __HAL_RCC_MIF_CLK_SLEEP_DISABLE()     CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_MIFSMEN))
# fun define __HAL_RCC_SRAM_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_SRAMSMEN))
# fun define __HAL_RCC_DMA1_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->AHBSMENR, (RCC_AHBSMENR_DMA1SMEN))
# fun define __HAL_RCC_GPIOA_CLK_SLEEP_ENABLE()    SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOASMEN))
# fun define __HAL_RCC_GPIOB_CLK_SLEEP_ENABLE()    SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOBSMEN))
# fun define __HAL_RCC_GPIOC_CLK_SLEEP_ENABLE()    SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOCSMEN))
# fun define __HAL_RCC_GPIOH_CLK_SLEEP_ENABLE()    SET_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOHSMEN))
# fun define __HAL_RCC_GPIOA_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOASMEN))
# fun define __HAL_RCC_GPIOB_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOBSMEN))
# fun define __HAL_RCC_GPIOC_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOCSMEN))
# fun define __HAL_RCC_GPIOH_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->IOPSMENR, (RCC_IOPSMENR_GPIOHSMEN))
# fun define __HAL_RCC_WWDG_CLK_SLEEP_ENABLE()    SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_WWDGSMEN))
# fun define __HAL_RCC_PWR_CLK_SLEEP_ENABLE()     SET_BIT(RCC->APB1SMENR, (RCC_APB1SMENR_PWRSMEN))
# fun define __HAL_RCC_WWDG_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB1SMENR,  (RCC_APB1SMENR_WWDGSMEN))
# fun define __HAL_RCC_PWR_CLK_SLEEP_DISABLE()    CLEAR_BIT(RCC->APB1SMENR,  (RCC_APB1SMENR_PWRSMEN))
# fun define __HAL_RCC_SYSCFG_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_SYSCFGSMEN))
# fun define __HAL_RCC_DBGMCU_CLK_SLEEP_ENABLE()   SET_BIT(RCC->APB2SMENR, (RCC_APB2SMENR_DBGMCUSMEN))
# fun define __HAL_RCC_SYSCFG_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB2SMENR,   (RCC_APB2SMENR_SYSCFGSMEN))
# fun define __HAL_RCC_DBGMCU_CLK_SLEEP_DISABLE()   CLEAR_BIT(RCC->APB2SMENR,   (RCC_APB2SMENR_DBGMCUSMEN))
# fun define __HAL_RCC_CRC_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_CRCSMEN) != 0U)
# fun define __HAL_RCC_MIF_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_MIFSMEN) != 0U)
# fun define __HAL_RCC_SRAM_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_SRAMSMEN) != 0U)
# fun define __HAL_RCC_DMA1_IS_CLK_SLEEP_ENABLED()   (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_DMA1SMEN) != 0U)
# fun define __HAL_RCC_CRC_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_CRCSMEN) == 0U)
# fun define __HAL_RCC_MIF_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_MIFSMEN) == 0U)
# fun define __HAL_RCC_SRAM_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_SRAMSMEN) == 0U)
# fun define __HAL_RCC_DMA1_IS_CLK_SLEEP_DISABLED()  (READ_BIT(RCC->AHBSMENR, RCC_AHBSMENR_DMA1SMEN) == 0U)
# fun define __HAL_RCC_GPIOA_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOASMEN) != 0U)
# fun define __HAL_RCC_GPIOB_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOBSMEN) != 0U)
# fun define __HAL_RCC_GPIOC_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOCSMEN) != 0U)
# fun define __HAL_RCC_GPIOH_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOHSMEN) != 0U)
# fun define __HAL_RCC_GPIOA_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOASMEN) == 0U)
# fun define __HAL_RCC_GPIOB_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOBSMEN) == 0U)
# fun define __HAL_RCC_GPIOC_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOCSMEN) == 0U)
# fun define __HAL_RCC_GPIOH_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->IOPSMENR, RCC_IOPSMENR_GPIOHSMEN) == 0U)
# fun define __HAL_RCC_WWDG_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_WWDGSMEN) != 0U)
# fun define __HAL_RCC_PWR_IS_CLK_SLEEP_ENABLED()     (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_PWRSMEN) != 0U)
# fun define __HAL_RCC_WWDG_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_WWDGSMEN) == 0U)
# fun define __HAL_RCC_PWR_IS_CLK_SLEEP_DISABLED()    (READ_BIT(RCC->APB1SMENR, RCC_APB1SMENR_PWRSMEN) == 0U)
# fun define __HAL_RCC_SYSCFG_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_SYSCFGSMEN) != 0U)
# fun define __HAL_RCC_DBGMCU_IS_CLK_SLEEP_ENABLED()    (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_DBGMCUSMEN) != 0U)
# fun define __HAL_RCC_SYSCFG_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_SYSCFGSMEN) == 0U)
# fun define __HAL_RCC_DBGMCU_IS_CLK_SLEEP_DISABLED()   (READ_BIT(RCC->APB2SMENR, RCC_APB2SMENR_DBGMCUSMEN) == 0U)
# fun define __HAL_RCC_HSI_CONFIG(__STATE__) \
#                  MODIFY_REG(RCC->CR, RCC_CR_HSION | RCC_CR_HSIDIVEN , (uint32_t)(__STATE__))
# fun define __HAL_RCC_HSI_ENABLE()  SET_BIT(RCC->CR, RCC_CR_HSION)
# fun define __HAL_RCC_HSI_DISABLE() CLEAR_BIT(RCC->CR, RCC_CR_HSION)
# fun define __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(_HSICALIBRATIONVALUE_) \
#          (MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, (uint32_t)(_HSICALIBRATIONVALUE_) << RCC_ICSCR_HSITRIM_Pos))
# fun define __HAL_RCC_LSI_ENABLE() SET_BIT(RCC->CSR, RCC_CSR_LSION)
# fun define __HAL_RCC_LSI_DISABLE() CLEAR_BIT(RCC->CSR, RCC_CSR_LSION)
# fun define __HAL_RCC_HSE_CONFIG(__STATE__)                                     \
#                    do{                                                     \
#                      __IO uint32_t tmpreg;                                 \
#                      if ((__STATE__) == RCC_HSE_ON)                        \
#                      {                                                     \
#                        SET_BIT(RCC->CR, RCC_CR_HSEON);                     \
#                      }                                                     \
#                      else if ((__STATE__) == RCC_HSE_BYPASS)               \
#                      {                                                     \
#                        SET_BIT(RCC->CR, RCC_CR_HSEBYP);                    \
#                        SET_BIT(RCC->CR, RCC_CR_HSEON);                     \
#                      }                                                     \
#                      else                                                  \
#                      {                                                     \
#                        CLEAR_BIT(RCC->CR, RCC_CR_HSEON);                   \
#                        /* Delay after an RCC peripheral clock */           \
#                        tmpreg = READ_BIT(RCC->CR, RCC_CR_HSEON);           \
#                        UNUSED(tmpreg);                                     \
#                        CLEAR_BIT(RCC->CR, RCC_CR_HSEBYP);                  \
#                      }                                                     \
#                    }while(0)
# fun define __HAL_RCC_LSE_CONFIG(__STATE__)                                     \
#                    do{                                                     \
#                      if ((__STATE__) == RCC_LSE_ON)                        \
#                      {                                                     \
#                        SET_BIT(RCC->CSR, RCC_CSR_LSEON);                   \
#                      }                                                     \
#                      else if ((__STATE__) == RCC_LSE_OFF)                  \
#                      {                                                     \
#                        CLEAR_BIT(RCC->CSR, RCC_CSR_LSEON);                 \
#                        CLEAR_BIT(RCC->CSR, RCC_CSR_LSEBYP);                \
#                      }                                                     \
#                      else if ((__STATE__) == RCC_LSE_BYPASS)               \
#                      {                                                     \
#                        SET_BIT(RCC->CSR, RCC_CSR_LSEBYP);                  \
#                        SET_BIT(RCC->CSR, RCC_CSR_LSEON);                   \
#                      }                                                     \
#                      else                                                  \
#                      {                                                     \
#                        CLEAR_BIT(RCC->CSR, RCC_CSR_LSEON);                 \
#                        CLEAR_BIT(RCC->CSR, RCC_CSR_LSEBYP);                \
#                      }                                                     \
#                    }while(0)
# fun define __HAL_RCC_MSI_ENABLE()  SET_BIT(RCC->CR, RCC_CR_MSION)
# fun define __HAL_RCC_MSI_DISABLE() CLEAR_BIT(RCC->CR, RCC_CR_MSION)
# fun define __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(_MSICALIBRATIONVALUE_) \
#          (MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, (uint32_t)(_MSICALIBRATIONVALUE_) << RCC_ICSCR_MSITRIM_Pos))
# fun define __HAL_RCC_MSI_RANGE_CONFIG(_MSIRANGEVALUE_) (MODIFY_REG(RCC->ICSCR, \
#          RCC_ICSCR_MSIRANGE, (uint32_t)(_MSIRANGEVALUE_)))
# fun define __HAL_RCC_GET_MSI_RANGE() (uint32_t)(READ_BIT(RCC->ICSCR, RCC_ICSCR_MSIRANGE))
# fun define __HAL_RCC_PLL_ENABLE() SET_BIT(RCC->CR, RCC_CR_PLLON)
# fun define __HAL_RCC_PLL_DISABLE() CLEAR_BIT(RCC->CR, RCC_CR_PLLON)
# fun define __HAL_RCC_PLL_CONFIG(__RCC_PLLSOURCE__, __PLLMUL__, __PLLDIV__)\
#          MODIFY_REG(RCC->CFGR, (RCC_CFGR_PLLSRC|RCC_CFGR_PLLMUL|RCC_CFGR_PLLDIV),((__RCC_PLLSOURCE__) | (__PLLMUL__) | (__PLLDIV__)))
# fun define __HAL_RCC_GET_PLL_OSCSOURCE() ((uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC)))
# fun define __HAL_RCC_SYSCLK_CONFIG(__SYSCLKSOURCE__) \
#                  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, (__SYSCLKSOURCE__))
# fun define __HAL_RCC_GET_SYSCLK_SOURCE() ((uint32_t)(READ_BIT(RCC->CFGR,RCC_CFGR_SWS)))
# fun define __HAL_RCC_MCO1_CONFIG(__MCOCLKSOURCE__, __MCODIV__) \
#                 MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCOSEL | RCC_CFGR_MCO_PRE), ((__MCOCLKSOURCE__) | (__MCODIV__)))
# fun define __HAL_RCC_RTC_CLKPRESCALER(__RTC_CLKSOURCE__) do { \
#            if(((__RTC_CLKSOURCE__) & RCC_CSR_RTCSEL_HSE) == RCC_CSR_RTCSEL_HSE)          \
#            {                                                                             \
#              MODIFY_REG(RCC->CR, RCC_CR_RTCPRE, ((__RTC_CLKSOURCE__) & RCC_CR_RTCPRE));  \
#            }                                                                             \
#          } while (0)
# fun define __HAL_RCC_RTC_CONFIG(__RTC_CLKSOURCE__) do { \
#                                      __HAL_RCC_RTC_CLKPRESCALER(__RTC_CLKSOURCE__);      \
#                                      RCC->CSR |= ((__RTC_CLKSOURCE__) & RCC_CSR_RTCSEL); \
#                                    } while (0)
# fun define __HAL_RCC_GET_RTC_SOURCE() (READ_BIT(RCC->CSR, RCC_CSR_RTCSEL))
# fun define __HAL_RCC_GET_RTC_HSE_PRESCALER() ((uint32_t)(READ_BIT(RCC->CR, RCC_CR_RTCPRE)))
# fun define __HAL_RCC_RTC_ENABLE() SET_BIT(RCC->CSR, RCC_CSR_RTCEN)
# fun define __HAL_RCC_RTC_DISABLE() CLEAR_BIT(RCC->CSR, RCC_CSR_RTCEN)
# fun define __HAL_RCC_BACKUPRESET_FORCE()  SET_BIT(RCC->CSR, RCC_CSR_RTCRST)
# fun define __HAL_RCC_BACKUPRESET_RELEASE() CLEAR_BIT(RCC->CSR, RCC_CSR_RTCRST)
# fun define __HAL_RCC_ENABLE_IT(__INTERRUPT__) SET_BIT(RCC->CIER, (__INTERRUPT__))
# fun define __HAL_RCC_DISABLE_IT(__INTERRUPT__) CLEAR_BIT(RCC->CIER, (__INTERRUPT__))
# fun define __HAL_RCC_CLEAR_IT(__INTERRUPT__) (RCC->CICR = (__INTERRUPT__))
# fun define __HAL_RCC_GET_IT(__INTERRUPT__) ((RCC->CIFR & (__INTERRUPT__)) == (__INTERRUPT__))
# fun define __HAL_RCC_CLEAR_RESET_FLAGS() (RCC->CSR |= RCC_CSR_RMVF)
# fun define __HAL_RCC_GET_FLAG(__FLAG__) (((((((((__FLAG__) >> 5) == CR_REG_INDEX)? RCC->CR :((((__FLAG__) >> 5) == CSR_REG_INDEX) ? RCC->CSR :RCC->CRRCR)))) & ((uint32_t)1 << ((__FLAG__) & RCC_FLAG_MASK))) != 0U ) ? 1U : 0U )
# fun define __HAL_RCC_GET_FLAG(__FLAG__) (((((((((__FLAG__) >> 5) == CR_REG_INDEX)? RCC->CR : RCC->CSR))) & ((uint32_t)1 << ((__FLAG__) & RCC_FLAG_MASK))) != 0U ) ? 1U : 0U )
# struct RCC_PLLInitTypeDef

class RCC_PLLInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('PLLState',	ctypes.c_uint32),
		('PLLSource',	ctypes.c_uint32),
		('PLLMUL',	ctypes.c_uint32),
		('PLLDIV',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct RCC_OscInitTypeDef
# struct RCC_OscInitTypeDef : field is class : PLL
# struct RCC_ClkInitTypeDef

class RCC_ClkInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ClockType',	ctypes.c_uint32),
		('SYSCLKSource',	ctypes.c_uint32),
		('AHBCLKDivider',	ctypes.c_uint32),
		('APB1CLKDivider',	ctypes.c_uint32),
		('APB2CLKDivider',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_rng.h : 

# Enum HAL_RNG_StateTypeDef
HAL_RNG_STATE_RESET = 0x0
HAL_RNG_STATE_READY = 0x1
HAL_RNG_STATE_BUSY = 0x2
HAL_RNG_STATE_TIMEOUT = 0x3
HAL_RNG_STATE_ERROR = 0x4
# Enum HAL_RNG_CallbackIDTypeDef
# Skip HAL_RNG_ERROR_CB_ID : no need parse
# Skip HAL_RNG_MSPINIT_CB_ID : no need parse
# Skip HAL_RNG_MSPDEINIT_CB_ID : no need parse
# empty define STM32L0xx_HAL_RNG_H
RNG_IT_DRDY = 0x1
RNG_IT_CEI = 0x20
RNG_IT_SEI = 0x40
RNG_FLAG_DRDY = 0x1
RNG_FLAG_CECS = 0x2
RNG_FLAG_SECS = 0x4
HAL_RNG_ERROR_NONE = 0x0
# Skip HAL_RNG_ERROR_INVALID_CALLBACK : no need parse
HAL_RNG_ERROR_TIMEOUT = 0x2
# fun define __HAL_RNG_RESET_HANDLE_STATE(__HANDLE__)  do{                                                   \
#                                                       (__HANDLE__)->State = HAL_RNG_STATE_RESET;       \
#                                                       (__HANDLE__)->MspInitCallback = NULL;            \
#                                                       (__HANDLE__)->MspDeInitCallback = NULL;          \
#                                                    } while(0U)
# fun define __HAL_RNG_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_RNG_STATE_RESET)
# fun define __HAL_RNG_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR |=  RNG_CR_RNGEN)
# fun define __HAL_RNG_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR &= ~RNG_CR_RNGEN)
# fun define __HAL_RNG_GET_FLAG(__HANDLE__, __FLAG__) (((__HANDLE__)->Instance->SR & (__FLAG__)) == (__FLAG__))
# fun define __HAL_RNG_CLEAR_FLAG(__HANDLE__, __FLAG__)                      /* dummy  macro */
# fun define __HAL_RNG_ENABLE_IT(__HANDLE__) ((__HANDLE__)->Instance->CR |=  RNG_CR_IE)
# fun define __HAL_RNG_DISABLE_IT(__HANDLE__) ((__HANDLE__)->Instance->CR &= ~RNG_CR_IE)
# fun define __HAL_RNG_GET_IT(__HANDLE__, __INTERRUPT__) (((__HANDLE__)->Instance->SR & (__INTERRUPT__)) == (__INTERRUPT__))
# fun define __HAL_RNG_CLEAR_IT(__HANDLE__, __INTERRUPT__) (((__HANDLE__)->Instance->SR) = ~(__INTERRUPT__))
# fun define IS_RNG_IT(IT) (((IT) == RNG_IT_CEI) || \
#                       ((IT) == RNG_IT_SEI))
# fun define IS_RNG_FLAG(FLAG) (((FLAG) == RNG_FLAG_DRDY) || \
#                            ((FLAG) == RNG_FLAG_CECS) || \
#                            ((FLAG) == RNG_FLAG_SECS))
# struct RNG_HandleTypeDef

class RNG_HandleTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Instance',	ctypes.c_uint64),
		('Lock',	ctypes.c_uint32),
		('State',	ctypes.c_uint32),
		('ErrorCode',	ctypes.c_uint32),
		('RandomNumber',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_rtc_ex.h : 

# empty define STM32L0xx_HAL_RTC_EX_H
RTC_OUTPUT_DISABLE = 0x0
RTC_OUTPUT_ALARMA = 0x200000
RTC_OUTPUT_ALARMB = 0x400000
RTC_OUTPUT_WAKEUP = 0x600000
RTC_BKP_DR0 = 0x0
RTC_BKP_DR1 = 0x1
RTC_BKP_DR2 = 0x2
RTC_BKP_DR3 = 0x3
RTC_BKP_DR4 = 0x4
RTC_TIMESTAMPEDGE_RISING = 0x0
RTC_TIMESTAMPEDGE_FALLING = 0x8
RTC_TIMESTAMPPIN_DEFAULT = 0x0
RTC_TAMPER_1 = 0x1
RTC_TAMPER_2 = 0x8
# Skip RTC_TAMPER_3 : no need parse
RTC_TAMPER1_INTERRUPT = 0x10000
RTC_TAMPER2_INTERRUPT = 0x80000
# Skip RTC_TAMPER3_INTERRUPT : no need parse
RTC_ALL_TAMPER_INTERRUPT = 0x4
RTC_TAMPERTRIGGER_RISINGEDGE = 0x0
RTC_TAMPERTRIGGER_FALLINGEDGE = 0x2
RTC_TAMPERTRIGGER_LOWLEVEL = 0x0
RTC_TAMPERTRIGGER_HIGHLEVEL = 0x2
RTC_TAMPER_ERASE_BACKUP_ENABLE = 0x0
RTC_TAMPER_ERASE_BACKUP_DISABLE = 0x20000
RTC_TAMPERMASK_FLAG_DISABLE = 0x0
RTC_TAMPERMASK_FLAG_ENABLE = 0x40000
RTC_TAMPERFILTER_DISABLE = 0x0
RTC_TAMPERFILTER_2SAMPLE = 0x800
RTC_TAMPERFILTER_4SAMPLE = 0x1000
RTC_TAMPERFILTER_8SAMPLE = 0x1800
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768 = 0x0
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV16384 = 0x100
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV8192 = 0x200
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV4096 = 0x300
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV2048 = 0x400
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV1024 = 0x500
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV512 = 0x600
RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV256 = 0x700
RTC_TAMPERPRECHARGEDURATION_1RTCCLK = 0x0
RTC_TAMPERPRECHARGEDURATION_2RTCCLK = 0x2000
RTC_TAMPERPRECHARGEDURATION_4RTCCLK = 0x4000
RTC_TAMPERPRECHARGEDURATION_8RTCCLK = 0x6000
RTC_TIMESTAMPONTAMPERDETECTION_ENABLE = 0x80
RTC_TIMESTAMPONTAMPERDETECTION_DISABLE = 0x0
RTC_TAMPER_PULLUP_ENABLE = 0x0
RTC_TAMPER_PULLUP_DISABLE = 0x8000
RTC_WAKEUPCLOCK_RTCCLK_DIV16 = 0x0
RTC_WAKEUPCLOCK_RTCCLK_DIV8 = 0x1
RTC_WAKEUPCLOCK_RTCCLK_DIV4 = 0x2
RTC_WAKEUPCLOCK_RTCCLK_DIV2 = 0x3
RTC_WAKEUPCLOCK_CK_SPRE_16BITS = 0x4
RTC_WAKEUPCLOCK_CK_SPRE_17BITS = 0x6
RTC_SMOOTHCALIB_PERIOD_32SEC = 0x0
RTC_SMOOTHCALIB_PERIOD_16SEC = 0x2000
RTC_SMOOTHCALIB_PERIOD_8SEC = 0x4000
RTC_SMOOTHCALIB_PLUSPULSES_SET = 0x8000
RTC_SMOOTHCALIB_PLUSPULSES_RESET = 0x0
RTC_CALIBOUTPUT_512HZ = 0x0
RTC_CALIBOUTPUT_1HZ = 0x80000
RTC_SHIFTADD1S_RESET = 0x0
RTC_SHIFTADD1S_SET = 0x80000000
# Skip RTC_IT_TAMP3 : no need parse
# Skip RTC_FLAG_TAMP3F : no need parse
# fun define __HAL_RTC_WAKEUPTIMER_ENABLE(__HANDLE__)                      ((__HANDLE__)->Instance->CR |= (RTC_CR_WUTE))
# fun define __HAL_RTC_WAKEUPTIMER_DISABLE(__HANDLE__)                     ((__HANDLE__)->Instance->CR &= ~(RTC_CR_WUTE))
# fun define __HAL_RTC_WAKEUPTIMER_ENABLE_IT(__HANDLE__, __INTERRUPT__)    ((__HANDLE__)->Instance->CR |= (__INTERRUPT__))
# fun define __HAL_RTC_WAKEUPTIMER_DISABLE_IT(__HANDLE__, __INTERRUPT__)   ((__HANDLE__)->Instance->CR &= ~(__INTERRUPT__))
# fun define __HAL_RTC_WAKEUPTIMER_GET_IT(__HANDLE__, __INTERRUPT__)       (((((__HANDLE__)->Instance->ISR) & ((__INTERRUPT__)>> 4U)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_WAKEUPTIMER_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)   (((((__HANDLE__)->Instance->CR) & (__INTERRUPT__)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_WAKEUPTIMER_GET_FLAG(__HANDLE__, __FLAG__)   (((((__HANDLE__)->Instance->ISR) & (__FLAG__)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(__HANDLE__, __FLAG__) ((__HANDLE__)->Instance->ISR) = (~((__FLAG__) | RTC_ISR_INIT)|((__HANDLE__)->Instance->ISR & RTC_ISR_INIT))
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT()       (EXTI->IMR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT)
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_IT()      (EXTI->IMR &= ~(RTC_EXTI_LINE_WAKEUPTIMER_EVENT))
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_EVENT()    (EXTI->EMR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT)
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_EVENT()   (EXTI->EMR &= ~(RTC_EXTI_LINE_WAKEUPTIMER_EVENT))
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_FALLING_EDGE()   (EXTI->FTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT)
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_FALLING_EDGE()  (EXTI->FTSR &= ~(RTC_EXTI_LINE_WAKEUPTIMER_EVENT))
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE()    (EXTI->RTSR |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT)
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_RISING_EDGE()   (EXTI->RTSR &= ~(RTC_EXTI_LINE_WAKEUPTIMER_EVENT))
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_FALLING_EDGE()  do { \
#                                                                   __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();  \
#                                                                   __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_FALLING_EDGE(); \
#                                                                 } while(0U)
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_RISING_FALLING_EDGE()  do { \
#                                                                   __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_RISING_EDGE();  \
#                                                                   __HAL_RTC_WAKEUPTIMER_EXTI_DISABLE_FALLING_EDGE(); \
#                                                                  } while(0U)
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_GET_FLAG()              (EXTI->PR & RTC_EXTI_LINE_WAKEUPTIMER_EVENT)
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG()            (EXTI->PR = RTC_EXTI_LINE_WAKEUPTIMER_EVENT)
# fun define __HAL_RTC_WAKEUPTIMER_EXTI_GENERATE_SWIT()         (EXTI->SWIER |= RTC_EXTI_LINE_WAKEUPTIMER_EVENT)
# fun define __HAL_RTC_TIMESTAMP_ENABLE(__HANDLE__)                       ((__HANDLE__)->Instance->CR |= (RTC_CR_TSE))
# fun define __HAL_RTC_TIMESTAMP_DISABLE(__HANDLE__)                      ((__HANDLE__)->Instance->CR &= ~(RTC_CR_TSE))
# fun define __HAL_RTC_TIMESTAMP_ENABLE_IT(__HANDLE__, __INTERRUPT__)     ((__HANDLE__)->Instance->CR |= (__INTERRUPT__))
# fun define __HAL_RTC_TIMESTAMP_DISABLE_IT(__HANDLE__, __INTERRUPT__)    ((__HANDLE__)->Instance->CR &= ~(__INTERRUPT__))
# fun define __HAL_RTC_TIMESTAMP_GET_IT(__HANDLE__, __INTERRUPT__)        (((((__HANDLE__)->Instance->ISR) & ((__INTERRUPT__)>> 4U)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_TIMESTAMP_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)     (((((__HANDLE__)->Instance->CR) & (__INTERRUPT__)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_TIMESTAMP_GET_FLAG(__HANDLE__, __FLAG__)     (((((__HANDLE__)->Instance->ISR) & (__FLAG__)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_TIMESTAMP_CLEAR_FLAG(__HANDLE__, __FLAG__)          ((__HANDLE__)->Instance->ISR) = (~((__FLAG__) | RTC_ISR_INIT)|((__HANDLE__)->Instance->ISR & RTC_ISR_INIT))
# fun define __HAL_RTC_TAMPER1_ENABLE(__HANDLE__)                         ((__HANDLE__)->Instance->TAMPCR |= (RTC_TAMPCR_TAMP1E))
# fun define __HAL_RTC_TAMPER1_DISABLE(__HANDLE__)                        ((__HANDLE__)->Instance->TAMPCR &= ~(RTC_TAMPCR_TAMP1E))
# fun define __HAL_RTC_TAMPER2_ENABLE(__HANDLE__)                         ((__HANDLE__)->Instance->TAMPCR |= (RTC_TAMPCR_TAMP2E))
# fun define __HAL_RTC_TAMPER2_DISABLE(__HANDLE__)                        ((__HANDLE__)->Instance->TAMPCR &= ~(RTC_TAMPCR_TAMP2E))
# fun define __HAL_RTC_TAMPER3_ENABLE(__HANDLE__)                         ((__HANDLE__)->Instance->TAMPCR |= (RTC_TAMPCR_TAMP3E))
# fun define __HAL_RTC_TAMPER3_DISABLE(__HANDLE__)                        ((__HANDLE__)->Instance->TAMPCR &= ~(RTC_TAMPCR_TAMP3E))
# fun define __HAL_RTC_TAMPER_ENABLE_IT(__HANDLE__, __INTERRUPT__)        ((__HANDLE__)->Instance->TAMPCR |= (__INTERRUPT__))
# fun define __HAL_RTC_TAMPER_DISABLE_IT(__HANDLE__, __INTERRUPT__)       ((__HANDLE__)->Instance->TAMPCR &= ~(__INTERRUPT__))
# fun define __HAL_RTC_TAMPER_ENABLE_IT(__HANDLE__, __INTERRUPT__)        ((__HANDLE__)->Instance->TAMPCR |= (__INTERRUPT__))
# fun define __HAL_RTC_TAMPER_DISABLE_IT(__HANDLE__, __INTERRUPT__)       ((__HANDLE__)->Instance->TAMPCR &= ~(__INTERRUPT__))
# fun define __HAL_RTC_TAMPER_ENABLE_IT(__HANDLE__, __INTERRUPT__)        ((__HANDLE__)->Instance->TAMPCR |= (__INTERRUPT__))
# fun define __HAL_RTC_TAMPER_DISABLE_IT(__HANDLE__, __INTERRUPT__)       ((__HANDLE__)->Instance->TAMPCR &= ~(__INTERRUPT__))
# fun define __HAL_RTC_TAMPER_GET_IT(__HANDLE__, __INTERRUPT__)    (((__INTERRUPT__) == RTC_IT_TAMP1) ? (((((__HANDLE__)->Instance->ISR) & ((__INTERRUPT__)>> 3U)) != 0U) ? 1U : 0U) : \
#                                                               ((__INTERRUPT__) == RTC_IT_TAMP2) ? (((((__HANDLE__)->Instance->ISR) & ((__INTERRUPT__)>> 5U)) != 0U) ? 1U : 0U) : \
#                                                               ((__INTERRUPT__) == RTC_IT_TAMP3) ? (((((__HANDLE__)->Instance->ISR) & ((__INTERRUPT__)>> 7U)) != 0U) ? 1U : 0U))
# fun define __HAL_RTC_TAMPER_GET_IT(__HANDLE__, __INTERRUPT__)    (((__INTERRUPT__) == RTC_IT_TAMP1) ? (((((__HANDLE__)->Instance->ISR) & ((__INTERRUPT__)>> 3U)) != 0U) ? 1U : 0U) : \
#                                                               ((__INTERRUPT__) == RTC_IT_TAMP2) ? (((((__HANDLE__)->Instance->ISR) & ((__INTERRUPT__)>> 5U)) != 0U) ? 1U : 0U))
# fun define __HAL_RTC_TAMPER_GET_IT(__HANDLE__, __INTERRUPT__)    (((__INTERRUPT__) == RTC_IT_TAMP2) ? (((((__HANDLE__)->Instance->ISR) & ((__INTERRUPT__)>> 5U)) != 0U) ? 1U : 0U) : \
#                                                               ((__INTERRUPT__) == RTC_IT_TAMP3) ? (((((__HANDLE__)->Instance->ISR) & ((__INTERRUPT__)>> 7U)) != 0U) ? 1U : 0U))
# fun define __HAL_RTC_TAMPER_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)    (((((__HANDLE__)->Instance->TAMPCR) & (__INTERRUPT__)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_TAMPER_GET_FLAG(__HANDLE__, __FLAG__)        (((((__HANDLE__)->Instance->ISR) & (__FLAG__)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_TAMPER_CLEAR_FLAG(__HANDLE__, __FLAG__)      ((__HANDLE__)->Instance->ISR) = (~((__FLAG__) | RTC_ISR_INIT)|((__HANDLE__)->Instance->ISR & RTC_ISR_INIT))
# fun define __HAL_RTC_TAMPER_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)    (((((__HANDLE__)->Instance->TAMPCR) & (__INTERRUPT__)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_TAMPER_GET_FLAG(__HANDLE__, __FLAG__)        (((((__HANDLE__)->Instance->ISR) & (__FLAG__)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_TAMPER_CLEAR_FLAG(__HANDLE__, __FLAG__)      ((__HANDLE__)->Instance->ISR) = (~((__FLAG__) | RTC_ISR_INIT)|((__HANDLE__)->Instance->ISR & RTC_ISR_INIT))
# fun define __HAL_RTC_TAMPER_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)    (((((__HANDLE__)->Instance->TAMPCR) & (__INTERRUPT__)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_TAMPER_GET_FLAG(__HANDLE__, __FLAG__)        (((((__HANDLE__)->Instance->ISR) & (__FLAG__)) != 0U) ? 1U : 0U)
# fun define __HAL_RTC_TAMPER_CLEAR_FLAG(__HANDLE__, __FLAG__)      ((__HANDLE__)->Instance->ISR) = (~((__FLAG__) | RTC_ISR_INIT)|((__HANDLE__)->Instance->ISR & RTC_ISR_INIT))
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_IT()        (EXTI->IMR |= RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT)
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_IT()       (EXTI->IMR &= ~(RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT))
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_EVENT()    (EXTI->EMR |= RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT)
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_EVENT()   (EXTI->EMR &= ~(RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT))
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_FALLING_EDGE()   (EXTI->FTSR |= RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT)
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_FALLING_EDGE()  (EXTI->FTSR &= ~(RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT))
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE()    (EXTI->RTSR |= RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT)
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_RISING_EDGE()   (EXTI->RTSR &= ~(RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT))
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_FALLING_EDGE()  do { \
#                                                                        __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_RISING_EDGE();  \
#                                                                        __HAL_RTC_TAMPER_TIMESTAMP_EXTI_ENABLE_FALLING_EDGE(); \
#                                                                      } while(0U)
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_RISING_FALLING_EDGE()  do { \
#                                                                        __HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_RISING_EDGE();  \
#                                                                        __HAL_RTC_TAMPER_TIMESTAMP_EXTI_DISABLE_FALLING_EDGE(); \
#                                                                       } while(0U)
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_GET_FLAG()         (EXTI->PR & RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT)
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_CLEAR_FLAG()       (EXTI->PR = RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT)
# fun define __HAL_RTC_TAMPER_TIMESTAMP_EXTI_GENERATE_SWIT()    (EXTI->SWIER |= RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT)
# fun define __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(__HANDLE__)               ((__HANDLE__)->Instance->CR |= (RTC_CR_COE))
# fun define __HAL_RTC_CALIBRATION_OUTPUT_DISABLE(__HANDLE__)              ((__HANDLE__)->Instance->CR &= ~(RTC_CR_COE))
# fun define __HAL_RTC_CLOCKREF_DETECTION_ENABLE(__HANDLE__)               ((__HANDLE__)->Instance->CR |= (RTC_CR_REFCKON))
# fun define __HAL_RTC_CLOCKREF_DETECTION_DISABLE(__HANDLE__)              ((__HANDLE__)->Instance->CR &= ~(RTC_CR_REFCKON))
# fun define __HAL_RTC_SHIFT_GET_FLAG(__HANDLE__, __FLAG__)                (((((__HANDLE__)->Instance->ISR) & (__FLAG__)) != 0U)? 1U : 0U)
RTC_FLAGS_MASK = 0x17F7F
RTC_TAMPCR_TAMPXE = 0x9
RTC_TAMPCR_TAMPXIE = 0x90004
RTC_FLAGS_MASK = 0x17F7F
RTC_TAMPCR_TAMPXE = 0x9
RTC_TAMPCR_TAMPXIE = 0x90004
RTC_FLAGS_MASK = 0x17F7F
RTC_TAMPCR_TAMPXE = 0x9
RTC_TAMPCR_TAMPXIE = 0x90004
RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT = 0x80000
RTC_EXTI_LINE_WAKEUPTIMER_EVENT = 0x100000
# fun define IS_RTC_OUTPUT(OUTPUT) (((OUTPUT) == RTC_OUTPUT_DISABLE) || \
#                               ((OUTPUT) == RTC_OUTPUT_ALARMA)  || \
#                               ((OUTPUT) == RTC_OUTPUT_ALARMB)  || \
#                               ((OUTPUT) == RTC_OUTPUT_WAKEUP))
# fun define IS_RTC_BKP(BKP)                   ((BKP) < (uint32_t) RTC_BKP_NUMBER)
# fun define IS_TIMESTAMP_EDGE(EDGE) (((EDGE) == RTC_TIMESTAMPEDGE_RISING) || \
#                                 ((EDGE) == RTC_TIMESTAMPEDGE_FALLING))
# fun define IS_RTC_TAMPER(TAMPER)  ((((TAMPER) & ((uint32_t)(0xFFFFFFFFU ^ RTC_TAMPCR_TAMPXE))) == 0x00U) && ((TAMPER) != 0U))
# fun define IS_RTC_TAMPER_INTERRUPT(INTERRUPT) ((((INTERRUPT) & (uint32_t)(0xFFFFFFFFU ^ RTC_TAMPCR_TAMPXIE)) == 0x00U) && ((INTERRUPT) != 0U))
# fun define IS_RTC_TIMESTAMP_PIN(PIN)  (((PIN) == RTC_TIMESTAMPPIN_DEFAULT))
# fun define IS_RTC_TAMPER_TRIGGER(TRIGGER) (((TRIGGER) == RTC_TAMPERTRIGGER_RISINGEDGE) || \
#                                        ((TRIGGER) == RTC_TAMPERTRIGGER_FALLINGEDGE) || \
#                                        ((TRIGGER) == RTC_TAMPERTRIGGER_LOWLEVEL) || \
#                                        ((TRIGGER) == RTC_TAMPERTRIGGER_HIGHLEVEL))
# fun define IS_RTC_TAMPER_ERASE_MODE(MODE)             (((MODE) == RTC_TAMPER_ERASE_BACKUP_ENABLE) || \
#                                                    ((MODE) == RTC_TAMPER_ERASE_BACKUP_DISABLE))
# fun define IS_RTC_TAMPER_MASKFLAG_STATE(STATE)        (((STATE) == RTC_TAMPERMASK_FLAG_ENABLE) || \
#                                                    ((STATE) == RTC_TAMPERMASK_FLAG_DISABLE))
# fun define IS_RTC_TAMPER_FILTER(FILTER)  (((FILTER) == RTC_TAMPERFILTER_DISABLE) || \
#                                       ((FILTER) == RTC_TAMPERFILTER_2SAMPLE) || \
#                                       ((FILTER) == RTC_TAMPERFILTER_4SAMPLE) || \
#                                       ((FILTER) == RTC_TAMPERFILTER_8SAMPLE))
# fun define IS_RTC_TAMPER_SAMPLING_FREQ(FREQ) (((FREQ) == RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768)|| \
#                                           ((FREQ) == RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV16384)|| \
#                                           ((FREQ) == RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV8192) || \
#                                           ((FREQ) == RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV4096) || \
#                                           ((FREQ) == RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV2048) || \
#                                           ((FREQ) == RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV1024) || \
#                                           ((FREQ) == RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV512)  || \
#                                          ((FREQ) == RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV256))
# fun define IS_RTC_TAMPER_PRECHARGE_DURATION(DURATION) (((DURATION) == RTC_TAMPERPRECHARGEDURATION_1RTCCLK) || \
#                                                    ((DURATION) == RTC_TAMPERPRECHARGEDURATION_2RTCCLK) || \
#                                                    ((DURATION) == RTC_TAMPERPRECHARGEDURATION_4RTCCLK) || \
#                                                   ((DURATION) == RTC_TAMPERPRECHARGEDURATION_8RTCCLK))
# fun define IS_RTC_TAMPER_TIMESTAMPONTAMPER_DETECTION(DETECTION) (((DETECTION) == RTC_TIMESTAMPONTAMPERDETECTION_ENABLE) || \
#                                                              ((DETECTION) == RTC_TIMESTAMPONTAMPERDETECTION_DISABLE))
# fun define IS_RTC_TAMPER_PULLUP_STATE(STATE) (((STATE) == RTC_TAMPER_PULLUP_ENABLE) || \
#                                           ((STATE) == RTC_TAMPER_PULLUP_DISABLE))
# fun define IS_RTC_WAKEUP_CLOCK(CLOCK) (((CLOCK) == RTC_WAKEUPCLOCK_RTCCLK_DIV16)   || \
#                                    ((CLOCK) == RTC_WAKEUPCLOCK_RTCCLK_DIV8)    || \
#                                    ((CLOCK) == RTC_WAKEUPCLOCK_RTCCLK_DIV4)    || \
#                                    ((CLOCK) == RTC_WAKEUPCLOCK_RTCCLK_DIV2)    || \
#                                    ((CLOCK) == RTC_WAKEUPCLOCK_CK_SPRE_16BITS) || \
#                                    ((CLOCK) == RTC_WAKEUPCLOCK_CK_SPRE_17BITS))
# fun define IS_RTC_WAKEUP_COUNTER(COUNTER)  ((COUNTER) <= RTC_WUTR_WUT)
# fun define IS_RTC_SMOOTH_CALIB_PERIOD(PERIOD) (((PERIOD) == RTC_SMOOTHCALIB_PERIOD_32SEC) || \
#                                            ((PERIOD) == RTC_SMOOTHCALIB_PERIOD_16SEC) || \
#                                            ((PERIOD) == RTC_SMOOTHCALIB_PERIOD_8SEC))
# fun define IS_RTC_SMOOTH_CALIB_PLUS(PLUS) (((PLUS) == RTC_SMOOTHCALIB_PLUSPULSES_SET) || \
#                                        ((PLUS) == RTC_SMOOTHCALIB_PLUSPULSES_RESET))
# fun define IS_RTC_SMOOTH_CALIB_MINUS(VALUE) ((VALUE) <= RTC_CALR_CALM)
# fun define IS_RTC_SHIFT_ADD1S(SEL) (((SEL) == RTC_SHIFTADD1S_RESET) || \
#                                 ((SEL) == RTC_SHIFTADD1S_SET))
# fun define IS_RTC_SHIFT_SUBFS(FS) ((FS) <= RTC_SHIFTR_SUBFS)
# fun define IS_RTC_CALIB_OUTPUT(OUTPUT)  (((OUTPUT) == RTC_CALIBOUTPUT_512HZ) || \
#                                      ((OUTPUT) == RTC_CALIBOUTPUT_1HZ))
# struct RTC_TamperTypeDef

class RTC_TamperTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Tamper',	ctypes.c_uint32),
		('Interrupt',	ctypes.c_uint32),
		('Trigger',	ctypes.c_uint32),
		('NoErase',	ctypes.c_uint32),
		('MaskFlag',	ctypes.c_uint32),
		('Filter',	ctypes.c_uint32),
		('SamplingFrequency',	ctypes.c_uint32),
		('PrechargeDuration',	ctypes.c_uint32),
		('TamperPullUp',	ctypes.c_uint32),
		('TimeStampOnTamperDetection',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_smartcard_ex.h : 

# empty define STM32L0xx_HAL_SMARTCARD_EX_H
# Skip SMARTCARD_TCBGT : no need parse
SMARTCARD_TC = 0x626
SMARTCARD_ADVFEATURE_NO_INIT = 0x0
SMARTCARD_ADVFEATURE_TXINVERT_INIT = 0x1
SMARTCARD_ADVFEATURE_RXINVERT_INIT = 0x2
SMARTCARD_ADVFEATURE_DATAINVERT_INIT = 0x4
SMARTCARD_ADVFEATURE_SWAP_INIT = 0x8
SMARTCARD_ADVFEATURE_RXOVERRUNDISABLE_INIT = 0x10
SMARTCARD_ADVFEATURE_DMADISABLEONERROR_INIT = 0x20
SMARTCARD_ADVFEATURE_MSBFIRST_INIT = 0x80
# Skip SMARTCARD_ADVFEATURE_TXCOMPLETION : no need parse
# Skip SMARTCARD_FLAG_TCBGT : no need parse
SMARTCARD_FLAG_REACK = 0x400000
SMARTCARD_FLAG_TEACK = 0x200000
SMARTCARD_FLAG_BUSY = 0x10000
SMARTCARD_FLAG_EOBF = 0x1000
SMARTCARD_FLAG_RTOF = 0x800
SMARTCARD_FLAG_TXE = 0x80
SMARTCARD_FLAG_TC = 0x40
SMARTCARD_FLAG_RXNE = 0x20
SMARTCARD_FLAG_IDLE = 0x10
SMARTCARD_FLAG_ORE = 0x8
SMARTCARD_FLAG_NE = 0x4
SMARTCARD_FLAG_FE = 0x2
SMARTCARD_FLAG_PE = 0x1
SMARTCARD_IT_PE = 0x28
SMARTCARD_IT_TXE = 0x727
SMARTCARD_IT_TC = 0x626
SMARTCARD_IT_RXNE = 0x525
SMARTCARD_IT_IDLE = 0x424
SMARTCARD_IT_ERR = 0x60
SMARTCARD_IT_ORE = 0x300
SMARTCARD_IT_NE = 0x200
SMARTCARD_IT_FE = 0x100
SMARTCARD_IT_EOB = 0xC3B
SMARTCARD_IT_RTO = 0xB3A
# Skip SMARTCARD_IT_TCBGT : no need parse
SMARTCARD_CLEAR_PEF = 0x1
SMARTCARD_CLEAR_FEF = 0x2
SMARTCARD_CLEAR_NEF = 0x4
SMARTCARD_CLEAR_OREF = 0x8
SMARTCARD_CLEAR_IDLEF = 0x10
SMARTCARD_CLEAR_TCF = 0x40
# Skip SMARTCARD_CLEAR_TCBGTF : no need parse
SMARTCARD_CLEAR_RTOF = 0x800
SMARTCARD_CLEAR_EOBF = 0x1000
# fun define SMARTCARD_TRANSMISSION_COMPLETION_SETTING(__HANDLE__)                                                \
#  do {                                                                                                       \
#    if (HAL_IS_BIT_CLR((__HANDLE__)->AdvancedInit.AdvFeatureInit, SMARTCARD_ADVFEATURE_TXCOMPLETION))        \
#    {                                                                                                        \
#     (__HANDLE__)->AdvancedInit.TxCompletionIndication = SMARTCARD_TC;                                       \
#    }                                                                                                        \
#    else                                                                                                     \
#    {                                                                                                        \
#      assert_param(IS_SMARTCARD_TRANSMISSION_COMPLETION((__HANDLE__)->AdvancedInit.TxCompletionIndication)); \
#    }                                                                                                        \
#  } while(0U)
# fun define SMARTCARD_TRANSMISSION_COMPLETION_SETTING(__HANDLE__)         \
#  do {                                                                \
#    (__HANDLE__)->AdvancedInit.TxCompletionIndication = SMARTCARD_TC; \
#  } while(0U)
# fun define SMARTCARD_TRANSMISSION_COMPLETION_FLAG(__HANDLE__)  \
#  (((__HANDLE__)->AdvancedInit.TxCompletionIndication == SMARTCARD_TC) ? (SMARTCARD_FLAG_TC) :  (SMARTCARD_FLAG_TCBGT))
# fun define SMARTCARD_TRANSMISSION_COMPLETION_FLAG(__HANDLE__)    (SMARTCARD_FLAG_TC)
# fun define IS_SMARTCARD_TRANSMISSION_COMPLETION(__TXCOMPLETE__) (((__TXCOMPLETE__) == SMARTCARD_TCBGT) || \
#                                                              ((__TXCOMPLETE__) == SMARTCARD_TC))
# fun define IS_SMARTCARD_TRANSMISSION_COMPLETION(__TXCOMPLETE__) ((__TXCOMPLETE__) == SMARTCARD_TC)
# ----------------------------------------

# file stm32l0xx_hal_smartcard.h : 

# Enum HAL_SMARTCARD_CallbackIDTypeDef
# Skip HAL_SMARTCARD_TX_COMPLETE_CB_ID : no need parse
# Skip HAL_SMARTCARD_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_SMARTCARD_ERROR_CB_ID : no need parse
# Skip HAL_SMARTCARD_ABORT_COMPLETE_CB_ID : no need parse
# Skip HAL_SMARTCARD_ABORT_TRANSMIT_COMPLETE_CB_ID : no need parse
# Skip HAL_SMARTCARD_ABORT_RECEIVE_COMPLETE_CB_ID : no need parse
# Skip HAL_SMARTCARD_MSPINIT_CB_ID : no need parse
# Skip HAL_SMARTCARD_MSPDEINIT_CB_ID : no need parse
# Enum SMARTCARD_ClockSourceTypeDef
SMARTCARD_CLOCKSOURCE_PCLK1 = 0x0
SMARTCARD_CLOCKSOURCE_PCLK2 = 0x1
SMARTCARD_CLOCKSOURCE_HSI = 0x2
SMARTCARD_CLOCKSOURCE_SYSCLK = 0x4
SMARTCARD_CLOCKSOURCE_LSE = 0x8
SMARTCARD_CLOCKSOURCE_UNDEFINED = 0x10
# empty define STM32L0xx_HAL_SMARTCARD_H
HAL_SMARTCARD_STATE_RESET = 0x0
HAL_SMARTCARD_STATE_READY = 0x20
HAL_SMARTCARD_STATE_BUSY = 0x24
HAL_SMARTCARD_STATE_BUSY_TX = 0x21
HAL_SMARTCARD_STATE_BUSY_RX = 0x22
HAL_SMARTCARD_STATE_BUSY_TX_RX = 0x23
HAL_SMARTCARD_STATE_TIMEOUT = 0xA0
HAL_SMARTCARD_STATE_ERROR = 0xE0
HAL_SMARTCARD_ERROR_NONE = 0x0
HAL_SMARTCARD_ERROR_PE = 0x1
HAL_SMARTCARD_ERROR_NE = 0x2
HAL_SMARTCARD_ERROR_FE = 0x4
HAL_SMARTCARD_ERROR_ORE = 0x8
HAL_SMARTCARD_ERROR_DMA = 0x10
HAL_SMARTCARD_ERROR_RTO = 0x20
# Skip HAL_SMARTCARD_ERROR_INVALID_CALLBACK : no need parse
SMARTCARD_WORDLENGTH_9B = 0x1000
SMARTCARD_STOPBITS_0_5 = 0x1000
SMARTCARD_STOPBITS_1_5 = 0x3000
SMARTCARD_PARITY_EVEN = 0x400
SMARTCARD_PARITY_ODD = 0x600
SMARTCARD_MODE_RX = 0x4
SMARTCARD_MODE_TX = 0x8
SMARTCARD_MODE_TX_RX = 0xC
SMARTCARD_POLARITY_LOW = 0x0
SMARTCARD_POLARITY_HIGH = 0x400
SMARTCARD_PHASE_1EDGE = 0x0
SMARTCARD_PHASE_2EDGE = 0x200
SMARTCARD_LASTBIT_DISABLE = 0x0
SMARTCARD_LASTBIT_ENABLE = 0x100
SMARTCARD_ONE_BIT_SAMPLE_DISABLE = 0x0
SMARTCARD_ONE_BIT_SAMPLE_ENABLE = 0x800
SMARTCARD_NACK_DISABLE = 0x0
SMARTCARD_NACK_ENABLE = 0x10
SMARTCARD_TIMEOUT_DISABLE = 0x0
SMARTCARD_TIMEOUT_ENABLE = 0x800000
SMARTCARD_ADVFEATURE_TXINV_DISABLE = 0x0
SMARTCARD_ADVFEATURE_TXINV_ENABLE = 0x20000
SMARTCARD_ADVFEATURE_RXINV_DISABLE = 0x0
SMARTCARD_ADVFEATURE_RXINV_ENABLE = 0x10000
SMARTCARD_ADVFEATURE_DATAINV_DISABLE = 0x0
SMARTCARD_ADVFEATURE_DATAINV_ENABLE = 0x40000
SMARTCARD_ADVFEATURE_SWAP_DISABLE = 0x0
SMARTCARD_ADVFEATURE_SWAP_ENABLE = 0x8000
SMARTCARD_ADVFEATURE_OVERRUN_ENABLE = 0x0
SMARTCARD_ADVFEATURE_OVERRUN_DISABLE = 0x1000
SMARTCARD_ADVFEATURE_DMA_ENABLEONRXERROR = 0x0
SMARTCARD_ADVFEATURE_DMA_DISABLEONRXERROR = 0x2000
SMARTCARD_ADVFEATURE_MSBFIRST_DISABLE = 0x0
SMARTCARD_ADVFEATURE_MSBFIRST_ENABLE = 0x80000
SMARTCARD_RXDATA_FLUSH_REQUEST = 0x8
SMARTCARD_TXDATA_FLUSH_REQUEST = 0x10
SMARTCARD_IT_MASK = 0x1F
SMARTCARD_CR_MASK = 0xE0
SMARTCARD_CR_POS = 0x5
SMARTCARD_ISR_MASK = 0x1F00
SMARTCARD_ISR_POS = 0x8
# fun define __HAL_SMARTCARD_RESET_HANDLE_STATE(__HANDLE__)  do{                                                       \
#                                                           (__HANDLE__)->gState = HAL_SMARTCARD_STATE_RESET;      \
#                                                           (__HANDLE__)->RxState = HAL_SMARTCARD_STATE_RESET;     \
#                                                           (__HANDLE__)->MspInitCallback = NULL;                  \
#                                                           (__HANDLE__)->MspDeInitCallback = NULL;                \
#                                                          } while(0U)
# fun define __HAL_SMARTCARD_RESET_HANDLE_STATE(__HANDLE__)  do{                                                       \
#                                                           (__HANDLE__)->gState = HAL_SMARTCARD_STATE_RESET;      \
#                                                           (__HANDLE__)->RxState = HAL_SMARTCARD_STATE_RESET;     \
#                                                          } while(0U)
# fun define __HAL_SMARTCARD_FLUSH_DRREGISTER(__HANDLE__)                        \
#    do{                                                                     \
#      SET_BIT((__HANDLE__)->Instance->RQR, SMARTCARD_RXDATA_FLUSH_REQUEST); \
#      SET_BIT((__HANDLE__)->Instance->RQR, SMARTCARD_TXDATA_FLUSH_REQUEST); \
#      } while(0U)
# fun define __HAL_SMARTCARD_CLEAR_FLAG(__HANDLE__, __FLAG__) ((__HANDLE__)->Instance->ICR = (__FLAG__))
# fun define __HAL_SMARTCARD_CLEAR_PEFLAG(__HANDLE__)   __HAL_SMARTCARD_CLEAR_FLAG((__HANDLE__), SMARTCARD_CLEAR_PEF)
# fun define __HAL_SMARTCARD_CLEAR_FEFLAG(__HANDLE__)   __HAL_SMARTCARD_CLEAR_FLAG((__HANDLE__), SMARTCARD_CLEAR_FEF)
# fun define __HAL_SMARTCARD_CLEAR_NEFLAG(__HANDLE__)   __HAL_SMARTCARD_CLEAR_FLAG((__HANDLE__), SMARTCARD_CLEAR_NEF)
# fun define __HAL_SMARTCARD_CLEAR_OREFLAG(__HANDLE__)   __HAL_SMARTCARD_CLEAR_FLAG((__HANDLE__), SMARTCARD_CLEAR_OREF)
# fun define __HAL_SMARTCARD_CLEAR_IDLEFLAG(__HANDLE__)   __HAL_SMARTCARD_CLEAR_FLAG((__HANDLE__), SMARTCARD_CLEAR_IDLEF)
# fun define __HAL_SMARTCARD_GET_FLAG(__HANDLE__, __FLAG__) (((__HANDLE__)->Instance->ISR & (__FLAG__)) == (__FLAG__))
# fun define __HAL_SMARTCARD_ENABLE_IT(__HANDLE__, __INTERRUPT__)   (((((__INTERRUPT__) & SMARTCARD_CR_MASK) >> SMARTCARD_CR_POS) == 1U)? ((__HANDLE__)->Instance->CR1 |= ((uint32_t)1U << ((__INTERRUPT__) & SMARTCARD_IT_MASK))): \
#                                                                ((((__INTERRUPT__) & SMARTCARD_CR_MASK) >> SMARTCARD_CR_POS) == 2U)? ((__HANDLE__)->Instance->CR2 |= ((uint32_t)1U << ((__INTERRUPT__) & SMARTCARD_IT_MASK))): \
#                                                                ((__HANDLE__)->Instance->CR3 |= ((uint32_t)1U << ((__INTERRUPT__) & SMARTCARD_IT_MASK))))
# fun define __HAL_SMARTCARD_DISABLE_IT(__HANDLE__, __INTERRUPT__)  (((((__INTERRUPT__) & SMARTCARD_CR_MASK) >> SMARTCARD_CR_POS) == 1U)? ((__HANDLE__)->Instance->CR1 &= ~ ((uint32_t)1U << ((__INTERRUPT__) & SMARTCARD_IT_MASK))): \
#                                                                ((((__INTERRUPT__) & SMARTCARD_CR_MASK) >> SMARTCARD_CR_POS) == 2U)? ((__HANDLE__)->Instance->CR2 &= ~ ((uint32_t)1U << ((__INTERRUPT__) & SMARTCARD_IT_MASK))): \
#                                                                ((__HANDLE__)->Instance->CR3 &= ~ ((uint32_t)1U << ((__INTERRUPT__) & SMARTCARD_IT_MASK))))
# fun define __HAL_SMARTCARD_GET_IT(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->ISR & ((uint32_t)0x01U << (((__INTERRUPT__) & SMARTCARD_ISR_MASK)>> SMARTCARD_ISR_POS))) != 0U) ? SET : RESET)
# fun define __HAL_SMARTCARD_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((((((__INTERRUPT__) & SMARTCARD_CR_MASK) >> SMARTCARD_CR_POS) == 0x01U)? (__HANDLE__)->Instance->CR1 : \
#                                                                    (((((__INTERRUPT__) & SMARTCARD_CR_MASK) >> SMARTCARD_CR_POS) == 0x02U)? (__HANDLE__)->Instance->CR2 : \
#                                                                    (__HANDLE__)->Instance->CR3)) & ((uint32_t)0x01U << (((uint16_t)(__INTERRUPT__)) & SMARTCARD_IT_MASK)))  != 0U) ? SET : RESET)
# fun define __HAL_SMARTCARD_CLEAR_IT(__HANDLE__, __IT_CLEAR__) ((__HANDLE__)->Instance->ICR |= (uint32_t)(__IT_CLEAR__))
# fun define __HAL_SMARTCARD_SEND_REQ(__HANDLE__, __REQ__) ((__HANDLE__)->Instance->RQR |= (uint16_t)(__REQ__))
# fun define __HAL_SMARTCARD_ONE_BIT_SAMPLE_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3|= USART_CR3_ONEBIT)
# fun define __HAL_SMARTCARD_ONE_BIT_SAMPLE_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT))
# fun define __HAL_SMARTCARD_ENABLE(__HANDLE__)               ((__HANDLE__)->Instance->CR1 |=  USART_CR1_UE)
# fun define __HAL_SMARTCARD_DISABLE(__HANDLE__)              ((__HANDLE__)->Instance->CR1 &=  ~USART_CR1_UE)
# fun define SMARTCARD_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)   \
#  do {                                                         \
#    if((__HANDLE__)->Instance == USART2)                       \
#    {                                                          \
#       switch(__HAL_RCC_GET_USART2_SOURCE())                   \
#       {                                                       \
#        case RCC_USART2CLKSOURCE_PCLK1:                        \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_PCLK1;     \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_HSI:                          \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_HSI;       \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_SYSCLK:                       \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_SYSCLK;    \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_LSE:                          \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_LSE;       \
#          break;                                               \
#        default:                                               \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_UNDEFINED; \
#          break;                                               \
#       }                                                       \
#    }                                                          \
#    else                                                       \
#    {                                                          \
#      (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_UNDEFINED;     \
#    }                                                          \
#  } while(0U)
# fun define SMARTCARD_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)   \
#  do {                                                         \
#    if((__HANDLE__)->Instance == USART1)                       \
#    {                                                          \
#       switch(__HAL_RCC_GET_USART1_SOURCE())                   \
#       {                                                       \
#        case RCC_USART1CLKSOURCE_PCLK2:                        \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_PCLK2;     \
#          break;                                               \
#        case RCC_USART1CLKSOURCE_HSI:                          \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_HSI;       \
#          break;                                               \
#        case RCC_USART1CLKSOURCE_SYSCLK:                       \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_SYSCLK;    \
#          break;                                               \
#        case RCC_USART1CLKSOURCE_LSE:                          \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_LSE;       \
#          break;                                               \
#        default:                                               \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_UNDEFINED; \
#          break;                                               \
#       }                                                       \
#    }                                                          \
#    else if((__HANDLE__)->Instance == USART2)                  \
#    {                                                          \
#       switch(__HAL_RCC_GET_USART2_SOURCE())                   \
#       {                                                       \
#        case RCC_USART2CLKSOURCE_PCLK1:                        \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_PCLK1;     \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_HSI:                          \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_HSI;       \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_SYSCLK:                       \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_SYSCLK;    \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_LSE:                          \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_LSE;       \
#          break;                                               \
#        default:                                               \
#          (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_UNDEFINED; \
#          break;                                               \
#       }                                                       \
#    }                                                          \
#    else                                                       \
#    {                                                          \
#      (__CLOCKSOURCE__) = SMARTCARD_CLOCKSOURCE_UNDEFINED;     \
#    }                                                          \
#  } while(0U)
# fun define IS_SMARTCARD_BAUDRATE(__BAUDRATE__) ((__BAUDRATE__) < 2000001U)
# fun define IS_SMARTCARD_BLOCKLENGTH(__LENGTH__) ((__LENGTH__) <= 0xFFU)
# fun define IS_SMARTCARD_TIMEOUT_VALUE(__TIMEOUTVALUE__)    ((__TIMEOUTVALUE__) <= 0xFFFFFFU)
# fun define IS_SMARTCARD_AUTORETRY_COUNT(__COUNT__)         ((__COUNT__) <= 0x7U)
# fun define IS_SMARTCARD_WORD_LENGTH(__LENGTH__) ((__LENGTH__) == SMARTCARD_WORDLENGTH_9B)
# fun define IS_SMARTCARD_STOPBITS(__STOPBITS__) (((__STOPBITS__) == SMARTCARD_STOPBITS_0_5) ||\
#                                             ((__STOPBITS__) == SMARTCARD_STOPBITS_1_5))
# fun define IS_SMARTCARD_PARITY(__PARITY__) (((__PARITY__) == SMARTCARD_PARITY_EVEN) || \
#                                         ((__PARITY__) == SMARTCARD_PARITY_ODD))
# fun define IS_SMARTCARD_MODE(__MODE__) ((((__MODE__) & 0xFFF3U) == 0x00U) && ((__MODE__) != 0x00U))
# fun define IS_SMARTCARD_POLARITY(__CPOL__) (((__CPOL__) == SMARTCARD_POLARITY_LOW) || ((__CPOL__) == SMARTCARD_POLARITY_HIGH))
# fun define IS_SMARTCARD_PHASE(__CPHA__) (((__CPHA__) == SMARTCARD_PHASE_1EDGE) || ((__CPHA__) == SMARTCARD_PHASE_2EDGE))
# fun define IS_SMARTCARD_LASTBIT(__LASTBIT__) (((__LASTBIT__) == SMARTCARD_LASTBIT_DISABLE) || \
#                                           ((__LASTBIT__) == SMARTCARD_LASTBIT_ENABLE))
# fun define IS_SMARTCARD_ONE_BIT_SAMPLE(__ONEBIT__) (((__ONEBIT__) == SMARTCARD_ONE_BIT_SAMPLE_DISABLE) || \
#                                                 ((__ONEBIT__) == SMARTCARD_ONE_BIT_SAMPLE_ENABLE))
# fun define IS_SMARTCARD_NACK(__NACK__) (((__NACK__) == SMARTCARD_NACK_ENABLE) || \
#                                     ((__NACK__) == SMARTCARD_NACK_DISABLE))
# fun define IS_SMARTCARD_TIMEOUT(__TIMEOUT__) (((__TIMEOUT__) == SMARTCARD_TIMEOUT_DISABLE) || \
#                                           ((__TIMEOUT__) == SMARTCARD_TIMEOUT_ENABLE))
# fun define IS_SMARTCARD_ADVFEATURE_INIT(__INIT__) ((__INIT__) <= (SMARTCARD_ADVFEATURE_NO_INIT                | \
#                                                               SMARTCARD_ADVFEATURE_TXINVERT_INIT          | \
#                                                               SMARTCARD_ADVFEATURE_RXINVERT_INIT          | \
#                                                               SMARTCARD_ADVFEATURE_DATAINVERT_INIT        | \
#                                                               SMARTCARD_ADVFEATURE_SWAP_INIT              | \
#                                                               SMARTCARD_ADVFEATURE_RXOVERRUNDISABLE_INIT  | \
#                                                               SMARTCARD_ADVFEATURE_DMADISABLEONERROR_INIT | \
#                                                               SMARTCARD_ADVFEATURE_MSBFIRST_INIT))
# fun define IS_SMARTCARD_ADVFEATURE_TXINV(__TXINV__) (((__TXINV__) == SMARTCARD_ADVFEATURE_TXINV_DISABLE) || \
#                                                  ((__TXINV__) == SMARTCARD_ADVFEATURE_TXINV_ENABLE))
# fun define IS_SMARTCARD_ADVFEATURE_RXINV(__RXINV__) (((__RXINV__) == SMARTCARD_ADVFEATURE_RXINV_DISABLE) || \
#                                                  ((__RXINV__) == SMARTCARD_ADVFEATURE_RXINV_ENABLE))
# fun define IS_SMARTCARD_ADVFEATURE_DATAINV(__DATAINV__) (((__DATAINV__) == SMARTCARD_ADVFEATURE_DATAINV_DISABLE) || \
#                                                      ((__DATAINV__) == SMARTCARD_ADVFEATURE_DATAINV_ENABLE))
# fun define IS_SMARTCARD_ADVFEATURE_SWAP(__SWAP__) (((__SWAP__) == SMARTCARD_ADVFEATURE_SWAP_DISABLE) || \
#                                                ((__SWAP__) == SMARTCARD_ADVFEATURE_SWAP_ENABLE))
# fun define IS_SMARTCARD_OVERRUN(__OVERRUN__) (((__OVERRUN__) == SMARTCARD_ADVFEATURE_OVERRUN_ENABLE) || \
#                                           ((__OVERRUN__) == SMARTCARD_ADVFEATURE_OVERRUN_DISABLE))
# fun define IS_SMARTCARD_ADVFEATURE_DMAONRXERROR(__DMA__) (((__DMA__) == SMARTCARD_ADVFEATURE_DMA_ENABLEONRXERROR) || \
#                                                       ((__DMA__) == SMARTCARD_ADVFEATURE_DMA_DISABLEONRXERROR))
# fun define IS_SMARTCARD_ADVFEATURE_MSBFIRST(__MSBFIRST__) (((__MSBFIRST__) == SMARTCARD_ADVFEATURE_MSBFIRST_DISABLE) || \
#                                                        ((__MSBFIRST__) == SMARTCARD_ADVFEATURE_MSBFIRST_ENABLE))
# fun define IS_SMARTCARD_REQUEST_PARAMETER(__PARAM__) (((__PARAM__) == SMARTCARD_RXDATA_FLUSH_REQUEST) || \
#                                                   ((__PARAM__) == SMARTCARD_TXDATA_FLUSH_REQUEST))
# struct SMARTCARD_InitTypeDef

class SMARTCARD_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('BaudRate',	ctypes.c_uint32),
		('WordLength',	ctypes.c_uint32),
		('StopBits',	ctypes.c_uint32),
		('Parity',	ctypes.c_uint16),
		('Mode',	ctypes.c_uint16),
		('CLKPolarity',	ctypes.c_uint16),
		('CLKPhase',	ctypes.c_uint16),
		('CLKLastBit',	ctypes.c_uint16),
		('OneBitSampling',	ctypes.c_uint16),
		('Prescaler',	ctypes.c_uint8),
		('GuardTime',	ctypes.c_uint8),
		('NACKEnable',	ctypes.c_uint16),
		('TimeOutEnable',	ctypes.c_uint32),
		('TimeOutValue',	ctypes.c_uint32),
		('BlockLength',	ctypes.c_uint8),
		('AutoRetryCount',	ctypes.c_uint8),
	]
	def ref(self):
		return ctypes.byref(self)

# struct SMARTCARD_AdvFeatureInitTypeDef

class SMARTCARD_AdvFeatureInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('AdvFeatureInit',	ctypes.c_uint32),
		('TxPinLevelInvert',	ctypes.c_uint32),
		('RxPinLevelInvert',	ctypes.c_uint32),
		('DataInvert',	ctypes.c_uint32),
		('Swap',	ctypes.c_uint32),
		('OverrunDisable',	ctypes.c_uint32),
		('DMADisableonRxError',	ctypes.c_uint32),
		('MSBFirst',	ctypes.c_uint32),
		('TxCompletionIndication',	ctypes.c_uint16),
	]
	def ref(self):
		return ctypes.byref(self)

# struct SMARTCARD_HandleTypeDef
# struct SMARTCARD_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_smbus.h : 

# Enum HAL_SMBUS_CallbackIDTypeDef
# Skip HAL_SMBUS_MASTER_TX_COMPLETE_CB_ID : no need parse
# Skip HAL_SMBUS_MASTER_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_SMBUS_SLAVE_TX_COMPLETE_CB_ID : no need parse
# Skip HAL_SMBUS_SLAVE_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_SMBUS_LISTEN_COMPLETE_CB_ID : no need parse
# Skip HAL_SMBUS_ERROR_CB_ID : no need parse
# Skip HAL_SMBUS_MSPINIT_CB_ID : no need parse
# Skip HAL_SMBUS_MSPDEINIT_CB_ID : no need parse
# empty define STM32L0xx_HAL_SMBUS_H
HAL_SMBUS_STATE_RESET = 0x0
HAL_SMBUS_STATE_READY = 0x1
HAL_SMBUS_STATE_BUSY = 0x2
HAL_SMBUS_STATE_MASTER_BUSY_TX = 0x12
HAL_SMBUS_STATE_MASTER_BUSY_RX = 0x22
HAL_SMBUS_STATE_SLAVE_BUSY_TX = 0x32
HAL_SMBUS_STATE_SLAVE_BUSY_RX = 0x42
HAL_SMBUS_STATE_TIMEOUT = 0x3
HAL_SMBUS_STATE_ERROR = 0x4
HAL_SMBUS_STATE_LISTEN = 0x8
HAL_SMBUS_ERROR_NONE = 0x0
HAL_SMBUS_ERROR_BERR = 0x1
HAL_SMBUS_ERROR_ARLO = 0x2
HAL_SMBUS_ERROR_ACKF = 0x4
HAL_SMBUS_ERROR_OVR = 0x8
HAL_SMBUS_ERROR_HALTIMEOUT = 0x10
HAL_SMBUS_ERROR_BUSTIMEOUT = 0x20
HAL_SMBUS_ERROR_ALERT = 0x40
HAL_SMBUS_ERROR_PECERR = 0x80
# Skip HAL_SMBUS_ERROR_INVALID_CALLBACK : no need parse
HAL_SMBUS_ERROR_INVALID_PARAM = 0x200
SMBUS_ANALOGFILTER_ENABLE = 0x0
SMBUS_ANALOGFILTER_DISABLE = 0x1000
SMBUS_ADDRESSINGMODE_7BIT = 0x1
SMBUS_ADDRESSINGMODE_10BIT = 0x2
SMBUS_DUALADDRESS_DISABLE = 0x0
SMBUS_DUALADDRESS_ENABLE = 0x8000
SMBUS_OA2_NOMASK = 0x0
SMBUS_OA2_MASK01 = 0x1
SMBUS_OA2_MASK02 = 0x2
SMBUS_OA2_MASK03 = 0x3
SMBUS_OA2_MASK04 = 0x4
SMBUS_OA2_MASK05 = 0x5
SMBUS_OA2_MASK06 = 0x6
SMBUS_OA2_MASK07 = 0x7
SMBUS_GENERALCALL_DISABLE = 0x0
SMBUS_GENERALCALL_ENABLE = 0x80000
SMBUS_NOSTRETCH_DISABLE = 0x0
SMBUS_NOSTRETCH_ENABLE = 0x20000
SMBUS_PEC_DISABLE = 0x0
SMBUS_PEC_ENABLE = 0x800000
SMBUS_PERIPHERAL_MODE_SMBUS_HOST = 0x100000
SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE = 0x0
SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP = 0x200000
SMBUS_SOFTEND_MODE = 0x0
SMBUS_RELOAD_MODE = 0x1000000
SMBUS_AUTOEND_MODE = 0x2000000
SMBUS_SENDPEC_MODE = 0x4000000
SMBUS_NO_STARTSTOP = 0x0
SMBUS_GENERATE_STOP = 0x80004000
SMBUS_GENERATE_START_READ = 0x80002400
SMBUS_GENERATE_START_WRITE = 0x80002000
SMBUS_FIRST_FRAME = 0x0
SMBUS_NEXT_FRAME = 0x1000000
SMBUS_FIRST_AND_LAST_FRAME_NO_PEC = 0x2000000
SMBUS_LAST_FRAME_NO_PEC = 0x2000000
SMBUS_FIRST_AND_LAST_FRAME_WITH_PEC = 0x6000000
SMBUS_LAST_FRAME_WITH_PEC = 0x6000000
SMBUS_OTHER_FRAME_NO_PEC = 0xAA
SMBUS_OTHER_FRAME_WITH_PEC = 0xAA00
SMBUS_OTHER_AND_LAST_FRAME_NO_PEC = 0xAA0000
SMBUS_OTHER_AND_LAST_FRAME_WITH_PEC = 0xAA000000
SMBUS_IT_ERRI = 0x80
SMBUS_IT_TCI = 0x40
SMBUS_IT_STOPI = 0x20
SMBUS_IT_NACKI = 0x10
SMBUS_IT_ADDRI = 0x8
SMBUS_IT_RXI = 0x4
SMBUS_IT_TXI = 0x2
SMBUS_IT_TX = 0xF2
SMBUS_IT_RX = 0xD4
SMBUS_IT_ALERT = 0x80
SMBUS_IT_ADDR = 0x38
SMBUS_FLAG_TXE = 0x1
SMBUS_FLAG_TXIS = 0x2
SMBUS_FLAG_RXNE = 0x4
SMBUS_FLAG_ADDR = 0x8
SMBUS_FLAG_AF = 0x10
SMBUS_FLAG_STOPF = 0x20
SMBUS_FLAG_TC = 0x40
SMBUS_FLAG_TCR = 0x80
SMBUS_FLAG_BERR = 0x100
SMBUS_FLAG_ARLO = 0x200
SMBUS_FLAG_OVR = 0x400
SMBUS_FLAG_PECERR = 0x800
SMBUS_FLAG_TIMEOUT = 0x1000
SMBUS_FLAG_ALERT = 0x2000
SMBUS_FLAG_BUSY = 0x8000
SMBUS_FLAG_DIR = 0x10000
# fun define __HAL_SMBUS_RESET_HANDLE_STATE(__HANDLE__)           do{                                                   \
#                                                                (__HANDLE__)->State = HAL_SMBUS_STATE_RESET;       \
#                                                                (__HANDLE__)->MspInitCallback = NULL;            \
#                                                                (__HANDLE__)->MspDeInitCallback = NULL;          \
#                                                             } while(0)
# fun define __HAL_SMBUS_RESET_HANDLE_STATE(__HANDLE__)         ((__HANDLE__)->State = HAL_SMBUS_STATE_RESET)
# fun define __HAL_SMBUS_ENABLE_IT(__HANDLE__, __INTERRUPT__)   ((__HANDLE__)->Instance->CR1 |= (__INTERRUPT__))
# fun define __HAL_SMBUS_DISABLE_IT(__HANDLE__, __INTERRUPT__)  ((__HANDLE__)->Instance->CR1 &= (~(__INTERRUPT__)))
# fun define __HAL_SMBUS_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->CR1 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
SMBUS_FLAG_MASK = 0x1FFFF
# fun define __HAL_SMBUS_GET_FLAG(__HANDLE__, __FLAG__) (((((__HANDLE__)->Instance->ISR) & ((__FLAG__) & SMBUS_FLAG_MASK)) == ((__FLAG__) & SMBUS_FLAG_MASK)) ? SET : RESET)
# fun define __HAL_SMBUS_CLEAR_FLAG(__HANDLE__, __FLAG__) ((__HANDLE__)->Instance->ICR = (__FLAG__))
# fun define __HAL_SMBUS_ENABLE(__HANDLE__)                  (SET_BIT((__HANDLE__)->Instance->CR1, I2C_CR1_PE))
# fun define __HAL_SMBUS_DISABLE(__HANDLE__)                 (CLEAR_BIT((__HANDLE__)->Instance->CR1, I2C_CR1_PE))
# fun define __HAL_SMBUS_GENERATE_NACK(__HANDLE__)           (SET_BIT((__HANDLE__)->Instance->CR2, I2C_CR2_NACK))
# fun define IS_SMBUS_ANALOG_FILTER(FILTER)                  (((FILTER) == SMBUS_ANALOGFILTER_ENABLE) || \
#                                                          ((FILTER) == SMBUS_ANALOGFILTER_DISABLE))
# fun define IS_SMBUS_DIGITAL_FILTER(FILTER)                 ((FILTER) <= 0x0000000FU)
# fun define IS_SMBUS_ADDRESSING_MODE(MODE)                  (((MODE) == SMBUS_ADDRESSINGMODE_7BIT)  || \
#                                                          ((MODE) == SMBUS_ADDRESSINGMODE_10BIT))
# fun define IS_SMBUS_DUAL_ADDRESS(ADDRESS)                  (((ADDRESS) == SMBUS_DUALADDRESS_DISABLE) || \
#                                                          ((ADDRESS) == SMBUS_DUALADDRESS_ENABLE))
# fun define IS_SMBUS_OWN_ADDRESS2_MASK(MASK)                (((MASK) == SMBUS_OA2_NOMASK)    || \
#                                                         ((MASK) == SMBUS_OA2_MASK01)    || \
#                                                         ((MASK) == SMBUS_OA2_MASK02)    || \
#                                                         ((MASK) == SMBUS_OA2_MASK03)    || \
#                                                         ((MASK) == SMBUS_OA2_MASK04)    || \
#                                                         ((MASK) == SMBUS_OA2_MASK05)    || \
#                                                         ((MASK) == SMBUS_OA2_MASK06)    || \
#                                                         ((MASK) == SMBUS_OA2_MASK07))
# fun define IS_SMBUS_GENERAL_CALL(CALL)                     (((CALL) == SMBUS_GENERALCALL_DISABLE) || \
#                                                         ((CALL) == SMBUS_GENERALCALL_ENABLE))
# fun define IS_SMBUS_NO_STRETCH(STRETCH)                    (((STRETCH) == SMBUS_NOSTRETCH_DISABLE) || \
#                                                         ((STRETCH) == SMBUS_NOSTRETCH_ENABLE))
# fun define IS_SMBUS_PEC(PEC)                               (((PEC) == SMBUS_PEC_DISABLE) || \
#                                                          ((PEC) == SMBUS_PEC_ENABLE))
# fun define IS_SMBUS_PERIPHERAL_MODE(MODE)                  (((MODE) == SMBUS_PERIPHERAL_MODE_SMBUS_HOST)    || \
#                                                          ((MODE) == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE)  || \
#                                                          ((MODE) == SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP))
# fun define IS_SMBUS_TRANSFER_MODE(MODE)                    (((MODE) == SMBUS_RELOAD_MODE)                           || \
#                                                          ((MODE) == SMBUS_AUTOEND_MODE)                         || \
#                                                          ((MODE) == SMBUS_SOFTEND_MODE)                         || \
#                                                          ((MODE) == SMBUS_SENDPEC_MODE)                         || \
#                                                          ((MODE) == (SMBUS_RELOAD_MODE | SMBUS_SENDPEC_MODE))   || \
#                                                          ((MODE) == (SMBUS_AUTOEND_MODE | SMBUS_SENDPEC_MODE))  || \
#                                                          ((MODE) == (SMBUS_AUTOEND_MODE | SMBUS_RELOAD_MODE))   || \
#                                                          ((MODE) == (SMBUS_AUTOEND_MODE | SMBUS_SENDPEC_MODE | SMBUS_RELOAD_MODE )))
# fun define IS_SMBUS_TRANSFER_REQUEST(REQUEST)              (((REQUEST) == SMBUS_GENERATE_STOP)              || \
#                                                          ((REQUEST) == SMBUS_GENERATE_START_READ)       || \
#                                                          ((REQUEST) == SMBUS_GENERATE_START_WRITE)      || \
#                                                          ((REQUEST) == SMBUS_NO_STARTSTOP))
# fun define IS_SMBUS_TRANSFER_OPTIONS_REQUEST(REQUEST)      (IS_SMBUS_TRANSFER_OTHER_OPTIONS_REQUEST(REQUEST)       || \
#                                                          ((REQUEST) == SMBUS_FIRST_FRAME)                       || \
#                                                          ((REQUEST) == SMBUS_NEXT_FRAME)                        || \
#                                                          ((REQUEST) == SMBUS_FIRST_AND_LAST_FRAME_NO_PEC)       || \
#                                                          ((REQUEST) == SMBUS_LAST_FRAME_NO_PEC)                 || \
#                                                          ((REQUEST) == SMBUS_FIRST_AND_LAST_FRAME_WITH_PEC)     || \
#                                                          ((REQUEST) == SMBUS_LAST_FRAME_WITH_PEC))
# fun define IS_SMBUS_TRANSFER_OTHER_OPTIONS_REQUEST(REQUEST) (((REQUEST) == SMBUS_OTHER_FRAME_NO_PEC)                || \
#                                                          ((REQUEST) == SMBUS_OTHER_AND_LAST_FRAME_NO_PEC)       || \
#                                                          ((REQUEST) == SMBUS_OTHER_FRAME_WITH_PEC)              || \
#                                                          ((REQUEST) == SMBUS_OTHER_AND_LAST_FRAME_WITH_PEC))
# fun define SMBUS_RESET_CR1(__HANDLE__)                       ((__HANDLE__)->Instance->CR1 &= (uint32_t)~((uint32_t)(I2C_CR1_SMBHEN | I2C_CR1_SMBDEN | I2C_CR1_PECEN)))
# fun define SMBUS_RESET_CR2(__HANDLE__)                       ((__HANDLE__)->Instance->CR2 &= (uint32_t)~((uint32_t)(I2C_CR2_SADD | I2C_CR2_HEAD10R | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_RD_WRN)))
# fun define SMBUS_GENERATE_START(__ADDMODE__,__ADDRESS__)     (((__ADDMODE__) == SMBUS_ADDRESSINGMODE_7BIT) ? (uint32_t)((((uint32_t)(__ADDRESS__) & (I2C_CR2_SADD)) | (I2C_CR2_START) | (I2C_CR2_AUTOEND)) & (~I2C_CR2_RD_WRN)) : \
#                                                                  (uint32_t)((((uint32_t)(__ADDRESS__) & (I2C_CR2_SADD)) | (I2C_CR2_ADD10) | (I2C_CR2_START)) & (~I2C_CR2_RD_WRN)))
# fun define SMBUS_GET_ADDR_MATCH(__HANDLE__)                  (((__HANDLE__)->Instance->ISR & I2C_ISR_ADDCODE) >> 17U)
# fun define SMBUS_GET_DIR(__HANDLE__)                         (((__HANDLE__)->Instance->ISR & I2C_ISR_DIR) >> 16U)
# fun define SMBUS_GET_STOP_MODE(__HANDLE__)                   ((__HANDLE__)->Instance->CR2 & I2C_CR2_AUTOEND)
# fun define SMBUS_GET_PEC_MODE(__HANDLE__)                    ((__HANDLE__)->Instance->CR2 & I2C_CR2_PECBYTE)
# fun define SMBUS_GET_ALERT_ENABLED(__HANDLE__)                ((__HANDLE__)->Instance->CR1 & I2C_CR1_ALERTEN)
# fun define SMBUS_CHECK_FLAG(__ISR__, __FLAG__)             ((((__ISR__) & ((__FLAG__) & SMBUS_FLAG_MASK)) == ((__FLAG__) & SMBUS_FLAG_MASK)) ? SET : RESET)
# fun define SMBUS_CHECK_IT_SOURCE(__CR1__, __IT__)          ((((__CR1__) & (__IT__)) == (__IT__)) ? SET : RESET)
# fun define IS_SMBUS_OWN_ADDRESS1(ADDRESS1)                         ((ADDRESS1) <= 0x000003FFU)
# fun define IS_SMBUS_OWN_ADDRESS2(ADDRESS2)                         ((ADDRESS2) <= (uint16_t)0x00FFU)
# struct SMBUS_InitTypeDef

class SMBUS_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Timing',	ctypes.c_uint32),
		('AnalogFilter',	ctypes.c_uint32),
		('OwnAddress1',	ctypes.c_uint32),
		('AddressingMode',	ctypes.c_uint32),
		('DualAddressMode',	ctypes.c_uint32),
		('OwnAddress2',	ctypes.c_uint32),
		('OwnAddress2Masks',	ctypes.c_uint32),
		('GeneralCallMode',	ctypes.c_uint32),
		('NoStretchMode',	ctypes.c_uint32),
		('PacketErrorCheckMode',	ctypes.c_uint32),
		('PeripheralMode',	ctypes.c_uint32),
		('SMBusTimeout',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct SMBUS_HandleTypeDef
# struct SMBUS_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_spi.h : 

# Enum HAL_SPI_StateTypeDef
HAL_SPI_STATE_RESET = 0x0
HAL_SPI_STATE_READY = 0x1
HAL_SPI_STATE_BUSY = 0x2
HAL_SPI_STATE_BUSY_TX = 0x3
HAL_SPI_STATE_BUSY_RX = 0x4
HAL_SPI_STATE_BUSY_TX_RX = 0x5
HAL_SPI_STATE_ERROR = 0x6
HAL_SPI_STATE_ABORT = 0x7
# Enum HAL_SPI_CallbackIDTypeDef
# Skip HAL_SPI_TX_COMPLETE_CB_ID : no need parse
# Skip HAL_SPI_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_SPI_TX_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_SPI_TX_HALF_COMPLETE_CB_ID : no need parse
# Skip HAL_SPI_RX_HALF_COMPLETE_CB_ID : no need parse
# Skip HAL_SPI_TX_RX_HALF_COMPLETE_CB_ID : no need parse
# Skip HAL_SPI_ERROR_CB_ID : no need parse
# Skip HAL_SPI_ABORT_CB_ID : no need parse
# Skip HAL_SPI_MSPINIT_CB_ID : no need parse
# Skip HAL_SPI_MSPDEINIT_CB_ID : no need parse
# empty define STM32L0xx_HAL_SPI_H
HAL_SPI_ERROR_NONE = 0x0
HAL_SPI_ERROR_MODF = 0x1
HAL_SPI_ERROR_CRC = 0x2
HAL_SPI_ERROR_OVR = 0x4
HAL_SPI_ERROR_FRE = 0x8
HAL_SPI_ERROR_DMA = 0x10
HAL_SPI_ERROR_FLAG = 0x20
HAL_SPI_ERROR_ABORT = 0x40
# Skip HAL_SPI_ERROR_INVALID_CALLBACK : no need parse
SPI_MODE_SLAVE = 0x0
SPI_MODE_MASTER = 0x104
SPI_DIRECTION_2LINES = 0x0
SPI_DIRECTION_2LINES_RXONLY = 0x400
SPI_DIRECTION_1LINE = 0x8000
SPI_DATASIZE_8BIT = 0x0
SPI_DATASIZE_16BIT = 0x800
SPI_POLARITY_LOW = 0x0
SPI_POLARITY_HIGH = 0x2
SPI_PHASE_1EDGE = 0x0
SPI_PHASE_2EDGE = 0x1
SPI_NSS_SOFT = 0x200
SPI_NSS_HARD_INPUT = 0x0
SPI_NSS_HARD_OUTPUT = 0x40000
SPI_BAUDRATEPRESCALER_2 = 0x0
SPI_BAUDRATEPRESCALER_4 = 0x8
SPI_BAUDRATEPRESCALER_8 = 0x10
SPI_BAUDRATEPRESCALER_16 = 0x18
SPI_BAUDRATEPRESCALER_32 = 0x20
SPI_BAUDRATEPRESCALER_64 = 0x28
SPI_BAUDRATEPRESCALER_128 = 0x30
SPI_BAUDRATEPRESCALER_256 = 0x38
SPI_FIRSTBIT_MSB = 0x0
SPI_FIRSTBIT_LSB = 0x80
SPI_TIMODE_DISABLE = 0x0
SPI_TIMODE_ENABLE = 0x10
SPI_CRCCALCULATION_DISABLE = 0x0
SPI_CRCCALCULATION_ENABLE = 0x2000
SPI_IT_TXE = 0x80
SPI_IT_RXNE = 0x40
SPI_IT_ERR = 0x20
SPI_FLAG_RXNE = 0x1
SPI_FLAG_TXE = 0x2
SPI_FLAG_BSY = 0x80
SPI_FLAG_CRCERR = 0x10
SPI_FLAG_MODF = 0x20
SPI_FLAG_OVR = 0x40
SPI_FLAG_FRE = 0x100
SPI_FLAG_MASK = 0x1F3
# fun define __HAL_SPI_RESET_HANDLE_STATE(__HANDLE__)                do{                                                  \
#                                                                    (__HANDLE__)->State = HAL_SPI_STATE_RESET;       \
#                                                                    (__HANDLE__)->MspInitCallback = NULL;            \
#                                                                    (__HANDLE__)->MspDeInitCallback = NULL;          \
#                                                                  } while(0)
# fun define __HAL_SPI_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_SPI_STATE_RESET)
# fun define __HAL_SPI_ENABLE_IT(__HANDLE__, __INTERRUPT__)   SET_BIT((__HANDLE__)->Instance->CR2, (__INTERRUPT__))
# fun define __HAL_SPI_DISABLE_IT(__HANDLE__, __INTERRUPT__)  CLEAR_BIT((__HANDLE__)->Instance->CR2, (__INTERRUPT__))
# fun define __HAL_SPI_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->CR2 & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
# fun define __HAL_SPI_GET_FLAG(__HANDLE__, __FLAG__) ((((__HANDLE__)->Instance->SR) & (__FLAG__)) == (__FLAG__))
# fun define __HAL_SPI_CLEAR_CRCERRFLAG(__HANDLE__) ((__HANDLE__)->Instance->SR = (uint16_t)(~SPI_FLAG_CRCERR))
# fun define __HAL_SPI_CLEAR_MODFFLAG(__HANDLE__)             \
#  do{                                                    \
#    __IO uint32_t tmpreg_modf = 0x00U;                   \
#    tmpreg_modf = (__HANDLE__)->Instance->SR;            \
#    CLEAR_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_SPE); \
#    UNUSED(tmpreg_modf);                                 \
#  } while(0U)
# fun define __HAL_SPI_CLEAR_OVRFLAG(__HANDLE__)        \
#  do{                                              \
#    __IO uint32_t tmpreg_ovr = 0x00U;              \
#    tmpreg_ovr = (__HANDLE__)->Instance->DR;       \
#    tmpreg_ovr = (__HANDLE__)->Instance->SR;       \
#    UNUSED(tmpreg_ovr);                            \
#  } while(0U)
# fun define __HAL_SPI_CLEAR_FREFLAG(__HANDLE__)        \
#  do{                                              \
#  __IO uint32_t tmpreg_fre = 0x00U;                \
#  tmpreg_fre = (__HANDLE__)->Instance->SR;         \
#  UNUSED(tmpreg_fre);                              \
#  }while(0U)
# fun define __HAL_SPI_ENABLE(__HANDLE__)  SET_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_SPE)
# fun define __HAL_SPI_DISABLE(__HANDLE__) CLEAR_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_SPE)
# fun define SPI_1LINE_TX(__HANDLE__)  SET_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_BIDIOE)
# fun define SPI_1LINE_RX(__HANDLE__)  CLEAR_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_BIDIOE)
# fun define SPI_RESET_CRC(__HANDLE__) do{CLEAR_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_CRCEN);\
#                                       SET_BIT((__HANDLE__)->Instance->CR1, SPI_CR1_CRCEN);}while(0U)
# fun define SPI_CHECK_FLAG(__SR__, __FLAG__)         ((((__SR__) & ((__FLAG__) & SPI_FLAG_MASK)) == ((__FLAG__) & SPI_FLAG_MASK)) ? SET : RESET)
# fun define SPI_CHECK_IT_SOURCE(__CR2__, __INTERRUPT__)      ((((__CR2__) & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
# fun define IS_SPI_MODE(__MODE__) (((__MODE__) == SPI_MODE_SLAVE) || \
#                               ((__MODE__) == SPI_MODE_MASTER))
# fun define IS_SPI_DIRECTION(__MODE__) (((__MODE__) == SPI_DIRECTION_2LINES)        || \
#                                    ((__MODE__) == SPI_DIRECTION_2LINES_RXONLY) || \
#                                    ((__MODE__) == SPI_DIRECTION_1LINE))
# fun define IS_SPI_DIRECTION_2LINES(__MODE__) ((__MODE__) == SPI_DIRECTION_2LINES)
# fun define IS_SPI_DIRECTION_2LINES_OR_1LINE(__MODE__) (((__MODE__) == SPI_DIRECTION_2LINES) || \
#                                                    ((__MODE__) == SPI_DIRECTION_1LINE))
# fun define IS_SPI_DATASIZE(__DATASIZE__) (((__DATASIZE__) == SPI_DATASIZE_16BIT) || \
#                                       ((__DATASIZE__) == SPI_DATASIZE_8BIT))
# fun define IS_SPI_CPOL(__CPOL__) (((__CPOL__) == SPI_POLARITY_LOW) || \
#                               ((__CPOL__) == SPI_POLARITY_HIGH))
# fun define IS_SPI_CPHA(__CPHA__) (((__CPHA__) == SPI_PHASE_1EDGE) || \
#                               ((__CPHA__) == SPI_PHASE_2EDGE))
# fun define IS_SPI_NSS(__NSS__) (((__NSS__) == SPI_NSS_SOFT)       || \
#                             ((__NSS__) == SPI_NSS_HARD_INPUT) || \
#                             ((__NSS__) == SPI_NSS_HARD_OUTPUT))
# fun define IS_SPI_BAUDRATE_PRESCALER(__PRESCALER__) (((__PRESCALER__) == SPI_BAUDRATEPRESCALER_2)   || \
#                                                  ((__PRESCALER__) == SPI_BAUDRATEPRESCALER_4)   || \
#                                                  ((__PRESCALER__) == SPI_BAUDRATEPRESCALER_8)   || \
#                                                  ((__PRESCALER__) == SPI_BAUDRATEPRESCALER_16)  || \
#                                                  ((__PRESCALER__) == SPI_BAUDRATEPRESCALER_32)  || \
#                                                  ((__PRESCALER__) == SPI_BAUDRATEPRESCALER_64)  || \
#                                                  ((__PRESCALER__) == SPI_BAUDRATEPRESCALER_128) || \
#                                                  ((__PRESCALER__) == SPI_BAUDRATEPRESCALER_256))
# fun define IS_SPI_FIRST_BIT(__BIT__) (((__BIT__) == SPI_FIRSTBIT_MSB) || \
#                                   ((__BIT__) == SPI_FIRSTBIT_LSB))
# fun define IS_SPI_TIMODE(__MODE__) (((__MODE__) == SPI_TIMODE_DISABLE) || \
#                                 ((__MODE__) == SPI_TIMODE_ENABLE))
# fun define IS_SPI_CRC_CALCULATION(__CALCULATION__) (((__CALCULATION__) == SPI_CRCCALCULATION_DISABLE) || \
#                                                 ((__CALCULATION__) == SPI_CRCCALCULATION_ENABLE))
# fun define IS_SPI_CRC_POLYNOMIAL(__POLYNOMIAL__) (((__POLYNOMIAL__) >= 0x1U) && ((__POLYNOMIAL__) <= 0xFFFFU) && (((__POLYNOMIAL__)&0x1U) != 0U))
# fun define IS_SPI_DMA_HANDLE(__HANDLE__) ((__HANDLE__) != NULL)
# fun define IS_SPI_16BIT_ALIGNED_ADDRESS(__DATA__) (((uint32_t)(__DATA__) % 2U) == 0U)
# struct SPI_InitTypeDef

class SPI_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Mode',	ctypes.c_uint32),
		('Direction',	ctypes.c_uint32),
		('DataSize',	ctypes.c_uint32),
		('CLKPolarity',	ctypes.c_uint32),
		('CLKPhase',	ctypes.c_uint32),
		('NSS',	ctypes.c_uint32),
		('BaudRatePrescaler',	ctypes.c_uint32),
		('FirstBit',	ctypes.c_uint32),
		('TIMode',	ctypes.c_uint32),
		('CRCCalculation',	ctypes.c_uint32),
		('CRCPolynomial',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct SPI_HandleTypeDef
# struct SPI_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_tim_ex.h : 

# empty define STM32L0xx_HAL_TIM_EX_H
TIM2_ETR_GPIO = 0x0
TIM2_ETR_HSI48 = 0x4
TIM2_ETR_HSI16 = 0x3
TIM2_ETR_LSE = 0x5
TIM2_ETR_COMP2_OUT = 0x6
TIM2_ETR_COMP1_OUT = 0x7
TIM2_TI4_GPIO = 0x0
TIM2_TI4_COMP2 = 0x8
TIM2_TI4_COMP1 = 0x10
# Skip TIM3_TI4_USB_NOE : no need parse
# Skip TIM3_TI4_GPIOC9_AF2 : no need parse
# Skip TIM3_TI2_GPIO_DEF : no need parse
# Skip TIM3_TI2_GPIOB5_AF4 : no need parse
# Skip TIM3_TI1_USB_SOF : no need parse
# Skip TIM3_TI1_GPIO : no need parse
# Skip TIM3_ETR_GPIO : no need parse
# Skip TIM3_ETR_HSI : no need parse
TIM21_ETR_GPIO = 0x0
TIM21_ETR_COMP2_OUT = 0x1
TIM21_ETR_COMP1_OUT = 0x2
TIM21_ETR_LSE = 0x3
TIM21_TI1_GPIO = 0x0
TIM21_TI1_MCO = 0x1C
TIM21_TI1_RTC_WKUT_IT = 0x4
TIM21_TI1_HSE_RTC = 0x8
TIM21_TI1_MSI = 0xC
TIM21_TI1_LSE = 0x10
TIM21_TI1_LSI = 0x14
TIM21_TI1_COMP1_OUT = 0x18
TIM21_TI2_GPIO = 0x0
TIM21_TI2_COMP2_OUT = 0x20
TIM22_ETR_GPIO = 0x0
TIM22_ETR_COMP2_OUT = 0x1
TIM22_ETR_COMP1_OUT = 0x2
TIM22_ETR_LSE = 0x3
TIM22_TI1_GPIO = 0x0
TIM22_TI1_COMP2_OUT = 0x4
TIM22_TI1_COMP1_OUT = 0x8
# fun define IS_TIM_REMAP(__INSTANCE__, __TIM_REMAP__)               \
#        ((((__INSTANCE__) == TIM2)   &&  ((__TIM_REMAP__) <=  (TIM2_OR_TI4_RMP  | TIM2_OR_ETR_RMP))) || \
#         (((__INSTANCE__) == TIM22)  &&  ((__TIM_REMAP__) <=  (TIM22_OR_TI1_RMP | TIM22_OR_ETR_RMP))) || \
#         (((__INSTANCE__) == TIM21)  &&  ((__TIM_REMAP__) <=  (TIM21_OR_ETR_RMP | TIM21_OR_TI1_RMP | TIM21_OR_TI2_RMP))) || \
#         (((__INSTANCE__) == TIM3)   &&  ((__TIM_REMAP__) <=  (TIM3_OR_ETR_RMP  | TIM3_OR_TI1_RMP  | TIM3_OR_TI2_RMP | TIM3_OR_TI4_RMP))))
# fun define IS_CHANNEL_AVAILABLE(__INSTANCE__, __CHANNEL__)     \
#        ((((__INSTANCE__) == TIM2)   &&  (((__CHANNEL__) == TIM_CHANNEL_1)   ||   \
#                                          ((__CHANNEL__) == TIM_CHANNEL_2)   ||   \
#                                          ((__CHANNEL__) == TIM_CHANNEL_3)   ||   \
#                                          ((__CHANNEL__) == TIM_CHANNEL_4))) ||   \
#          (((__INSTANCE__) == TIM3) &&   (((__CHANNEL__) == TIM_CHANNEL_1)   ||   \
#                                          ((__CHANNEL__) == TIM_CHANNEL_2)   ||   \
#                                          ((__CHANNEL__) == TIM_CHANNEL_3)   ||   \
#                                          ((__CHANNEL__) == TIM_CHANNEL_4))) ||   \
#          (((__INSTANCE__) == TIM21) &&  (((__CHANNEL__) == TIM_CHANNEL_1)   ||   \
#                                          ((__CHANNEL__) == TIM_CHANNEL_2))) ||   \
#          (((__INSTANCE__) == TIM22) &&  (((__CHANNEL__) == TIM_CHANNEL_1)   ||   \
#                                          ((__CHANNEL__) == TIM_CHANNEL_2))))
# fun define IS_TIM_REMAP(__INSTANCE__, __TIM_REMAP__)               \
#        ((((__INSTANCE__) == TIM2)   &&  ((__TIM_REMAP__) <=  (TIM2_OR_TI4_RMP  | TIM2_OR_ETR_RMP))) || \
#         (((__INSTANCE__) == TIM22)  &&  ((__TIM_REMAP__) <=  (TIM22_OR_TI1_RMP | TIM22_OR_ETR_RMP))) || \
#         (((__INSTANCE__) == TIM21)  &&  ((__TIM_REMAP__) <=  (TIM21_OR_ETR_RMP | TIM21_OR_TI1_RMP | TIM21_OR_TI2_RMP))))
# fun define IS_CHANNEL_AVAILABLE(__INSTANCE__, __CHANNEL__)     \
#        ((((__INSTANCE__) == TIM2)   &&   (((__CHANNEL__) == TIM_CHANNEL_1)   || \
#                                           ((__CHANNEL__) == TIM_CHANNEL_2)   || \
#                                           ((__CHANNEL__) == TIM_CHANNEL_3)   || \
#                                           ((__CHANNEL__) == TIM_CHANNEL_4))) || \
#          (((__INSTANCE__) == TIM21)  &&  (((__CHANNEL__) == TIM_CHANNEL_1)   || \
#                                           ((__CHANNEL__) == TIM_CHANNEL_2))) || \
#          (((__INSTANCE__) == TIM22)  &&  (((__CHANNEL__) == TIM_CHANNEL_1)   || \
#                                           ((__CHANNEL__) == TIM_CHANNEL_2))))
# fun define IS_TIM_REMAP(__INSTANCE__, __TIM_REMAP__)               \
#        ((((__INSTANCE__) == TIM2)   &&  ((__TIM_REMAP__) <=  (TIM2_OR_TI4_RMP  | TIM2_OR_ETR_RMP))) || \
#         (((__INSTANCE__) == TIM21)  &&  ((__TIM_REMAP__) <=  (TIM21_OR_ETR_RMP | TIM21_OR_TI1_RMP | TIM21_OR_TI2_RMP))))
# fun define IS_CHANNEL_AVAILABLE(__INSTANCE__, __CHANNEL__)     \
#        ((((__INSTANCE__) == TIM2)   &&   (((__CHANNEL__) == TIM_CHANNEL_1)   || \
#                                           ((__CHANNEL__) == TIM_CHANNEL_2)   || \
#                                           ((__CHANNEL__) == TIM_CHANNEL_3)   || \
#                                           ((__CHANNEL__) == TIM_CHANNEL_4))) || \
#          (((__INSTANCE__) == TIM21)  &&  (((__CHANNEL__) == TIM_CHANNEL_1)   || \
#                                           ((__CHANNEL__) == TIM_CHANNEL_2))))
# ----------------------------------------

# file stm32l0xx_hal_tim.h : 

# Enum HAL_TIM_StateTypeDef
HAL_TIM_STATE_RESET = 0x0
HAL_TIM_STATE_READY = 0x1
HAL_TIM_STATE_BUSY = 0x2
HAL_TIM_STATE_TIMEOUT = 0x3
HAL_TIM_STATE_ERROR = 0x4
# Enum HAL_TIM_ActiveChannel
HAL_TIM_ACTIVE_CHANNEL_1 = 0x1
HAL_TIM_ACTIVE_CHANNEL_2 = 0x2
HAL_TIM_ACTIVE_CHANNEL_3 = 0x4
HAL_TIM_ACTIVE_CHANNEL_4 = 0x8
HAL_TIM_ACTIVE_CHANNEL_CLEARED = 0x0
# Enum HAL_TIM_CallbackIDTypeDef
# Skip HAL_TIM_BASE_MSPINIT_CB_ID : no need parse
# Skip HAL_TIM_BASE_MSPDEINIT_CB_ID : no need parse
# Skip HAL_TIM_IC_MSPINIT_CB_ID : no need parse
# Skip HAL_TIM_IC_MSPDEINIT_CB_ID : no need parse
# Skip HAL_TIM_OC_MSPINIT_CB_ID : no need parse
# Skip HAL_TIM_OC_MSPDEINIT_CB_ID : no need parse
# Skip HAL_TIM_PWM_MSPINIT_CB_ID : no need parse
# Skip HAL_TIM_PWM_MSPDEINIT_CB_ID : no need parse
# Skip HAL_TIM_ONE_PULSE_MSPINIT_CB_ID : no need parse
# Skip HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID : no need parse
# Skip HAL_TIM_ENCODER_MSPINIT_CB_ID : no need parse
# Skip HAL_TIM_ENCODER_MSPDEINIT_CB_ID : no need parse
# Skip HAL_TIM_PERIOD_ELAPSED_CB_ID : no need parse
# Skip HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID : no need parse
# Skip HAL_TIM_TRIGGER_CB_ID : no need parse
# Skip HAL_TIM_TRIGGER_HALF_CB_ID : no need parse
# Skip HAL_TIM_IC_CAPTURE_CB_ID : no need parse
# Skip HAL_TIM_IC_CAPTURE_HALF_CB_ID : no need parse
# Skip HAL_TIM_OC_DELAY_ELAPSED_CB_ID : no need parse
# Skip HAL_TIM_PWM_PULSE_FINISHED_CB_ID : no need parse
# Skip HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID : no need parse
# Skip HAL_TIM_ERROR_CB_ID : no need parse
# empty define STM32L0xx_HAL_TIM_H
TIM_CLEARINPUTSOURCE_NONE = 0x0
TIM_CLEARINPUTSOURCE_ETR = 0x1
TIM_DMABASE_CR1 = 0x0
TIM_DMABASE_CR2 = 0x1
TIM_DMABASE_SMCR = 0x2
TIM_DMABASE_DIER = 0x3
TIM_DMABASE_SR = 0x4
TIM_DMABASE_EGR = 0x5
TIM_DMABASE_CCMR1 = 0x6
TIM_DMABASE_CCMR2 = 0x7
TIM_DMABASE_CCER = 0x8
TIM_DMABASE_CNT = 0x9
TIM_DMABASE_PSC = 0xA
TIM_DMABASE_ARR = 0xB
TIM_DMABASE_CCR1 = 0xD
TIM_DMABASE_CCR2 = 0xE
TIM_DMABASE_CCR3 = 0xF
TIM_DMABASE_CCR4 = 0x10
TIM_DMABASE_DCR = 0x12
TIM_DMABASE_DMAR = 0x13
TIM_DMABASE_OR = 0x14
TIM_EVENTSOURCE_UPDATE = 0x1
TIM_EVENTSOURCE_CC1 = 0x2
TIM_EVENTSOURCE_CC2 = 0x4
TIM_EVENTSOURCE_CC3 = 0x8
TIM_EVENTSOURCE_CC4 = 0x10
TIM_EVENTSOURCE_TRIGGER = 0x40
TIM_INPUTCHANNELPOLARITY_RISING = 0x0
TIM_INPUTCHANNELPOLARITY_FALLING = 0x2
TIM_INPUTCHANNELPOLARITY_BOTHEDGE = 0xA
TIM_ETRPOLARITY_INVERTED = 0x8000
TIM_ETRPOLARITY_NONINVERTED = 0x0
TIM_ETRPRESCALER_DIV1 = 0x0
TIM_ETRPRESCALER_DIV2 = 0x1000
TIM_ETRPRESCALER_DIV4 = 0x2000
TIM_ETRPRESCALER_DIV8 = 0x3000
TIM_COUNTERMODE_UP = 0x0
TIM_COUNTERMODE_DOWN = 0x10
TIM_COUNTERMODE_CENTERALIGNED1 = 0x20
TIM_COUNTERMODE_CENTERALIGNED2 = 0x40
TIM_COUNTERMODE_CENTERALIGNED3 = 0x60
TIM_CLOCKDIVISION_DIV1 = 0x0
TIM_CLOCKDIVISION_DIV2 = 0x100
TIM_CLOCKDIVISION_DIV4 = 0x200
TIM_OUTPUTSTATE_DISABLE = 0x0
TIM_OUTPUTSTATE_ENABLE = 0x1
TIM_AUTORELOAD_PRELOAD_DISABLE = 0x0
TIM_AUTORELOAD_PRELOAD_ENABLE = 0x80
TIM_OCFAST_DISABLE = 0x0
TIM_OCFAST_ENABLE = 0x4
TIM_OUTPUTNSTATE_DISABLE = 0x0
# Skip TIM_OUTPUTNSTATE_ENABLE : no need parse
TIM_OCPOLARITY_HIGH = 0x0
TIM_OCPOLARITY_LOW = 0x2
TIM_ICPOLARITY_RISING = 0x0
TIM_ICPOLARITY_FALLING = 0x2
TIM_ICPOLARITY_BOTHEDGE = 0xA
TIM_ICSELECTION_DIRECTTI = 0x1
TIM_ICSELECTION_INDIRECTTI = 0x2
TIM_ICSELECTION_TRC = 0x3
TIM_ICPSC_DIV1 = 0x0
TIM_ICPSC_DIV2 = 0x4
TIM_ICPSC_DIV4 = 0x8
TIM_ICPSC_DIV8 = 0xC
TIM_OPMODE_SINGLE = 0x8
TIM_OPMODE_REPETITIVE = 0x0
TIM_ENCODERMODE_TI1 = 0x1
TIM_ENCODERMODE_TI2 = 0x2
TIM_ENCODERMODE_TI12 = 0x3
TIM_IT_UPDATE = 0x1
TIM_IT_CC1 = 0x2
TIM_IT_CC2 = 0x4
TIM_IT_CC3 = 0x8
TIM_IT_CC4 = 0x10
TIM_IT_TRIGGER = 0x40
TIM_DMA_UPDATE = 0x100
TIM_DMA_CC1 = 0x200
TIM_DMA_CC2 = 0x400
TIM_DMA_CC3 = 0x800
TIM_DMA_CC4 = 0x1000
TIM_DMA_TRIGGER = 0x4000
TIM_FLAG_UPDATE = 0x1
TIM_FLAG_CC1 = 0x2
TIM_FLAG_CC2 = 0x4
TIM_FLAG_CC3 = 0x8
TIM_FLAG_CC4 = 0x10
TIM_FLAG_TRIGGER = 0x40
TIM_FLAG_CC1OF = 0x200
TIM_FLAG_CC2OF = 0x400
TIM_FLAG_CC3OF = 0x800
TIM_FLAG_CC4OF = 0x1000
TIM_CHANNEL_1 = 0x0
TIM_CHANNEL_2 = 0x4
TIM_CHANNEL_3 = 0x8
TIM_CHANNEL_4 = 0xC
TIM_CHANNEL_ALL = 0x3C
TIM_CLOCKSOURCE_ETRMODE2 = 0x2000
TIM_CLOCKSOURCE_INTERNAL = 0x1000
TIM_CLOCKSOURCE_ITR0 = 0x0
TIM_CLOCKSOURCE_ITR1 = 0x10
TIM_CLOCKSOURCE_ITR2 = 0x20
TIM_CLOCKSOURCE_ITR3 = 0x30
TIM_CLOCKSOURCE_TI1ED = 0x40
TIM_CLOCKSOURCE_TI1 = 0x50
TIM_CLOCKSOURCE_TI2 = 0x60
TIM_CLOCKSOURCE_ETRMODE1 = 0x70
TIM_CLOCKPOLARITY_INVERTED = 0x8000
TIM_CLOCKPOLARITY_NONINVERTED = 0x0
TIM_CLOCKPOLARITY_RISING = 0x0
TIM_CLOCKPOLARITY_FALLING = 0x2
TIM_CLOCKPOLARITY_BOTHEDGE = 0xA
TIM_CLOCKPRESCALER_DIV1 = 0x0
TIM_CLOCKPRESCALER_DIV2 = 0x1000
TIM_CLOCKPRESCALER_DIV4 = 0x2000
TIM_CLOCKPRESCALER_DIV8 = 0x3000
TIM_CLEARINPUTPOLARITY_INVERTED = 0x8000
TIM_CLEARINPUTPOLARITY_NONINVERTED = 0x0
TIM_CLEARINPUTPRESCALER_DIV1 = 0x0
TIM_CLEARINPUTPRESCALER_DIV2 = 0x1000
TIM_CLEARINPUTPRESCALER_DIV4 = 0x2000
TIM_CLEARINPUTPRESCALER_DIV8 = 0x3000
TIM_TRGO_RESET = 0x0
TIM_TRGO_ENABLE = 0x10
TIM_TRGO_UPDATE = 0x20
TIM_TRGO_OC1 = 0x30
TIM_TRGO_OC1REF = 0x40
TIM_TRGO_OC2REF = 0x50
TIM_TRGO_OC3REF = 0x60
TIM_TRGO_OC4REF = 0x70
TIM_MASTERSLAVEMODE_ENABLE = 0x80
TIM_MASTERSLAVEMODE_DISABLE = 0x0
TIM_SLAVEMODE_DISABLE = 0x0
TIM_SLAVEMODE_RESET = 0x4
TIM_SLAVEMODE_GATED = 0x5
TIM_SLAVEMODE_TRIGGER = 0x6
TIM_SLAVEMODE_EXTERNAL1 = 0x7
TIM_OCMODE_TIMING = 0x0
TIM_OCMODE_ACTIVE = 0x10
TIM_OCMODE_INACTIVE = 0x20
TIM_OCMODE_TOGGLE = 0x30
TIM_OCMODE_PWM1 = 0x60
TIM_OCMODE_PWM2 = 0x70
TIM_OCMODE_FORCED_ACTIVE = 0x50
TIM_OCMODE_FORCED_INACTIVE = 0x40
TIM_TS_ITR0 = 0x0
TIM_TS_ITR1 = 0x10
TIM_TS_ITR2 = 0x20
TIM_TS_ITR3 = 0x30
TIM_TS_TI1F_ED = 0x40
TIM_TS_TI1FP1 = 0x50
TIM_TS_TI2FP2 = 0x60
TIM_TS_ETRF = 0x70
TIM_TS_NONE = 0xFFFF
TIM_TRIGGERPOLARITY_INVERTED = 0x8000
TIM_TRIGGERPOLARITY_NONINVERTED = 0x0
TIM_TRIGGERPOLARITY_RISING = 0x0
TIM_TRIGGERPOLARITY_FALLING = 0x2
TIM_TRIGGERPOLARITY_BOTHEDGE = 0xA
TIM_TRIGGERPRESCALER_DIV1 = 0x0
TIM_TRIGGERPRESCALER_DIV2 = 0x1000
TIM_TRIGGERPRESCALER_DIV4 = 0x2000
TIM_TRIGGERPRESCALER_DIV8 = 0x3000
TIM_TI1SELECTION_CH1 = 0x0
TIM_TI1SELECTION_XORCOMBINATION = 0x80
TIM_DMABURSTLENGTH_1TRANSFER = 0x0
TIM_DMABURSTLENGTH_2TRANSFERS = 0x100
TIM_DMABURSTLENGTH_3TRANSFERS = 0x200
TIM_DMABURSTLENGTH_4TRANSFERS = 0x300
TIM_DMABURSTLENGTH_5TRANSFERS = 0x400
TIM_DMABURSTLENGTH_6TRANSFERS = 0x500
TIM_DMABURSTLENGTH_7TRANSFERS = 0x600
TIM_DMABURSTLENGTH_8TRANSFERS = 0x700
TIM_DMABURSTLENGTH_9TRANSFERS = 0x800
TIM_DMABURSTLENGTH_10TRANSFERS = 0x900
TIM_DMABURSTLENGTH_11TRANSFERS = 0xA00
TIM_DMABURSTLENGTH_12TRANSFERS = 0xB00
TIM_DMABURSTLENGTH_13TRANSFERS = 0xC00
TIM_DMABURSTLENGTH_14TRANSFERS = 0xD00
TIM_DMABURSTLENGTH_15TRANSFERS = 0xE00
TIM_DMABURSTLENGTH_16TRANSFERS = 0xF00
TIM_DMABURSTLENGTH_17TRANSFERS = 0x1000
TIM_DMABURSTLENGTH_18TRANSFERS = 0x1100
TIM_DMA_ID_UPDATE = 0x0
TIM_DMA_ID_CC1 = 0x1
TIM_DMA_ID_CC2 = 0x2
TIM_DMA_ID_CC3 = 0x3
TIM_DMA_ID_CC4 = 0x4
TIM_DMA_ID_TRIGGER = 0x6
TIM_CCx_ENABLE = 0x1
TIM_CCx_DISABLE = 0x0
# fun define __HAL_TIM_RESET_HANDLE_STATE(__HANDLE__) do {                                                        \
#                                                      (__HANDLE__)->State             = HAL_TIM_STATE_RESET; \
#                                                      (__HANDLE__)->Base_MspInitCallback         = NULL;     \
#                                                      (__HANDLE__)->Base_MspDeInitCallback       = NULL;     \
#                                                      (__HANDLE__)->IC_MspInitCallback           = NULL;     \
#                                                      (__HANDLE__)->IC_MspDeInitCallback         = NULL;     \
#                                                      (__HANDLE__)->OC_MspInitCallback           = NULL;     \
#                                                      (__HANDLE__)->OC_MspDeInitCallback         = NULL;     \
#                                                      (__HANDLE__)->PWM_MspInitCallback          = NULL;     \
#                                                      (__HANDLE__)->PWM_MspDeInitCallback        = NULL;     \
#                                                      (__HANDLE__)->OnePulse_MspInitCallback     = NULL;     \
#                                                      (__HANDLE__)->OnePulse_MspDeInitCallback   = NULL;     \
#                                                      (__HANDLE__)->Encoder_MspInitCallback      = NULL;     \
#                                                      (__HANDLE__)->Encoder_MspDeInitCallback    = NULL;     \
#                                                     } while(0)
# fun define __HAL_TIM_RESET_HANDLE_STATE(__HANDLE__) ((__HANDLE__)->State = HAL_TIM_STATE_RESET)
# fun define __HAL_TIM_ENABLE(__HANDLE__)                 ((__HANDLE__)->Instance->CR1|=(TIM_CR1_CEN))
# fun define __HAL_TIM_DISABLE(__HANDLE__) \
#                        do { \
#                          if (((__HANDLE__)->Instance->CCER & TIM_CCER_CCxE_MASK) == 0UL) \
#                          { \
#                            (__HANDLE__)->Instance->CR1 &= ~(TIM_CR1_CEN); \
#                          } \
#                        } while(0)
# fun define __HAL_TIM_ENABLE_IT(__HANDLE__, __INTERRUPT__)    ((__HANDLE__)->Instance->DIER |= (__INTERRUPT__))
# fun define __HAL_TIM_DISABLE_IT(__HANDLE__, __INTERRUPT__)   ((__HANDLE__)->Instance->DIER &= ~(__INTERRUPT__))
# fun define __HAL_TIM_ENABLE_DMA(__HANDLE__, __DMA__)         ((__HANDLE__)->Instance->DIER |= (__DMA__))
# fun define __HAL_TIM_DISABLE_DMA(__HANDLE__, __DMA__)        ((__HANDLE__)->Instance->DIER &= ~(__DMA__))
# fun define __HAL_TIM_GET_FLAG(__HANDLE__, __FLAG__)          (((__HANDLE__)->Instance->SR &(__FLAG__)) == (__FLAG__))
# fun define __HAL_TIM_CLEAR_FLAG(__HANDLE__, __FLAG__)        ((__HANDLE__)->Instance->SR = ~(__FLAG__))
# fun define __HAL_TIM_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->DIER & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
# fun define __HAL_TIM_CLEAR_IT(__HANDLE__, __INTERRUPT__)      ((__HANDLE__)->Instance->SR = ~(__INTERRUPT__))
# fun define __HAL_TIM_IS_TIM_COUNTING_DOWN(__HANDLE__)    (((__HANDLE__)->Instance->CR1 &(TIM_CR1_DIR)) == (TIM_CR1_DIR))
# fun define __HAL_TIM_SET_PRESCALER(__HANDLE__, __PRESC__)       ((__HANDLE__)->Instance->PSC = (__PRESC__))
# fun define __HAL_TIM_SET_COUNTER(__HANDLE__, __COUNTER__)  ((__HANDLE__)->Instance->CNT = (__COUNTER__))
# fun define __HAL_TIM_GET_COUNTER(__HANDLE__) \
#   ((__HANDLE__)->Instance->CNT)
# fun define __HAL_TIM_SET_AUTORELOAD(__HANDLE__, __AUTORELOAD__) \
#                        do{                                                    \
#                              (__HANDLE__)->Instance->ARR = (__AUTORELOAD__);  \
#                              (__HANDLE__)->Init.Period = (__AUTORELOAD__);    \
#                          } while(0)
# fun define __HAL_TIM_GET_AUTORELOAD(__HANDLE__) \
#   ((__HANDLE__)->Instance->ARR)
# fun define __HAL_TIM_SET_CLOCKDIVISION(__HANDLE__, __CKD__) \
#                        do{                                                   \
#                              (__HANDLE__)->Instance->CR1 &= (~TIM_CR1_CKD);  \
#                              (__HANDLE__)->Instance->CR1 |= (__CKD__);       \
#                              (__HANDLE__)->Init.ClockDivision = (__CKD__);   \
#                          } while(0)
# fun define __HAL_TIM_GET_CLOCKDIVISION(__HANDLE__)  \
#   ((__HANDLE__)->Instance->CR1 & TIM_CR1_CKD)
# fun define __HAL_TIM_SET_ICPRESCALER(__HANDLE__, __CHANNEL__, __ICPSC__) \
#                        do{                                                    \
#                              TIM_RESET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__));  \
#                              TIM_SET_ICPRESCALERVALUE((__HANDLE__), (__CHANNEL__), (__ICPSC__)); \
#                          } while(0)
# fun define __HAL_TIM_GET_ICPRESCALER(__HANDLE__, __CHANNEL__)  \
#  (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 & TIM_CCMR1_IC1PSC) :\
#   ((__CHANNEL__) == TIM_CHANNEL_2) ? (((__HANDLE__)->Instance->CCMR1 & TIM_CCMR1_IC2PSC) >> 8U) :\
#   ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 & TIM_CCMR2_IC3PSC) :\
#   (((__HANDLE__)->Instance->CCMR2 & TIM_CCMR2_IC4PSC)) >> 8U)
# fun define __HAL_TIM_SET_COMPARE(__HANDLE__, __CHANNEL__, __COMPARE__) \
#(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCR1 = (__COMPARE__)) :\
# ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCR2 = (__COMPARE__)) :\
# ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCR3 = (__COMPARE__)) :\
# ((__HANDLE__)->Instance->CCR4 = (__COMPARE__)))
# fun define __HAL_TIM_GET_COMPARE(__HANDLE__, __CHANNEL__) \
#(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCR1) :\
# ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCR2) :\
# ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCR3) :\
# ((__HANDLE__)->Instance->CCR4))
# fun define __HAL_TIM_ENABLE_OCxPRELOAD(__HANDLE__, __CHANNEL__)    \
#        (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 |= TIM_CCMR1_OC1PE) :\
#         ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 |= TIM_CCMR1_OC2PE) :\
#         ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 |= TIM_CCMR2_OC3PE) :\
#         ((__HANDLE__)->Instance->CCMR2 |= TIM_CCMR2_OC4PE))
# fun define __HAL_TIM_DISABLE_OCxPRELOAD(__HANDLE__, __CHANNEL__)    \
#        (((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_OC1PE) :\
#         ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_OC2PE) :\
#         ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_OC3PE) :\
#         ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_OC4PE))
# fun define __HAL_TIM_URS_ENABLE(__HANDLE__) \
#    ((__HANDLE__)->Instance->CR1|= TIM_CR1_URS)
# fun define __HAL_TIM_URS_DISABLE(__HANDLE__) \
#      ((__HANDLE__)->Instance->CR1&=~TIM_CR1_URS)
# fun define __HAL_TIM_SET_CAPTUREPOLARITY(__HANDLE__, __CHANNEL__, __POLARITY__)    \
#        do{                                                                     \
#          TIM_RESET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__));               \
#          TIM_SET_CAPTUREPOLARITY((__HANDLE__), (__CHANNEL__), (__POLARITY__)); \
#        }while(0)
TIM_CCER_CCxE_MASK = 0x1111
# fun define IS_TIM_CLEARINPUT_SOURCE(__MODE__)  (((__MODE__) == TIM_CLEARINPUTSOURCE_NONE)      || \
#                                             ((__MODE__) == TIM_CLEARINPUTSOURCE_ETR))
# fun define IS_TIM_DMA_BASE(__BASE__) (((__BASE__) == TIM_DMABASE_CR1)   || \
#                                   ((__BASE__) == TIM_DMABASE_CR2)   || \
#                                   ((__BASE__) == TIM_DMABASE_SMCR)  || \
#                                   ((__BASE__) == TIM_DMABASE_DIER)  || \
#                                   ((__BASE__) == TIM_DMABASE_SR)    || \
#                                   ((__BASE__) == TIM_DMABASE_EGR)   || \
#                                   ((__BASE__) == TIM_DMABASE_CCMR1) || \
#                                   ((__BASE__) == TIM_DMABASE_CCMR2) || \
#                                   ((__BASE__) == TIM_DMABASE_CCER)  || \
#                                   ((__BASE__) == TIM_DMABASE_CNT)   || \
#                                   ((__BASE__) == TIM_DMABASE_PSC)   || \
#                                   ((__BASE__) == TIM_DMABASE_ARR)   || \
#                                   ((__BASE__) == TIM_DMABASE_CCR1)  || \
#                                   ((__BASE__) == TIM_DMABASE_CCR2)  || \
#                                   ((__BASE__) == TIM_DMABASE_CCR3)  || \
#                                   ((__BASE__) == TIM_DMABASE_CCR4)  || \
#                                   ((__BASE__) == TIM_DMABASE_OR))
# fun define IS_TIM_EVENT_SOURCE(__SOURCE__) ((((__SOURCE__) & 0xFFFFFFA0U) == 0x00000000U) && ((__SOURCE__) != 0x00000000U))
# fun define IS_TIM_COUNTER_MODE(__MODE__)      (((__MODE__) == TIM_COUNTERMODE_UP)              || \
#                                            ((__MODE__) == TIM_COUNTERMODE_DOWN)            || \
#                                            ((__MODE__) == TIM_COUNTERMODE_CENTERALIGNED1)  || \
#                                            ((__MODE__) == TIM_COUNTERMODE_CENTERALIGNED2)  || \
#                                            ((__MODE__) == TIM_COUNTERMODE_CENTERALIGNED3))
# fun define IS_TIM_CLOCKDIVISION_DIV(__DIV__)  (((__DIV__) == TIM_CLOCKDIVISION_DIV1) || \
#                                            ((__DIV__) == TIM_CLOCKDIVISION_DIV2) || \
#                                            ((__DIV__) == TIM_CLOCKDIVISION_DIV4))
# fun define IS_TIM_AUTORELOAD_PRELOAD(PRELOAD) (((PRELOAD) == TIM_AUTORELOAD_PRELOAD_DISABLE) || \
#                                            ((PRELOAD) == TIM_AUTORELOAD_PRELOAD_ENABLE))
# fun define IS_TIM_FAST_STATE(__STATE__)       (((__STATE__) == TIM_OCFAST_DISABLE) || \
#                                            ((__STATE__) == TIM_OCFAST_ENABLE))
# fun define IS_TIM_OC_POLARITY(__POLARITY__)   (((__POLARITY__) == TIM_OCPOLARITY_HIGH) || \
#                                            ((__POLARITY__) == TIM_OCPOLARITY_LOW))
# fun define IS_TIM_IC_POLARITY(__POLARITY__)   (((__POLARITY__) == TIM_ICPOLARITY_RISING)   || \
#                                            ((__POLARITY__) == TIM_ICPOLARITY_FALLING)  || \
#                                            ((__POLARITY__) == TIM_ICPOLARITY_BOTHEDGE))
# fun define IS_TIM_IC_SELECTION(__SELECTION__) (((__SELECTION__) == TIM_ICSELECTION_DIRECTTI) || \
#                                            ((__SELECTION__) == TIM_ICSELECTION_INDIRECTTI) || \
#                                            ((__SELECTION__) == TIM_ICSELECTION_TRC))
# fun define IS_TIM_IC_PRESCALER(__PRESCALER__) (((__PRESCALER__) == TIM_ICPSC_DIV1) || \
#                                            ((__PRESCALER__) == TIM_ICPSC_DIV2) || \
#                                            ((__PRESCALER__) == TIM_ICPSC_DIV4) || \
#                                            ((__PRESCALER__) == TIM_ICPSC_DIV8))
# fun define IS_TIM_OPM_MODE(__MODE__)          (((__MODE__) == TIM_OPMODE_SINGLE) || \
#                                            ((__MODE__) == TIM_OPMODE_REPETITIVE))
# fun define IS_TIM_ENCODER_MODE(__MODE__)      (((__MODE__) == TIM_ENCODERMODE_TI1) || \
#                                            ((__MODE__) == TIM_ENCODERMODE_TI2) || \
#                                            ((__MODE__) == TIM_ENCODERMODE_TI12))
# fun define IS_TIM_DMA_SOURCE(__SOURCE__) ((((__SOURCE__) & 0xFFFFA0FFU) == 0x00000000U) && ((__SOURCE__) != 0x00000000U))
# fun define IS_TIM_CHANNELS(__CHANNEL__)       (((__CHANNEL__) == TIM_CHANNEL_1) || \
#                                            ((__CHANNEL__) == TIM_CHANNEL_2) || \
#                                            ((__CHANNEL__) == TIM_CHANNEL_3) || \
#                                            ((__CHANNEL__) == TIM_CHANNEL_4) || \
#                                            ((__CHANNEL__) == TIM_CHANNEL_ALL))
# fun define IS_TIM_OPM_CHANNELS(__CHANNEL__)   (((__CHANNEL__) == TIM_CHANNEL_1) || \
#                                            ((__CHANNEL__) == TIM_CHANNEL_2))
# fun define IS_TIM_PERIOD(__PERIOD__)      ((__PERIOD__) <= 0xFFFFU)
# fun define IS_TIM_PRESCALER(__PRESCALER__)      ((__PRESCALER__) <= 0xFFFFU)
# fun define IS_TIM_CLOCKSOURCE(__CLOCK__) (((__CLOCK__) == TIM_CLOCKSOURCE_INTERNAL) || \
#                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ETRMODE2) || \
#                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ITR0)     || \
#                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ITR1)     || \
#                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ITR2)     || \
#                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ITR3)     || \
#                                       ((__CLOCK__) == TIM_CLOCKSOURCE_TI1ED)    || \
#                                       ((__CLOCK__) == TIM_CLOCKSOURCE_TI1)      || \
#                                       ((__CLOCK__) == TIM_CLOCKSOURCE_TI2)      || \
#                                       ((__CLOCK__) == TIM_CLOCKSOURCE_ETRMODE1))
# fun define IS_TIM_CLOCKPOLARITY(__POLARITY__) (((__POLARITY__) == TIM_CLOCKPOLARITY_INVERTED)    || \
#                                            ((__POLARITY__) == TIM_CLOCKPOLARITY_NONINVERTED) || \
#                                            ((__POLARITY__) == TIM_CLOCKPOLARITY_RISING)      || \
#                                            ((__POLARITY__) == TIM_CLOCKPOLARITY_FALLING)     || \
#                                            ((__POLARITY__) == TIM_CLOCKPOLARITY_BOTHEDGE))
# fun define IS_TIM_CLOCKPRESCALER(__PRESCALER__) (((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV1) || \
#                                              ((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV2) || \
#                                              ((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV4) || \
#                                              ((__PRESCALER__) == TIM_CLOCKPRESCALER_DIV8))
# fun define IS_TIM_CLOCKFILTER(__ICFILTER__)      ((__ICFILTER__) <= 0xFU)
# fun define IS_TIM_CLEARINPUT_POLARITY(__POLARITY__) (((__POLARITY__) == TIM_CLEARINPUTPOLARITY_INVERTED) || \
#                                                  ((__POLARITY__) == TIM_CLEARINPUTPOLARITY_NONINVERTED))
# fun define IS_TIM_CLEARINPUT_PRESCALER(__PRESCALER__) (((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV1) || \
#                                                    ((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV2) || \
#                                                    ((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV4) || \
#                                                    ((__PRESCALER__) == TIM_CLEARINPUTPRESCALER_DIV8))
# fun define IS_TIM_CLEARINPUT_FILTER(__ICFILTER__) ((__ICFILTER__) <= 0xFU)
# fun define IS_TIM_TRGO_SOURCE(__SOURCE__) (((__SOURCE__) == TIM_TRGO_RESET)  || \
#                                        ((__SOURCE__) == TIM_TRGO_ENABLE) || \
#                                        ((__SOURCE__) == TIM_TRGO_UPDATE) || \
#                                        ((__SOURCE__) == TIM_TRGO_OC1)    || \
#                                        ((__SOURCE__) == TIM_TRGO_OC1REF) || \
#                                        ((__SOURCE__) == TIM_TRGO_OC2REF) || \
#                                        ((__SOURCE__) == TIM_TRGO_OC3REF) || \
#                                        ((__SOURCE__) == TIM_TRGO_OC4REF))
# fun define IS_TIM_MSM_STATE(__STATE__)      (((__STATE__) == TIM_MASTERSLAVEMODE_ENABLE) || \
#                                          ((__STATE__) == TIM_MASTERSLAVEMODE_DISABLE))
# fun define IS_TIM_SLAVE_MODE(__MODE__) (((__MODE__) == TIM_SLAVEMODE_DISABLE)   || \
#                                     ((__MODE__) == TIM_SLAVEMODE_RESET)     || \
#                                     ((__MODE__) == TIM_SLAVEMODE_GATED)     || \
#                                     ((__MODE__) == TIM_SLAVEMODE_TRIGGER)   || \
#                                     ((__MODE__) == TIM_SLAVEMODE_EXTERNAL1))
# fun define IS_TIM_PWM_MODE(__MODE__) (((__MODE__) == TIM_OCMODE_PWM1)               || \
#                                   ((__MODE__) == TIM_OCMODE_PWM2))
# fun define IS_TIM_OC_MODE(__MODE__)  (((__MODE__) == TIM_OCMODE_TIMING)             || \
#                                   ((__MODE__) == TIM_OCMODE_ACTIVE)             || \
#                                   ((__MODE__) == TIM_OCMODE_INACTIVE)           || \
#                                   ((__MODE__) == TIM_OCMODE_TOGGLE)             || \
#                                   ((__MODE__) == TIM_OCMODE_FORCED_ACTIVE)      || \
#                                   ((__MODE__) == TIM_OCMODE_FORCED_INACTIVE))
# fun define IS_TIM_TRIGGER_SELECTION(__SELECTION__) (((__SELECTION__) == TIM_TS_ITR0) || \
#                                                 ((__SELECTION__) == TIM_TS_ITR1) || \
#                                                 ((__SELECTION__) == TIM_TS_ITR2) || \
#                                                 ((__SELECTION__) == TIM_TS_ITR3) || \
#                                                 ((__SELECTION__) == TIM_TS_TI1F_ED) || \
#                                                 ((__SELECTION__) == TIM_TS_TI1FP1) || \
#                                                 ((__SELECTION__) == TIM_TS_TI2FP2) || \
#                                                 ((__SELECTION__) == TIM_TS_ETRF))
# fun define IS_TIM_INTERNAL_TRIGGEREVENT_SELECTION(__SELECTION__) (((__SELECTION__) == TIM_TS_ITR0) || \
#                                                               ((__SELECTION__) == TIM_TS_ITR1) || \
#                                                               ((__SELECTION__) == TIM_TS_ITR2) || \
#                                                               ((__SELECTION__) == TIM_TS_ITR3) || \
#                                                               ((__SELECTION__) == TIM_TS_NONE))
# fun define IS_TIM_TRIGGERPOLARITY(__POLARITY__)   (((__POLARITY__) == TIM_TRIGGERPOLARITY_INVERTED   ) || \
#                                                ((__POLARITY__) == TIM_TRIGGERPOLARITY_NONINVERTED) || \
#                                                ((__POLARITY__) == TIM_TRIGGERPOLARITY_RISING     ) || \
#                                                ((__POLARITY__) == TIM_TRIGGERPOLARITY_FALLING    ) || \
#                                                ((__POLARITY__) == TIM_TRIGGERPOLARITY_BOTHEDGE   ))
# fun define IS_TIM_TRIGGERPRESCALER(__PRESCALER__) (((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV1) || \
#                                                ((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV2) || \
#                                                ((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV4) || \
#                                                ((__PRESCALER__) == TIM_TRIGGERPRESCALER_DIV8))
# fun define IS_TIM_TRIGGERFILTER(__ICFILTER__) ((__ICFILTER__) <= 0xFU)
# fun define IS_TIM_TI1SELECTION(__TI1SELECTION__)  (((__TI1SELECTION__) == TIM_TI1SELECTION_CH1) || \
#                                                ((__TI1SELECTION__) == TIM_TI1SELECTION_XORCOMBINATION))
# fun define IS_TIM_DMA_LENGTH(__LENGTH__)      (((__LENGTH__) == TIM_DMABURSTLENGTH_1TRANSFER) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_2TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_3TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_4TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_5TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_6TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_7TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_8TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_9TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_10TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_11TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_12TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_13TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_14TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_15TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_16TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_17TRANSFERS) || \
#                                            ((__LENGTH__) == TIM_DMABURSTLENGTH_18TRANSFERS))
# fun define IS_TIM_IC_FILTER(__ICFILTER__)   ((__ICFILTER__) <= 0xFU)
# fun define IS_TIM_SLAVEMODE_TRIGGER_ENABLED(__TRIGGER__) ((__TRIGGER__) == TIM_SLAVEMODE_TRIGGER)
# fun define TIM_SET_ICPRESCALERVALUE(__HANDLE__, __CHANNEL__, __ICPSC__) \
#(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 |= (__ICPSC__)) :\
# ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 |= ((__ICPSC__) << 8U)) :\
# ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 |= (__ICPSC__)) :\
# ((__HANDLE__)->Instance->CCMR2 |= ((__ICPSC__) << 8U)))
# fun define TIM_RESET_ICPRESCALERVALUE(__HANDLE__, __CHANNEL__) \
#(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_IC1PSC) :\
# ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCMR1 &= (uint16_t)~TIM_CCMR1_IC2PSC) :\
# ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_IC3PSC) :\
# ((__HANDLE__)->Instance->CCMR2 &= (uint16_t)~TIM_CCMR2_IC4PSC))
# fun define TIM_SET_CAPTUREPOLARITY(__HANDLE__, __CHANNEL__, __POLARITY__) \
#(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER |= (__POLARITY__)) :\
# ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER |= ((__POLARITY__) << 4U)) :\
# ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER |= ((__POLARITY__) << 8U)) :\
# ((__HANDLE__)->Instance->CCER |= (((__POLARITY__) << 12U))))
# fun define TIM_RESET_CAPTUREPOLARITY(__HANDLE__, __CHANNEL__) \
#(((__CHANNEL__) == TIM_CHANNEL_1) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC1P | TIM_CCER_CC1NP)) :\
# ((__CHANNEL__) == TIM_CHANNEL_2) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC2P | TIM_CCER_CC2NP)) :\
# ((__CHANNEL__) == TIM_CHANNEL_3) ? ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC3P | TIM_CCER_CC3NP)) :\
# ((__HANDLE__)->Instance->CCER &= (uint16_t)~(TIM_CCER_CC4P | TIM_CCER_CC4NP)))
# Skip Instance : no need parse
# Skip Init : no need parse
# Skip Channel : no need parse
# Skip hdma : no need parse
# Skip Lock : no need parse
# Skip State : no need parse
# Skip Base_MspInitCallback : no need parse
# Skip Base_MspDeInitCallback : no need parse
# Skip IC_MspInitCallback : no need parse
# Skip IC_MspDeInitCallback : no need parse
# Skip OC_MspInitCallback : no need parse
# Skip OC_MspDeInitCallback : no need parse
# Skip PWM_MspInitCallback : no need parse
# Skip PWM_MspDeInitCallback : no need parse
# Skip OnePulse_MspInitCallback : no need parse
# Skip OnePulse_MspDeInitCallback : no need parse
# Skip Encoder_MspInitCallback : no need parse
# Skip Encoder_MspDeInitCallback : no need parse
# Skip PeriodElapsedCallback : no need parse
# Skip PeriodElapsedHalfCpltCallback : no need parse
# Skip TriggerCallback : no need parse
# Skip TriggerHalfCpltCallback : no need parse
# Skip IC_CaptureCallback : no need parse
# Skip IC_CaptureHalfCpltCallback : no need parse
# Skip OC_DelayElapsedCallback : no need parse
# Skip PWM_PulseFinishedCallback : no need parse
# Skip PWM_PulseFinishedHalfCpltCallback : no need parse
# Skip ErrorCallback : no need parse
# struct TIM_Base_InitTypeDef

class TIM_Base_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Prescaler',	ctypes.c_uint32),
		('CounterMode',	ctypes.c_uint32),
		('Period',	ctypes.c_uint32),
		('ClockDivision',	ctypes.c_uint32),
		('AutoReloadPreload',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TIM_OC_InitTypeDef

class TIM_OC_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('OCMode',	ctypes.c_uint32),
		('Pulse',	ctypes.c_uint32),
		('OCPolarity',	ctypes.c_uint32),
		('OCFastMode',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TIM_OnePulse_InitTypeDef

class TIM_OnePulse_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('OCMode',	ctypes.c_uint32),
		('Pulse',	ctypes.c_uint32),
		('OCPolarity',	ctypes.c_uint32),
		('ICPolarity',	ctypes.c_uint32),
		('ICSelection',	ctypes.c_uint32),
		('ICFilter',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TIM_IC_InitTypeDef

class TIM_IC_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ICPolarity',	ctypes.c_uint32),
		('ICSelection',	ctypes.c_uint32),
		('ICPrescaler',	ctypes.c_uint32),
		('ICFilter',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TIM_Encoder_InitTypeDef

class TIM_Encoder_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('EncoderMode',	ctypes.c_uint32),
		('IC1Polarity',	ctypes.c_uint32),
		('IC1Selection',	ctypes.c_uint32),
		('IC1Prescaler',	ctypes.c_uint32),
		('IC1Filter',	ctypes.c_uint32),
		('IC2Polarity',	ctypes.c_uint32),
		('IC2Selection',	ctypes.c_uint32),
		('IC2Prescaler',	ctypes.c_uint32),
		('IC2Filter',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TIM_ClockConfigTypeDef

class TIM_ClockConfigTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ClockSource',	ctypes.c_uint32),
		('ClockPolarity',	ctypes.c_uint32),
		('ClockPrescaler',	ctypes.c_uint32),
		('ClockFilter',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TIM_ClearInputConfigTypeDef

class TIM_ClearInputConfigTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ClearInputState',	ctypes.c_uint32),
		('ClearInputSource',	ctypes.c_uint32),
		('ClearInputPolarity',	ctypes.c_uint32),
		('ClearInputPrescaler',	ctypes.c_uint32),
		('ClearInputFilter',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TIM_MasterConfigTypeDef

class TIM_MasterConfigTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('MasterOutputTrigger',	ctypes.c_uint32),
		('MasterSlaveMode',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TIM_SlaveConfigTypeDef

class TIM_SlaveConfigTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('SlaveMode',	ctypes.c_uint32),
		('InputTrigger',	ctypes.c_uint32),
		('TriggerPolarity',	ctypes.c_uint32),
		('TriggerPrescaler',	ctypes.c_uint32),
		('TriggerFilter',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_tsc.h : 

# Enum HAL_TSC_StateTypeDef
HAL_TSC_STATE_RESET = 0x0
HAL_TSC_STATE_READY = 0x1
HAL_TSC_STATE_BUSY = 0x2
HAL_TSC_STATE_ERROR = 0x3
# Enum TSC_GroupStatusTypeDef
TSC_GROUP_ONGOING = 0x0
TSC_GROUP_COMPLETED = 0x1
# Enum TSC_GroupIndexTypeDef
TSC_GROUP1_IDX = 0x0
TSC_GROUP2_IDX = 0x1
TSC_GROUP3_IDX = 0x2
TSC_GROUP4_IDX = 0x3
TSC_GROUP5_IDX = 0x4
TSC_GROUP6_IDX = 0x5
TSC_GROUP7_IDX = 0x6
TSC_GROUP8_IDX = 0x7
TSC_NB_OF_GROUPS = 0x8
# Enum HAL_TSC_CallbackIDTypeDef
# Skip HAL_TSC_CONV_COMPLETE_CB_ID : no need parse
# Skip HAL_TSC_ERROR_CB_ID : no need parse
# Skip HAL_TSC_MSPINIT_CB_ID : no need parse
# Skip HAL_TSC_MSPDEINIT_CB_ID : no need parse
# empty define STM32L0xx_HAL_TSC_H
HAL_TSC_ERROR_NONE = 0x0
# Skip HAL_TSC_ERROR_INVALID_CALLBACK : no need parse
TSC_CTPH_1CYCLE = 0x0
TSC_CTPH_2CYCLES = 0x10000000
TSC_CTPH_3CYCLES = 0x20000000
TSC_CTPH_4CYCLES = 0x30000000
TSC_CTPH_5CYCLES = 0x40000000
TSC_CTPH_6CYCLES = 0x50000000
TSC_CTPH_7CYCLES = 0x60000000
TSC_CTPH_8CYCLES = 0x70000000
TSC_CTPH_9CYCLES = 0x80000000
TSC_CTPH_10CYCLES = 0x90000000
TSC_CTPH_11CYCLES = 0xA0000000
TSC_CTPH_12CYCLES = 0xB0000000
TSC_CTPH_13CYCLES = 0xC0000000
TSC_CTPH_14CYCLES = 0xD0000000
TSC_CTPH_15CYCLES = 0xE0000000
TSC_CTPH_16CYCLES = 0xF0000000
TSC_CTPL_1CYCLE = 0x0
TSC_CTPL_2CYCLES = 0x1000000
TSC_CTPL_3CYCLES = 0x2000000
TSC_CTPL_4CYCLES = 0x3000000
TSC_CTPL_5CYCLES = 0x4000000
TSC_CTPL_6CYCLES = 0x5000000
TSC_CTPL_7CYCLES = 0x6000000
TSC_CTPL_8CYCLES = 0x7000000
TSC_CTPL_9CYCLES = 0x8000000
TSC_CTPL_10CYCLES = 0x9000000
TSC_CTPL_11CYCLES = 0xA000000
TSC_CTPL_12CYCLES = 0xB000000
TSC_CTPL_13CYCLES = 0xC000000
TSC_CTPL_14CYCLES = 0xD000000
TSC_CTPL_15CYCLES = 0xE000000
TSC_CTPL_16CYCLES = 0xF000000
TSC_SS_PRESC_DIV1 = 0x0
TSC_SS_PRESC_DIV2 = 0x8000
TSC_PG_PRESC_DIV1 = 0x0
TSC_PG_PRESC_DIV2 = 0x1000
TSC_PG_PRESC_DIV4 = 0x2000
TSC_PG_PRESC_DIV8 = 0x3000
TSC_PG_PRESC_DIV16 = 0x4000
TSC_PG_PRESC_DIV32 = 0x5000
TSC_PG_PRESC_DIV64 = 0x6000
TSC_PG_PRESC_DIV128 = 0x7000
TSC_MCV_255 = 0x0
TSC_MCV_511 = 0x20
TSC_MCV_1023 = 0x40
TSC_MCV_2047 = 0x60
TSC_MCV_4095 = 0x80
TSC_MCV_8191 = 0xA0
TSC_MCV_16383 = 0xC0
TSC_IODEF_OUT_PP_LOW = 0x0
TSC_IODEF_IN_FLOAT = 0x10
TSC_SYNC_POLARITY_FALLING = 0x0
TSC_SYNC_POLARITY_RISING = 0x8
TSC_ACQ_MODE_NORMAL = 0x0
TSC_ACQ_MODE_SYNCHRO = 0x4
TSC_IT_EOA = 0x1
TSC_IT_MCE = 0x2
TSC_FLAG_EOA = 0x1
TSC_FLAG_MCE = 0x2
TSC_GROUP1 = 0x1
TSC_GROUP2 = 0x2
TSC_GROUP3 = 0x4
TSC_GROUP4 = 0x8
TSC_GROUP5 = 0x10
TSC_GROUP6 = 0x20
TSC_GROUP7 = 0x40
TSC_GROUP8 = 0x80
TSC_GROUP1_IO1 = 0x1
TSC_GROUP1_IO2 = 0x2
TSC_GROUP1_IO3 = 0x4
TSC_GROUP1_IO4 = 0x8
TSC_GROUP2_IO1 = 0x10
TSC_GROUP2_IO2 = 0x20
TSC_GROUP2_IO3 = 0x40
TSC_GROUP2_IO4 = 0x80
TSC_GROUP3_IO1 = 0x100
TSC_GROUP3_IO2 = 0x200
TSC_GROUP3_IO3 = 0x400
TSC_GROUP3_IO4 = 0x800
TSC_GROUP4_IO1 = 0x1000
TSC_GROUP4_IO2 = 0x2000
TSC_GROUP4_IO3 = 0x4000
TSC_GROUP4_IO4 = 0x8000
TSC_GROUP5_IO1 = 0x10000
TSC_GROUP5_IO2 = 0x20000
TSC_GROUP5_IO3 = 0x40000
TSC_GROUP5_IO4 = 0x80000
TSC_GROUP6_IO1 = 0x100000
TSC_GROUP6_IO2 = 0x200000
TSC_GROUP6_IO3 = 0x400000
TSC_GROUP6_IO4 = 0x800000
TSC_GROUP7_IO1 = 0x1000000
TSC_GROUP7_IO2 = 0x2000000
TSC_GROUP7_IO3 = 0x4000000
TSC_GROUP7_IO4 = 0x8000000
TSC_GROUP8_IO1 = 0x10000000
TSC_GROUP8_IO2 = 0x20000000
TSC_GROUP8_IO3 = 0x40000000
TSC_GROUP8_IO4 = 0x80000000
# fun define __HAL_TSC_RESET_HANDLE_STATE(__HANDLE__)                   do{                                                   \
#                                                                       (__HANDLE__)->State = HAL_TSC_STATE_RESET;       \
#                                                                       (__HANDLE__)->MspInitCallback = NULL;            \
#                                                                       (__HANDLE__)->MspDeInitCallback = NULL;          \
#                                                                     } while(0)
# fun define __HAL_TSC_RESET_HANDLE_STATE(__HANDLE__)                   ((__HANDLE__)->State = HAL_TSC_STATE_RESET)
# fun define __HAL_TSC_ENABLE(__HANDLE__)                               ((__HANDLE__)->Instance->CR |= TSC_CR_TSCE)
# fun define __HAL_TSC_DISABLE(__HANDLE__)                              ((__HANDLE__)->Instance->CR &= (uint32_t)(~TSC_CR_TSCE))
# fun define __HAL_TSC_START_ACQ(__HANDLE__)                            ((__HANDLE__)->Instance->CR |= TSC_CR_START)
# fun define __HAL_TSC_STOP_ACQ(__HANDLE__)                             ((__HANDLE__)->Instance->CR &= (uint32_t)(~TSC_CR_START))
# fun define __HAL_TSC_SET_IODEF_OUTPPLOW(__HANDLE__)                   ((__HANDLE__)->Instance->CR &= (uint32_t)(~TSC_CR_IODEF))
# fun define __HAL_TSC_SET_IODEF_INFLOAT(__HANDLE__)                    ((__HANDLE__)->Instance->CR |= TSC_CR_IODEF)
# fun define __HAL_TSC_SET_SYNC_POL_FALL(__HANDLE__)                    ((__HANDLE__)->Instance->CR &= (uint32_t)(~TSC_CR_SYNCPOL))
# fun define __HAL_TSC_SET_SYNC_POL_RISE_HIGH(__HANDLE__)               ((__HANDLE__)->Instance->CR |= TSC_CR_SYNCPOL)
# fun define __HAL_TSC_ENABLE_IT(__HANDLE__, __INTERRUPT__)             ((__HANDLE__)->Instance->IER |= (__INTERRUPT__))
# fun define __HAL_TSC_DISABLE_IT(__HANDLE__, __INTERRUPT__)            ((__HANDLE__)->Instance->IER &= (uint32_t)(~(__INTERRUPT__)))
# fun define __HAL_TSC_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__)         ((((__HANDLE__)->Instance->IER & (__INTERRUPT__)) == (__INTERRUPT__)) ? SET : RESET)
# fun define __HAL_TSC_GET_FLAG(__HANDLE__, __FLAG__)                   ((((__HANDLE__)->Instance->ISR & (__FLAG__)) == (__FLAG__)) ? SET : RESET)
# fun define __HAL_TSC_CLEAR_FLAG(__HANDLE__, __FLAG__)                 ((__HANDLE__)->Instance->ICR = (__FLAG__))
# fun define __HAL_TSC_ENABLE_HYSTERESIS(__HANDLE__, __GX_IOY_MASK__)   ((__HANDLE__)->Instance->IOHCR |= (__GX_IOY_MASK__))
# fun define __HAL_TSC_DISABLE_HYSTERESIS(__HANDLE__, __GX_IOY_MASK__)  ((__HANDLE__)->Instance->IOHCR &= (uint32_t)(~(__GX_IOY_MASK__)))
# fun define __HAL_TSC_OPEN_ANALOG_SWITCH(__HANDLE__, __GX_IOY_MASK__)  ((__HANDLE__)->Instance->IOASCR &= (uint32_t)(~(__GX_IOY_MASK__)))
# fun define __HAL_TSC_CLOSE_ANALOG_SWITCH(__HANDLE__, __GX_IOY_MASK__) ((__HANDLE__)->Instance->IOASCR |= (__GX_IOY_MASK__))
# fun define __HAL_TSC_ENABLE_CHANNEL(__HANDLE__, __GX_IOY_MASK__)      ((__HANDLE__)->Instance->IOCCR |= (__GX_IOY_MASK__))
# fun define __HAL_TSC_DISABLE_CHANNEL(__HANDLE__, __GX_IOY_MASK__)     ((__HANDLE__)->Instance->IOCCR &= (uint32_t)(~(__GX_IOY_MASK__)))
# fun define __HAL_TSC_ENABLE_SAMPLING(__HANDLE__, __GX_IOY_MASK__)     ((__HANDLE__)->Instance->IOSCR |= (__GX_IOY_MASK__))
# fun define __HAL_TSC_DISABLE_SAMPLING(__HANDLE__, __GX_IOY_MASK__) ((__HANDLE__)->Instance->IOSCR &= (uint32_t)(~(__GX_IOY_MASK__)))
# fun define __HAL_TSC_ENABLE_GROUP(__HANDLE__, __GX_MASK__) ((__HANDLE__)->Instance->IOGCSR |= (__GX_MASK__))
# fun define __HAL_TSC_DISABLE_GROUP(__HANDLE__, __GX_MASK__) ((__HANDLE__)->Instance->IOGCSR &= (uint32_t)(~(__GX_MASK__)))
# fun define __HAL_TSC_GET_GROUP_STATUS(__HANDLE__, __GX_INDEX__) \
#((((__HANDLE__)->Instance->IOGCSR & (uint32_t)(1UL << (((__GX_INDEX__) & (uint32_t)TSC_NB_OF_GROUPS) + 16UL))) == (uint32_t)(1UL << (((__GX_INDEX__) & (uint32_t)TSC_NB_OF_GROUPS) + 16UL))) ? TSC_GROUP_COMPLETED : TSC_GROUP_ONGOING)
# fun define IS_TSC_CTPH(__VALUE__)          (((__VALUE__) == TSC_CTPH_1CYCLE)   || \
#                                         ((__VALUE__) == TSC_CTPH_2CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPH_3CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPH_4CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPH_5CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPH_6CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPH_7CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPH_8CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPH_9CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPH_10CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPH_11CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPH_12CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPH_13CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPH_14CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPH_15CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPH_16CYCLES))
# fun define IS_TSC_CTPL(__VALUE__)          (((__VALUE__) == TSC_CTPL_1CYCLE)   || \
#                                         ((__VALUE__) == TSC_CTPL_2CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPL_3CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPL_4CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPL_5CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPL_6CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPL_7CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPL_8CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPL_9CYCLES)  || \
#                                         ((__VALUE__) == TSC_CTPL_10CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPL_11CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPL_12CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPL_13CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPL_14CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPL_15CYCLES) || \
#                                         ((__VALUE__) == TSC_CTPL_16CYCLES))
# fun define IS_TSC_SS(__VALUE__)            (((FunctionalState)(__VALUE__) == DISABLE) || ((FunctionalState)(__VALUE__) == ENABLE))
# fun define IS_TSC_SSD(__VALUE__)           (((__VALUE__) == 0UL) || (((__VALUE__) > 0UL) && ((__VALUE__) < 128UL)))
# fun define IS_TSC_SS_PRESC(__VALUE__)      (((__VALUE__) == TSC_SS_PRESC_DIV1) || ((__VALUE__) == TSC_SS_PRESC_DIV2))
# fun define IS_TSC_PG_PRESC(__VALUE__)      (((__VALUE__) == TSC_PG_PRESC_DIV1)  || \
#                                         ((__VALUE__) == TSC_PG_PRESC_DIV2)  || \
#                                         ((__VALUE__) == TSC_PG_PRESC_DIV4)  || \
#                                         ((__VALUE__) == TSC_PG_PRESC_DIV8)  || \
#                                         ((__VALUE__) == TSC_PG_PRESC_DIV16) || \
#                                         ((__VALUE__) == TSC_PG_PRESC_DIV32) || \
#                                         ((__VALUE__) == TSC_PG_PRESC_DIV64) || \
#                                         ((__VALUE__) == TSC_PG_PRESC_DIV128))
# fun define IS_TSC_MCV(__VALUE__)           (((__VALUE__) == TSC_MCV_255)  || \
#                                         ((__VALUE__) == TSC_MCV_511)  || \
#                                         ((__VALUE__) == TSC_MCV_1023) || \
#                                         ((__VALUE__) == TSC_MCV_2047) || \
#                                         ((__VALUE__) == TSC_MCV_4095) || \
#                                         ((__VALUE__) == TSC_MCV_8191) || \
#                                          ((__VALUE__) == TSC_MCV_16383))
# fun define IS_TSC_IODEF(__VALUE__)         (((__VALUE__) == TSC_IODEF_OUT_PP_LOW) || ((__VALUE__) == TSC_IODEF_IN_FLOAT))
# fun define IS_TSC_SYNC_POL(__VALUE__)      (((__VALUE__) == TSC_SYNC_POLARITY_FALLING) || ((__VALUE__) == TSC_SYNC_POLARITY_RISING))
# fun define IS_TSC_ACQ_MODE(__VALUE__)      (((__VALUE__) == TSC_ACQ_MODE_NORMAL) || ((__VALUE__) == TSC_ACQ_MODE_SYNCHRO))
# fun define IS_TSC_MCE_IT(__VALUE__)        (((FunctionalState)(__VALUE__) == DISABLE) || ((FunctionalState)(__VALUE__) == ENABLE))
# fun define IS_TSC_GROUP_INDEX(__VALUE__)   (((__VALUE__) == 0UL) || (((__VALUE__) > 0UL) && ((__VALUE__) < (uint32_t)TSC_NB_OF_GROUPS)))
# fun define IS_TSC_GROUP(__VALUE__)         ((((__VALUE__) & TSC_GROUP1_IO1) == TSC_GROUP1_IO1) ||\
#                                         (((__VALUE__) & TSC_GROUP1_IO2) == TSC_GROUP1_IO2) ||\
#                                         (((__VALUE__) & TSC_GROUP1_IO3) == TSC_GROUP1_IO3) ||\
#                                         (((__VALUE__) & TSC_GROUP1_IO4) == TSC_GROUP1_IO4) ||\
#                                         (((__VALUE__) & TSC_GROUP2_IO1) == TSC_GROUP2_IO1) ||\
#                                         (((__VALUE__) & TSC_GROUP2_IO2) == TSC_GROUP2_IO2) ||\
#                                         (((__VALUE__) & TSC_GROUP2_IO3) == TSC_GROUP2_IO3) ||\
#                                         (((__VALUE__) & TSC_GROUP2_IO4) == TSC_GROUP2_IO4) ||\
#                                         (((__VALUE__) & TSC_GROUP3_IO1) == TSC_GROUP3_IO1) ||\
#                                         (((__VALUE__) & TSC_GROUP3_IO2) == TSC_GROUP3_IO2) ||\
#                                         (((__VALUE__) & TSC_GROUP3_IO3) == TSC_GROUP3_IO3) ||\
#                                         (((__VALUE__) & TSC_GROUP3_IO4) == TSC_GROUP3_IO4) ||\
#                                         (((__VALUE__) & TSC_GROUP4_IO1) == TSC_GROUP4_IO1) ||\
#                                         (((__VALUE__) & TSC_GROUP4_IO2) == TSC_GROUP4_IO2) ||\
#                                         (((__VALUE__) & TSC_GROUP4_IO3) == TSC_GROUP4_IO3) ||\
#                                         (((__VALUE__) & TSC_GROUP4_IO4) == TSC_GROUP4_IO4) ||\
#                                         (((__VALUE__) & TSC_GROUP5_IO1) == TSC_GROUP5_IO1) ||\
#                                         (((__VALUE__) & TSC_GROUP5_IO2) == TSC_GROUP5_IO2) ||\
#                                         (((__VALUE__) & TSC_GROUP5_IO3) == TSC_GROUP5_IO3) ||\
#                                         (((__VALUE__) & TSC_GROUP5_IO4) == TSC_GROUP5_IO4) ||\
#                                         (((__VALUE__) & TSC_GROUP6_IO1) == TSC_GROUP6_IO1) ||\
#                                         (((__VALUE__) & TSC_GROUP6_IO2) == TSC_GROUP6_IO2) ||\
#                                         (((__VALUE__) & TSC_GROUP6_IO3) == TSC_GROUP6_IO3) ||\
#                                         (((__VALUE__) & TSC_GROUP6_IO4) == TSC_GROUP6_IO4) ||\
#                                         (((__VALUE__) & TSC_GROUP7_IO1) == TSC_GROUP7_IO1) ||\
#                                         (((__VALUE__) & TSC_GROUP7_IO2) == TSC_GROUP7_IO2) ||\
#                                         (((__VALUE__) & TSC_GROUP7_IO3) == TSC_GROUP7_IO3) ||\
#                                         (((__VALUE__) & TSC_GROUP7_IO4) == TSC_GROUP7_IO4) ||\
#                                         (((__VALUE__) & TSC_GROUP8_IO1) == TSC_GROUP8_IO1) ||\
#                                         (((__VALUE__) & TSC_GROUP8_IO2) == TSC_GROUP8_IO2) ||\
#                                         (((__VALUE__) & TSC_GROUP8_IO3) == TSC_GROUP8_IO3) ||\
#                                         (((__VALUE__) & TSC_GROUP8_IO4) == TSC_GROUP8_IO4))
# struct TSC_InitTypeDef

class TSC_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CTPulseHighLength',	ctypes.c_uint32),
		('CTPulseLowLength',	ctypes.c_uint32),
		('SpreadSpectrum',	ctypes.c_uint32),
		('SpreadSpectrumDeviation',	ctypes.c_uint32),
		('SpreadSpectrumPrescaler',	ctypes.c_uint32),
		('PulseGeneratorPrescaler',	ctypes.c_uint32),
		('MaxCountValue',	ctypes.c_uint32),
		('IODefaultMode',	ctypes.c_uint32),
		('SynchroPinPolarity',	ctypes.c_uint32),
		('AcquisitionMode',	ctypes.c_uint32),
		('MaxCountInterrupt',	ctypes.c_uint32),
		('ChannelIOs',	ctypes.c_uint32),
		('ShieldIOs',	ctypes.c_uint32),
		('SamplingIOs',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TSC_IOConfigTypeDef

class TSC_IOConfigTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ChannelIOs',	ctypes.c_uint32),
		('ShieldIOs',	ctypes.c_uint32),
		('SamplingIOs',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct TSC_HandleTypeDef
# struct TSC_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_uart_ex.h : 

# empty define __STM32L0xx_HAL_UART_EX_H
UART_WORDLENGTH_7B = 0x10000000
UART_WORDLENGTH_8B = 0x0
UART_WORDLENGTH_9B = 0x1000
UART_ADDRESS_DETECT_4B = 0x0
UART_ADDRESS_DETECT_7B = 0x10
# fun define UART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)       \
#  do {                                                        \
#    if((__HANDLE__)->Instance == USART2)                      \
#    {                                                         \
#       switch(__HAL_RCC_GET_USART2_SOURCE())                  \
#       {                                                      \
#        case RCC_USART2CLKSOURCE_PCLK1:                       \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_HSI:                         \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_SYSCLK:                      \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_LSE:                         \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else if((__HANDLE__)->Instance == LPUART1)                \
#    {                                                         \
#       switch(__HAL_RCC_GET_LPUART1_SOURCE())                 \
#       {                                                      \
#        case RCC_LPUART1CLKSOURCE_PCLK1:                      \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_HSI:                        \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_SYSCLK:                     \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_LSE:                        \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else                                                      \
#    {                                                         \
#      (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;         \
#    }                                                         \
#  } while(0)
# fun define UART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)       \
#  do {                                                        \
#    if((__HANDLE__)->Instance == USART1)                      \
#    {                                                         \
#       switch(__HAL_RCC_GET_USART1_SOURCE())                  \
#       {                                                      \
#        case RCC_USART1CLKSOURCE_PCLK2:                       \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK2;         \
#          break;                                              \
#        case RCC_USART1CLKSOURCE_HSI:                         \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_USART1CLKSOURCE_SYSCLK:                      \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_USART1CLKSOURCE_LSE:                         \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else if((__HANDLE__)->Instance == USART2)                 \
#    {                                                         \
#       switch(__HAL_RCC_GET_USART2_SOURCE())                  \
#       {                                                      \
#        case RCC_USART2CLKSOURCE_PCLK1:                       \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_HSI:                         \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_SYSCLK:                      \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_LSE:                         \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else if((__HANDLE__)->Instance == LPUART1)                \
#    {                                                         \
#       switch(__HAL_RCC_GET_LPUART1_SOURCE())                 \
#       {                                                      \
#        case RCC_LPUART1CLKSOURCE_PCLK1:                      \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_HSI:                        \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_SYSCLK:                     \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_LSE:                        \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else                                                      \
#    {                                                         \
#      (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;         \
#    }                                                         \
#  } while(0)
# fun define UART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)       \
#  do {                                                        \
#    if((__HANDLE__)->Instance == USART1)                      \
#    {                                                         \
#       switch(__HAL_RCC_GET_USART1_SOURCE())                  \
#       {                                                      \
#        case RCC_USART1CLKSOURCE_PCLK2:                       \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK2;         \
#          break;                                              \
#        case RCC_USART1CLKSOURCE_HSI:                         \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_USART1CLKSOURCE_SYSCLK:                      \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_USART1CLKSOURCE_LSE:                         \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else if((__HANDLE__)->Instance == USART2)                 \
#    {                                                         \
#       switch(__HAL_RCC_GET_USART2_SOURCE())                  \
#       {                                                      \
#        case RCC_USART2CLKSOURCE_PCLK1:                       \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_HSI:                         \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_SYSCLK:                      \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_USART2CLKSOURCE_LSE:                         \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else if((__HANDLE__)->Instance == USART4)                 \
#    {                                                         \
#      (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;             \
#    }                                                         \
#    else if((__HANDLE__)->Instance == USART5)                 \
#    {                                                         \
#      (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;             \
#    }                                                         \
#    else if((__HANDLE__)->Instance == LPUART1)                \
#    {                                                         \
#       switch(__HAL_RCC_GET_LPUART1_SOURCE())                 \
#       {                                                      \
#        case RCC_LPUART1CLKSOURCE_PCLK1:                      \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_PCLK1;         \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_HSI:                        \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_HSI;           \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_SYSCLK:                     \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_SYSCLK;        \
#          break;                                              \
#        case RCC_LPUART1CLKSOURCE_LSE:                        \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_LSE;           \
#          break;                                              \
#        default:                                              \
#          (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                              \
#       }                                                      \
#    }                                                         \
#    else                                                      \
#    {                                                         \
#      (__CLOCKSOURCE__) = UART_CLOCKSOURCE_UNDEFINED;         \
#    }                                                         \
#  } while(0)
# fun define UART_MASK_COMPUTATION(__HANDLE__)                             \
#  do {                                                                \
#  if ((__HANDLE__)->Init.WordLength == UART_WORDLENGTH_9B)            \
#  {                                                                   \
#     if ((__HANDLE__)->Init.Parity == UART_PARITY_NONE)               \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x01FFU ;                                \
#     }                                                                \
#     else                                                             \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x00FFU ;                                \
#     }                                                                \
#  }                                                                   \
#  else if ((__HANDLE__)->Init.WordLength == UART_WORDLENGTH_8B)       \
#  {                                                                   \
#     if ((__HANDLE__)->Init.Parity == UART_PARITY_NONE)               \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x00FFU ;                                \
#     }                                                                \
#     else                                                             \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x007FU ;                                \
#     }                                                                \
#  }                                                                   \
#  else if ((__HANDLE__)->Init.WordLength == UART_WORDLENGTH_7B)       \
#  {                                                                   \
#     if ((__HANDLE__)->Init.Parity == UART_PARITY_NONE)               \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x007FU ;                                \
#     }                                                                \
#     else                                                             \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x003FU ;                                \
#     }                                                                \
#  }                                                                   \
#  else                                                                \
#  {                                                                   \
#    (__HANDLE__)->Mask = 0x0000U;                                     \
#  }                                                                   \
#} while(0U)
# fun define IS_UART_WORD_LENGTH(__LENGTH__) (((__LENGTH__) == UART_WORDLENGTH_7B) || \
#                                         ((__LENGTH__) == UART_WORDLENGTH_8B) || \
#                                         ((__LENGTH__) == UART_WORDLENGTH_9B))
# fun define IS_UART_ADDRESSLENGTH_DETECT(__ADDRESS__) (((__ADDRESS__) == UART_ADDRESS_DETECT_4B) || \
#                                                   ((__ADDRESS__) == UART_ADDRESS_DETECT_7B))
# struct UART_WakeUpTypeDef

class UART_WakeUpTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('WakeUpEvent',	ctypes.c_uint32),
		('AddressLength',	ctypes.c_uint16),
		('Address',	ctypes.c_uint8),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_hal_uart.h : 

# Enum UART_ClockSourceTypeDef
UART_CLOCKSOURCE_PCLK1 = 0x0
UART_CLOCKSOURCE_PCLK2 = 0x1
UART_CLOCKSOURCE_HSI = 0x2
UART_CLOCKSOURCE_SYSCLK = 0x4
UART_CLOCKSOURCE_LSE = 0x8
UART_CLOCKSOURCE_UNDEFINED = 0x10
# Enum HAL_UART_CallbackIDTypeDef
# Skip HAL_UART_TX_HALFCOMPLETE_CB_ID : no need parse
# Skip HAL_UART_TX_COMPLETE_CB_ID : no need parse
# Skip HAL_UART_RX_HALFCOMPLETE_CB_ID : no need parse
# Skip HAL_UART_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_UART_ERROR_CB_ID : no need parse
# Skip HAL_UART_ABORT_COMPLETE_CB_ID : no need parse
# Skip HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID : no need parse
# Skip HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID : no need parse
# Skip HAL_UART_WAKEUP_CB_ID : no need parse
# Skip HAL_UART_MSPINIT_CB_ID : no need parse
# Skip HAL_UART_MSPDEINIT_CB_ID : no need parse
# empty define __STM32L0xx_HAL_UART_H
HAL_UART_STATE_RESET = 0x0
HAL_UART_STATE_READY = 0x20
HAL_UART_STATE_BUSY = 0x24
HAL_UART_STATE_BUSY_TX = 0x21
HAL_UART_STATE_BUSY_RX = 0x22
HAL_UART_STATE_BUSY_TX_RX = 0x23
HAL_UART_STATE_TIMEOUT = 0xA0
HAL_UART_STATE_ERROR = 0xE0
HAL_UART_ERROR_NONE = 0x0
HAL_UART_ERROR_PE = 0x1
HAL_UART_ERROR_NE = 0x2
HAL_UART_ERROR_FE = 0x4
HAL_UART_ERROR_ORE = 0x8
HAL_UART_ERROR_DMA = 0x10
# Skip HAL_UART_ERROR_INVALID_CALLBACK : no need parse
UART_STOPBITS_0_5 = 0x1000
UART_STOPBITS_1 = 0x0
UART_STOPBITS_1_5 = 0x3000
UART_STOPBITS_2 = 0x2000
UART_PARITY_NONE = 0x0
UART_PARITY_EVEN = 0x400
UART_PARITY_ODD = 0x600
UART_HWCONTROL_NONE = 0x0
UART_HWCONTROL_RTS = 0x100
UART_HWCONTROL_CTS = 0x200
UART_HWCONTROL_RTS_CTS = 0x300
UART_MODE_RX = 0x4
UART_MODE_TX = 0x8
UART_MODE_TX_RX = 0xC
UART_STATE_DISABLE = 0x0
UART_STATE_ENABLE = 0x1
UART_OVERSAMPLING_16 = 0x0
UART_OVERSAMPLING_8 = 0x8000
UART_ONE_BIT_SAMPLE_DISABLE = 0x0
UART_ONE_BIT_SAMPLE_ENABLE = 0x800
UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT = 0x0
UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE = 0x200000
UART_ADVFEATURE_AUTOBAUDRATE_ON0X7FFRAME = 0x400000
UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME = 0x600000
UART_RECEIVER_TIMEOUT_DISABLE = 0x0
UART_RECEIVER_TIMEOUT_ENABLE = 0x800000
UART_LIN_DISABLE = 0x0
UART_LIN_ENABLE = 0x4000
UART_LINBREAKDETECTLENGTH_10B = 0x0
UART_LINBREAKDETECTLENGTH_11B = 0x20
UART_DMA_TX_DISABLE = 0x0
UART_DMA_TX_ENABLE = 0x80
UART_DMA_RX_DISABLE = 0x0
UART_DMA_RX_ENABLE = 0x40
UART_HALF_DUPLEX_DISABLE = 0x0
UART_HALF_DUPLEX_ENABLE = 0x8
UART_WAKEUPMETHOD_IDLELINE = 0x0
UART_WAKEUPMETHOD_ADDRESSMARK = 0x800
UART_AUTOBAUD_REQUEST = 0x1
UART_SENDBREAK_REQUEST = 0x2
UART_MUTE_MODE_REQUEST = 0x4
UART_RXDATA_FLUSH_REQUEST = 0x8
UART_TXDATA_FLUSH_REQUEST = 0x10
UART_ADVFEATURE_NO_INIT = 0x0
UART_ADVFEATURE_TXINVERT_INIT = 0x1
UART_ADVFEATURE_RXINVERT_INIT = 0x2
UART_ADVFEATURE_DATAINVERT_INIT = 0x4
UART_ADVFEATURE_SWAP_INIT = 0x8
UART_ADVFEATURE_RXOVERRUNDISABLE_INIT = 0x10
UART_ADVFEATURE_DMADISABLEONERROR_INIT = 0x20
UART_ADVFEATURE_AUTOBAUDRATE_INIT = 0x40
UART_ADVFEATURE_MSBFIRST_INIT = 0x80
UART_ADVFEATURE_TXINV_DISABLE = 0x0
UART_ADVFEATURE_TXINV_ENABLE = 0x20000
UART_ADVFEATURE_RXINV_DISABLE = 0x0
UART_ADVFEATURE_RXINV_ENABLE = 0x10000
UART_ADVFEATURE_DATAINV_DISABLE = 0x0
UART_ADVFEATURE_DATAINV_ENABLE = 0x40000
UART_ADVFEATURE_SWAP_DISABLE = 0x0
UART_ADVFEATURE_SWAP_ENABLE = 0x8000
UART_ADVFEATURE_OVERRUN_ENABLE = 0x0
UART_ADVFEATURE_OVERRUN_DISABLE = 0x1000
UART_ADVFEATURE_AUTOBAUDRATE_DISABLE = 0x0
UART_ADVFEATURE_AUTOBAUDRATE_ENABLE = 0x100000
UART_ADVFEATURE_DMA_ENABLEONRXERROR = 0x0
UART_ADVFEATURE_DMA_DISABLEONRXERROR = 0x2000
UART_ADVFEATURE_MSBFIRST_DISABLE = 0x0
UART_ADVFEATURE_MSBFIRST_ENABLE = 0x80000
UART_ADVFEATURE_STOPMODE_DISABLE = 0x0
UART_ADVFEATURE_STOPMODE_ENABLE = 0x2
UART_ADVFEATURE_MUTEMODE_DISABLE = 0x0
UART_ADVFEATURE_MUTEMODE_ENABLE = 0x2000
UART_CR2_ADDRESS_LSB_POS = 0x18
UART_WAKEUP_ON_ADDRESS = 0x0
UART_WAKEUP_ON_STARTBIT = 0x200000
UART_WAKEUP_ON_READDATA_NONEMPTY = 0x300000
UART_DE_POLARITY_HIGH = 0x0
UART_DE_POLARITY_LOW = 0x8000
UART_CR1_DEAT_ADDRESS_LSB_POS = 0x15
UART_CR1_DEDT_ADDRESS_LSB_POS = 0x10
UART_IT_MASK = 0x1F
HAL_UART_TIMEOUT_VALUE = 0x1FFFFFF
UART_FLAG_REACK = 0x400000
UART_FLAG_TEACK = 0x200000
UART_FLAG_WUF = 0x100000
UART_FLAG_RWU = 0x80000
UART_FLAG_SBKF = 0x40000
UART_FLAG_CMF = 0x20000
UART_FLAG_BUSY = 0x10000
UART_FLAG_ABRF = 0x8000
UART_FLAG_ABRE = 0x4000
UART_FLAG_CTS = 0x400
UART_FLAG_CTSIF = 0x200
UART_FLAG_LBDF = 0x100
UART_FLAG_TXE = 0x80
UART_FLAG_TC = 0x40
UART_FLAG_RXNE = 0x20
UART_FLAG_IDLE = 0x10
UART_FLAG_ORE = 0x8
UART_FLAG_NE = 0x4
UART_FLAG_FE = 0x2
UART_FLAG_PE = 0x1
UART_IT_PE = 0x28
UART_IT_TXE = 0x727
UART_IT_TC = 0x626
UART_IT_RXNE = 0x525
UART_IT_IDLE = 0x424
UART_IT_LBD = 0x846
UART_IT_CTS = 0x96A
UART_IT_CM = 0x112E
UART_IT_WUF = 0x1476
UART_IT_ERR = 0x60
UART_IT_ORE = 0x300
UART_IT_NE = 0x200
UART_IT_FE = 0x100
UART_CLEAR_PEF = 0x1
UART_CLEAR_FEF = 0x2
UART_CLEAR_NEF = 0x4
UART_CLEAR_OREF = 0x8
UART_CLEAR_IDLEF = 0x10
UART_CLEAR_TCF = 0x40
UART_CLEAR_LBDF = 0x100
UART_CLEAR_CTSF = 0x200
UART_CLEAR_CMF = 0x20000
UART_CLEAR_WUF = 0x100000
# fun define __HAL_UART_RESET_HANDLE_STATE(__HANDLE__)  do{                                                   \
#                                                       (__HANDLE__)->gState = HAL_UART_STATE_RESET;      \
#                                                       (__HANDLE__)->RxState = HAL_UART_STATE_RESET;     \
#                                                       (__HANDLE__)->MspInitCallback = NULL;             \
#                                                       (__HANDLE__)->MspDeInitCallback = NULL;           \
#                                                     } while(0U)
# fun define __HAL_UART_RESET_HANDLE_STATE(__HANDLE__)  do{                                                   \
#                                                       (__HANDLE__)->gState = HAL_UART_STATE_RESET;      \
#                                                       (__HANDLE__)->RxState = HAL_UART_STATE_RESET;     \
#                                                     } while(0U)
# fun define __HAL_UART_FLUSH_DRREGISTER(__HANDLE__)  \
#  do{                \
#      SET_BIT((__HANDLE__)->Instance->RQR, UART_RXDATA_FLUSH_REQUEST); \
#      SET_BIT((__HANDLE__)->Instance->RQR, UART_TXDATA_FLUSH_REQUEST); \
#    }  while(0U)
# fun define __HAL_UART_CLEAR_FLAG(__HANDLE__, __FLAG__) ((__HANDLE__)->Instance->ICR = (__FLAG__))
# fun define __HAL_UART_CLEAR_PEFLAG(__HANDLE__)   __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_PEF)
# fun define __HAL_UART_CLEAR_FEFLAG(__HANDLE__)   __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_FEF)
# fun define __HAL_UART_CLEAR_NEFLAG(__HANDLE__)  __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_NEF)
# fun define __HAL_UART_CLEAR_OREFLAG(__HANDLE__)   __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_OREF)
# fun define __HAL_UART_CLEAR_IDLEFLAG(__HANDLE__)   __HAL_UART_CLEAR_FLAG((__HANDLE__), UART_CLEAR_IDLEF)
# fun define __HAL_UART_GET_FLAG(__HANDLE__, __FLAG__) (((__HANDLE__)->Instance->ISR & (__FLAG__)) == (__FLAG__))
# fun define __HAL_UART_ENABLE_IT(__HANDLE__, __INTERRUPT__)   (((((uint8_t)(__INTERRUPT__)) >> 5U) == 1U)? ((__HANDLE__)->Instance->CR1 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))): \
#                                                           ((((uint8_t)(__INTERRUPT__)) >> 5U) == 2U)? ((__HANDLE__)->Instance->CR2 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))): \
#                                                           ((__HANDLE__)->Instance->CR3 |= (1U << ((__INTERRUPT__) & UART_IT_MASK))))
# fun define __HAL_UART_DISABLE_IT(__HANDLE__, __INTERRUPT__)  (((((uint8_t)(__INTERRUPT__)) >> 5U) == 1U)? ((__HANDLE__)->Instance->CR1 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))): \
#                                                           ((((uint8_t)(__INTERRUPT__)) >> 5U) == 2U)? ((__HANDLE__)->Instance->CR2 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))): \
#                                                           ((__HANDLE__)->Instance->CR3 &= ~ (1U << ((__INTERRUPT__) & UART_IT_MASK))))
# fun define __HAL_UART_GET_IT(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->ISR & (1U << ((__INTERRUPT__)>> 8U))) != RESET) ? SET : RESET)
# fun define __HAL_UART_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((((((uint8_t)(__INTERRUPT__)) >> 5U) == 1U) ? (__HANDLE__)->Instance->CR1 : \
#                                                               (((((uint8_t)(__INTERRUPT__)) >> 5U) == 2U) ? (__HANDLE__)->Instance->CR2 : \
#                                                               (__HANDLE__)->Instance->CR3)) & (1U << (((uint16_t)(__INTERRUPT__)) & UART_IT_MASK)))  != RESET) ? SET : RESET)
# fun define __HAL_UART_CLEAR_IT(__HANDLE__, __IT_CLEAR__) ((__HANDLE__)->Instance->ICR = (uint32_t)(__IT_CLEAR__))
# fun define __HAL_UART_SEND_REQ(__HANDLE__, __REQ__) ((__HANDLE__)->Instance->RQR |= (uint16_t)(__REQ__))
# fun define __HAL_UART_ONE_BIT_SAMPLE_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3|= USART_CR3_ONEBIT)
# fun define __HAL_UART_ONE_BIT_SAMPLE_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3 &= ~USART_CR3_ONEBIT)
# fun define __HAL_UART_ENABLE(__HANDLE__)                   ((__HANDLE__)->Instance->CR1 |= USART_CR1_UE)
# fun define __HAL_UART_DISABLE(__HANDLE__)                  ((__HANDLE__)->Instance->CR1 &= ~USART_CR1_UE)
# fun define __HAL_UART_HWCONTROL_CTS_ENABLE(__HANDLE__)        \
#  do{                                                      \
#    SET_BIT((__HANDLE__)->Instance->CR3, USART_CR3_CTSE);  \
#    (__HANDLE__)->Init.HwFlowCtl |= USART_CR3_CTSE;        \
#  } while(0U)
# fun define __HAL_UART_HWCONTROL_CTS_DISABLE(__HANDLE__)        \
#  do{                                                       \
#    CLEAR_BIT((__HANDLE__)->Instance->CR3, USART_CR3_CTSE); \
#    (__HANDLE__)->Init.HwFlowCtl &= ~(USART_CR3_CTSE);      \
#  } while(0U)
# fun define __HAL_UART_HWCONTROL_RTS_ENABLE(__HANDLE__)       \
#  do{                                                     \
#    SET_BIT((__HANDLE__)->Instance->CR3, USART_CR3_RTSE); \
#    (__HANDLE__)->Init.HwFlowCtl |= USART_CR3_RTSE;       \
#  } while(0U)
# fun define __HAL_UART_HWCONTROL_RTS_DISABLE(__HANDLE__)       \
#  do{                                                      \
#    CLEAR_BIT((__HANDLE__)->Instance->CR3, USART_CR3_RTSE);\
#    (__HANDLE__)->Init.HwFlowCtl &= ~(USART_CR3_RTSE);     \
#  } while(0U)
# fun define UART_DIV_LPUART(__PCLK__, __BAUD__)      (((((uint64_t)(__PCLK__)*256U)) + ((__BAUD__)/2U)) / (__BAUD__))
# fun define UART_DIV_SAMPLING8(__PCLK__, __BAUD__)   ((((__PCLK__)*2U) + ((__BAUD__)/2U)) / (__BAUD__))
# fun define UART_DIV_SAMPLING16(__PCLK__, __BAUD__)  (((__PCLK__) + ((__BAUD__)/2U)) / (__BAUD__))
# fun define UART_INSTANCE_LOWPOWER(__HANDLE__) (IS_LPUART_INSTANCE((__HANDLE__)->Instance))
# fun define IS_UART_BAUDRATE(__BAUDRATE__) ((__BAUDRATE__) < 4000001U)
# fun define IS_UART_ASSERTIONTIME(__TIME__)    ((__TIME__) <= 0x1FU)
# fun define IS_UART_DEASSERTIONTIME(__TIME__) ((__TIME__) <= 0x1FU)
# fun define IS_UART_STOPBITS(__STOPBITS__) (((__STOPBITS__) == UART_STOPBITS_0_5) || \
#                                        ((__STOPBITS__) == UART_STOPBITS_1)   || \
#                                        ((__STOPBITS__) == UART_STOPBITS_1_5) || \
#                                        ((__STOPBITS__) == UART_STOPBITS_2))
# fun define IS_LPUART_STOPBITS(__STOPBITS__) (((__STOPBITS__) == UART_STOPBITS_1) || \
#                                          ((__STOPBITS__) == UART_STOPBITS_2))
# fun define IS_UART_PARITY(__PARITY__) (((__PARITY__) == UART_PARITY_NONE) || \
#                                    ((__PARITY__) == UART_PARITY_EVEN) || \
#                                    ((__PARITY__) == UART_PARITY_ODD))
# fun define IS_UART_HARDWARE_FLOW_CONTROL(__CONTROL__)\
#                                   (((__CONTROL__) == UART_HWCONTROL_NONE) || \
#                                    ((__CONTROL__) == UART_HWCONTROL_RTS)  || \
#                                    ((__CONTROL__) == UART_HWCONTROL_CTS)  || \
#                                    ((__CONTROL__) == UART_HWCONTROL_RTS_CTS))
# fun define IS_UART_MODE(__MODE__) ((((__MODE__) & (~((uint32_t)(UART_MODE_TX_RX)))) == 0x00U) && ((__MODE__) != 0x00U))
# fun define IS_UART_STATE(__STATE__) (((__STATE__) == UART_STATE_DISABLE) || \
#                                  ((__STATE__) == UART_STATE_ENABLE))
# fun define IS_UART_OVERSAMPLING(__SAMPLING__) (((__SAMPLING__) == UART_OVERSAMPLING_16) || \
#                                            ((__SAMPLING__) == UART_OVERSAMPLING_8))
# fun define IS_UART_ONE_BIT_SAMPLE(__ONEBIT__) (((__ONEBIT__) == UART_ONE_BIT_SAMPLE_DISABLE) || \
#                                            ((__ONEBIT__) == UART_ONE_BIT_SAMPLE_ENABLE))
# fun define IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(__MODE__)  (((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT)    || \
#                                                        ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE) || \
#                                                        ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ON0X7FFRAME)   || \
#                                                        ((__MODE__) == UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME))
# fun define IS_UART_RECEIVER_TIMEOUT(__TIMEOUT__) (((__TIMEOUT__) == UART_RECEIVER_TIMEOUT_DISABLE) || \
#                                               ((__TIMEOUT__) == UART_RECEIVER_TIMEOUT_ENABLE))
# fun define IS_UART_LIN(__LIN__)        (((__LIN__) == UART_LIN_DISABLE) || \
#                                     ((__LIN__) == UART_LIN_ENABLE))
# fun define IS_UART_LIN_BREAK_DETECT_LENGTH(__LENGTH__) (((__LENGTH__) == UART_LINBREAKDETECTLENGTH_10B) || \
#                                                     ((__LENGTH__) == UART_LINBREAKDETECTLENGTH_11B))
# fun define IS_UART_DMA_TX(__DMATX__)     (((__DMATX__) == UART_DMA_TX_DISABLE) || \
#                                       ((__DMATX__) == UART_DMA_TX_ENABLE))
# fun define IS_UART_DMA_RX(__DMARX__)     (((__DMARX__) == UART_DMA_RX_DISABLE) || \
#                                       ((__DMARX__) == UART_DMA_RX_ENABLE))
# fun define IS_UART_HALF_DUPLEX(__HDSEL__)     (((__HDSEL__) == UART_HALF_DUPLEX_DISABLE) || \
#                                            ((__HDSEL__) == UART_HALF_DUPLEX_ENABLE))
# fun define IS_UART_WAKEUPMETHOD(__WAKEUP__) (((__WAKEUP__) == UART_WAKEUPMETHOD_IDLELINE) || \
#                                          ((__WAKEUP__) == UART_WAKEUPMETHOD_ADDRESSMARK))
# fun define IS_UART_REQUEST_PARAMETER(__PARAM__) (((__PARAM__) == UART_AUTOBAUD_REQUEST)     || \
#                                              ((__PARAM__) == UART_SENDBREAK_REQUEST)    || \
#                                              ((__PARAM__) == UART_MUTE_MODE_REQUEST)    || \
#                                              ((__PARAM__) == UART_RXDATA_FLUSH_REQUEST) || \
#                                              ((__PARAM__) == UART_TXDATA_FLUSH_REQUEST))
# fun define IS_UART_ADVFEATURE_INIT(__INIT__)   ((__INIT__) <= (UART_ADVFEATURE_NO_INIT                | \
#                                                            UART_ADVFEATURE_TXINVERT_INIT          | \
#                                                            UART_ADVFEATURE_RXINVERT_INIT          | \
#                                                            UART_ADVFEATURE_DATAINVERT_INIT        | \
#                                                            UART_ADVFEATURE_SWAP_INIT              | \
#                                                            UART_ADVFEATURE_RXOVERRUNDISABLE_INIT  | \
#                                                            UART_ADVFEATURE_DMADISABLEONERROR_INIT | \
#                                                            UART_ADVFEATURE_AUTOBAUDRATE_INIT      | \
#                                                            UART_ADVFEATURE_MSBFIRST_INIT))
# fun define IS_UART_ADVFEATURE_TXINV(__TXINV__) (((__TXINV__) == UART_ADVFEATURE_TXINV_DISABLE) || \
#                                             ((__TXINV__) == UART_ADVFEATURE_TXINV_ENABLE))
# fun define IS_UART_ADVFEATURE_RXINV(__RXINV__) (((__RXINV__) == UART_ADVFEATURE_RXINV_DISABLE) || \
#                                             ((__RXINV__) == UART_ADVFEATURE_RXINV_ENABLE))
# fun define IS_UART_ADVFEATURE_DATAINV(__DATAINV__) (((__DATAINV__) == UART_ADVFEATURE_DATAINV_DISABLE) || \
#                                                 ((__DATAINV__) == UART_ADVFEATURE_DATAINV_ENABLE))
# fun define IS_UART_ADVFEATURE_SWAP(__SWAP__) (((__SWAP__) == UART_ADVFEATURE_SWAP_DISABLE) || \
#                                           ((__SWAP__) == UART_ADVFEATURE_SWAP_ENABLE))
# fun define IS_UART_OVERRUN(__OVERRUN__)     (((__OVERRUN__) == UART_ADVFEATURE_OVERRUN_ENABLE) || \
#                                          ((__OVERRUN__) == UART_ADVFEATURE_OVERRUN_DISABLE))
# fun define IS_UART_ADVFEATURE_AUTOBAUDRATE(__AUTOBAUDRATE__)  (((__AUTOBAUDRATE__) == UART_ADVFEATURE_AUTOBAUDRATE_DISABLE) || \
#                                                            ((__AUTOBAUDRATE__) == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE))
# fun define IS_UART_ADVFEATURE_DMAONRXERROR(__DMA__)  (((__DMA__) == UART_ADVFEATURE_DMA_ENABLEONRXERROR) || \
#                                                   ((__DMA__) == UART_ADVFEATURE_DMA_DISABLEONRXERROR))
# fun define IS_UART_ADVFEATURE_MSBFIRST(__MSBFIRST__) (((__MSBFIRST__) == UART_ADVFEATURE_MSBFIRST_DISABLE) || \
#                                                   ((__MSBFIRST__) == UART_ADVFEATURE_MSBFIRST_ENABLE))
# fun define IS_UART_ADVFEATURE_STOPMODE(__STOPMODE__) (((__STOPMODE__) == UART_ADVFEATURE_STOPMODE_DISABLE) || \
#                                                   ((__STOPMODE__) == UART_ADVFEATURE_STOPMODE_ENABLE))
# fun define IS_UART_MUTE_MODE(__MUTE__)       (((__MUTE__) == UART_ADVFEATURE_MUTEMODE_DISABLE) || \
#                                           ((__MUTE__) == UART_ADVFEATURE_MUTEMODE_ENABLE))
# fun define IS_UART_WAKEUP_SELECTION(__WAKE__) (((__WAKE__) == UART_WAKEUP_ON_ADDRESS)           || \
#                                            ((__WAKE__) == UART_WAKEUP_ON_STARTBIT)          || \
#                                            ((__WAKE__) == UART_WAKEUP_ON_READDATA_NONEMPTY))
# fun define IS_UART_DE_POLARITY(__POLARITY__)    (((__POLARITY__) == UART_DE_POLARITY_HIGH) || \
#                                              ((__POLARITY__) == UART_DE_POLARITY_LOW))
# struct UART_InitTypeDef

class UART_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('BaudRate',	ctypes.c_uint32),
		('WordLength',	ctypes.c_uint32),
		('StopBits',	ctypes.c_uint32),
		('Parity',	ctypes.c_uint32),
		('Mode',	ctypes.c_uint32),
		('HwFlowCtl',	ctypes.c_uint32),
		('OverSampling',	ctypes.c_uint32),
		('OneBitSampling',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct UART_AdvFeatureInitTypeDef

class UART_AdvFeatureInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('AdvFeatureInit',	ctypes.c_uint32),
		('TxPinLevelInvert',	ctypes.c_uint32),
		('RxPinLevelInvert',	ctypes.c_uint32),
		('DataInvert',	ctypes.c_uint32),
		('Swap',	ctypes.c_uint32),
		('OverrunDisable',	ctypes.c_uint32),
		('DMADisableonRxError',	ctypes.c_uint32),
		('AutoBaudRateEnable',	ctypes.c_uint32),
		('AutoBaudRateMode',	ctypes.c_uint32),
		('MSBFirst',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct UART_HandleTypeDef
# struct UART_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_usart_ex.h : 

# empty define STM32L0xx_HAL_USART_EX_H
USART_WORDLENGTH_7B = 0x10000000
USART_WORDLENGTH_8B = 0x0
USART_WORDLENGTH_9B = 0x1000
# fun define USART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)       \
#  do {                                                         \
#    if((__HANDLE__)->Instance == USART1)                       \
#    {                                                          \
#       switch(__HAL_RCC_GET_USART1_SOURCE())                   \
#       {                                                       \
#        case RCC_USART1CLKSOURCE_PCLK2:                        \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_PCLK2;         \
#          break;                                               \
#        case RCC_USART1CLKSOURCE_HSI:                          \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_HSI;           \
#          break;                                               \
#        case RCC_USART1CLKSOURCE_SYSCLK:                       \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_SYSCLK;        \
#          break;                                               \
#        case RCC_USART1CLKSOURCE_LSE:                          \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_LSE;           \
#          break;                                               \
#        default:                                               \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                               \
#       }                                                       \
#    }                                                          \
#    else if((__HANDLE__)->Instance == USART2)                  \
#    {                                                          \
#       switch(__HAL_RCC_GET_USART2_SOURCE())                   \
#       {                                                       \
#        case RCC_USART2CLKSOURCE_PCLK1:                        \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_PCLK1;         \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_HSI:                          \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_HSI;           \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_SYSCLK:                       \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_SYSCLK;        \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_LSE:                          \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_LSE;           \
#          break;                                               \
#        default:                                               \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                               \
#       }                                                       \
#    }                                                          \
#    else                                                       \
#    {                                                          \
#      (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED;         \
#    }                                                          \
#  } while(0U)
# fun define USART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)       \
#  do {                                                         \
#    if((__HANDLE__)->Instance == USART1)                       \
#    {                                                          \
#       switch(__HAL_RCC_GET_USART1_SOURCE())                   \
#       {                                                       \
#        case RCC_USART1CLKSOURCE_PCLK2:                        \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_PCLK2;         \
#          break;                                               \
#        case RCC_USART1CLKSOURCE_HSI:                          \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_HSI;           \
#          break;                                               \
#        case RCC_USART1CLKSOURCE_SYSCLK:                       \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_SYSCLK;        \
#          break;                                               \
#        case RCC_USART1CLKSOURCE_LSE:                          \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_LSE;           \
#          break;                                               \
#        default:                                               \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                               \
#       }                                                       \
#    }                                                          \
#    else if((__HANDLE__)->Instance == USART2)                  \
#    {                                                          \
#       switch(__HAL_RCC_GET_USART2_SOURCE())                   \
#       {                                                       \
#        case RCC_USART2CLKSOURCE_PCLK1:                        \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_PCLK1;         \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_HSI:                          \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_HSI;           \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_SYSCLK:                       \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_SYSCLK;        \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_LSE:                          \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_LSE;           \
#          break;                                               \
#        default:                                               \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                               \
#       }                                                       \
#    }                                                          \
#    else if((__HANDLE__)->Instance == USART4)                  \
#    {                                                          \
#      (__CLOCKSOURCE__) = USART_CLOCKSOURCE_PCLK1;             \
#    }                                                          \
#    else if((__HANDLE__)->Instance == USART5)                  \
#    {                                                          \
#      (__CLOCKSOURCE__) = USART_CLOCKSOURCE_PCLK1;             \
#    }                                                          \
#    else                                                       \
#    {                                                          \
#      (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED;         \
#    }                                                          \
#  } while(0U)
# fun define USART_GETCLOCKSOURCE(__HANDLE__,__CLOCKSOURCE__)       \
#  do {                                                         \
#    if((__HANDLE__)->Instance == USART2)                       \
#    {                                                          \
#       switch(__HAL_RCC_GET_USART2_SOURCE())                   \
#       {                                                       \
#        case RCC_USART2CLKSOURCE_PCLK1:                        \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_PCLK1;         \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_HSI:                          \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_HSI;           \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_SYSCLK:                       \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_SYSCLK;        \
#          break;                                               \
#        case RCC_USART2CLKSOURCE_LSE:                          \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_LSE;           \
#          break;                                               \
#        default:                                               \
#          (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED;     \
#          break;                                               \
#       }                                                       \
#    }                                                          \
#    else                                                       \
#    {                                                          \
#      (__CLOCKSOURCE__) = USART_CLOCKSOURCE_UNDEFINED;         \
#    }                                                          \
#  } while(0U)
# fun define USART_MASK_COMPUTATION(__HANDLE__)                            \
#  do {                                                                \
#  if ((__HANDLE__)->Init.WordLength == USART_WORDLENGTH_9B)           \
#  {                                                                   \
#     if ((__HANDLE__)->Init.Parity == USART_PARITY_NONE)              \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x01FFU;                                 \
#     }                                                                \
#     else                                                             \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x00FFU;                                 \
#     }                                                                \
#  }                                                                   \
#  else if ((__HANDLE__)->Init.WordLength == USART_WORDLENGTH_8B)      \
#  {                                                                   \
#     if ((__HANDLE__)->Init.Parity == USART_PARITY_NONE)              \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x00FFU;                                 \
#     }                                                                \
#     else                                                             \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x007FU;                                 \
#     }                                                                \
#  }                                                                   \
#  else if ((__HANDLE__)->Init.WordLength == USART_WORDLENGTH_7B)      \
#  {                                                                   \
#     if ((__HANDLE__)->Init.Parity == USART_PARITY_NONE)              \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x007FU;                                 \
#     }                                                                \
#     else                                                             \
#     {                                                                \
#        (__HANDLE__)->Mask = 0x003FU;                                 \
#     }                                                                \
#  }                                                                   \
#  else                                                                \
#  {                                                                   \
#    (__HANDLE__)->Mask = 0x0000U;                                     \
#  }                                                                   \
#} while(0U)
# fun define IS_USART_WORD_LENGTH(__LENGTH__) (((__LENGTH__) == USART_WORDLENGTH_7B) || \
#                                          ((__LENGTH__) == USART_WORDLENGTH_8B) || \
#                                          ((__LENGTH__) == USART_WORDLENGTH_9B))
# ----------------------------------------

# file stm32l0xx_hal_usart.h : 

# Enum HAL_USART_StateTypeDef
HAL_USART_STATE_RESET = 0x0
HAL_USART_STATE_READY = 0x1
HAL_USART_STATE_BUSY = 0x2
HAL_USART_STATE_BUSY_TX = 0x12
HAL_USART_STATE_BUSY_RX = 0x22
HAL_USART_STATE_BUSY_TX_RX = 0x32
HAL_USART_STATE_TIMEOUT = 0x3
HAL_USART_STATE_ERROR = 0x4
# Enum USART_ClockSourceTypeDef
USART_CLOCKSOURCE_PCLK1 = 0x0
USART_CLOCKSOURCE_PCLK2 = 0x1
USART_CLOCKSOURCE_HSI = 0x2
USART_CLOCKSOURCE_SYSCLK = 0x4
USART_CLOCKSOURCE_LSE = 0x8
USART_CLOCKSOURCE_UNDEFINED = 0x10
# Enum HAL_USART_CallbackIDTypeDef
# Skip HAL_USART_TX_HALFCOMPLETE_CB_ID : no need parse
# Skip HAL_USART_TX_COMPLETE_CB_ID : no need parse
# Skip HAL_USART_RX_HALFCOMPLETE_CB_ID : no need parse
# Skip HAL_USART_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_USART_TX_RX_COMPLETE_CB_ID : no need parse
# Skip HAL_USART_ERROR_CB_ID : no need parse
# Skip HAL_USART_ABORT_COMPLETE_CB_ID : no need parse
# Skip HAL_USART_MSPINIT_CB_ID : no need parse
# Skip HAL_USART_MSPDEINIT_CB_ID : no need parse
# empty define STM32L0xx_HAL_USART_H
HAL_USART_ERROR_NONE = 0x0
HAL_USART_ERROR_PE = 0x1
HAL_USART_ERROR_NE = 0x2
HAL_USART_ERROR_FE = 0x4
HAL_USART_ERROR_ORE = 0x8
HAL_USART_ERROR_DMA = 0x10
# Skip HAL_USART_ERROR_INVALID_CALLBACK : no need parse
USART_STOPBITS_0_5 = 0x1000
USART_STOPBITS_1 = 0x0
USART_STOPBITS_1_5 = 0x3000
USART_STOPBITS_2 = 0x2000
USART_PARITY_NONE = 0x0
USART_PARITY_EVEN = 0x400
USART_PARITY_ODD = 0x600
USART_MODE_RX = 0x4
USART_MODE_TX = 0x8
USART_MODE_TX_RX = 0xC
USART_OVERSAMPLING_16 = 0x0
USART_OVERSAMPLING_8 = 0x8000
USART_CLOCK_DISABLE = 0x0
USART_CLOCK_ENABLE = 0x800
USART_POLARITY_LOW = 0x0
USART_POLARITY_HIGH = 0x400
USART_PHASE_1EDGE = 0x0
USART_PHASE_2EDGE = 0x200
USART_LASTBIT_DISABLE = 0x0
USART_LASTBIT_ENABLE = 0x100
USART_RXDATA_FLUSH_REQUEST = 0x8
USART_TXDATA_FLUSH_REQUEST = 0x10
USART_FLAG_REACK = 0x400000
USART_FLAG_TEACK = 0x200000
USART_FLAG_BUSY = 0x10000
USART_FLAG_TXE = 0x80
USART_FLAG_TC = 0x40
USART_FLAG_RXNE = 0x20
USART_FLAG_IDLE = 0x10
USART_FLAG_ORE = 0x8
USART_FLAG_NE = 0x4
USART_FLAG_FE = 0x2
USART_FLAG_PE = 0x1
USART_IT_PE = 0x28
USART_IT_TXE = 0x727
USART_IT_TC = 0x626
USART_IT_RXNE = 0x525
USART_IT_IDLE = 0x424
USART_IT_ERR = 0x60
USART_IT_ORE = 0x300
USART_IT_NE = 0x200
USART_IT_FE = 0x100
USART_CLEAR_PEF = 0x1
USART_CLEAR_FEF = 0x2
USART_CLEAR_NEF = 0x4
USART_CLEAR_OREF = 0x8
USART_CLEAR_IDLEF = 0x10
USART_CLEAR_TCF = 0x40
USART_IT_MASK = 0x1F
USART_CR_MASK = 0xE0
USART_CR_POS = 0x5
USART_ISR_MASK = 0x1F00
USART_ISR_POS = 0x8
# fun define __HAL_USART_RESET_HANDLE_STATE(__HANDLE__)  do{                                            \
#                                                      (__HANDLE__)->State = HAL_USART_STATE_RESET; \
#                                                      (__HANDLE__)->MspInitCallback = NULL;        \
#                                                      (__HANDLE__)->MspDeInitCallback = NULL;      \
#                                                    } while(0U)
# fun define __HAL_USART_RESET_HANDLE_STATE(__HANDLE__)  ((__HANDLE__)->State = HAL_USART_STATE_RESET)
# fun define __HAL_USART_FLUSH_DRREGISTER(__HANDLE__)                        \
#  do{                                                                   \
#      SET_BIT((__HANDLE__)->Instance->RQR, USART_RXDATA_FLUSH_REQUEST); \
#      SET_BIT((__HANDLE__)->Instance->RQR, USART_TXDATA_FLUSH_REQUEST); \
#    } while(0U)
# fun define __HAL_USART_GET_FLAG(__HANDLE__, __FLAG__) (((__HANDLE__)->Instance->ISR & (__FLAG__)) == (__FLAG__))
# fun define __HAL_USART_CLEAR_FLAG(__HANDLE__, __FLAG__) ((__HANDLE__)->Instance->ICR = (__FLAG__))
# fun define __HAL_USART_CLEAR_PEFLAG(__HANDLE__)   __HAL_USART_CLEAR_FLAG((__HANDLE__), USART_CLEAR_PEF)
# fun define __HAL_USART_CLEAR_FEFLAG(__HANDLE__)   __HAL_USART_CLEAR_FLAG((__HANDLE__), USART_CLEAR_FEF)
# fun define __HAL_USART_CLEAR_NEFLAG(__HANDLE__)  __HAL_USART_CLEAR_FLAG((__HANDLE__), USART_CLEAR_NEF)
# fun define __HAL_USART_CLEAR_OREFLAG(__HANDLE__)   __HAL_USART_CLEAR_FLAG((__HANDLE__), USART_CLEAR_OREF)
# fun define __HAL_USART_CLEAR_IDLEFLAG(__HANDLE__)   __HAL_USART_CLEAR_FLAG((__HANDLE__), USART_CLEAR_IDLEF)
# fun define __HAL_USART_ENABLE_IT(__HANDLE__, __INTERRUPT__)   (((((__INTERRUPT__) & USART_CR_MASK) >> USART_CR_POS) == 1U)? ((__HANDLE__)->Instance->CR1 |= ((uint32_t)1U << ((__INTERRUPT__) & USART_IT_MASK))): \
#                                                            ((((__INTERRUPT__) & USART_CR_MASK) >> USART_CR_POS) == 2U)? ((__HANDLE__)->Instance->CR2 |= ((uint32_t)1U << ((__INTERRUPT__) & USART_IT_MASK))): \
#                                                            ((__HANDLE__)->Instance->CR3 |= ((uint32_t)1U << ((__INTERRUPT__) & USART_IT_MASK))))
# fun define __HAL_USART_DISABLE_IT(__HANDLE__, __INTERRUPT__)  (((((__INTERRUPT__) & USART_CR_MASK) >> USART_CR_POS) == 1U)? ((__HANDLE__)->Instance->CR1 &= ~ ((uint32_t)1U << ((__INTERRUPT__) & USART_IT_MASK))): \
#                                                            ((((__INTERRUPT__) & USART_CR_MASK) >> USART_CR_POS) == 2U)? ((__HANDLE__)->Instance->CR2 &= ~ ((uint32_t)1U << ((__INTERRUPT__) & USART_IT_MASK))): \
#                                                            ((__HANDLE__)->Instance->CR3 &= ~ ((uint32_t)1U << ((__INTERRUPT__) & USART_IT_MASK))))
# fun define __HAL_USART_GET_IT(__HANDLE__, __INTERRUPT__) ((((__HANDLE__)->Instance->ISR & ((uint32_t)0x01U << (((__INTERRUPT__) & USART_ISR_MASK)>> USART_ISR_POS))) != 0U) ? SET : RESET)
# fun define __HAL_USART_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) ((((((((uint8_t)(__INTERRUPT__)) >> 0x05U) == 0x01U) ? (__HANDLE__)->Instance->CR1 : \
#                                                                (((((uint8_t)(__INTERRUPT__)) >> 0x05U) == 0x02U) ? (__HANDLE__)->Instance->CR2 : \
#                                                                (__HANDLE__)->Instance->CR3)) & (0x01U << (((uint16_t)(__INTERRUPT__)) & USART_IT_MASK)))  != 0U) ? SET : RESET)
# fun define __HAL_USART_CLEAR_IT(__HANDLE__, __IT_CLEAR__) ((__HANDLE__)->Instance->ICR = (uint32_t)(__IT_CLEAR__))
# fun define __HAL_USART_SEND_REQ(__HANDLE__, __REQ__)      ((__HANDLE__)->Instance->RQR |= (__REQ__))
# fun define __HAL_USART_ONE_BIT_SAMPLE_ENABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3|= USART_CR3_ONEBIT)
# fun define __HAL_USART_ONE_BIT_SAMPLE_DISABLE(__HANDLE__) ((__HANDLE__)->Instance->CR3 &= ~USART_CR3_ONEBIT)
# fun define __HAL_USART_ENABLE(__HANDLE__)                 ((__HANDLE__)->Instance->CR1 |= USART_CR1_UE)
# fun define __HAL_USART_DISABLE(__HANDLE__)                ((__HANDLE__)->Instance->CR1 &= ~USART_CR1_UE)
# fun define USART_DIV_SAMPLING8(__PCLK__, __BAUD__)   ((((__PCLK__)*2U) + ((__BAUD__)/2U)) / (__BAUD__))
# fun define IS_USART_BAUDRATE(__BAUDRATE__) ((__BAUDRATE__) <= 4000000U)
# fun define IS_USART_STOPBITS(__STOPBITS__) (((__STOPBITS__) == USART_STOPBITS_0_5) || \
#                                         ((__STOPBITS__) == USART_STOPBITS_1)   || \
#                                         ((__STOPBITS__) == USART_STOPBITS_1_5) || \
#                                         ((__STOPBITS__) == USART_STOPBITS_2))
# fun define IS_USART_PARITY(__PARITY__) (((__PARITY__) == USART_PARITY_NONE) || \
#                                     ((__PARITY__) == USART_PARITY_EVEN) || \
#                                     ((__PARITY__) == USART_PARITY_ODD))
# fun define IS_USART_MODE(__MODE__) ((((__MODE__) & 0xFFFFFFF3U) == 0x00U) && ((__MODE__) != 0x00U))
# fun define IS_USART_OVERSAMPLING(__SAMPLING__) (((__SAMPLING__) == USART_OVERSAMPLING_16) || \
#                                             ((__SAMPLING__) == USART_OVERSAMPLING_8))
# fun define IS_USART_CLOCK(__CLOCK__) (((__CLOCK__) == USART_CLOCK_DISABLE) || \
#                                   ((__CLOCK__) == USART_CLOCK_ENABLE))
# fun define IS_USART_POLARITY(__CPOL__) (((__CPOL__) == USART_POLARITY_LOW) || ((__CPOL__) == USART_POLARITY_HIGH))
# fun define IS_USART_PHASE(__CPHA__) (((__CPHA__) == USART_PHASE_1EDGE) || ((__CPHA__) == USART_PHASE_2EDGE))
# fun define IS_USART_LASTBIT(__LASTBIT__) (((__LASTBIT__) == USART_LASTBIT_DISABLE) || \
#                                       ((__LASTBIT__) == USART_LASTBIT_ENABLE))
# fun define IS_USART_REQUEST_PARAMETER(__PARAM__) (((__PARAM__) == USART_RXDATA_FLUSH_REQUEST) || \
#                                               ((__PARAM__) == USART_TXDATA_FLUSH_REQUEST))
# struct USART_InitTypeDef

class USART_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('BaudRate',	ctypes.c_uint32),
		('WordLength',	ctypes.c_uint32),
		('StopBits',	ctypes.c_uint32),
		('Parity',	ctypes.c_uint32),
		('Mode',	ctypes.c_uint32),
		('CLKPolarity',	ctypes.c_uint32),
		('CLKPhase',	ctypes.c_uint32),
		('CLKLastBit',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct USART_HandleTypeDef
# struct USART_HandleTypeDef : field is class : Init
# ----------------------------------------

# file stm32l0xx_hal_wwdg.h : 

# Enum HAL_WWDG_CallbackIDTypeDef
# Skip HAL_WWDG_EWI_CB_ID : no need parse
# Skip HAL_WWDG_MSPINIT_CB_ID : no need parse
# empty define STM32L0xx_HAL_WWDG_H
WWDG_IT_EWI = 0x200
WWDG_FLAG_EWIF = 0x1
WWDG_PRESCALER_1 = 0x0
WWDG_PRESCALER_2 = 0x80
WWDG_PRESCALER_4 = 0x100
WWDG_PRESCALER_8 = 0x180
WWDG_EWI_DISABLE = 0x0
WWDG_EWI_ENABLE = 0x200
# fun define IS_WWDG_PRESCALER(__PRESCALER__)    (((__PRESCALER__) == WWDG_PRESCALER_1)  || \
#                                             ((__PRESCALER__) == WWDG_PRESCALER_2)  || \
#                                             ((__PRESCALER__) == WWDG_PRESCALER_4)  || \
#                                             ((__PRESCALER__) == WWDG_PRESCALER_8))
# fun define IS_WWDG_WINDOW(__WINDOW__)          (((__WINDOW__) >= WWDG_CFR_W_6) && ((__WINDOW__) <= WWDG_CFR_W))
# fun define IS_WWDG_COUNTER(__COUNTER__)        (((__COUNTER__) >= WWDG_CR_T_6) && ((__COUNTER__) <= WWDG_CR_T))
# fun define IS_WWDG_EWI_MODE(__MODE__)          (((__MODE__) == WWDG_EWI_ENABLE) || \
#                                             ((__MODE__) == WWDG_EWI_DISABLE))
# fun define __HAL_WWDG_ENABLE(__HANDLE__)                         SET_BIT((__HANDLE__)->Instance->CR, WWDG_CR_WDGA)
# fun define __HAL_WWDG_ENABLE_IT(__HANDLE__, __INTERRUPT__)       SET_BIT((__HANDLE__)->Instance->CFR, (__INTERRUPT__))
# fun define __HAL_WWDG_GET_IT(__HANDLE__, __INTERRUPT__)        __HAL_WWDG_GET_FLAG((__HANDLE__),(__INTERRUPT__))
# fun define __HAL_WWDG_CLEAR_IT(__HANDLE__, __INTERRUPT__)      __HAL_WWDG_CLEAR_FLAG((__HANDLE__), (__INTERRUPT__))
# fun define __HAL_WWDG_GET_FLAG(__HANDLE__, __FLAG__)           (((__HANDLE__)->Instance->SR & (__FLAG__)) == (__FLAG__))
# fun define __HAL_WWDG_CLEAR_FLAG(__HANDLE__, __FLAG__)         ((__HANDLE__)->Instance->SR = ~(__FLAG__))
# fun define __HAL_WWDG_GET_IT_SOURCE(__HANDLE__, __INTERRUPT__) (((__HANDLE__)->Instance->CFR & (__INTERRUPT__)) == (__INTERRUPT__))
# Skip Instance : no need parse
# Skip Init : no need parse
# Skip EwiCallback : no need parse
# Skip MspInitCallback : no need parse
# struct WWDG_InitTypeDef

class WWDG_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Prescaler',	ctypes.c_uint32),
		('Window',	ctypes.c_uint32),
		('Counter',	ctypes.c_uint32),
		('EWIMode',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_adc.h : 

# empty define __STM32L0xx_LL_ADC_H
ADC_REG_TRIG_EXT_EDGE_DEFAULT = 0x400
ADC_REG_TRIG_SOURCE_MASK = 0x1DDC00
ADC_REG_TRIG_EDGE_MASK = 0x444000
ADC_REG_TRIG_EXTSEL_BITOFFSET_POS = 0x6
ADC_REG_TRIG_EXTEN_BITOFFSET_POS = 0xA
ADC_CHANNEL_ID_NUMBER_MASK = 0x7C000000
ADC_CHANNEL_ID_BITFIELD_MASK = 0x7FFFF
ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS = 0x1A
ADC_CHANNEL_ID_MASK = 0xFC07FFFF
ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 = 0x1F
ADC_CHANNEL_ID_INTERNAL_CH = 0x80000000
ADC_CHANNEL_ID_INTERNAL_CH_MASK = 0x80000000
ADC_CHANNEL_0_NUMBER = 0x0
ADC_CHANNEL_1_NUMBER = 0x4000000
ADC_CHANNEL_2_NUMBER = 0x8000000
ADC_CHANNEL_3_NUMBER = 0xC000000
ADC_CHANNEL_4_NUMBER = 0x10000000
ADC_CHANNEL_5_NUMBER = 0x14000000
ADC_CHANNEL_6_NUMBER = 0x18000000
ADC_CHANNEL_7_NUMBER = 0x1C000000
ADC_CHANNEL_8_NUMBER = 0x20000000
ADC_CHANNEL_9_NUMBER = 0x24000000
ADC_CHANNEL_10_NUMBER = 0x28000000
ADC_CHANNEL_11_NUMBER = 0x2C000000
ADC_CHANNEL_12_NUMBER = 0x30000000
ADC_CHANNEL_13_NUMBER = 0x34000000
ADC_CHANNEL_14_NUMBER = 0x38000000
ADC_CHANNEL_15_NUMBER = 0x3C000000
ADC_CHANNEL_16_NUMBER = 0x40000000
ADC_CHANNEL_17_NUMBER = 0x44000000
ADC_CHANNEL_18_NUMBER = 0x48000000
ADC_CHANNEL_0_BITFIELD = 0x1
ADC_CHANNEL_1_BITFIELD = 0x2
ADC_CHANNEL_2_BITFIELD = 0x4
ADC_CHANNEL_3_BITFIELD = 0x8
ADC_CHANNEL_4_BITFIELD = 0x10
ADC_CHANNEL_5_BITFIELD = 0x20
ADC_CHANNEL_6_BITFIELD = 0x40
ADC_CHANNEL_7_BITFIELD = 0x80
ADC_CHANNEL_8_BITFIELD = 0x100
ADC_CHANNEL_9_BITFIELD = 0x200
ADC_CHANNEL_10_BITFIELD = 0x400
ADC_CHANNEL_11_BITFIELD = 0x800
ADC_CHANNEL_12_BITFIELD = 0x1000
ADC_CHANNEL_13_BITFIELD = 0x2000
ADC_CHANNEL_14_BITFIELD = 0x4000
ADC_CHANNEL_15_BITFIELD = 0x8000
ADC_CHANNEL_16_BITFIELD = 0x10000
ADC_CHANNEL_17_BITFIELD = 0x20000
ADC_CHANNEL_18_BITFIELD = 0x40000
ADC_AWD_CR1_REGOFFSET = 0x0
ADC_AWD_CRX_REGOFFSET_MASK = 0x0
ADC_AWD_CR1_CHANNEL_MASK = 0x7CC00000
ADC_AWD_CR_ALL_CHANNEL_MASK = 0x7CC00000
ADC_AWD_TR1_REGOFFSET = 0x0
ADC_AWD_TRX_REGOFFSET_MASK = 0x0
ADC_CFGR1_RES_BITOFFSET_POS = 0x3
ADC_CFGR1_AWDSGL_BITOFFSET_POS = 0x16
ADC_TR_HT_BITOFFSET_POS = 0x10
ADC_CHSELR_CHSEL0_BITOFFSET_POS = 0x0
ADC_CHSELR_CHSEL1_BITOFFSET_POS = 0x1
ADC_CHSELR_CHSEL2_BITOFFSET_POS = 0x2
ADC_CHSELR_CHSEL3_BITOFFSET_POS = 0x3
ADC_CHSELR_CHSEL4_BITOFFSET_POS = 0x4
ADC_CHSELR_CHSEL5_BITOFFSET_POS = 0x5
ADC_CHSELR_CHSEL6_BITOFFSET_POS = 0x6
ADC_CHSELR_CHSEL7_BITOFFSET_POS = 0x7
ADC_CHSELR_CHSEL8_BITOFFSET_POS = 0x8
ADC_CHSELR_CHSEL9_BITOFFSET_POS = 0x9
ADC_CHSELR_CHSEL10_BITOFFSET_POS = 0xA
ADC_CHSELR_CHSEL11_BITOFFSET_POS = 0xB
ADC_CHSELR_CHSEL12_BITOFFSET_POS = 0xC
ADC_CHSELR_CHSEL13_BITOFFSET_POS = 0xD
ADC_CHSELR_CHSEL14_BITOFFSET_POS = 0xE
ADC_CHSELR_CHSEL15_BITOFFSET_POS = 0xF
ADC_CHSELR_CHSEL16_BITOFFSET_POS = 0x10
ADC_CHSELR_CHSEL17_BITOFFSET_POS = 0x11
ADC_CHSELR_CHSEL18_BITOFFSET_POS = 0x12
ADC_CR_BITS_PROPERTY_RS = 0x80000017
VREFINT_CAL_ADDR = 0x1FF80078
VREFINT_CAL_VREF = 0xBB8
TEMPSENSOR_CAL1_ADDR = 0x1FF8007A
TEMPSENSOR_CAL2_ADDR = 0x1FF8007E
TEMPSENSOR_CAL1_TEMP = 0x1E
TEMPSENSOR_CAL2_TEMP = 0x82
TEMPSENSOR_CAL_VREFANALOG = 0xBB8
LL_ADC_FLAG_ADRDY = 0x1
LL_ADC_FLAG_EOC = 0x4
LL_ADC_FLAG_EOS = 0x8
LL_ADC_FLAG_OVR = 0x10
LL_ADC_FLAG_EOSMP = 0x2
LL_ADC_FLAG_AWD1 = 0x80
LL_ADC_FLAG_EOCAL = 0x800
LL_ADC_IT_ADRDY = 0x1
LL_ADC_IT_EOC = 0x4
LL_ADC_IT_EOS = 0x8
LL_ADC_IT_OVR = 0x10
LL_ADC_IT_EOSMP = 0x2
LL_ADC_IT_AWD1 = 0x80
LL_ADC_IT_EOCAL = 0x800
LL_ADC_DMA_REG_REGULAR_DATA = 0x0
LL_ADC_CLOCK_ASYNC_DIV1 = 0x0
LL_ADC_CLOCK_ASYNC_DIV2 = 0x40000
LL_ADC_CLOCK_ASYNC_DIV4 = 0x80000
LL_ADC_CLOCK_ASYNC_DIV6 = 0xC0000
LL_ADC_CLOCK_ASYNC_DIV8 = 0x100000
LL_ADC_CLOCK_ASYNC_DIV10 = 0x140000
LL_ADC_CLOCK_ASYNC_DIV12 = 0x180000
LL_ADC_CLOCK_ASYNC_DIV16 = 0x1C0000
LL_ADC_CLOCK_ASYNC_DIV32 = 0x200000
LL_ADC_CLOCK_ASYNC_DIV64 = 0x240000
LL_ADC_CLOCK_ASYNC_DIV128 = 0x280000
LL_ADC_CLOCK_ASYNC_DIV256 = 0x2C0000
LL_ADC_CLOCK_FREQ_MODE_HIGH = 0x0
LL_ADC_CLOCK_FREQ_MODE_LOW = 0x2000000
LL_ADC_PATH_INTERNAL_NONE = 0x0
LL_ADC_PATH_INTERNAL_VREFINT = 0x400000
LL_ADC_PATH_INTERNAL_TEMPSENSOR = 0x800000
LL_ADC_PATH_INTERNAL_VLCD = 0x1000000
LL_ADC_CLOCK_SYNC_PCLK_DIV4 = 0x80000000
LL_ADC_CLOCK_SYNC_PCLK_DIV2 = 0x40000000
LL_ADC_CLOCK_SYNC_PCLK_DIV1 = 0xC0000000
LL_ADC_CLOCK_ASYNC = 0x0
LL_ADC_RESOLUTION_12B = 0x0
LL_ADC_RESOLUTION_10B = 0x8
LL_ADC_RESOLUTION_8B = 0x10
LL_ADC_RESOLUTION_6B = 0x18
LL_ADC_DATA_ALIGN_RIGHT = 0x0
LL_ADC_DATA_ALIGN_LEFT = 0x20
LL_ADC_LP_MODE_NONE = 0x0
LL_ADC_LP_AUTOWAIT = 0x4000
LL_ADC_LP_AUTOPOWEROFF = 0x8000
LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF = 0xC000
LL_ADC_GROUP_REGULAR = 0x1
LL_ADC_CHANNEL_0 = 0x1
LL_ADC_CHANNEL_1 = 0x4000002
LL_ADC_CHANNEL_2 = 0x8000004
LL_ADC_CHANNEL_3 = 0xC000008
LL_ADC_CHANNEL_4 = 0x10000010
LL_ADC_CHANNEL_5 = 0x14000020
LL_ADC_CHANNEL_6 = 0x18000040
LL_ADC_CHANNEL_7 = 0x1C000080
LL_ADC_CHANNEL_8 = 0x20000100
LL_ADC_CHANNEL_9 = 0x24000200
LL_ADC_CHANNEL_10 = 0x28000400
LL_ADC_CHANNEL_11 = 0x2C000800
LL_ADC_CHANNEL_12 = 0x30001000
LL_ADC_CHANNEL_13 = 0x34002000
LL_ADC_CHANNEL_14 = 0x38004000
LL_ADC_CHANNEL_15 = 0x3C008000
LL_ADC_CHANNEL_17 = 0x44020000
LL_ADC_CHANNEL_18 = 0x48040000
LL_ADC_CHANNEL_VREFINT = 0xC4020000
LL_ADC_CHANNEL_TEMPSENSOR = 0xC8040000
LL_ADC_CHANNEL_16 = 0x40010000
LL_ADC_CHANNEL_VLCD = 0xC0010000
LL_ADC_REG_TRIG_SOFTWARE = 0x0
LL_ADC_REG_TRIG_EXT_TIM6_TRGO = 0x400
LL_ADC_REG_TRIG_EXT_TIM21_CH2 = 0x440
LL_ADC_REG_TRIG_EXT_TIM2_TRGO = 0x480
LL_ADC_REG_TRIG_EXT_TIM2_CH4 = 0x4C0
LL_ADC_REG_TRIG_EXT_TIM22_TRGO = 0x500
LL_ADC_REG_TRIG_EXT_TIM3_TRGO = 0x580
LL_ADC_REG_TRIG_EXT_EXTI_LINE11 = 0x5C0
# Skip LL_ADC_REG_TRIG_EXT_TIM2_CH3 : no need parse
LL_ADC_REG_TRIG_EXT_TIM21_TRGO = 0x500
LL_ADC_REG_TRIG_EXT_RISING = 0x400
LL_ADC_REG_TRIG_EXT_FALLING = 0x800
LL_ADC_REG_TRIG_EXT_RISINGFALLING = 0xC00
LL_ADC_REG_CONV_SINGLE = 0x0
LL_ADC_REG_CONV_CONTINUOUS = 0x2000
LL_ADC_REG_DMA_TRANSFER_NONE = 0x0
LL_ADC_REG_DMA_TRANSFER_LIMITED = 0x1
LL_ADC_REG_DMA_TRANSFER_UNLIMITED = 0x3
LL_ADC_REG_OVR_DATA_PRESERVED = 0x0
LL_ADC_REG_OVR_DATA_OVERWRITTEN = 0x1000
LL_ADC_REG_SEQ_SCAN_DIR_FORWARD = 0x0
LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD = 0x4
LL_ADC_REG_SEQ_DISCONT_DISABLE = 0x0
LL_ADC_REG_SEQ_DISCONT_1RANK = 0x10000
LL_ADC_SAMPLINGTIME_1CYCLE_5 = 0x0
LL_ADC_SAMPLINGTIME_3CYCLES_5 = 0x1
LL_ADC_SAMPLINGTIME_7CYCLES_5 = 0x2
LL_ADC_SAMPLINGTIME_12CYCLES_5 = 0x3
LL_ADC_SAMPLINGTIME_19CYCLES_5 = 0x4
LL_ADC_SAMPLINGTIME_39CYCLES_5 = 0x5
LL_ADC_SAMPLINGTIME_79CYCLES_5 = 0x6
LL_ADC_SAMPLINGTIME_160CYCLES_5 = 0x7
LL_ADC_AWD1 = 0x7CC00000
LL_ADC_AWD_DISABLE = 0x0
LL_ADC_AWD_ALL_CHANNELS_REG = 0x800000
LL_ADC_AWD_CHANNEL_0_REG = 0xC00001
LL_ADC_AWD_CHANNEL_1_REG = 0x4C00002
LL_ADC_AWD_CHANNEL_2_REG = 0x8C00004
LL_ADC_AWD_CHANNEL_3_REG = 0xCC00008
LL_ADC_AWD_CHANNEL_4_REG = 0x10C00010
LL_ADC_AWD_CHANNEL_5_REG = 0x14C00020
LL_ADC_AWD_CHANNEL_6_REG = 0x18C00040
LL_ADC_AWD_CHANNEL_7_REG = 0x1CC00080
LL_ADC_AWD_CHANNEL_8_REG = 0x20C00100
LL_ADC_AWD_CHANNEL_9_REG = 0x24C00200
LL_ADC_AWD_CHANNEL_10_REG = 0x28C00400
LL_ADC_AWD_CHANNEL_11_REG = 0x2CC00800
LL_ADC_AWD_CHANNEL_12_REG = 0x30C01000
LL_ADC_AWD_CHANNEL_13_REG = 0x34C02000
LL_ADC_AWD_CHANNEL_14_REG = 0x38C04000
LL_ADC_AWD_CHANNEL_15_REG = 0x3CC08000
LL_ADC_AWD_CHANNEL_17_REG = 0x44C20000
LL_ADC_AWD_CHANNEL_18_REG = 0x48C40000
LL_ADC_AWD_CH_VREFINT_REG = 0xC4C20000
LL_ADC_AWD_CH_TEMPSENSOR_REG = 0xC8C40000
LL_ADC_AWD_CHANNEL_16_REG = 0x40C10000
LL_ADC_AWD_CH_VLCD_REG = 0xC0C10000
LL_ADC_AWD_THRESHOLD_HIGH = 0xFFF0000
LL_ADC_AWD_THRESHOLD_LOW = 0xFFF
LL_ADC_AWD_THRESHOLDS_HIGH_LOW = 0xFFF0FFF
LL_ADC_OVS_DISABLE = 0x0
LL_ADC_OVS_GRP_REGULAR_CONTINUED = 0x1
LL_ADC_OVS_REG_CONT = 0x0
LL_ADC_OVS_REG_DISCONT = 0x200
LL_ADC_OVS_RATIO_2 = 0x0
LL_ADC_OVS_RATIO_4 = 0x4
LL_ADC_OVS_RATIO_8 = 0x8
LL_ADC_OVS_RATIO_16 = 0xC
LL_ADC_OVS_RATIO_32 = 0x10
LL_ADC_OVS_RATIO_64 = 0x14
LL_ADC_OVS_RATIO_128 = 0x18
LL_ADC_OVS_RATIO_256 = 0x1C
LL_ADC_OVS_SHIFT_NONE = 0x0
LL_ADC_OVS_SHIFT_RIGHT_1 = 0x20
LL_ADC_OVS_SHIFT_RIGHT_2 = 0x40
LL_ADC_OVS_SHIFT_RIGHT_3 = 0x60
LL_ADC_OVS_SHIFT_RIGHT_4 = 0x80
LL_ADC_OVS_SHIFT_RIGHT_5 = 0xA0
LL_ADC_OVS_SHIFT_RIGHT_6 = 0xC0
LL_ADC_OVS_SHIFT_RIGHT_7 = 0xE0
LL_ADC_OVS_SHIFT_RIGHT_8 = 0x100
LL_ADC_DELAY_INTERNAL_REGUL_STAB_US = 0xA
LL_ADC_DELAY_VREFINT_STAB_US = 0xA
LL_ADC_DELAY_TEMPSENSOR_STAB_US = 0xA
LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES = 0x2
# fun define LL_ADC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_ADC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# fun define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                                               \
#  ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0U)                                                         \
#    ? (                                                                                                           \
#       ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS                        \
#      )                                                                                                           \
#      :                                                                                                           \
#      (                                                                                                           \
#       (((__CHANNEL__) & ADC_CHSELR_CHSEL0) == ADC_CHSELR_CHSEL0) ? (0U) :                                        \
#        (                                                                                                         \
#         (((__CHANNEL__) & ADC_CHSELR_CHSEL1) == ADC_CHSELR_CHSEL1) ? (1U) :                                      \
#          (                                                                                                       \
#           (((__CHANNEL__) & ADC_CHSELR_CHSEL2) == ADC_CHSELR_CHSEL2) ? (2U) :                                    \
#            (                                                                                                     \
#             (((__CHANNEL__) & ADC_CHSELR_CHSEL3) == ADC_CHSELR_CHSEL3) ? (3U) :                                  \
#              (                                                                                                   \
#               (((__CHANNEL__) & ADC_CHSELR_CHSEL4) == ADC_CHSELR_CHSEL4) ? (4U) :                                \
#                (                                                                                                 \
#                 (((__CHANNEL__) & ADC_CHSELR_CHSEL5) == ADC_CHSELR_CHSEL5) ? (5U) :                              \
#                  (                                                                                               \
#                   (((__CHANNEL__) & ADC_CHSELR_CHSEL6) == ADC_CHSELR_CHSEL6) ? (6U) :                            \
#                    (                                                                                             \
#                     (((__CHANNEL__) & ADC_CHSELR_CHSEL7) == ADC_CHSELR_CHSEL7) ? (7U) :                          \
#                      (                                                                                           \
#                       (((__CHANNEL__) & ADC_CHSELR_CHSEL8) == ADC_CHSELR_CHSEL8) ? (8U) :                        \
#                        (                                                                                         \
#                         (((__CHANNEL__) & ADC_CHSELR_CHSEL9) == ADC_CHSELR_CHSEL9) ? (9U) :                      \
#                          (                                                                                       \
#                           (((__CHANNEL__) & ADC_CHSELR_CHSEL10) == ADC_CHSELR_CHSEL10) ? (10U) :                 \
#                            (                                                                                     \
#                             (((__CHANNEL__) & ADC_CHSELR_CHSEL11) == ADC_CHSELR_CHSEL11) ? (11U) :               \
#                              (                                                                                   \
#                               (((__CHANNEL__) & ADC_CHSELR_CHSEL12) == ADC_CHSELR_CHSEL12) ? (12U) :             \
#                                (                                                                                 \
#                                 (((__CHANNEL__) & ADC_CHSELR_CHSEL13) == ADC_CHSELR_CHSEL13) ? (13U) :           \
#                                  (                                                                               \
#                                   (((__CHANNEL__) & ADC_CHSELR_CHSEL14) == ADC_CHSELR_CHSEL14) ? (14U) :         \
#                                    (                                                                             \
#                                     (((__CHANNEL__) & ADC_CHSELR_CHSEL15) == ADC_CHSELR_CHSEL15) ? (15U) :       \
#                                      (                                                                           \
#                                       (((__CHANNEL__) & ADC_CHSELR_CHSEL16) == ADC_CHSELR_CHSEL16) ? (16U) :     \
#                                        (                                                                         \
#                                         (((__CHANNEL__) & ADC_CHSELR_CHSEL17) == ADC_CHSELR_CHSEL17) ? (17U) :   \
#                                          (                                                                       \
#                                           (((__CHANNEL__) & ADC_CHSELR_CHSEL18) == ADC_CHSELR_CHSEL18) ? (18U) : \
#                                            (0U)                                                                   \
#                                          )                                                                       \
#                                        )                                                                         \
#                                      )                                                                           \
#                                    )                                                                             \
#                                  )                                                                               \
#                                )                                                                                 \
#                              )                                                                                   \
#                            )                                                                                     \
#                          )                                                                                       \
#                        )                                                                                         \
#                      )                                                                                           \
#                    )                                                                                             \
#                  )                                                                                               \
#                )                                                                                                 \
#              )                                                                                                   \
#            )                                                                                                     \
#          )                                                                                                       \
#        )                                                                                                         \
#      )                                                                                                           \
#  )
# fun define __LL_ADC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                                                               \
#  ((((__CHANNEL__) & ADC_CHANNEL_ID_BITFIELD_MASK) == 0U)                                                         \
#    ? (                                                                                                           \
#       ((__CHANNEL__) & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS                        \
#      )                                                                                                           \
#      :                                                                                                           \
#      (                                                                                                           \
#       (((__CHANNEL__) & ADC_CHSELR_CHSEL0) == ADC_CHSELR_CHSEL0) ? (0U) :                                        \
#        (                                                                                                         \
#         (((__CHANNEL__) & ADC_CHSELR_CHSEL1) == ADC_CHSELR_CHSEL1) ? (1U) :                                      \
#          (                                                                                                       \
#           (((__CHANNEL__) & ADC_CHSELR_CHSEL2) == ADC_CHSELR_CHSEL2) ? (2U) :                                    \
#            (                                                                                                     \
#             (((__CHANNEL__) & ADC_CHSELR_CHSEL3) == ADC_CHSELR_CHSEL3) ? (3U) :                                  \
#              (                                                                                                   \
#               (((__CHANNEL__) & ADC_CHSELR_CHSEL4) == ADC_CHSELR_CHSEL4) ? (4U) :                                \
#                (                                                                                                 \
#                 (((__CHANNEL__) & ADC_CHSELR_CHSEL5) == ADC_CHSELR_CHSEL5) ? (5U) :                              \
#                  (                                                                                               \
#                   (((__CHANNEL__) & ADC_CHSELR_CHSEL6) == ADC_CHSELR_CHSEL6) ? (6U) :                            \
#                    (                                                                                             \
#                     (((__CHANNEL__) & ADC_CHSELR_CHSEL7) == ADC_CHSELR_CHSEL7) ? (7U) :                          \
#                      (                                                                                           \
#                       (((__CHANNEL__) & ADC_CHSELR_CHSEL8) == ADC_CHSELR_CHSEL8) ? (8U) :                        \
#                        (                                                                                         \
#                         (((__CHANNEL__) & ADC_CHSELR_CHSEL9) == ADC_CHSELR_CHSEL9) ? (9U) :                      \
#                          (                                                                                       \
#                           (((__CHANNEL__) & ADC_CHSELR_CHSEL10) == ADC_CHSELR_CHSEL10) ? (10U) :                 \
#                            (                                                                                     \
#                             (((__CHANNEL__) & ADC_CHSELR_CHSEL11) == ADC_CHSELR_CHSEL11) ? (11U) :               \
#                              (                                                                                   \
#                               (((__CHANNEL__) & ADC_CHSELR_CHSEL12) == ADC_CHSELR_CHSEL12) ? (12U) :             \
#                                (                                                                                 \
#                                 (((__CHANNEL__) & ADC_CHSELR_CHSEL13) == ADC_CHSELR_CHSEL13) ? (13U) :           \
#                                  (                                                                               \
#                                   (((__CHANNEL__) & ADC_CHSELR_CHSEL14) == ADC_CHSELR_CHSEL14) ? (14U) :         \
#                                    (                                                                             \
#                                     (((__CHANNEL__) & ADC_CHSELR_CHSEL15) == ADC_CHSELR_CHSEL15) ? (15U) :       \
#                                      (                                                                           \
#                                       (((__CHANNEL__) & ADC_CHSELR_CHSEL17) == ADC_CHSELR_CHSEL17) ? (17U) :     \
#                                        (                                                                         \
#                                         (((__CHANNEL__) & ADC_CHSELR_CHSEL18) == ADC_CHSELR_CHSEL18) ? (18U) :   \
#                                          (0U)                                                                     \
#                                        )                                                                         \
#                                      )                                                                           \
#                                    )                                                                             \
#                                  )                                                                               \
#                                )                                                                                 \
#                              )                                                                                   \
#                            )                                                                                     \
#                          )                                                                                       \
#                        )                                                                                         \
#                      )                                                                                           \
#                    )                                                                                             \
#                  )                                                                                               \
#                )                                                                                                 \
#              )                                                                                                   \
#            )                                                                                                     \
#          )                                                                                                       \
#        )                                                                                                         \
#      )                                                                                                           \
#  )
# fun define __LL_ADC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                         \
#  (                                                                            \
#   ((__DECIMAL_NB__) << ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) |                 \
#   (ADC_CHSELR_CHSEL0 << (__DECIMAL_NB__))                                     \
#  )
# fun define __LL_ADC_IS_CHANNEL_INTERNAL(__CHANNEL__)                              \
#  (((__CHANNEL__) & ADC_CHANNEL_ID_INTERNAL_CH_MASK) != 0U)
# fun define __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL(__CHANNEL__)                     \
#  ((__CHANNEL__) & ~ADC_CHANNEL_ID_INTERNAL_CH_MASK)
# fun define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
#  (                                                                            \
#    ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)    ||                            \
#    ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR) ||                            \
#    ((__CHANNEL__) == LL_ADC_CHANNEL_VLCD)                                     \
#  )
# fun define __LL_ADC_IS_CHANNEL_INTERNAL_AVAILABLE(__ADC_INSTANCE__, __CHANNEL__)  \
#  (                                                                            \
#    ((__CHANNEL__) == LL_ADC_CHANNEL_VREFINT)    ||                            \
#    ((__CHANNEL__) == LL_ADC_CHANNEL_TEMPSENSOR)                               \
#  )
# fun define __LL_ADC_ANALOGWD_CHANNEL_GROUP(__CHANNEL__, __GROUP__)                                           \
#  (((__CHANNEL__) & ADC_CHANNEL_ID_MASK) | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL)
# fun define __LL_ADC_ANALOGWD_SET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD__) \
#  ((__AWD_THRESHOLD__) << ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U )))
# fun define __LL_ADC_ANALOGWD_GET_THRESHOLD_RESOLUTION(__ADC_RESOLUTION__, __AWD_THRESHOLD_12_BITS__) \
#  ((__AWD_THRESHOLD_12_BITS__) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U )))
# fun define __LL_ADC_ANALOGWD_THRESHOLDS_HIGH_LOW(__AWD_THRESHOLD_TYPE__, __AWD_THRESHOLDS__) \
#  (((__AWD_THRESHOLD_TYPE__) == LL_ADC_AWD_THRESHOLD_LOW)                                 \
#    ? (                                                                                   \
#       (__AWD_THRESHOLDS__) & LL_ADC_AWD_THRESHOLD_LOW                                    \
#      )                                                                                   \
#      :                                                                                   \
#      (                                                                                   \
#       ((__AWD_THRESHOLDS__) >> ADC_TR_HT_BITOFFSET_POS) & LL_ADC_AWD_THRESHOLD_LOW       \
#      )                                                                                   \
#  )
# fun define __LL_ADC_COMMON_INSTANCE(__ADCx__)                                     \
#  (ADC1_COMMON)
# fun define __LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__ADCXY_COMMON__)              \
#  LL_ADC_IsEnabled(ADC1)
# fun define __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                             \
#  (((uint32_t)0xFFFU) >> ((__ADC_RESOLUTION__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U)))
# fun define __LL_ADC_CONVERT_DATA_RESOLUTION(__DATA__, __ADC_RESOLUTION_CURRENT__, __ADC_RESOLUTION_TARGET__) \
#  (((__DATA__)                                                                 \
#    << ((__ADC_RESOLUTION_CURRENT__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U)))   \
#   >> ((__ADC_RESOLUTION_TARGET__) >> (ADC_CFGR1_RES_BITOFFSET_POS - 1U))      \
#  )
# fun define __LL_ADC_CALC_DATA_TO_VOLTAGE(__VREFANALOG_VOLTAGE__,\
#                                      __ADC_DATA__,\
#                                      __ADC_RESOLUTION__)                      \
#  ((__ADC_DATA__) * (__VREFANALOG_VOLTAGE__)                                   \
#   / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__)                                \
#  )
# fun define __LL_ADC_CALC_VREFANALOG_VOLTAGE(__VREFINT_ADC_DATA__,\
#                                         __ADC_RESOLUTION__)                   \
#  (((uint32_t)(*VREFINT_CAL_ADDR) * VREFINT_CAL_VREF)                          \
#    / __LL_ADC_CONVERT_DATA_RESOLUTION((__VREFINT_ADC_DATA__),                 \
#                                       (__ADC_RESOLUTION__),                   \
#                                       LL_ADC_RESOLUTION_12B)                  \
#  )
# fun define __LL_ADC_CALC_TEMPERATURE(__VREFANALOG_VOLTAGE__,\
#                                  __TEMPSENSOR_ADC_DATA__,\
#                                  __ADC_RESOLUTION__)                              \
#  (((( ((int32_t)((__LL_ADC_CONVERT_DATA_RESOLUTION((__TEMPSENSOR_ADC_DATA__),     \
#                                                    (__ADC_RESOLUTION__),          \
#                                                    LL_ADC_RESOLUTION_12B)         \
#                   * (__VREFANALOG_VOLTAGE__))                                     \
#                  / TEMPSENSOR_CAL_VREFANALOG)                                     \
#        - (int32_t) *TEMPSENSOR_CAL1_ADDR)                                         \
#     ) * (int32_t)(TEMPSENSOR_CAL2_TEMP - TEMPSENSOR_CAL1_TEMP)                    \
#    ) / (int32_t)((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) \
#   ) + TEMPSENSOR_CAL1_TEMP                                                        \
#  )
# fun define __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(__TEMPSENSOR_TYP_AVGSLOPE__,\
#                                             __TEMPSENSOR_TYP_CALX_V__,\
#                                             __TEMPSENSOR_CALX_TEMP__,\
#                                             __VREFANALOG_VOLTAGE__,\
#                                             __TEMPSENSOR_ADC_DATA__,\
#                                             __ADC_RESOLUTION__)               \
#  ((( (                                                                        \
#       (int32_t)((((__TEMPSENSOR_ADC_DATA__) * (__VREFANALOG_VOLTAGE__))       \
#                  / __LL_ADC_DIGITAL_SCALE(__ADC_RESOLUTION__))                \
#                 * 1000)                                                       \
#       -                                                                       \
#       (int32_t)(((__TEMPSENSOR_TYP_CALX_V__))                                 \
#                 * 1000)                                                       \
#      )                                                                        \
#    ) / (__TEMPSENSOR_TYP_AVGSLOPE__)                                          \
#   ) + (__TEMPSENSOR_CALX_TEMP__)                                              \
#  )
# struct LL_ADC_CommonInitTypeDef

class LL_ADC_CommonInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('CommonClock',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LL_ADC_InitTypeDef

class LL_ADC_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Clock',	ctypes.c_uint32),
		('Resolution',	ctypes.c_uint32),
		('DataAlignment',	ctypes.c_uint32),
		('LowPowerMode',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LL_ADC_REG_InitTypeDef

class LL_ADC_REG_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('TriggerSource',	ctypes.c_uint32),
		('SequencerDiscont',	ctypes.c_uint32),
		('ContinuousMode',	ctypes.c_uint32),
		('DMATransfer',	ctypes.c_uint32),
		('Overrun',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_bus.h : 

# empty define __STM32L0xx_LL_BUS_H
LL_AHB1_GRP1_PERIPH_ALL = 0xFFFFFFFF
LL_AHB1_GRP1_PERIPH_DMA1 = 0x1
LL_AHB1_GRP1_PERIPH_MIF = 0x100
LL_AHB1_GRP1_PERIPH_SRAM = 0x200
LL_AHB1_GRP1_PERIPH_CRC = 0x1000
LL_AHB1_GRP1_PERIPH_TSC = 0x10000
LL_AHB1_GRP1_PERIPH_RNG = 0x100000
LL_AHB1_GRP1_PERIPH_CRYP = 0x1000000
LL_APB1_GRP1_PERIPH_ALL = 0xFFFFFFFF
LL_APB1_GRP1_PERIPH_TIM2 = 0x1
# Skip LL_APB1_GRP1_PERIPH_TIM3 : no need parse
LL_APB1_GRP1_PERIPH_TIM6 = 0x10
# Skip LL_APB1_GRP1_PERIPH_TIM7 : no need parse
LL_APB1_GRP1_PERIPH_LCD = 0x200
LL_APB1_GRP1_PERIPH_WWDG = 0x800
LL_APB1_GRP1_PERIPH_SPI2 = 0x4000
LL_APB1_GRP1_PERIPH_USART2 = 0x20000
LL_APB1_GRP1_PERIPH_LPUART1 = 0x40000
# Skip LL_APB1_GRP1_PERIPH_USART4 : no need parse
# Skip LL_APB1_GRP1_PERIPH_USART5 : no need parse
LL_APB1_GRP1_PERIPH_I2C1 = 0x200000
LL_APB1_GRP1_PERIPH_I2C2 = 0x400000
LL_APB1_GRP1_PERIPH_USB = 0x800000
LL_APB1_GRP1_PERIPH_CRS = 0x8000000
LL_APB1_GRP1_PERIPH_PWR = 0x10000000
LL_APB1_GRP1_PERIPH_DAC1 = 0x20000000
# Skip LL_APB1_GRP1_PERIPH_I2C3 : no need parse
LL_APB1_GRP1_PERIPH_LPTIM1 = 0x80000000
LL_APB2_GRP1_PERIPH_ALL = 0xFFFFFFFF
LL_APB2_GRP1_PERIPH_SYSCFG = 0x1
LL_APB2_GRP1_PERIPH_TIM21 = 0x4
LL_APB2_GRP1_PERIPH_TIM22 = 0x20
LL_APB2_GRP1_PERIPH_FW = 0x80
LL_APB2_GRP1_PERIPH_ADC1 = 0x200
LL_APB2_GRP1_PERIPH_SPI1 = 0x1000
LL_APB2_GRP1_PERIPH_USART1 = 0x4000
LL_APB2_GRP1_PERIPH_DBGMCU = 0x400000
LL_IOP_GRP1_PERIPH_ALL = 0xFFFFFFFF
LL_IOP_GRP1_PERIPH_GPIOA = 0x1
LL_IOP_GRP1_PERIPH_GPIOB = 0x2
LL_IOP_GRP1_PERIPH_GPIOC = 0x4
LL_IOP_GRP1_PERIPH_GPIOD = 0x8
# Skip LL_IOP_GRP1_PERIPH_GPIOE : no need parse
LL_IOP_GRP1_PERIPH_GPIOH = 0x80
# ----------------------------------------

# file stm32l0xx_ll_comp.h : 

# empty define __STM32L0xx_LL_COMP_H
LL_COMP_OUTPUT_LEVEL_BITOFFSET_POS = 0x1E
LL_COMP_WINDOWMODE_DISABLE = 0x0
LL_COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON = 0x100
LL_COMP_POWERMODE_ULTRALOWPOWER = 0x0
LL_COMP_POWERMODE_MEDIUMSPEED = 0x8
LL_COMP_INPUT_PLUS_IO1 = 0x0
LL_COMP_INPUT_PLUS_IO2 = 0x100
LL_COMP_INPUT_PLUS_IO3 = 0x200
LL_COMP_INPUT_PLUS_IO4 = 0x300
LL_COMP_INPUT_PLUS_IO5 = 0x400
# Skip LL_COMP_INPUT_PLUS_IO6 : no need parse
LL_COMP_INPUT_MINUS_1_4VREFINT = 0x40
LL_COMP_INPUT_MINUS_1_2VREFINT = 0x50
LL_COMP_INPUT_MINUS_3_4VREFINT = 0x60
LL_COMP_INPUT_MINUS_VREFINT = 0x0
LL_COMP_INPUT_MINUS_DAC1_CH1 = 0x20
LL_COMP_INPUT_MINUS_DAC1_CH2 = 0x30
LL_COMP_INPUT_MINUS_IO1 = 0x10
LL_COMP_INPUT_MINUS_IO2 = 0x70
LL_COMP_OUTPUT_LPTIM1_IN1_COMP1 = 0x1000
LL_COMP_OUTPUT_LPTIM1_IN1_COMP2 = 0x2000
LL_COMP_OUTPUT_LPTIM1_IN2_COMP2 = 0x1000
LL_COMP_OUTPUTPOL_NONINVERTED = 0x0
LL_COMP_OUTPUTPOL_INVERTED = 0x8000
LL_COMP_OUTPUT_LEVEL_LOW = 0x0
LL_COMP_OUTPUT_LEVEL_HIGH = 0x1
LL_COMP_DELAY_STARTUP_US = 0x19
LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US = 0xBB8
# fun define LL_COMP_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_COMP_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# fun define __LL_COMP_COMMON_INSTANCE(__COMPx__)                                   \
#  (COMP12_COMMON)
# struct LL_COMP_InitTypeDef

class LL_COMP_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('PowerMode',	ctypes.c_uint32),
		('InputPlus',	ctypes.c_uint32),
		('InputMinus',	ctypes.c_uint32),
		('OutputPolarity',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_crc.h : 

# empty define STM32L0xx_LL_CRC_H
LL_CRC_POLYLENGTH_32B = 0x0
LL_CRC_POLYLENGTH_16B = 0x8
LL_CRC_POLYLENGTH_8B = 0x10
LL_CRC_POLYLENGTH_7B = 0x18
LL_CRC_INDATA_REVERSE_NONE = 0x0
LL_CRC_INDATA_REVERSE_BYTE = 0x20
LL_CRC_INDATA_REVERSE_HALFWORD = 0x40
LL_CRC_INDATA_REVERSE_WORD = 0x60
LL_CRC_OUTDATA_REVERSE_NONE = 0x0
LL_CRC_OUTDATA_REVERSE_BIT = 0x80
LL_CRC_DEFAULT_CRC32_POLY = 0x4C11DB7
LL_CRC_DEFAULT_CRC_INITVALUE = 0xFFFFFFFF
# fun define LL_CRC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, __VALUE__)
# fun define LL_CRC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# ----------------------------------------

# file stm32l0xx_ll_crs.h : 

# empty define __STM32L0xx_LL_CRS_H
CRS_POSITION_TRIM = 0x8
CRS_POSITION_FECAP = 0x10
CRS_POSITION_FELIM = 0x10
LL_CRS_ISR_SYNCOKF = 0x1
LL_CRS_ISR_SYNCWARNF = 0x2
LL_CRS_ISR_ERRF = 0x4
LL_CRS_ISR_ESYNCF = 0x8
LL_CRS_ISR_SYNCERR = 0x100
LL_CRS_ISR_SYNCMISS = 0x200
LL_CRS_ISR_TRIMOVF = 0x400
LL_CRS_CR_SYNCOKIE = 0x1
LL_CRS_CR_SYNCWARNIE = 0x2
LL_CRS_CR_ERRIE = 0x4
LL_CRS_CR_ESYNCIE = 0x8
LL_CRS_SYNC_DIV_1 = 0x0
LL_CRS_SYNC_DIV_2 = 0x1000000
LL_CRS_SYNC_DIV_4 = 0x2000000
LL_CRS_SYNC_DIV_8 = 0x3000000
LL_CRS_SYNC_DIV_16 = 0x4000000
LL_CRS_SYNC_DIV_32 = 0x5000000
LL_CRS_SYNC_DIV_64 = 0x6000000
LL_CRS_SYNC_DIV_128 = 0x7000000
LL_CRS_SYNC_SOURCE_GPIO = 0x0
LL_CRS_SYNC_SOURCE_LSE = 0x10000000
LL_CRS_SYNC_SOURCE_USB = 0x20000000
LL_CRS_SYNC_POLARITY_RISING = 0x0
LL_CRS_SYNC_POLARITY_FALLING = 0x80000000
LL_CRS_FREQ_ERROR_DIR_UP = 0x0
LL_CRS_FREQ_ERROR_DIR_DOWN = 0x8000
LL_CRS_RELOADVALUE_DEFAULT = 0xBB7F
LL_CRS_ERRORLIMIT_DEFAULT = 0x22
LL_CRS_HSI48CALIBRATION_DEFAULT = 0x20
# fun define LL_CRS_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_CRS_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# fun define __LL_CRS_CALC_CALCULATE_RELOADVALUE(__FTARGET__, __FSYNC__) (((__FTARGET__) / (__FSYNC__)) - 1U)
# ----------------------------------------

# file stm32l0xx_ll_dac.h : 

# empty define __STM32L0xx_LL_DAC_H
DAC_CR_CH1_BITOFFSET = 0x0
DAC_CR_CH2_BITOFFSET = 0x10
DAC_CR_CHX_BITOFFSET_MASK = 0x10
DAC_SWTR_CH1 = 0x1
# Skip DAC_SWTR_CH2 : no need parse
DAC_SWTR_CHX_MASK = 0x1
DAC_SWTR_CHX_MASK = 0x1
DAC_REG_DHR12R1_REGOFFSET = 0x0
DAC_REG_DHR12L1_REGOFFSET = 0x100000
DAC_REG_DHR8R1_REGOFFSET = 0x2000000
# Skip DAC_REG_DHR12R2_REGOFFSET : no need parse
# Skip DAC_REG_DHR12L2_REGOFFSET : no need parse
# Skip DAC_REG_DHR8R2_REGOFFSET : no need parse
DAC_REG_DHR12RX_REGOFFSET_MASK = 0xF0000
DAC_REG_DHR12LX_REGOFFSET_MASK = 0xF00000
DAC_REG_DHR8RX_REGOFFSET_MASK = 0xF000000
DAC_REG_DHRX_REGOFFSET_MASK = 0xFFF0000
DAC_REG_DOR1_REGOFFSET = 0x0
# Skip DAC_REG_DOR2_REGOFFSET : no need parse
DAC_REG_DORX_REGOFFSET_MASK = 0x0
DAC_REG_DORX_REGOFFSET_MASK = 0x0
DAC_REG_REGOFFSET_MASK_POSBIT0 = 0xF
DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS = 0x10
DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS = 0x14
DAC_REG_DHR8RX_REGOFFSET_BITOFFSET_POS = 0x18
DAC_REG_DORX_REGOFFSET_BITOFFSET_POS = 0x1C
# Skip DAC_DHR12RD_DACC2DHR_BITOFFSET_POS : no need parse
# Skip DAC_DHR12LD_DACC2DHR_BITOFFSET_POS : no need parse
# Skip DAC_DHR8RD_DACC2DHR_BITOFFSET_POS : no need parse
DAC_DIGITAL_SCALE_12BITS = 0xFFF
# fun define __DAC_PTR_REG_OFFSET(__REG__, __REG_OFFFSET__)                         \
# ((__IO uint32_t *)((uint32_t) ((uint32_t)(&(__REG__)) + ((__REG_OFFFSET__) << 2U))))
LL_DAC_FLAG_DMAUDR1 = 0x2000
# Skip LL_DAC_FLAG_DMAUDR2 : no need parse
LL_DAC_IT_DMAUDRIE1 = 0x2000
# Skip LL_DAC_IT_DMAUDRIE2 : no need parse
LL_DAC_CHANNEL_1 = 0x2100001
# Skip LL_DAC_CHANNEL_2 : no need parse
LL_DAC_TRIG_SOFTWARE = 0x38
LL_DAC_TRIG_EXT_TIM2_TRGO = 0x20
LL_DAC_TRIG_EXT_TIM3_TRGO = 0x8
LL_DAC_TRIG_EXT_TIM3_CH3 = 0x10
LL_DAC_TRIG_EXT_TIM6_TRGO = 0x0
LL_DAC_TRIG_EXT_TIM7_TRGO = 0x28
LL_DAC_TRIG_EXT_TIM21_TRGO = 0x18
LL_DAC_TRIG_EXT_EXTI_LINE9 = 0x30
LL_DAC_WAVE_AUTO_GENERATION_NONE = 0x0
LL_DAC_WAVE_AUTO_GENERATION_NOISE = 0x40
LL_DAC_WAVE_AUTO_GENERATION_TRIANGLE = 0x80
LL_DAC_NOISE_LFSR_UNMASK_BIT0 = 0x0
LL_DAC_NOISE_LFSR_UNMASK_BITS1_0 = 0x100
LL_DAC_NOISE_LFSR_UNMASK_BITS2_0 = 0x200
LL_DAC_NOISE_LFSR_UNMASK_BITS3_0 = 0x300
LL_DAC_NOISE_LFSR_UNMASK_BITS4_0 = 0x400
LL_DAC_NOISE_LFSR_UNMASK_BITS5_0 = 0x500
LL_DAC_NOISE_LFSR_UNMASK_BITS6_0 = 0x600
LL_DAC_NOISE_LFSR_UNMASK_BITS7_0 = 0x700
LL_DAC_NOISE_LFSR_UNMASK_BITS8_0 = 0x800
LL_DAC_NOISE_LFSR_UNMASK_BITS9_0 = 0x900
LL_DAC_NOISE_LFSR_UNMASK_BITS10_0 = 0xA00
LL_DAC_NOISE_LFSR_UNMASK_BITS11_0 = 0xB00
LL_DAC_TRIANGLE_AMPLITUDE_1 = 0x0
LL_DAC_TRIANGLE_AMPLITUDE_3 = 0x100
LL_DAC_TRIANGLE_AMPLITUDE_7 = 0x200
LL_DAC_TRIANGLE_AMPLITUDE_15 = 0x300
LL_DAC_TRIANGLE_AMPLITUDE_31 = 0x400
LL_DAC_TRIANGLE_AMPLITUDE_63 = 0x500
LL_DAC_TRIANGLE_AMPLITUDE_127 = 0x600
LL_DAC_TRIANGLE_AMPLITUDE_255 = 0x700
LL_DAC_TRIANGLE_AMPLITUDE_511 = 0x800
LL_DAC_TRIANGLE_AMPLITUDE_1023 = 0x900
LL_DAC_TRIANGLE_AMPLITUDE_2047 = 0xA00
LL_DAC_TRIANGLE_AMPLITUDE_4095 = 0xB00
LL_DAC_OUTPUT_BUFFER_ENABLE = 0x0
LL_DAC_OUTPUT_BUFFER_DISABLE = 0x2
LL_DAC_RESOLUTION_12B = 0x0
LL_DAC_RESOLUTION_8B = 0x2
LL_DAC_DMA_REG_DATA_12BITS_RIGHT_ALIGNED = 0x10
LL_DAC_DMA_REG_DATA_12BITS_LEFT_ALIGNED = 0x14
LL_DAC_DMA_REG_DATA_8BITS_RIGHT_ALIGNED = 0x18
LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US = 0xF
LL_DAC_DELAY_VOLTAGE_SETTLING_US = 0xC
# fun define LL_DAC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_DAC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# fun define __LL_DAC_CHANNEL_TO_DECIMAL_NB(__CHANNEL__)                            \
#  ((__CHANNEL__) & DAC_SWTR_CHX_MASK)
# fun define __LL_DAC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                         \
#  (((__DECIMAL_NB__) == 1U)                                                     \
#    ? (                                                                        \
#       LL_DAC_CHANNEL_1                                                        \
#      )                                                                        \
#      :                                                                        \
#      (((__DECIMAL_NB__) == 2U)                                                 \
#        ? (                                                                    \
#           LL_DAC_CHANNEL_2                                                    \
#          )                                                                    \
#          :                                                                    \
#          (                                                                    \
#           0                                                                   \
#          )                                                                    \
#      )                                                                        \
#  )
# fun define __LL_DAC_DECIMAL_NB_TO_CHANNEL(__DECIMAL_NB__)                         \
#  (((__DECIMAL_NB__) == 1U)                                                     \
#    ? (                                                                        \
#       LL_DAC_CHANNEL_1                                                        \
#      )                                                                        \
#      :                                                                        \
#      (                                                                        \
#       0                                                                       \
#      )                                                                        \
#  )
# fun define __LL_DAC_DIGITAL_SCALE(__DAC_RESOLUTION__)                             \
#  ((0x00000FFFU) >> ((__DAC_RESOLUTION__) << 1U))
# fun define __LL_DAC_CALC_VOLTAGE_TO_DATA(__VREFANALOG_VOLTAGE__,\
#                                      __DAC_VOLTAGE__,\
#                                      __DAC_RESOLUTION__)                      \
#  ((__DAC_VOLTAGE__) * __LL_DAC_DIGITAL_SCALE(__DAC_RESOLUTION__)              \
#   / (__VREFANALOG_VOLTAGE__)                                                  \
#  )
# struct LL_DAC_InitTypeDef

class LL_DAC_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('TriggerSource',	ctypes.c_uint32),
		('WaveAutoGeneration',	ctypes.c_uint32),
		('WaveAutoGenerationConfig',	ctypes.c_uint32),
		('OutputBuffer',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_dma.h : 

# empty define STM32L0xx_LL_DMA_H
DMA_CSELR_OFFSET = 0xA8
# Skip DMA_POSITION_CSELR_CXS : no need parse
LL_DMA_IFCR_CGIF1 = 0x1
LL_DMA_IFCR_CTCIF1 = 0x2
LL_DMA_IFCR_CHTIF1 = 0x4
LL_DMA_IFCR_CTEIF1 = 0x8
LL_DMA_IFCR_CGIF2 = 0x10
LL_DMA_IFCR_CTCIF2 = 0x20
LL_DMA_IFCR_CHTIF2 = 0x40
LL_DMA_IFCR_CTEIF2 = 0x80
LL_DMA_IFCR_CGIF3 = 0x100
LL_DMA_IFCR_CTCIF3 = 0x200
LL_DMA_IFCR_CHTIF3 = 0x400
LL_DMA_IFCR_CTEIF3 = 0x800
LL_DMA_IFCR_CGIF4 = 0x1000
LL_DMA_IFCR_CTCIF4 = 0x2000
LL_DMA_IFCR_CHTIF4 = 0x4000
LL_DMA_IFCR_CTEIF4 = 0x8000
LL_DMA_IFCR_CGIF5 = 0x10000
LL_DMA_IFCR_CTCIF5 = 0x20000
LL_DMA_IFCR_CHTIF5 = 0x40000
LL_DMA_IFCR_CTEIF5 = 0x80000
LL_DMA_IFCR_CGIF6 = 0x100000
LL_DMA_IFCR_CTCIF6 = 0x200000
LL_DMA_IFCR_CHTIF6 = 0x400000
LL_DMA_IFCR_CTEIF6 = 0x800000
LL_DMA_IFCR_CGIF7 = 0x1000000
LL_DMA_IFCR_CTCIF7 = 0x2000000
LL_DMA_IFCR_CHTIF7 = 0x4000000
LL_DMA_IFCR_CTEIF7 = 0x8000000
LL_DMA_ISR_GIF1 = 0x1
LL_DMA_ISR_TCIF1 = 0x2
LL_DMA_ISR_HTIF1 = 0x4
LL_DMA_ISR_TEIF1 = 0x8
LL_DMA_ISR_GIF2 = 0x10
LL_DMA_ISR_TCIF2 = 0x20
LL_DMA_ISR_HTIF2 = 0x40
LL_DMA_ISR_TEIF2 = 0x80
LL_DMA_ISR_GIF3 = 0x100
LL_DMA_ISR_TCIF3 = 0x200
LL_DMA_ISR_HTIF3 = 0x400
LL_DMA_ISR_TEIF3 = 0x800
LL_DMA_ISR_GIF4 = 0x1000
LL_DMA_ISR_TCIF4 = 0x2000
LL_DMA_ISR_HTIF4 = 0x4000
LL_DMA_ISR_TEIF4 = 0x8000
LL_DMA_ISR_GIF5 = 0x10000
LL_DMA_ISR_TCIF5 = 0x20000
LL_DMA_ISR_HTIF5 = 0x40000
LL_DMA_ISR_TEIF5 = 0x80000
LL_DMA_ISR_GIF6 = 0x100000
LL_DMA_ISR_TCIF6 = 0x200000
LL_DMA_ISR_HTIF6 = 0x400000
LL_DMA_ISR_TEIF6 = 0x800000
LL_DMA_ISR_GIF7 = 0x1000000
LL_DMA_ISR_TCIF7 = 0x2000000
LL_DMA_ISR_HTIF7 = 0x4000000
LL_DMA_ISR_TEIF7 = 0x8000000
LL_DMA_CCR_TCIE = 0x2
LL_DMA_CCR_HTIE = 0x4
LL_DMA_CCR_TEIE = 0x8
LL_DMA_CHANNEL_1 = 0x1
LL_DMA_CHANNEL_2 = 0x2
LL_DMA_CHANNEL_3 = 0x3
LL_DMA_CHANNEL_4 = 0x4
LL_DMA_CHANNEL_5 = 0x5
LL_DMA_CHANNEL_6 = 0x6
LL_DMA_CHANNEL_7 = 0x7
LL_DMA_CHANNEL_ALL = 0xFFFF0000
LL_DMA_DIRECTION_PERIPH_TO_MEMORY = 0x0
LL_DMA_DIRECTION_MEMORY_TO_PERIPH = 0x10
LL_DMA_DIRECTION_MEMORY_TO_MEMORY = 0x4000
LL_DMA_MODE_NORMAL = 0x0
LL_DMA_MODE_CIRCULAR = 0x20
LL_DMA_PERIPH_INCREMENT = 0x40
LL_DMA_PERIPH_NOINCREMENT = 0x0
LL_DMA_MEMORY_INCREMENT = 0x80
LL_DMA_MEMORY_NOINCREMENT = 0x0
LL_DMA_PDATAALIGN_BYTE = 0x0
LL_DMA_PDATAALIGN_HALFWORD = 0x100
LL_DMA_PDATAALIGN_WORD = 0x200
LL_DMA_MDATAALIGN_BYTE = 0x0
LL_DMA_MDATAALIGN_HALFWORD = 0x400
LL_DMA_MDATAALIGN_WORD = 0x800
LL_DMA_PRIORITY_LOW = 0x0
LL_DMA_PRIORITY_MEDIUM = 0x1000
LL_DMA_PRIORITY_HIGH = 0x2000
LL_DMA_PRIORITY_VERYHIGH = 0x3000
LL_DMA_REQUEST_0 = 0x0
LL_DMA_REQUEST_1 = 0x1
LL_DMA_REQUEST_2 = 0x2
LL_DMA_REQUEST_3 = 0x3
LL_DMA_REQUEST_4 = 0x4
LL_DMA_REQUEST_5 = 0x5
LL_DMA_REQUEST_6 = 0x6
LL_DMA_REQUEST_7 = 0x7
LL_DMA_REQUEST_8 = 0x8
LL_DMA_REQUEST_9 = 0x9
LL_DMA_REQUEST_10 = 0xA
LL_DMA_REQUEST_11 = 0xB
LL_DMA_REQUEST_12 = 0xC
LL_DMA_REQUEST_13 = 0xD
LL_DMA_REQUEST_14 = 0xE
LL_DMA_REQUEST_15 = 0xF
# fun define LL_DMA_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_DMA_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# fun define __LL_DMA_GET_INSTANCE(__CHANNEL_INSTANCE__)  (DMA1)
# fun define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
#(((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel6)) ? LL_DMA_CHANNEL_6 : \
# LL_DMA_CHANNEL_7)
# fun define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
#(((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel5)) ? LL_DMA_CHANNEL_5 : \
# LL_DMA_CHANNEL_6)
# fun define __LL_DMA_GET_CHANNEL(__CHANNEL_INSTANCE__)   \
#(((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel1)) ? LL_DMA_CHANNEL_1 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel2)) ? LL_DMA_CHANNEL_2 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel3)) ? LL_DMA_CHANNEL_3 : \
# ((uint32_t)(__CHANNEL_INSTANCE__) == ((uint32_t)DMA1_Channel4)) ? LL_DMA_CHANNEL_4 : \
# LL_DMA_CHANNEL_5)
# fun define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
#((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_1))) ? DMA1_Channel1 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_2))) ? DMA1_Channel2 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_3))) ? DMA1_Channel3 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_4))) ? DMA1_Channel4 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_5))) ? DMA1_Channel5 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_6))) ? DMA1_Channel6 : \
# DMA1_Channel7)
# fun define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
#((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_1))) ? DMA1_Channel1 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_2))) ? DMA1_Channel2 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_3))) ? DMA1_Channel3 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_4))) ? DMA1_Channel4 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_5))) ? DMA1_Channel5 : \
# DMA1_Channel6)
# fun define __LL_DMA_GET_CHANNEL_INSTANCE(__DMA_INSTANCE__, __CHANNEL__)   \
#((((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_1))) ? DMA1_Channel1 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_2))) ? DMA1_Channel2 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_3))) ? DMA1_Channel3 : \
# (((uint32_t)(__DMA_INSTANCE__) == ((uint32_t)DMA1)) && ((uint32_t)(__CHANNEL__) == ((uint32_t)LL_DMA_CHANNEL_4))) ? DMA1_Channel4 : \
# DMA1_Channel5)
# struct LL_DMA_InitTypeDef

class LL_DMA_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('PeriphOrM2MSrcAddress',	ctypes.c_uint32),
		('MemoryOrM2MDstAddress',	ctypes.c_uint32),
		('Direction',	ctypes.c_uint32),
		('Mode',	ctypes.c_uint32),
		('PeriphOrM2MSrcIncMode',	ctypes.c_uint32),
		('MemoryOrM2MDstIncMode',	ctypes.c_uint32),
		('PeriphOrM2MSrcDataSize',	ctypes.c_uint32),
		('MemoryOrM2MDstDataSize',	ctypes.c_uint32),
		('NbData',	ctypes.c_uint32),
		('PeriphRequest',	ctypes.c_uint32),
		('Priority',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_exti.h : 

# empty define __STM32L0xx_LL_EXTI_H
LL_EXTI_LINE_0 = 0x1
LL_EXTI_LINE_1 = 0x2
LL_EXTI_LINE_2 = 0x4
LL_EXTI_LINE_3 = 0x8
LL_EXTI_LINE_4 = 0x10
LL_EXTI_LINE_5 = 0x20
LL_EXTI_LINE_6 = 0x40
LL_EXTI_LINE_7 = 0x80
LL_EXTI_LINE_8 = 0x100
LL_EXTI_LINE_9 = 0x200
LL_EXTI_LINE_10 = 0x400
LL_EXTI_LINE_11 = 0x800
LL_EXTI_LINE_12 = 0x1000
LL_EXTI_LINE_13 = 0x2000
LL_EXTI_LINE_14 = 0x4000
LL_EXTI_LINE_15 = 0x8000
LL_EXTI_LINE_16 = 0x10000
LL_EXTI_LINE_17 = 0x20000
LL_EXTI_LINE_18 = 0x40000
LL_EXTI_LINE_19 = 0x80000
LL_EXTI_LINE_20 = 0x100000
LL_EXTI_LINE_21 = 0x200000
LL_EXTI_LINE_22 = 0x400000
LL_EXTI_LINE_23 = 0x800000
# Skip LL_EXTI_LINE_24 : no need parse
LL_EXTI_LINE_25 = 0x2000000
LL_EXTI_LINE_26 = 0x4000000
# Skip LL_EXTI_LINE_27 : no need parse
LL_EXTI_LINE_28 = 0x10000000
LL_EXTI_LINE_29 = 0x20000000
# Skip LL_EXTI_LINE_30 : no need parse
# Skip LL_EXTI_LINE_31 : no need parse
LL_EXTI_LINE_ALL_0_31 = 0x36FFFFFF
LL_EXTI_LINE_ALL = 0xFFFFFFFF
LL_EXTI_LINE_NONE = 0x0
LL_EXTI_MODE_IT = 0x0
LL_EXTI_MODE_EVENT = 0x1
LL_EXTI_MODE_IT_EVENT = 0x2
LL_EXTI_TRIGGER_NONE = 0x0
LL_EXTI_TRIGGER_RISING = 0x1
LL_EXTI_TRIGGER_FALLING = 0x2
LL_EXTI_TRIGGER_RISING_FALLING = 0x3
# fun define LL_EXTI_WriteReg(__REG__, __VALUE__) WRITE_REG(EXTI->__REG__, (__VALUE__))
# fun define LL_EXTI_ReadReg(__REG__) READ_REG(EXTI->__REG__)
# struct LL_EXTI_InitTypeDef

class LL_EXTI_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Line_0_31',	ctypes.c_uint32),
		('LineCommand',	ctypes.c_uint32),
		('Mode',	ctypes.c_uint8),
		('Trigger',	ctypes.c_uint8),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_gpio.h : 

# empty define __STM32L0xx_LL_GPIO_H
LL_GPIO_PIN_0 = 0x1
LL_GPIO_PIN_1 = 0x2
LL_GPIO_PIN_2 = 0x4
LL_GPIO_PIN_3 = 0x8
LL_GPIO_PIN_4 = 0x10
LL_GPIO_PIN_5 = 0x20
LL_GPIO_PIN_6 = 0x40
LL_GPIO_PIN_7 = 0x80
LL_GPIO_PIN_8 = 0x100
LL_GPIO_PIN_9 = 0x200
LL_GPIO_PIN_10 = 0x400
LL_GPIO_PIN_11 = 0x800
LL_GPIO_PIN_12 = 0x1000
LL_GPIO_PIN_13 = 0x2000
LL_GPIO_PIN_14 = 0x4000
LL_GPIO_PIN_15 = 0x8000
LL_GPIO_PIN_ALL = 0xFFFF
LL_GPIO_MODE_INPUT = 0x0
LL_GPIO_MODE_OUTPUT = 0x1
LL_GPIO_MODE_ALTERNATE = 0x2
LL_GPIO_MODE_ANALOG = 0x3
LL_GPIO_OUTPUT_PUSHPULL = 0x0
LL_GPIO_OUTPUT_OPENDRAIN = 0x1
LL_GPIO_SPEED_FREQ_LOW = 0x0
LL_GPIO_SPEED_FREQ_MEDIUM = 0x1
LL_GPIO_SPEED_FREQ_HIGH = 0x2
LL_GPIO_SPEED_FREQ_VERY_HIGH = 0x3
LL_GPIO_SPEED_LOW = 0x0
LL_GPIO_SPEED_MEDIUM = 0x1
LL_GPIO_SPEED_FAST = 0x2
LL_GPIO_SPEED_HIGH = 0x3
LL_GPIO_PULL_NO = 0x0
LL_GPIO_PULL_UP = 0x1
LL_GPIO_PULL_DOWN = 0x2
LL_GPIO_AF_0 = 0x0
LL_GPIO_AF_1 = 0x1
LL_GPIO_AF_2 = 0x2
LL_GPIO_AF_3 = 0x3
LL_GPIO_AF_4 = 0x4
LL_GPIO_AF_5 = 0x5
LL_GPIO_AF_6 = 0x6
LL_GPIO_AF_7 = 0x7
# fun define LL_GPIO_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_GPIO_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# struct LL_GPIO_InitTypeDef

class LL_GPIO_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Pin',	ctypes.c_uint32),
		('Mode',	ctypes.c_uint32),
		('Speed',	ctypes.c_uint32),
		('OutputType',	ctypes.c_uint32),
		('Pull',	ctypes.c_uint32),
		('Alternate',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_i2c.h : 

# empty define STM32L0xx_LL_I2C_H
LL_I2C_ICR_ADDRCF = 0x8
LL_I2C_ICR_NACKCF = 0x10
LL_I2C_ICR_STOPCF = 0x20
LL_I2C_ICR_BERRCF = 0x100
LL_I2C_ICR_ARLOCF = 0x200
LL_I2C_ICR_OVRCF = 0x400
LL_I2C_ICR_PECCF = 0x800
LL_I2C_ICR_TIMOUTCF = 0x1000
LL_I2C_ICR_ALERTCF = 0x2000
LL_I2C_ISR_TXE = 0x1
LL_I2C_ISR_TXIS = 0x2
LL_I2C_ISR_RXNE = 0x4
LL_I2C_ISR_ADDR = 0x8
LL_I2C_ISR_NACKF = 0x10
LL_I2C_ISR_STOPF = 0x20
LL_I2C_ISR_TC = 0x40
LL_I2C_ISR_TCR = 0x80
LL_I2C_ISR_BERR = 0x100
LL_I2C_ISR_ARLO = 0x200
LL_I2C_ISR_OVR = 0x400
LL_I2C_ISR_PECERR = 0x800
LL_I2C_ISR_TIMEOUT = 0x1000
LL_I2C_ISR_ALERT = 0x2000
LL_I2C_ISR_BUSY = 0x8000
LL_I2C_CR1_TXIE = 0x2
LL_I2C_CR1_RXIE = 0x4
LL_I2C_CR1_ADDRIE = 0x8
LL_I2C_CR1_NACKIE = 0x10
LL_I2C_CR1_STOPIE = 0x20
LL_I2C_CR1_TCIE = 0x40
LL_I2C_CR1_ERRIE = 0x80
LL_I2C_MODE_I2C = 0x0
LL_I2C_MODE_SMBUS_HOST = 0x100000
LL_I2C_MODE_SMBUS_DEVICE = 0x0
LL_I2C_MODE_SMBUS_DEVICE_ARP = 0x200000
LL_I2C_ANALOGFILTER_ENABLE = 0x0
LL_I2C_ANALOGFILTER_DISABLE = 0x1000
LL_I2C_ADDRESSING_MODE_7BIT = 0x0
LL_I2C_ADDRESSING_MODE_10BIT = 0x800
LL_I2C_OWNADDRESS1_7BIT = 0x0
LL_I2C_OWNADDRESS1_10BIT = 0x400
LL_I2C_OWNADDRESS2_NOMASK = 0x0
LL_I2C_OWNADDRESS2_MASK01 = 0x100
LL_I2C_OWNADDRESS2_MASK02 = 0x200
LL_I2C_OWNADDRESS2_MASK03 = 0x300
LL_I2C_OWNADDRESS2_MASK04 = 0x400
LL_I2C_OWNADDRESS2_MASK05 = 0x500
LL_I2C_OWNADDRESS2_MASK06 = 0x600
LL_I2C_OWNADDRESS2_MASK07 = 0x700
LL_I2C_ACK = 0x0
LL_I2C_NACK = 0x8000
LL_I2C_ADDRSLAVE_7BIT = 0x0
LL_I2C_ADDRSLAVE_10BIT = 0x800
LL_I2C_REQUEST_WRITE = 0x0
LL_I2C_REQUEST_READ = 0x400
LL_I2C_MODE_RELOAD = 0x1000000
LL_I2C_MODE_AUTOEND = 0x2000000
LL_I2C_MODE_SOFTEND = 0x0
LL_I2C_MODE_SMBUS_RELOAD = 0x1000000
LL_I2C_MODE_SMBUS_AUTOEND_NO_PEC = 0x2000000
LL_I2C_MODE_SMBUS_SOFTEND_NO_PEC = 0x0
LL_I2C_MODE_SMBUS_AUTOEND_WITH_PEC = 0x6000000
LL_I2C_MODE_SMBUS_SOFTEND_WITH_PEC = 0x4000000
LL_I2C_GENERATE_NOSTARTSTOP = 0x0
LL_I2C_GENERATE_STOP = 0x80004000
LL_I2C_GENERATE_START_READ = 0x80002400
LL_I2C_GENERATE_START_WRITE = 0x80002000
LL_I2C_GENERATE_RESTART_7BIT_READ = 0x80002400
LL_I2C_GENERATE_RESTART_7BIT_WRITE = 0x80002000
LL_I2C_GENERATE_RESTART_10BIT_READ = 0x80003400
LL_I2C_GENERATE_RESTART_10BIT_WRITE = 0x80002000
LL_I2C_DIRECTION_WRITE = 0x0
LL_I2C_DIRECTION_READ = 0x10000
LL_I2C_DMA_REG_DATA_TRANSMIT = 0x0
LL_I2C_DMA_REG_DATA_RECEIVE = 0x1
LL_I2C_SMBUS_TIMEOUTA_MODE_SCL_LOW = 0x0
LL_I2C_SMBUS_TIMEOUTA_MODE_SDA_SCL_HIGH = 0x1000
LL_I2C_SMBUS_TIMEOUTA = 0x8000
LL_I2C_SMBUS_TIMEOUTB = 0x80000000
LL_I2C_SMBUS_ALL_TIMEOUT = 0x80008000
# fun define LL_I2C_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_I2C_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# fun define __LL_I2C_CONVERT_TIMINGS(__PRESCALER__, __DATA_SETUP_TIME__, __DATA_HOLD_TIME__, __CLOCK_HIGH_PERIOD__, __CLOCK_LOW_PERIOD__)   \
#        ((((uint32_t)(__PRESCALER__)         << I2C_TIMINGR_PRESC_Pos)  & I2C_TIMINGR_PRESC)   | \
#         (((uint32_t)(__DATA_SETUP_TIME__)   << I2C_TIMINGR_SCLDEL_Pos) & I2C_TIMINGR_SCLDEL)  | \
#         (((uint32_t)(__DATA_HOLD_TIME__)    << I2C_TIMINGR_SDADEL_Pos) & I2C_TIMINGR_SDADEL)  | \
#         (((uint32_t)(__CLOCK_HIGH_PERIOD__) << I2C_TIMINGR_SCLH_Pos)   & I2C_TIMINGR_SCLH)    | \
#         (((uint32_t)(__CLOCK_LOW_PERIOD__)  << I2C_TIMINGR_SCLL_Pos)   & I2C_TIMINGR_SCLL))
# struct LL_I2C_InitTypeDef

class LL_I2C_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('PeripheralMode',	ctypes.c_uint32),
		('Timing',	ctypes.c_uint32),
		('AnalogFilter',	ctypes.c_uint32),
		('DigitalFilter',	ctypes.c_uint32),
		('OwnAddress1',	ctypes.c_uint32),
		('TypeAcknowledge',	ctypes.c_uint32),
		('OwnAddrSize',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_iwdg.h : 

# empty define __STM32L0xx_LL_IWDG_H
LL_IWDG_KEY_RELOAD = 0xAAAA
LL_IWDG_KEY_ENABLE = 0xCCCC
LL_IWDG_KEY_WR_ACCESS_ENABLE = 0x5555
LL_IWDG_KEY_WR_ACCESS_DISABLE = 0x0
LL_IWDG_SR_PVU = 0x1
LL_IWDG_SR_RVU = 0x2
LL_IWDG_SR_WVU = 0x4
LL_IWDG_PRESCALER_4 = 0x0
LL_IWDG_PRESCALER_8 = 0x1
LL_IWDG_PRESCALER_16 = 0x2
LL_IWDG_PRESCALER_32 = 0x3
LL_IWDG_PRESCALER_64 = 0x4
LL_IWDG_PRESCALER_128 = 0x5
LL_IWDG_PRESCALER_256 = 0x6
# fun define LL_IWDG_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_IWDG_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# ----------------------------------------

# file stm32l0xx_ll_lptim.h : 

# empty define STM32L0xx_LL_LPTIM_H
LL_LPTIM_ISR_CMPM = 0x1
LL_LPTIM_ISR_ARRM = 0x2
LL_LPTIM_ISR_EXTTRIG = 0x4
LL_LPTIM_ISR_CMPOK = 0x8
LL_LPTIM_ISR_ARROK = 0x10
LL_LPTIM_ISR_UP = 0x20
LL_LPTIM_ISR_DOWN = 0x40
LL_LPTIM_IER_CMPMIE = 0x1
LL_LPTIM_IER_ARRMIE = 0x2
LL_LPTIM_IER_EXTTRIGIE = 0x4
LL_LPTIM_IER_CMPOKIE = 0x8
LL_LPTIM_IER_ARROKIE = 0x10
LL_LPTIM_IER_UPIE = 0x20
LL_LPTIM_IER_DOWNIE = 0x40
LL_LPTIM_OPERATING_MODE_CONTINUOUS = 0x4
LL_LPTIM_OPERATING_MODE_ONESHOT = 0x2
LL_LPTIM_UPDATE_MODE_IMMEDIATE = 0x0
LL_LPTIM_UPDATE_MODE_ENDOFPERIOD = 0x400000
LL_LPTIM_COUNTER_MODE_INTERNAL = 0x0
LL_LPTIM_COUNTER_MODE_EXTERNAL = 0x800000
LL_LPTIM_OUTPUT_WAVEFORM_PWM = 0x0
LL_LPTIM_OUTPUT_WAVEFORM_SETONCE = 0x100000
LL_LPTIM_OUTPUT_POLARITY_REGULAR = 0x0
LL_LPTIM_OUTPUT_POLARITY_INVERSE = 0x200000
LL_LPTIM_PRESCALER_DIV1 = 0x0
LL_LPTIM_PRESCALER_DIV2 = 0x200
LL_LPTIM_PRESCALER_DIV4 = 0x400
LL_LPTIM_PRESCALER_DIV8 = 0x600
LL_LPTIM_PRESCALER_DIV16 = 0x800
LL_LPTIM_PRESCALER_DIV32 = 0xA00
LL_LPTIM_PRESCALER_DIV64 = 0xC00
LL_LPTIM_PRESCALER_DIV128 = 0xE00
LL_LPTIM_TRIG_SOURCE_GPIO = 0x0
LL_LPTIM_TRIG_SOURCE_RTCALARMA = 0x2000
LL_LPTIM_TRIG_SOURCE_RTCALARMB = 0x4000
LL_LPTIM_TRIG_SOURCE_RTCTAMP1 = 0x6000
LL_LPTIM_TRIG_SOURCE_RTCTAMP2 = 0x8000
# Skip LL_LPTIM_TRIG_SOURCE_RTCTAMP3 : no need parse
LL_LPTIM_TRIG_SOURCE_COMP1 = 0xC000
LL_LPTIM_TRIG_SOURCE_COMP2 = 0xE000
LL_LPTIM_TRIG_FILTER_NONE = 0x0
LL_LPTIM_TRIG_FILTER_2 = 0x40
LL_LPTIM_TRIG_FILTER_4 = 0x80
LL_LPTIM_TRIG_FILTER_8 = 0xC0
LL_LPTIM_TRIG_POLARITY_RISING = 0x20000
LL_LPTIM_TRIG_POLARITY_FALLING = 0x40000
LL_LPTIM_TRIG_POLARITY_RISING_FALLING = 0x60000
LL_LPTIM_CLK_SOURCE_INTERNAL = 0x0
LL_LPTIM_CLK_SOURCE_EXTERNAL = 0x1
LL_LPTIM_CLK_FILTER_NONE = 0x0
LL_LPTIM_CLK_FILTER_2 = 0x8
LL_LPTIM_CLK_FILTER_4 = 0x10
LL_LPTIM_CLK_FILTER_8 = 0x18
LL_LPTIM_CLK_POLARITY_RISING = 0x0
LL_LPTIM_CLK_POLARITY_FALLING = 0x2
LL_LPTIM_CLK_POLARITY_RISING_FALLING = 0x4
LL_LPTIM_ENCODER_MODE_RISING = 0x0
LL_LPTIM_ENCODER_MODE_FALLING = 0x2
LL_LPTIM_ENCODER_MODE_RISING_FALLING = 0x4
# fun define LL_LPTIM_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG((__INSTANCE__)->(__REG__), (__VALUE__))
# fun define LL_LPTIM_ReadReg(__INSTANCE__, __REG__) READ_REG((__INSTANCE__)->(__REG__))
# struct LL_LPTIM_InitTypeDef

class LL_LPTIM_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ClockSource',	ctypes.c_uint32),
		('Prescaler',	ctypes.c_uint32),
		('Waveform',	ctypes.c_uint32),
		('Polarity',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_lpuart.h : 

# empty define __STM32L0xx_LL_LPUART_H
LPUART_LPUARTDIV_FREQ_MUL = 0x100
LPUART_BRR_MASK = 0xFFFFF
LPUART_BRR_MIN_VALUE = 0x300
LL_LPUART_ICR_PECF = 0x1
LL_LPUART_ICR_FECF = 0x2
LL_LPUART_ICR_NCF = 0x4
LL_LPUART_ICR_ORECF = 0x8
LL_LPUART_ICR_IDLECF = 0x10
LL_LPUART_ICR_TCCF = 0x40
LL_LPUART_ICR_CTSCF = 0x200
LL_LPUART_ICR_CMCF = 0x20000
LL_LPUART_ICR_WUCF = 0x100000
LL_LPUART_ISR_PE = 0x1
LL_LPUART_ISR_FE = 0x2
LL_LPUART_ISR_NE = 0x4
LL_LPUART_ISR_ORE = 0x8
LL_LPUART_ISR_IDLE = 0x10
LL_LPUART_ISR_RXNE = 0x20
LL_LPUART_ISR_TC = 0x40
LL_LPUART_ISR_TXE = 0x80
LL_LPUART_ISR_CTSIF = 0x200
LL_LPUART_ISR_CTS = 0x400
LL_LPUART_ISR_BUSY = 0x10000
LL_LPUART_ISR_CMF = 0x20000
LL_LPUART_ISR_SBKF = 0x40000
LL_LPUART_ISR_RWU = 0x80000
LL_LPUART_ISR_WUF = 0x100000
LL_LPUART_ISR_TEACK = 0x200000
LL_LPUART_ISR_REACK = 0x400000
LL_LPUART_CR1_IDLEIE = 0x10
LL_LPUART_CR1_RXNEIE = 0x20
LL_LPUART_CR1_TCIE = 0x40
LL_LPUART_CR1_TXEIE = 0x80
LL_LPUART_CR1_PEIE = 0x100
LL_LPUART_CR1_CMIE = 0x4000
LL_LPUART_CR3_EIE = 0x1
LL_LPUART_CR3_CTSIE = 0x400
LL_LPUART_CR3_WUFIE = 0x400000
LL_LPUART_DIRECTION_NONE = 0x0
LL_LPUART_DIRECTION_RX = 0x4
LL_LPUART_DIRECTION_TX = 0x8
LL_LPUART_DIRECTION_TX_RX = 0xC
LL_LPUART_PARITY_NONE = 0x0
LL_LPUART_PARITY_EVEN = 0x400
LL_LPUART_PARITY_ODD = 0x600
LL_LPUART_WAKEUP_IDLELINE = 0x0
LL_LPUART_WAKEUP_ADDRESSMARK = 0x800
LL_LPUART_DATAWIDTH_7B = 0x10000000
LL_LPUART_DATAWIDTH_8B = 0x0
LL_LPUART_DATAWIDTH_9B = 0x1000
LL_LPUART_STOPBITS_1 = 0x0
LL_LPUART_STOPBITS_2 = 0x2000
LL_LPUART_TXRX_STANDARD = 0x0
LL_LPUART_TXRX_SWAPPED = 0x8000
LL_LPUART_RXPIN_LEVEL_STANDARD = 0x0
LL_LPUART_RXPIN_LEVEL_INVERTED = 0x10000
LL_LPUART_TXPIN_LEVEL_STANDARD = 0x0
LL_LPUART_TXPIN_LEVEL_INVERTED = 0x20000
LL_LPUART_BINARY_LOGIC_POSITIVE = 0x0
LL_LPUART_BINARY_LOGIC_NEGATIVE = 0x40000
LL_LPUART_BITORDER_LSBFIRST = 0x0
LL_LPUART_BITORDER_MSBFIRST = 0x80000
LL_LPUART_ADDRESS_DETECT_4B = 0x0
LL_LPUART_ADDRESS_DETECT_7B = 0x10
LL_LPUART_HWCONTROL_NONE = 0x0
LL_LPUART_HWCONTROL_RTS = 0x100
LL_LPUART_HWCONTROL_CTS = 0x200
LL_LPUART_HWCONTROL_RTS_CTS = 0x300
LL_LPUART_WAKEUP_ON_ADDRESS = 0x0
LL_LPUART_WAKEUP_ON_STARTBIT = 0x200000
LL_LPUART_WAKEUP_ON_RXNE = 0x300000
LL_LPUART_DE_POLARITY_HIGH = 0x0
LL_LPUART_DE_POLARITY_LOW = 0x8000
LL_LPUART_DMA_REG_DATA_TRANSMIT = 0x0
LL_LPUART_DMA_REG_DATA_RECEIVE = 0x1
# fun define LL_LPUART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_LPUART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# fun define __LL_LPUART_DIV(__PERIPHCLK__, __BAUDRATE__) (((((uint64_t)(__PERIPHCLK__)*LPUART_LPUARTDIV_FREQ_MUL) + ((__BAUDRATE__)/2U))/(__BAUDRATE__)) & LPUART_BRR_MASK)
# struct LL_LPUART_InitTypeDef

class LL_LPUART_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('BaudRate',	ctypes.c_uint32),
		('DataWidth',	ctypes.c_uint32),
		('StopBits',	ctypes.c_uint32),
		('Parity',	ctypes.c_uint32),
		('TransferDirection',	ctypes.c_uint32),
		('HardwareFlowControl',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_rcc.h : 

# empty define __STM32L0xx_LL_RCC_H
HSE_VALUE = 0x7A1200
HSI_VALUE = 0xF42400
LSE_VALUE = 0x8000
LSI_VALUE = 0x9088
HSI48_VALUE = 0x2DC6C00
LL_RCC_CICR_LSIRDYC = 0x1
LL_RCC_CICR_LSERDYC = 0x2
LL_RCC_CICR_HSIRDYC = 0x4
LL_RCC_CICR_HSERDYC = 0x8
LL_RCC_CICR_PLLRDYC = 0x10
LL_RCC_CICR_MSIRDYC = 0x20
LL_RCC_CICR_HSI48RDYC = 0x40
LL_RCC_CICR_LSECSSC = 0x80
LL_RCC_CICR_CSSC = 0x100
LL_RCC_CIFR_LSIRDYF = 0x1
LL_RCC_CIFR_LSERDYF = 0x2
LL_RCC_CIFR_HSIRDYF = 0x4
LL_RCC_CIFR_HSERDYF = 0x8
LL_RCC_CIFR_PLLRDYF = 0x10
LL_RCC_CIFR_MSIRDYF = 0x20
LL_RCC_CIFR_HSI48RDYF = 0x40
LL_RCC_CIFR_LSECSSF = 0x80
LL_RCC_CIFR_CSSF = 0x100
LL_RCC_CSR_FWRSTF = 0x1000000
LL_RCC_CSR_OBLRSTF = 0x2000000
LL_RCC_CSR_PINRSTF = 0x4000000
LL_RCC_CSR_PORRSTF = 0x8000000
LL_RCC_CSR_SFTRSTF = 0x10000000
LL_RCC_CSR_IWDGRSTF = 0x20000000
LL_RCC_CSR_WWDGRSTF = 0x40000000
LL_RCC_CSR_LPWRRSTF = 0x80000000
LL_RCC_CIER_LSIRDYIE = 0x1
LL_RCC_CIER_LSERDYIE = 0x2
LL_RCC_CIER_HSIRDYIE = 0x4
LL_RCC_CIER_HSERDYIE = 0x8
LL_RCC_CIER_PLLRDYIE = 0x10
LL_RCC_CIER_MSIRDYIE = 0x20
LL_RCC_CIER_HSI48RDYIE = 0x40
LL_RCC_CIER_LSECSSIE = 0x80
LL_RCC_LSEDRIVE_LOW = 0x0
LL_RCC_LSEDRIVE_MEDIUMLOW = 0x800
LL_RCC_LSEDRIVE_MEDIUMHIGH = 0x1000
LL_RCC_LSEDRIVE_HIGH = 0x1800
LL_RCC_RTC_HSE_DIV_2 = 0x0
LL_RCC_RTC_HSE_DIV_4 = 0x100000
LL_RCC_RTC_HSE_DIV_8 = 0x200000
LL_RCC_RTC_HSE_DIV_16 = 0x300000
LL_RCC_MSIRANGE_0 = 0x0
LL_RCC_MSIRANGE_1 = 0x2000
LL_RCC_MSIRANGE_2 = 0x4000
LL_RCC_MSIRANGE_3 = 0x6000
LL_RCC_MSIRANGE_4 = 0x8000
LL_RCC_MSIRANGE_5 = 0xA000
LL_RCC_MSIRANGE_6 = 0xC000
LL_RCC_SYS_CLKSOURCE_MSI = 0x0
LL_RCC_SYS_CLKSOURCE_HSI = 0x1
LL_RCC_SYS_CLKSOURCE_HSE = 0x2
LL_RCC_SYS_CLKSOURCE_PLL = 0x3
LL_RCC_SYS_CLKSOURCE_STATUS_MSI = 0x0
LL_RCC_SYS_CLKSOURCE_STATUS_HSI = 0x4
LL_RCC_SYS_CLKSOURCE_STATUS_HSE = 0x8
LL_RCC_SYS_CLKSOURCE_STATUS_PLL = 0xC
LL_RCC_SYSCLK_DIV_1 = 0x0
LL_RCC_SYSCLK_DIV_2 = 0x80
LL_RCC_SYSCLK_DIV_4 = 0x90
LL_RCC_SYSCLK_DIV_8 = 0xA0
LL_RCC_SYSCLK_DIV_16 = 0xB0
LL_RCC_SYSCLK_DIV_64 = 0xC0
LL_RCC_SYSCLK_DIV_128 = 0xD0
LL_RCC_SYSCLK_DIV_256 = 0xE0
LL_RCC_SYSCLK_DIV_512 = 0xF0
LL_RCC_APB1_DIV_1 = 0x0
LL_RCC_APB1_DIV_2 = 0x400
LL_RCC_APB1_DIV_4 = 0x500
LL_RCC_APB1_DIV_8 = 0x600
LL_RCC_APB1_DIV_16 = 0x700
LL_RCC_APB2_DIV_1 = 0x0
LL_RCC_APB2_DIV_2 = 0x2000
LL_RCC_APB2_DIV_4 = 0x2800
LL_RCC_APB2_DIV_8 = 0x3000
LL_RCC_APB2_DIV_16 = 0x3800
LL_RCC_STOP_WAKEUPCLOCK_MSI = 0x0
LL_RCC_STOP_WAKEUPCLOCK_HSI = 0x8000
LL_RCC_MCO1SOURCE_NOCLOCK = 0x0
LL_RCC_MCO1SOURCE_SYSCLK = 0x1000000
LL_RCC_MCO1SOURCE_HSI = 0x2000000
LL_RCC_MCO1SOURCE_MSI = 0x3000000
LL_RCC_MCO1SOURCE_HSE = 0x4000000
LL_RCC_MCO1SOURCE_LSI = 0x6000000
LL_RCC_MCO1SOURCE_LSE = 0x7000000
LL_RCC_MCO1SOURCE_HSI48 = 0x8000000
LL_RCC_MCO1SOURCE_PLLCLK = 0x5000000
LL_RCC_MCO1_DIV_1 = 0x0
LL_RCC_MCO1_DIV_2 = 0x10000000
LL_RCC_MCO1_DIV_4 = 0x20000000
LL_RCC_MCO1_DIV_8 = 0x30000000
LL_RCC_MCO1_DIV_16 = 0x40000000
LL_RCC_PERIPH_FREQUENCY_NO = 0x0
LL_RCC_PERIPH_FREQUENCY_NA = 0xFFFFFFFF
LL_RCC_USART1_CLKSOURCE_PCLK2 = 0x30000
LL_RCC_USART1_CLKSOURCE_SYSCLK = 0x30001
LL_RCC_USART1_CLKSOURCE_HSI = 0x30002
LL_RCC_USART1_CLKSOURCE_LSE = 0x30003
LL_RCC_USART2_CLKSOURCE_PCLK1 = 0xC0000
LL_RCC_USART2_CLKSOURCE_SYSCLK = 0xC0004
LL_RCC_USART2_CLKSOURCE_HSI = 0xC0008
LL_RCC_USART2_CLKSOURCE_LSE = 0xC000C
LL_RCC_LPUART1_CLKSOURCE_PCLK1 = 0x0
LL_RCC_LPUART1_CLKSOURCE_SYSCLK = 0x400
LL_RCC_LPUART1_CLKSOURCE_HSI = 0x800
LL_RCC_LPUART1_CLKSOURCE_LSE = 0xC00
LL_RCC_I2C1_CLKSOURCE_PCLK1 = 0x30000
LL_RCC_I2C1_CLKSOURCE_SYSCLK = 0x30100
LL_RCC_I2C1_CLKSOURCE_HSI = 0x30200
# Skip LL_RCC_I2C3_CLKSOURCE_PCLK1 : no need parse
# Skip LL_RCC_I2C3_CLKSOURCE_SYSCLK : no need parse
# Skip LL_RCC_I2C3_CLKSOURCE_HSI : no need parse
LL_RCC_LPTIM1_CLKSOURCE_PCLK1 = 0x0
LL_RCC_LPTIM1_CLKSOURCE_LSI = 0x40000
LL_RCC_LPTIM1_CLKSOURCE_HSI = 0x80000
LL_RCC_LPTIM1_CLKSOURCE_LSE = 0xC0000
LL_RCC_RNG_CLKSOURCE_PLL = 0x0
LL_RCC_RNG_CLKSOURCE_HSI48 = 0x4000000
LL_RCC_USB_CLKSOURCE_PLL = 0x0
LL_RCC_USB_CLKSOURCE_HSI48 = 0x4000000
LL_RCC_USART1_CLKSOURCE = 0x3
LL_RCC_USART2_CLKSOURCE = 0xC
LL_RCC_LPUART1_CLKSOURCE = 0xC00
LL_RCC_I2C1_CLKSOURCE = 0x3000
# Skip LL_RCC_I2C3_CLKSOURCE : no need parse
LL_RCC_LPTIM1_CLKSOURCE = 0xC0000
LL_RCC_RNG_CLKSOURCE = 0x4000000
LL_RCC_USB_CLKSOURCE = 0x4000000
LL_RCC_RTC_CLKSOURCE_NONE = 0x0
LL_RCC_RTC_CLKSOURCE_LSE = 0x10000
LL_RCC_RTC_CLKSOURCE_LSI = 0x20000
LL_RCC_RTC_CLKSOURCE_HSE = 0x30000
LL_RCC_PLL_MUL_3 = 0x0
LL_RCC_PLL_MUL_4 = 0x40000
LL_RCC_PLL_MUL_6 = 0x80000
LL_RCC_PLL_MUL_8 = 0xC0000
LL_RCC_PLL_MUL_12 = 0x100000
LL_RCC_PLL_MUL_16 = 0x140000
LL_RCC_PLL_MUL_24 = 0x180000
LL_RCC_PLL_MUL_32 = 0x1C0000
LL_RCC_PLL_MUL_48 = 0x200000
LL_RCC_PLL_DIV_2 = 0x400000
LL_RCC_PLL_DIV_3 = 0x800000
LL_RCC_PLL_DIV_4 = 0xC00000
LL_RCC_PLLSOURCE_HSI = 0x0
LL_RCC_PLLSOURCE_HSE = 0x10000
# fun define LL_RCC_WriteReg(__REG__, __VALUE__) WRITE_REG(RCC->__REG__, (__VALUE__))
# fun define LL_RCC_ReadReg(__REG__) READ_REG(RCC->__REG__)
# fun define __LL_RCC_CALC_PLLCLK_FREQ(__INPUTFREQ__, __PLLMUL__,  __PLLDIV__) ((__INPUTFREQ__) * (PLLMulTable[(__PLLMUL__) >> RCC_CFGR_PLLMUL_Pos]) / (((__PLLDIV__) >> RCC_CFGR_PLLDIV_Pos)+1UL))
# fun define __LL_RCC_CALC_HCLK_FREQ(__SYSCLKFREQ__, __AHBPRESCALER__) ((__SYSCLKFREQ__) >> AHBPrescTable[((__AHBPRESCALER__) & RCC_CFGR_HPRE) >>  RCC_CFGR_HPRE_Pos])
# fun define __LL_RCC_CALC_PCLK1_FREQ(__HCLKFREQ__, __APB1PRESCALER__) ((__HCLKFREQ__) >> APBPrescTable[(__APB1PRESCALER__) >>  RCC_CFGR_PPRE1_Pos])
# fun define __LL_RCC_CALC_PCLK2_FREQ(__HCLKFREQ__, __APB2PRESCALER__) ((__HCLKFREQ__) >> APBPrescTable[(__APB2PRESCALER__) >>  RCC_CFGR_PPRE2_Pos])
# fun define __LL_RCC_CALC_MSI_FREQ(__MSIRANGE__) (32768UL * ( 1UL << (((__MSIRANGE__) >> RCC_ICSCR_MSIRANGE_Pos) + 1UL) ))
# struct LL_RCC_ClocksTypeDef

class LL_RCC_ClocksTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('SYSCLK_Frequency',	ctypes.c_uint32),
		('HCLK_Frequency',	ctypes.c_uint32),
		('PCLK1_Frequency',	ctypes.c_uint32),
		('PCLK2_Frequency',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_rng.h : 

# empty define STM32L0xx_LL_RNG_H
LL_RNG_SR_DRDY = 0x1
LL_RNG_SR_CECS = 0x2
LL_RNG_SR_SECS = 0x4
LL_RNG_SR_CEIS = 0x20
LL_RNG_SR_SEIS = 0x40
LL_RNG_CR_IE = 0x8
# fun define LL_RNG_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_RNG_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# ----------------------------------------

# file stm32l0xx_ll_rtc.h : 

# empty define STM32L0xx_LL_RTC_H
RTC_LL_INIT_MASK = 0xFFFFFFFF
RTC_LL_RSF_MASK = 0xFFFFFF5F
RTC_WRITE_PROTECTION_DISABLE = 0xFF
RTC_WRITE_PROTECTION_ENABLE_1 = 0xCA
RTC_WRITE_PROTECTION_ENABLE_2 = 0x53
RTC_OFFSET_WEEKDAY = 0x18
RTC_OFFSET_DAY = 0x10
RTC_OFFSET_MONTH = 0x8
RTC_OFFSET_HOUR = 0x10
RTC_OFFSET_MINUTE = 0x8
LL_RTC_FORMAT_BIN = 0x0
LL_RTC_FORMAT_BCD = 0x1
LL_RTC_ALMA_DATEWEEKDAYSEL_DATE = 0x0
LL_RTC_ALMA_DATEWEEKDAYSEL_WEEKDAY = 0x40000000
LL_RTC_ALMB_DATEWEEKDAYSEL_DATE = 0x0
LL_RTC_ALMB_DATEWEEKDAYSEL_WEEKDAY = 0x40000000
# Skip LL_RTC_ISR_ITSF : no need parse
LL_RTC_ISR_RECALPF = 0x10000
# Skip LL_RTC_ISR_TAMP3F : no need parse
LL_RTC_ISR_TAMP2F = 0x4000
LL_RTC_ISR_TAMP1F = 0x2000
LL_RTC_ISR_TSOVF = 0x1000
LL_RTC_ISR_TSF = 0x800
LL_RTC_ISR_WUTF = 0x400
LL_RTC_ISR_ALRBF = 0x200
LL_RTC_ISR_ALRAF = 0x100
LL_RTC_ISR_INITF = 0x40
LL_RTC_ISR_RSF = 0x20
LL_RTC_ISR_INITS = 0x10
LL_RTC_ISR_SHPF = 0x8
LL_RTC_ISR_WUTWF = 0x4
LL_RTC_ISR_ALRBWF = 0x2
LL_RTC_ISR_ALRAWF = 0x1
LL_RTC_CR_TSIE = 0x8000
LL_RTC_CR_WUTIE = 0x4000
LL_RTC_CR_ALRBIE = 0x2000
LL_RTC_CR_ALRAIE = 0x1000
# Skip LL_RTC_TAMPCR_TAMP3IE : no need parse
LL_RTC_TAMPCR_TAMP2IE = 0x80000
LL_RTC_TAMPCR_TAMP1IE = 0x10000
LL_RTC_TAMPCR_TAMPIE = 0x4
LL_RTC_WEEKDAY_MONDAY = 0x1
LL_RTC_WEEKDAY_TUESDAY = 0x2
LL_RTC_WEEKDAY_WEDNESDAY = 0x3
LL_RTC_WEEKDAY_THURSDAY = 0x4
LL_RTC_WEEKDAY_FRIDAY = 0x5
LL_RTC_WEEKDAY_SATURDAY = 0x6
LL_RTC_WEEKDAY_SUNDAY = 0x7
LL_RTC_MONTH_JANUARY = 0x1
LL_RTC_MONTH_FEBRUARY = 0x2
LL_RTC_MONTH_MARCH = 0x3
LL_RTC_MONTH_APRIL = 0x4
LL_RTC_MONTH_MAY = 0x5
LL_RTC_MONTH_JUNE = 0x6
LL_RTC_MONTH_JULY = 0x7
LL_RTC_MONTH_AUGUST = 0x8
LL_RTC_MONTH_SEPTEMBER = 0x9
LL_RTC_MONTH_OCTOBER = 0x10
LL_RTC_MONTH_NOVEMBER = 0x11
LL_RTC_MONTH_DECEMBER = 0x12
LL_RTC_HOURFORMAT_24HOUR = 0x0
LL_RTC_HOURFORMAT_AMPM = 0x40
LL_RTC_ALARMOUT_DISABLE = 0x0
LL_RTC_ALARMOUT_ALMA = 0x200000
LL_RTC_ALARMOUT_ALMB = 0x400000
LL_RTC_ALARMOUT_WAKEUP = 0x600000
LL_RTC_ALARM_OUTPUTTYPE_OPENDRAIN = 0x0
LL_RTC_ALARM_OUTPUTTYPE_PUSHPULL = 0x1
LL_RTC_OUTPUTPOLARITY_PIN_HIGH = 0x0
LL_RTC_OUTPUTPOLARITY_PIN_LOW = 0x100000
LL_RTC_TIME_FORMAT_AM_OR_24 = 0x0
LL_RTC_TIME_FORMAT_PM = 0x400000
LL_RTC_SHIFT_SECOND_DELAY = 0x0
LL_RTC_SHIFT_SECOND_ADVANCE = 0x80000000
LL_RTC_ALMA_MASK_NONE = 0x0
LL_RTC_ALMA_MASK_DATEWEEKDAY = 0x80000000
LL_RTC_ALMA_MASK_HOURS = 0x800000
LL_RTC_ALMA_MASK_MINUTES = 0x8000
LL_RTC_ALMA_MASK_SECONDS = 0x80
LL_RTC_ALMA_MASK_ALL = 0x80808080
LL_RTC_ALMA_TIME_FORMAT_AM = 0x0
LL_RTC_ALMA_TIME_FORMAT_PM = 0x400000
LL_RTC_ALMB_MASK_NONE = 0x0
LL_RTC_ALMB_MASK_DATEWEEKDAY = 0x80000000
LL_RTC_ALMB_MASK_HOURS = 0x800000
LL_RTC_ALMB_MASK_MINUTES = 0x8000
LL_RTC_ALMB_MASK_SECONDS = 0x80
LL_RTC_ALMB_MASK_ALL = 0x80808080
LL_RTC_ALMB_TIME_FORMAT_AM = 0x0
LL_RTC_ALMB_TIME_FORMAT_PM = 0x400000
LL_RTC_TIMESTAMP_EDGE_RISING = 0x0
LL_RTC_TIMESTAMP_EDGE_FALLING = 0x8
LL_RTC_TS_TIME_FORMAT_AM = 0x0
LL_RTC_TS_TIME_FORMAT_PM = 0x400000
LL_RTC_TAMPER_1 = 0x1
LL_RTC_TAMPER_2 = 0x8
# Skip LL_RTC_TAMPER_3 : no need parse
LL_RTC_TAMPER_MASK_TAMPER1 = 0x40000
LL_RTC_TAMPER_MASK_TAMPER2 = 0x200000
# Skip LL_RTC_TAMPER_MASK_TAMPER3 : no need parse
LL_RTC_TAMPER_NOERASE_TAMPER1 = 0x20000
LL_RTC_TAMPER_NOERASE_TAMPER2 = 0x100000
# Skip LL_RTC_TAMPER_NOERASE_TAMPER3 : no need parse
LL_RTC_TAMPER_DURATION_1RTCCLK = 0x0
LL_RTC_TAMPER_DURATION_2RTCCLK = 0x2000
LL_RTC_TAMPER_DURATION_4RTCCLK = 0x4000
LL_RTC_TAMPER_DURATION_8RTCCLK = 0x6000
LL_RTC_TAMPER_FILTER_DISABLE = 0x0
LL_RTC_TAMPER_FILTER_2SAMPLE = 0x800
LL_RTC_TAMPER_FILTER_4SAMPLE = 0x1000
LL_RTC_TAMPER_FILTER_8SAMPLE = 0x1800
LL_RTC_TAMPER_SAMPLFREQDIV_32768 = 0x0
LL_RTC_TAMPER_SAMPLFREQDIV_16384 = 0x100
LL_RTC_TAMPER_SAMPLFREQDIV_8192 = 0x200
LL_RTC_TAMPER_SAMPLFREQDIV_4096 = 0x300
LL_RTC_TAMPER_SAMPLFREQDIV_2048 = 0x400
LL_RTC_TAMPER_SAMPLFREQDIV_1024 = 0x500
LL_RTC_TAMPER_SAMPLFREQDIV_512 = 0x600
LL_RTC_TAMPER_SAMPLFREQDIV_256 = 0x700
LL_RTC_TAMPER_ACTIVELEVEL_TAMP1 = 0x2
LL_RTC_TAMPER_ACTIVELEVEL_TAMP2 = 0x10
# Skip LL_RTC_TAMPER_ACTIVELEVEL_TAMP3 : no need parse
LL_RTC_WAKEUPCLOCK_DIV_16 = 0x0
LL_RTC_WAKEUPCLOCK_DIV_8 = 0x1
LL_RTC_WAKEUPCLOCK_DIV_4 = 0x2
LL_RTC_WAKEUPCLOCK_DIV_2 = 0x3
LL_RTC_WAKEUPCLOCK_CKSPRE = 0x4
LL_RTC_WAKEUPCLOCK_CKSPRE_WUT = 0x6
LL_RTC_BKP_DR0 = 0x0
LL_RTC_BKP_DR1 = 0x1
LL_RTC_BKP_DR2 = 0x2
LL_RTC_BKP_DR3 = 0x3
LL_RTC_BKP_DR4 = 0x4
LL_RTC_CALIB_OUTPUT_NONE = 0x0
LL_RTC_CALIB_OUTPUT_1HZ = 0x880000
LL_RTC_CALIB_OUTPUT_512HZ = 0x800000
LL_RTC_CALIB_INSERTPULSE_NONE = 0x0
LL_RTC_CALIB_INSERTPULSE_SET = 0x8000
LL_RTC_CALIB_PERIOD_32SEC = 0x0
LL_RTC_CALIB_PERIOD_16SEC = 0x2000
LL_RTC_CALIB_PERIOD_8SEC = 0x4000
# fun define LL_RTC_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_RTC_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# fun define __LL_RTC_CONVERT_BIN2BCD(__VALUE__) (uint8_t)((((__VALUE__) / 10U) << 4U) | ((__VALUE__) % 10U))
# fun define __LL_RTC_CONVERT_BCD2BIN(__VALUE__) (uint8_t)((((uint8_t)((__VALUE__) & (uint8_t)0xF0U) >> (uint8_t)0x4U) * 10U ) + ((__VALUE__) & (uint8_t)0x0FU))
# fun define __LL_RTC_GET_WEEKDAY(__RTC_DATE__) (((__RTC_DATE__) >> RTC_OFFSET_WEEKDAY) & 0x000000FFU)
# fun define __LL_RTC_GET_YEAR(__RTC_DATE__) ((__RTC_DATE__) & 0x000000FFU)
# fun define __LL_RTC_GET_MONTH(__RTC_DATE__) (((__RTC_DATE__) >>RTC_OFFSET_MONTH) & 0x000000FFU)
# fun define __LL_RTC_GET_DAY(__RTC_DATE__) (((__RTC_DATE__) >>RTC_OFFSET_DAY) & 0x000000FFU)
# fun define __LL_RTC_GET_HOUR(__RTC_TIME__) (((__RTC_TIME__) >> RTC_OFFSET_HOUR) & 0x000000FFU)
# fun define __LL_RTC_GET_MINUTE(__RTC_TIME__) (((__RTC_TIME__) >> RTC_OFFSET_MINUTE) & 0x000000FFU)
# fun define __LL_RTC_GET_SECOND(__RTC_TIME__) ((__RTC_TIME__) & 0x000000FFU)
# struct LL_RTC_InitTypeDef

class LL_RTC_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('HourFormat',	ctypes.c_uint32),
		('AsynchPrescaler',	ctypes.c_uint32),
		('SynchPrescaler',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LL_RTC_TimeTypeDef

class LL_RTC_TimeTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('TimeFormat',	ctypes.c_uint32),
		('Hours',	ctypes.c_uint8),
		('Minutes',	ctypes.c_uint8),
		('Seconds',	ctypes.c_uint8),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LL_RTC_DateTypeDef

class LL_RTC_DateTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('WeekDay',	ctypes.c_uint8),
		('Month',	ctypes.c_uint8),
		('Day',	ctypes.c_uint8),
		('Year',	ctypes.c_uint8),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LL_RTC_AlarmTypeDef
# struct LL_RTC_AlarmTypeDef : field is class : AlarmTime
# ----------------------------------------

# file stm32l0xx_ll_spi.h : 

# empty define STM32L0xx_LL_SPI_H
LL_SPI_SR_RXNE = 0x1
LL_SPI_SR_TXE = 0x2
LL_SPI_SR_BSY = 0x80
LL_SPI_SR_CRCERR = 0x10
LL_SPI_SR_MODF = 0x20
LL_SPI_SR_OVR = 0x40
LL_SPI_SR_FRE = 0x100
LL_SPI_CR2_RXNEIE = 0x40
LL_SPI_CR2_TXEIE = 0x80
LL_SPI_CR2_ERRIE = 0x20
LL_SPI_MODE_MASTER = 0x104
LL_SPI_MODE_SLAVE = 0x0
LL_SPI_PROTOCOL_MOTOROLA = 0x0
LL_SPI_PROTOCOL_TI = 0x10
LL_SPI_PHASE_1EDGE = 0x0
LL_SPI_PHASE_2EDGE = 0x1
LL_SPI_POLARITY_LOW = 0x0
LL_SPI_POLARITY_HIGH = 0x2
LL_SPI_BAUDRATEPRESCALER_DIV2 = 0x0
LL_SPI_BAUDRATEPRESCALER_DIV4 = 0x8
LL_SPI_BAUDRATEPRESCALER_DIV8 = 0x10
LL_SPI_BAUDRATEPRESCALER_DIV16 = 0x18
LL_SPI_BAUDRATEPRESCALER_DIV32 = 0x20
LL_SPI_BAUDRATEPRESCALER_DIV64 = 0x28
LL_SPI_BAUDRATEPRESCALER_DIV128 = 0x30
LL_SPI_BAUDRATEPRESCALER_DIV256 = 0x38
LL_SPI_LSB_FIRST = 0x80
LL_SPI_MSB_FIRST = 0x0
LL_SPI_FULL_DUPLEX = 0x0
LL_SPI_SIMPLEX_RX = 0x400
LL_SPI_HALF_DUPLEX_RX = 0x8000
LL_SPI_HALF_DUPLEX_TX = 0xC000
LL_SPI_NSS_SOFT = 0x200
LL_SPI_NSS_HARD_INPUT = 0x0
LL_SPI_NSS_HARD_OUTPUT = 0x40000
LL_SPI_DATAWIDTH_8BIT = 0x0
LL_SPI_DATAWIDTH_16BIT = 0x800
LL_SPI_CRCCALCULATION_DISABLE = 0x0
LL_SPI_CRCCALCULATION_ENABLE = 0x2000
# fun define LL_SPI_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_SPI_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
LL_I2S_SR_RXNE = 0x1
LL_I2S_SR_TXE = 0x2
LL_I2S_SR_BSY = 0x80
LL_I2S_SR_UDR = 0x8
LL_I2S_SR_OVR = 0x40
LL_I2S_SR_FRE = 0x100
LL_I2S_CR2_RXNEIE = 0x40
LL_I2S_CR2_TXEIE = 0x80
LL_I2S_CR2_ERRIE = 0x20
LL_I2S_DATAFORMAT_16B = 0x0
LL_I2S_DATAFORMAT_16B_EXTENDED = 0x1
LL_I2S_DATAFORMAT_24B = 0x3
LL_I2S_DATAFORMAT_32B = 0x5
LL_I2S_POLARITY_LOW = 0x0
LL_I2S_POLARITY_HIGH = 0x8
LL_I2S_STANDARD_PHILIPS = 0x0
LL_I2S_STANDARD_MSB = 0x10
LL_I2S_STANDARD_LSB = 0x20
LL_I2S_STANDARD_PCM_SHORT = 0x30
LL_I2S_STANDARD_PCM_LONG = 0xB0
LL_I2S_MODE_SLAVE_TX = 0x0
LL_I2S_MODE_SLAVE_RX = 0x100
LL_I2S_MODE_MASTER_TX = 0x200
LL_I2S_MODE_MASTER_RX = 0x300
LL_I2S_PRESCALER_PARITY_EVEN = 0x0
LL_I2S_PRESCALER_PARITY_ODD = 0x1
LL_I2S_MCLK_OUTPUT_DISABLE = 0x0
LL_I2S_MCLK_OUTPUT_ENABLE = 0x200
LL_I2S_AUDIOFREQ_192K = 0x2EE00
LL_I2S_AUDIOFREQ_96K = 0x17700
LL_I2S_AUDIOFREQ_48K = 0xBB80
LL_I2S_AUDIOFREQ_44K = 0xAC44
LL_I2S_AUDIOFREQ_32K = 0x7D00
LL_I2S_AUDIOFREQ_22K = 0x5622
LL_I2S_AUDIOFREQ_16K = 0x3E80
LL_I2S_AUDIOFREQ_11K = 0x2B11
LL_I2S_AUDIOFREQ_8K = 0x1F40
LL_I2S_AUDIOFREQ_DEFAULT = 0x2
# fun define LL_I2S_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_I2S_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# struct LL_SPI_InitTypeDef

class LL_SPI_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('TransferDirection',	ctypes.c_uint32),
		('Mode',	ctypes.c_uint32),
		('DataWidth',	ctypes.c_uint32),
		('ClockPolarity',	ctypes.c_uint32),
		('ClockPhase',	ctypes.c_uint32),
		('NSS',	ctypes.c_uint32),
		('BaudRate',	ctypes.c_uint32),
		('BitOrder',	ctypes.c_uint32),
		('CRCCalculation',	ctypes.c_uint32),
		('CRCPoly',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LL_I2S_InitTypeDef

class LL_I2S_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Mode',	ctypes.c_uint32),
		('Standard',	ctypes.c_uint32),
		('DataFormat',	ctypes.c_uint32),
		('MCLKOutput',	ctypes.c_uint32),
		('AudioFreq',	ctypes.c_uint32),
		('ClockPolarity',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_system.h : 

# empty define __STM32L0xx_LL_SYSTEM_H
FLASH_PDKEY1 = 0x4152637
FLASH_PDKEY2 = 0xFAFBFCFD
LL_SYSCFG_REMAP_FLASH = 0x0
LL_SYSCFG_REMAP_SYSTEMFLASH = 0x1
LL_SYSCFG_REMAP_SRAM = 0x3
# Skip LL_SYSCFG_BANKMODE_BANK1 : no need parse
# Skip LL_SYSCFG_BANKMODE_BANK2 : no need parse
LL_SYSCFG_BOOTMODE_FLASH = 0x0
LL_SYSCFG_BOOTMODE_SYSTEMFLASH = 0x100
LL_SYSCFG_BOOTMODE_SRAM = 0x300
LL_SYSCFG_CAPA_VLCD2_PB2 = 0x2
LL_SYSCFG_CAPA_VLCD1_PB12 = 0x4
LL_SYSCFG_CAPA_VLCD3_PB0 = 0x8
# Skip LL_SYSCFG_CAPA_VLCD1_PE11 : no need parse
# Skip LL_SYSCFG_CAPA_VLCD3_PE12 : no need parse
LL_SYSCFG_I2C_FASTMODEPLUS_PB6 = 0x100
LL_SYSCFG_I2C_FASTMODEPLUS_PB7 = 0x200
LL_SYSCFG_I2C_FASTMODEPLUS_PB8 = 0x400
LL_SYSCFG_I2C_FASTMODEPLUS_PB9 = 0x800
LL_SYSCFG_I2C_FASTMODEPLUS_I2C1 = 0x1000
LL_SYSCFG_I2C_FASTMODEPLUS_I2C2 = 0x2000
# Skip LL_SYSCFG_I2C_FASTMODEPLUS_I2C3 : no need parse
LL_SYSCFG_VREFINT_CONNECT_NONE = 0x0
LL_SYSCFG_VREFINT_CONNECT_IO1 = 0x10
LL_SYSCFG_VREFINT_CONNECT_IO2 = 0x20
LL_SYSCFG_VREFINT_CONNECT_IO1_IO2 = 0x30
LL_SYSCFG_EXTI_PORTA = 0x0
LL_SYSCFG_EXTI_PORTB = 0x1
LL_SYSCFG_EXTI_PORTC = 0x2
LL_SYSCFG_EXTI_PORTD = 0x3
# Skip LL_SYSCFG_EXTI_PORTE : no need parse
LL_SYSCFG_EXTI_PORTH = 0x5
LL_SYSCFG_EXTI_LINE0 = 0x0
LL_SYSCFG_EXTI_LINE1 = 0x40000
LL_SYSCFG_EXTI_LINE2 = 0x80000
LL_SYSCFG_EXTI_LINE3 = 0xC0000
LL_SYSCFG_EXTI_LINE4 = 0x1
LL_SYSCFG_EXTI_LINE5 = 0x40001
LL_SYSCFG_EXTI_LINE6 = 0x80001
LL_SYSCFG_EXTI_LINE7 = 0xC0001
LL_SYSCFG_EXTI_LINE8 = 0x2
LL_SYSCFG_EXTI_LINE9 = 0x40002
LL_SYSCFG_EXTI_LINE10 = 0x80002
LL_SYSCFG_EXTI_LINE11 = 0xC0002
LL_SYSCFG_EXTI_LINE12 = 0x3
LL_SYSCFG_EXTI_LINE13 = 0x40003
LL_SYSCFG_EXTI_LINE14 = 0x80003
LL_SYSCFG_EXTI_LINE15 = 0xC0003
LL_DBGMCU_APB1_GRP1_TIM2_STOP = 0x1
# Skip LL_DBGMCU_APB1_GRP1_TIM3_STOP : no need parse
LL_DBGMCU_APB1_GRP1_TIM6_STOP = 0x10
# Skip LL_DBGMCU_APB1_GRP1_TIM7_STOP : no need parse
LL_DBGMCU_APB1_GRP1_RTC_STOP = 0x400
LL_DBGMCU_APB1_GRP1_WWDG_STOP = 0x800
LL_DBGMCU_APB1_GRP1_IWDG_STOP = 0x1000
LL_DBGMCU_APB1_GRP1_I2C1_STOP = 0x200000
LL_DBGMCU_APB1_GRP1_I2C2_STOP = 0x400000
# Skip LL_DBGMCU_APB1_GRP1_I2C3_STOP : no need parse
LL_DBGMCU_APB1_GRP1_LPTIM1_STOP = 0x80000000
LL_DBGMCU_APB2_GRP1_TIM22_STOP = 0x20
LL_DBGMCU_APB2_GRP1_TIM21_STOP = 0x4
LL_FLASH_LATENCY_0 = 0x0
LL_FLASH_LATENCY_1 = 0x1
# ----------------------------------------

# file stm32l0xx_ll_tim.h : 

# empty define __STM32L0xx_LL_TIM_H
TIMx_OR_RMP_SHIFT = 0x10
TIMx_OR_RMP_MASK = 0xFFFF
TIM2_OR_RMP_MASK = 0x1F0000
TIM21_OR_RMP_MASK = 0x3F0000
TIM22_OR_RMP_MASK = 0xF0000
# Skip TIM3_OR_RMP_MASK : no need parse
# fun define TIM_GET_CHANNEL_INDEX( __CHANNEL__) \
#(((__CHANNEL__) == LL_TIM_CHANNEL_CH1) ? 0U :\
#((__CHANNEL__) == LL_TIM_CHANNEL_CH2) ? 2U :\
#((__CHANNEL__) == LL_TIM_CHANNEL_CH3) ? 4U : 6U)
LL_TIM_SR_UIF = 0x1
LL_TIM_SR_CC1IF = 0x2
LL_TIM_SR_CC2IF = 0x4
LL_TIM_SR_CC3IF = 0x8
LL_TIM_SR_CC4IF = 0x10
LL_TIM_SR_TIF = 0x40
LL_TIM_SR_CC1OF = 0x200
LL_TIM_SR_CC2OF = 0x400
LL_TIM_SR_CC3OF = 0x800
LL_TIM_SR_CC4OF = 0x1000
LL_TIM_DIER_UIE = 0x1
LL_TIM_DIER_CC1IE = 0x2
LL_TIM_DIER_CC2IE = 0x4
LL_TIM_DIER_CC3IE = 0x8
LL_TIM_DIER_CC4IE = 0x10
LL_TIM_DIER_TIE = 0x40
LL_TIM_UPDATESOURCE_REGULAR = 0x0
LL_TIM_UPDATESOURCE_COUNTER = 0x4
LL_TIM_ONEPULSEMODE_SINGLE = 0x8
LL_TIM_ONEPULSEMODE_REPETITIVE = 0x0
LL_TIM_COUNTERMODE_UP = 0x0
LL_TIM_COUNTERMODE_DOWN = 0x10
LL_TIM_COUNTERMODE_CENTER_UP = 0x20
LL_TIM_COUNTERMODE_CENTER_DOWN = 0x40
LL_TIM_COUNTERMODE_CENTER_UP_DOWN = 0x60
LL_TIM_CLOCKDIVISION_DIV1 = 0x0
LL_TIM_CLOCKDIVISION_DIV2 = 0x100
LL_TIM_CLOCKDIVISION_DIV4 = 0x200
LL_TIM_COUNTERDIRECTION_UP = 0x0
LL_TIM_COUNTERDIRECTION_DOWN = 0x10
LL_TIM_CCDMAREQUEST_CC = 0x0
LL_TIM_CCDMAREQUEST_UPDATE = 0x8
LL_TIM_CHANNEL_CH1 = 0x1
LL_TIM_CHANNEL_CH2 = 0x10
LL_TIM_CHANNEL_CH3 = 0x100
LL_TIM_CHANNEL_CH4 = 0x1000
LL_TIM_OCSTATE_DISABLE = 0x0
LL_TIM_OCSTATE_ENABLE = 0x1
LL_TIM_OCMODE_FROZEN = 0x0
LL_TIM_OCMODE_ACTIVE = 0x10
LL_TIM_OCMODE_INACTIVE = 0x20
LL_TIM_OCMODE_TOGGLE = 0x30
LL_TIM_OCMODE_FORCED_INACTIVE = 0x40
LL_TIM_OCMODE_FORCED_ACTIVE = 0x50
LL_TIM_OCMODE_PWM1 = 0x60
LL_TIM_OCMODE_PWM2 = 0x70
LL_TIM_OCPOLARITY_HIGH = 0x0
LL_TIM_OCPOLARITY_LOW = 0x2
LL_TIM_ACTIVEINPUT_DIRECTTI = 0x10000
LL_TIM_ACTIVEINPUT_INDIRECTTI = 0x20000
LL_TIM_ACTIVEINPUT_TRC = 0x30000
LL_TIM_ICPSC_DIV1 = 0x0
LL_TIM_ICPSC_DIV2 = 0x40000
LL_TIM_ICPSC_DIV4 = 0x80000
LL_TIM_ICPSC_DIV8 = 0xC0000
LL_TIM_IC_FILTER_FDIV1 = 0x0
LL_TIM_IC_FILTER_FDIV1_N2 = 0x100000
LL_TIM_IC_FILTER_FDIV1_N4 = 0x200000
LL_TIM_IC_FILTER_FDIV1_N8 = 0x300000
LL_TIM_IC_FILTER_FDIV2_N6 = 0x400000
LL_TIM_IC_FILTER_FDIV2_N8 = 0x500000
LL_TIM_IC_FILTER_FDIV4_N6 = 0x600000
LL_TIM_IC_FILTER_FDIV4_N8 = 0x700000
LL_TIM_IC_FILTER_FDIV8_N6 = 0x800000
LL_TIM_IC_FILTER_FDIV8_N8 = 0x900000
LL_TIM_IC_FILTER_FDIV16_N5 = 0xA00000
LL_TIM_IC_FILTER_FDIV16_N6 = 0xB00000
LL_TIM_IC_FILTER_FDIV16_N8 = 0xC00000
LL_TIM_IC_FILTER_FDIV32_N5 = 0xD00000
LL_TIM_IC_FILTER_FDIV32_N6 = 0xE00000
LL_TIM_IC_FILTER_FDIV32_N8 = 0xF00000
LL_TIM_IC_POLARITY_RISING = 0x0
LL_TIM_IC_POLARITY_FALLING = 0x2
LL_TIM_IC_POLARITY_BOTHEDGE = 0xA
LL_TIM_CLOCKSOURCE_INTERNAL = 0x0
LL_TIM_CLOCKSOURCE_EXT_MODE1 = 0x7
LL_TIM_CLOCKSOURCE_EXT_MODE2 = 0x4000
LL_TIM_ENCODERMODE_X2_TI1 = 0x1
LL_TIM_ENCODERMODE_X2_TI2 = 0x2
LL_TIM_ENCODERMODE_X4_TI12 = 0x3
LL_TIM_TRGO_RESET = 0x0
LL_TIM_TRGO_ENABLE = 0x10
LL_TIM_TRGO_UPDATE = 0x20
LL_TIM_TRGO_CC1IF = 0x30
LL_TIM_TRGO_OC1REF = 0x40
LL_TIM_TRGO_OC2REF = 0x50
LL_TIM_TRGO_OC3REF = 0x60
LL_TIM_TRGO_OC4REF = 0x70
LL_TIM_SLAVEMODE_DISABLED = 0x0
LL_TIM_SLAVEMODE_RESET = 0x4
LL_TIM_SLAVEMODE_GATED = 0x5
LL_TIM_SLAVEMODE_TRIGGER = 0x6
LL_TIM_TS_ITR0 = 0x0
LL_TIM_TS_ITR1 = 0x10
LL_TIM_TS_ITR2 = 0x20
LL_TIM_TS_ITR3 = 0x30
LL_TIM_TS_TI1F_ED = 0x40
LL_TIM_TS_TI1FP1 = 0x50
LL_TIM_TS_TI2FP2 = 0x60
LL_TIM_TS_ETRF = 0x70
LL_TIM_ETR_POLARITY_NONINVERTED = 0x0
LL_TIM_ETR_POLARITY_INVERTED = 0x8000
LL_TIM_ETR_PRESCALER_DIV1 = 0x0
LL_TIM_ETR_PRESCALER_DIV2 = 0x1000
LL_TIM_ETR_PRESCALER_DIV4 = 0x2000
LL_TIM_ETR_PRESCALER_DIV8 = 0x3000
LL_TIM_ETR_FILTER_FDIV1 = 0x0
LL_TIM_ETR_FILTER_FDIV1_N2 = 0x100
LL_TIM_ETR_FILTER_FDIV1_N4 = 0x200
LL_TIM_ETR_FILTER_FDIV1_N8 = 0x300
LL_TIM_ETR_FILTER_FDIV2_N6 = 0x400
LL_TIM_ETR_FILTER_FDIV2_N8 = 0x500
LL_TIM_ETR_FILTER_FDIV4_N6 = 0x600
LL_TIM_ETR_FILTER_FDIV4_N8 = 0x700
LL_TIM_ETR_FILTER_FDIV8_N6 = 0x800
LL_TIM_ETR_FILTER_FDIV8_N8 = 0x900
LL_TIM_ETR_FILTER_FDIV16_N5 = 0xA00
LL_TIM_ETR_FILTER_FDIV16_N6 = 0xB00
LL_TIM_ETR_FILTER_FDIV16_N8 = 0xC00
LL_TIM_ETR_FILTER_FDIV32_N5 = 0xD00
LL_TIM_ETR_FILTER_FDIV32_N6 = 0xE00
LL_TIM_ETR_FILTER_FDIV32_N8 = 0xF00
LL_TIM_DMABURST_BASEADDR_CR1 = 0x0
LL_TIM_DMABURST_BASEADDR_CR2 = 0x1
LL_TIM_DMABURST_BASEADDR_SMCR = 0x2
LL_TIM_DMABURST_BASEADDR_DIER = 0x3
LL_TIM_DMABURST_BASEADDR_SR = 0x4
LL_TIM_DMABURST_BASEADDR_EGR = 0x5
LL_TIM_DMABURST_BASEADDR_CCMR1 = 0x6
LL_TIM_DMABURST_BASEADDR_CCMR2 = 0x7
LL_TIM_DMABURST_BASEADDR_CCER = 0x8
LL_TIM_DMABURST_BASEADDR_CNT = 0x9
LL_TIM_DMABURST_BASEADDR_PSC = 0xA
LL_TIM_DMABURST_BASEADDR_ARR = 0xB
LL_TIM_DMABURST_BASEADDR_RCR = 0xC
LL_TIM_DMABURST_BASEADDR_CCR1 = 0xD
LL_TIM_DMABURST_BASEADDR_CCR2 = 0xE
LL_TIM_DMABURST_BASEADDR_CCR3 = 0xF
LL_TIM_DMABURST_BASEADDR_CCR4 = 0x10
LL_TIM_DMABURST_BASEADDR_BDTR = 0x11
LL_TIM_DMABURST_BASEADDR_CCMR3 = 0x12
LL_TIM_DMABURST_BASEADDR_CCR5 = 0x13
LL_TIM_DMABURST_BASEADDR_CCR6 = 0x14
LL_TIM_DMABURST_BASEADDR_OR1 = 0x15
LL_TIM_DMABURST_BASEADDR_OR2 = 0x16
LL_TIM_DMABURST_BASEADDR_OR3 = 0x17
LL_TIM_DMABURST_LENGTH_1TRANSFER = 0x0
LL_TIM_DMABURST_LENGTH_2TRANSFERS = 0x100
LL_TIM_DMABURST_LENGTH_3TRANSFERS = 0x200
LL_TIM_DMABURST_LENGTH_4TRANSFERS = 0x300
LL_TIM_DMABURST_LENGTH_5TRANSFERS = 0x400
LL_TIM_DMABURST_LENGTH_6TRANSFERS = 0x500
LL_TIM_DMABURST_LENGTH_7TRANSFERS = 0x600
LL_TIM_DMABURST_LENGTH_8TRANSFERS = 0x700
LL_TIM_DMABURST_LENGTH_9TRANSFERS = 0x800
LL_TIM_DMABURST_LENGTH_10TRANSFERS = 0x900
LL_TIM_DMABURST_LENGTH_11TRANSFERS = 0xA00
LL_TIM_DMABURST_LENGTH_12TRANSFERS = 0xB00
LL_TIM_DMABURST_LENGTH_13TRANSFERS = 0xC00
LL_TIM_DMABURST_LENGTH_14TRANSFERS = 0xD00
LL_TIM_DMABURST_LENGTH_15TRANSFERS = 0xE00
LL_TIM_DMABURST_LENGTH_16TRANSFERS = 0xF00
LL_TIM_DMABURST_LENGTH_17TRANSFERS = 0x1000
LL_TIM_DMABURST_LENGTH_18TRANSFERS = 0x1100
LL_TIM_TIM2_ETR_RMP_GPIO = 0x1F0000
# Skip LL_TIM_TIM2_ETR_RMP_HSI : no need parse
LL_TIM_TIM2_ETR_RMP_HSI48 = 0x1F0004
LL_TIM_TIM2_ETR_RMP_LSE = 0x1F0005
LL_TIM_TIM2_ETR_RMP_COMP2 = 0x1F0006
LL_TIM_TIM2_ETR_RMP_COMP1 = 0x1F0007
LL_TIM_TIM2_TI4_RMP_GPIO = 0x1F0000
LL_TIM_TIM2_TI4_RMP_COMP2 = 0x1F0008
LL_TIM_TIM2_TI4_RMP_COMP1 = 0x1F0010
# Skip LL_TIM_TIM3_ETR_RMP_GPIO : no need parse
# Skip LL_TIM_TIM3_ETR_RMP_HSI48DIV6 : no need parse
# Skip LL_TIM_TIM3_TI_RMP_TI1_USB_SOF : no need parse
# Skip LL_TIM_TIM3_TI_RMP_TI1_GPIO : no need parse
# Skip LL_TIM_TIM3_TI_RMP_TI2_GPIO_DEF : no need parse
# Skip LL_TIM_TIM3_TI_RMP_TI2_GPIOB5_AF4 : no need parse
# Skip LL_TIM_TIM3_TI_RMP_TI4_GPIO_DEF : no need parse
# Skip LL_TIM_TIM3_TI_RMP_TI4_GPIOC9_AF2 : no need parse
LL_TIM_TIM21_ETR_RMP_GPIO = 0x3F0000
LL_TIM_TIM21_ETR_RMP_COMP2 = 0x3F0001
LL_TIM_TIM21_ETR_RMP_COMP1 = 0x3F0002
LL_TIM_TIM21_ETR_RMP_LSE = 0x3F0003
LL_TIM_TIM21_TI1_RMP_GPIO = 0x3F0000
LL_TIM_TIM21_TI1_RMP_RTC_WK = 0x3F0004
LL_TIM_TIM21_TI1_RMP_HSE_RTC = 0x3F0008
LL_TIM_TIM21_TI1_RMP_MSI = 0x3F000C
LL_TIM_TIM21_TI1_RMP_LSE = 0x3F0010
LL_TIM_TIM21_TI1_RMP_LSI = 0x3F0014
LL_TIM_TIM21_TI1_RMP_COMP1 = 0x3F0018
LL_TIM_TIM21_TI1_RMP_MCO = 0x3F001C
LL_TIM_TIM21_TI2_RMP_GPIO = 0x3F0000
LL_TIM_TIM21_TI2_RMP_COMP2 = 0x3F0020
LL_TIM_TIM22_ETR_RMP_GPIO = 0xF0000
LL_TIM_TIM22_ETR_RMP_COMP2 = 0xF0001
LL_TIM_TIM22_ETR_RMP_COMP1 = 0xF0002
LL_TIM_TIM22_ETR_RMP_LSE = 0xF0003
LL_TIM_TIM22_TI1_RMP_GPIO1 = 0xF0000
LL_TIM_TIM22_TI1_RMP_COMP2 = 0xF0004
LL_TIM_TIM22_TI1_RMP_COMP1 = 0xF0008
LL_TIM_TIM22_TI1_RMP_GPIO2 = 0xF000C
# fun define LL_TIM_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG((__INSTANCE__)->__REG__, (__VALUE__))
# fun define LL_TIM_ReadReg(__INSTANCE__, __REG__) READ_REG((__INSTANCE__)->__REG__)
# fun define __LL_TIM_CALC_PSC(__TIMCLK__, __CNTCLK__)   \
#   (((__TIMCLK__) >= (__CNTCLK__)) ? (uint32_t)(((__TIMCLK__)/(__CNTCLK__)) - 1U) : 0U)
# fun define __LL_TIM_CALC_ARR(__TIMCLK__, __PSC__, __FREQ__) \
#     ((((__TIMCLK__)/((__PSC__) + 1U)) >= (__FREQ__)) ? (((__TIMCLK__)/((__FREQ__) * ((__PSC__) + 1U))) - 1U) : 0U)
# fun define __LL_TIM_CALC_DELAY(__TIMCLK__, __PSC__, __DELAY__)  \
#((uint32_t)(((uint64_t)(__TIMCLK__) * (uint64_t)(__DELAY__)) \
#          / ((uint64_t)1000000U * (uint64_t)((__PSC__) + 1U))))
# fun define __LL_TIM_CALC_PULSE(__TIMCLK__, __PSC__, __DELAY__, __PULSE__)  \
# ((uint32_t)(__LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__PULSE__)) \
#           + __LL_TIM_CALC_DELAY((__TIMCLK__), (__PSC__), (__DELAY__))))
# fun define __LL_TIM_GET_ICPSC_RATIO(__ICPSC__)  \
#   ((uint32_t)(0x01U << (((__ICPSC__) >> 16U) >> TIM_CCMR1_IC1PSC_Pos)))
# struct LL_TIM_InitTypeDef

class LL_TIM_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('Prescaler',	ctypes.c_uint16),
		('CounterMode',	ctypes.c_uint32),
		('Autoreload',	ctypes.c_uint32),
		('ClockDivision',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LL_TIM_OC_InitTypeDef

class LL_TIM_OC_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('OCMode',	ctypes.c_uint32),
		('OCState',	ctypes.c_uint32),
		('CompareValue',	ctypes.c_uint32),
		('OCPolarity',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LL_TIM_IC_InitTypeDef

class LL_TIM_IC_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ICPolarity',	ctypes.c_uint32),
		('ICActiveInput',	ctypes.c_uint32),
		('ICPrescaler',	ctypes.c_uint32),
		('ICFilter',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LL_TIM_ENCODER_InitTypeDef

class LL_TIM_ENCODER_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('EncoderMode',	ctypes.c_uint32),
		('IC1Polarity',	ctypes.c_uint32),
		('IC1ActiveInput',	ctypes.c_uint32),
		('IC1Prescaler',	ctypes.c_uint32),
		('IC1Filter',	ctypes.c_uint32),
		('IC2Polarity',	ctypes.c_uint32),
		('IC2ActiveInput',	ctypes.c_uint32),
		('IC2Prescaler',	ctypes.c_uint32),
		('IC2Filter',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_usart.h : 

# empty define STM32L0xx_LL_USART_H
LL_USART_ICR_PECF = 0x1
LL_USART_ICR_FECF = 0x2
LL_USART_ICR_NCF = 0x4
LL_USART_ICR_ORECF = 0x8
LL_USART_ICR_IDLECF = 0x10
LL_USART_ICR_TCCF = 0x40
# Skip LL_USART_ICR_TCBGTCF : no need parse
LL_USART_ICR_LBDCF = 0x100
LL_USART_ICR_CTSCF = 0x200
LL_USART_ICR_RTOCF = 0x800
LL_USART_ICR_EOBCF = 0x1000
LL_USART_ICR_CMCF = 0x20000
LL_USART_ICR_WUCF = 0x100000
LL_USART_ISR_PE = 0x1
LL_USART_ISR_FE = 0x2
LL_USART_ISR_NE = 0x4
LL_USART_ISR_ORE = 0x8
LL_USART_ISR_IDLE = 0x10
LL_USART_ISR_RXNE = 0x20
LL_USART_ISR_TC = 0x40
LL_USART_ISR_TXE = 0x80
LL_USART_ISR_LBDF = 0x100
LL_USART_ISR_CTSIF = 0x200
LL_USART_ISR_CTS = 0x400
LL_USART_ISR_RTOF = 0x800
LL_USART_ISR_EOBF = 0x1000
LL_USART_ISR_ABRE = 0x4000
LL_USART_ISR_ABRF = 0x8000
LL_USART_ISR_BUSY = 0x10000
LL_USART_ISR_CMF = 0x20000
LL_USART_ISR_SBKF = 0x40000
LL_USART_ISR_RWU = 0x80000
LL_USART_ISR_WUF = 0x100000
LL_USART_ISR_TEACK = 0x200000
LL_USART_ISR_REACK = 0x400000
# Skip LL_USART_ISR_TCBGT : no need parse
LL_USART_CR1_IDLEIE = 0x10
LL_USART_CR1_RXNEIE = 0x20
LL_USART_CR1_TCIE = 0x40
LL_USART_CR1_TXEIE = 0x80
LL_USART_CR1_PEIE = 0x100
LL_USART_CR1_CMIE = 0x4000
LL_USART_CR1_RTOIE = 0x4000000
LL_USART_CR1_EOBIE = 0x8000000
LL_USART_CR2_LBDIE = 0x40
LL_USART_CR3_EIE = 0x1
LL_USART_CR3_CTSIE = 0x400
LL_USART_CR3_WUFIE = 0x400000
# Skip LL_USART_CR3_TCBGTIE : no need parse
LL_USART_DIRECTION_NONE = 0x0
LL_USART_DIRECTION_RX = 0x4
LL_USART_DIRECTION_TX = 0x8
LL_USART_DIRECTION_TX_RX = 0xC
LL_USART_PARITY_NONE = 0x0
LL_USART_PARITY_EVEN = 0x400
LL_USART_PARITY_ODD = 0x600
LL_USART_WAKEUP_IDLELINE = 0x0
LL_USART_WAKEUP_ADDRESSMARK = 0x800
LL_USART_DATAWIDTH_7B = 0x10000000
LL_USART_DATAWIDTH_8B = 0x0
LL_USART_DATAWIDTH_9B = 0x1000
LL_USART_OVERSAMPLING_16 = 0x0
LL_USART_OVERSAMPLING_8 = 0x8000
LL_USART_CLOCK_DISABLE = 0x0
LL_USART_CLOCK_ENABLE = 0x800
LL_USART_LASTCLKPULSE_NO_OUTPUT = 0x0
LL_USART_LASTCLKPULSE_OUTPUT = 0x100
LL_USART_PHASE_1EDGE = 0x0
LL_USART_PHASE_2EDGE = 0x200
LL_USART_POLARITY_LOW = 0x0
LL_USART_POLARITY_HIGH = 0x400
LL_USART_STOPBITS_0_5 = 0x1000
LL_USART_STOPBITS_1 = 0x0
LL_USART_STOPBITS_1_5 = 0x3000
LL_USART_STOPBITS_2 = 0x2000
LL_USART_TXRX_STANDARD = 0x0
LL_USART_TXRX_SWAPPED = 0x8000
LL_USART_RXPIN_LEVEL_STANDARD = 0x0
LL_USART_RXPIN_LEVEL_INVERTED = 0x10000
LL_USART_TXPIN_LEVEL_STANDARD = 0x0
LL_USART_TXPIN_LEVEL_INVERTED = 0x20000
LL_USART_BINARY_LOGIC_POSITIVE = 0x0
LL_USART_BINARY_LOGIC_NEGATIVE = 0x40000
LL_USART_BITORDER_LSBFIRST = 0x0
LL_USART_BITORDER_MSBFIRST = 0x80000
LL_USART_AUTOBAUD_DETECT_ON_STARTBIT = 0x0
LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE = 0x200000
LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME = 0x400000
LL_USART_AUTOBAUD_DETECT_ON_55_FRAME = 0x600000
LL_USART_ADDRESS_DETECT_4B = 0x0
LL_USART_ADDRESS_DETECT_7B = 0x10
LL_USART_HWCONTROL_NONE = 0x0
LL_USART_HWCONTROL_RTS = 0x100
LL_USART_HWCONTROL_CTS = 0x200
LL_USART_HWCONTROL_RTS_CTS = 0x300
LL_USART_WAKEUP_ON_ADDRESS = 0x0
LL_USART_WAKEUP_ON_STARTBIT = 0x200000
LL_USART_WAKEUP_ON_RXNE = 0x300000
LL_USART_IRDA_POWER_NORMAL = 0x0
LL_USART_IRDA_POWER_LOW = 0x4
LL_USART_LINBREAK_DETECT_10B = 0x0
LL_USART_LINBREAK_DETECT_11B = 0x20
LL_USART_DE_POLARITY_HIGH = 0x0
LL_USART_DE_POLARITY_LOW = 0x8000
LL_USART_DMA_REG_DATA_TRANSMIT = 0x0
LL_USART_DMA_REG_DATA_RECEIVE = 0x1
# fun define LL_USART_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_USART_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# fun define __LL_USART_DIV_SAMPLING8(__PERIPHCLK__, __BAUDRATE__) ((((__PERIPHCLK__)*2U) + ((__BAUDRATE__)/2U))/(__BAUDRATE__))
# fun define __LL_USART_DIV_SAMPLING16(__PERIPHCLK__, __BAUDRATE__) (((__PERIPHCLK__) + ((__BAUDRATE__)/2U))/(__BAUDRATE__))
# struct LL_USART_InitTypeDef

class LL_USART_InitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('BaudRate',	ctypes.c_uint32),
		('DataWidth',	ctypes.c_uint32),
		('StopBits',	ctypes.c_uint32),
		('Parity',	ctypes.c_uint32),
		('TransferDirection',	ctypes.c_uint32),
		('HardwareFlowControl',	ctypes.c_uint32),
		('OverSampling',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LL_USART_ClockInitTypeDef

class LL_USART_ClockInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('ClockOutput',	ctypes.c_uint32),
		('ClockPolarity',	ctypes.c_uint32),
		('ClockPhase',	ctypes.c_uint32),
		('LastBitClockPulse',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_utils.h : 

# empty define __STM32L0xx_LL_UTILS_H
LL_MAX_DELAY = 0xFFFFFFFF
UID_BASE_ADDRESS = 0x1FF80050
FLASHSIZE_BASE_ADDRESS = 0x1FF8007C
LL_UTILS_HSEBYPASS_OFF = 0x0
LL_UTILS_HSEBYPASS_ON = 0x1
# struct LL_UTILS_PLLInitTypeDef

class LL_UTILS_PLLInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('PLLMul',	ctypes.c_uint32),
		('PLLDiv',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# struct LL_UTILS_ClkInitTypeDef

class LL_UTILS_ClkInitTypeDef(ctypes.Structure):
	_pack_ = False
	_fields_ = [
		('AHBCLKDivider',	ctypes.c_uint32),
		('APB1CLKDivider',	ctypes.c_uint32),
		('APB2CLKDivider',	ctypes.c_uint32),
	]
	def ref(self):
		return ctypes.byref(self)

# ----------------------------------------

# file stm32l0xx_ll_wwdg.h : 

# empty define STM32L0xx_LL_WWDG_H
LL_WWDG_CFR_EWI = 0x200
LL_WWDG_PRESCALER_1 = 0x0
LL_WWDG_PRESCALER_2 = 0x80
LL_WWDG_PRESCALER_4 = 0x100
LL_WWDG_PRESCALER_8 = 0x180
# fun define LL_WWDG_WriteReg(__INSTANCE__, __REG__, __VALUE__) WRITE_REG(__INSTANCE__->__REG__, (__VALUE__))
# fun define LL_WWDG_ReadReg(__INSTANCE__, __REG__) READ_REG(__INSTANCE__->__REG__)
# ----------------------------------------


__all__ =  ['__version__', '__RUN', '__HALT', '__ERROR', '__WARNING', '__INFO', '__DEBUG',
    '__ALL_LOG', 'DEFAULT_OPENOCD_PORT', 'DEFAULT_GDB_PORT', 'RESET', 'SET', 'DISABLE',
    'ENABLE', 'SUCCESS', 'ERROR', '__STM32L0xx_CMSIS_VERSION_MAIN',
    '__STM32L0xx_CMSIS_VERSION_SUB1', '__STM32L0xx_CMSIS_VERSION_SUB2',
    '__STM32L0xx_CMSIS_VERSION_RC', '__STM32L0xx_CMSIS_VERSION', 'NonMaskableInt_IRQn',
    'HardFault_IRQn', 'SVC_IRQn', 'PendSV_IRQn', 'SysTick_IRQn', 'WWDG_IRQn',
    'PVD_IRQn', 'RTC_IRQn', 'FLASH_IRQn', 'RCC_CRS_IRQn', 'EXTI0_1_IRQn',
    'EXTI2_3_IRQn', 'EXTI4_15_IRQn', 'TSC_IRQn', 'DMA1_Channel1_IRQn',
    'DMA1_Channel2_3_IRQn', 'DMA1_Channel4_5_6_7_IRQn', 'ADC1_COMP_IRQn', 'LPTIM1_IRQn',
    'TIM2_IRQn', 'TIM6_DAC_IRQn', 'TIM21_IRQn', 'TIM22_IRQn', 'I2C1_IRQn', 'I2C2_IRQn',
    'SPI1_IRQn', 'SPI2_IRQn', 'USART1_IRQn', 'USART2_IRQn', 'AES_RNG_LPUART1_IRQn',
    'LCD_IRQn', 'USB_IRQn', '__CM0PLUS_REV', '__MPU_PRESENT', '__VTOR_PRESENT',
    '__NVIC_PRIO_BITS', '__Vendor_SysTickConfig', 'FLASH_BASE', 'DATA_EEPROM_BASE',
    'DATA_EEPROM_END', 'SRAM_BASE', 'SRAM_SIZE_MAX', 'PERIPH_BASE', 'APBPERIPH_BASE',
    'AHBPERIPH_BASE', 'IOPPERIPH_BASE', 'TIM2_BASE', 'TIM6_BASE', 'LCD_BASE',
    'RTC_BASE', 'WWDG_BASE', 'IWDG_BASE', 'SPI2_BASE', 'USART2_BASE', 'LPUART1_BASE',
    'I2C1_BASE', 'I2C2_BASE', 'CRS_BASE', 'PWR_BASE', 'DAC_BASE', 'LPTIM1_BASE',
    'SYSCFG_BASE', 'COMP1_BASE', 'COMP2_BASE', 'COMP12_COMMON', 'EXTI_BASE',
    'TIM21_BASE', 'TIM22_BASE', 'FIREWALL_BASE', 'ADC1_BASE', 'ADC_BASE', 'SPI1_BASE',
    'USART1_BASE', 'DBGMCU_BASE', 'DMA1_BASE', 'DMA1_Channel1_BASE',
    'DMA1_Channel2_BASE', 'DMA1_Channel3_BASE', 'DMA1_Channel4_BASE',
    'DMA1_Channel5_BASE', 'DMA1_Channel6_BASE', 'DMA1_Channel7_BASE', 'DMA1_CSELR_BASE',
    'RCC_BASE', 'FLASH_R_BASE', 'OB_BASE', 'FLASHSIZE_BASE', 'UID_BASE', 'CRC_BASE',
    'TSC_BASE', 'RNG_BASE', 'AES_BASE', 'GPIOA_BASE', 'GPIOB_BASE', 'GPIOC_BASE',
    'GPIOD_BASE', 'GPIOH_BASE', 'TIM2', 'TIM6', 'RTC', 'WWDG', 'IWDG', 'SPI2', 'USART2',
    'LPUART1', 'I2C1', 'I2C2', 'CRS', 'PWR', 'DAC', 'DAC1', 'LPTIM1', 'LCD', 'SYSCFG',
    'COMP1', 'COMP2', 'EXTI', 'TIM21', 'TIM22', 'FIREWALL', 'ADC1', 'ADC1_COMMON',
    'ADC', 'SPI1', 'USART1', 'DBGMCU', 'DMA1', 'DMA1_Channel1', 'DMA1_Channel2',
    'DMA1_Channel3', 'DMA1_Channel4', 'DMA1_Channel5', 'DMA1_Channel6', 'DMA1_Channel7',
    'DMA1_CSELR', 'FLASH', 'OB', 'RCC', 'CRC', 'TSC', 'AES', 'RNG', 'GPIOA', 'GPIOB',
    'GPIOC', 'GPIOD', 'GPIOH', 'USB', 'ADC_ISR_EOCAL_Pos', 'ADC_ISR_EOCAL_Msk',
    'ADC_ISR_EOCAL', 'ADC_ISR_AWD_Pos', 'ADC_ISR_AWD_Msk', 'ADC_ISR_AWD',
    'ADC_ISR_OVR_Pos', 'ADC_ISR_OVR_Msk', 'ADC_ISR_OVR', 'ADC_ISR_EOSEQ_Pos',
    'ADC_ISR_EOSEQ_Msk', 'ADC_ISR_EOSEQ', 'ADC_ISR_EOC_Pos', 'ADC_ISR_EOC_Msk',
    'ADC_ISR_EOC', 'ADC_ISR_EOSMP_Pos', 'ADC_ISR_EOSMP_Msk', 'ADC_ISR_EOSMP',
    'ADC_ISR_ADRDY_Pos', 'ADC_ISR_ADRDY_Msk', 'ADC_ISR_ADRDY', 'ADC_ISR_EOS',
    'ADC_IER_EOCALIE_Pos', 'ADC_IER_EOCALIE_Msk', 'ADC_IER_EOCALIE',
    'ADC_IER_AWDIE_Pos', 'ADC_IER_AWDIE_Msk', 'ADC_IER_AWDIE', 'ADC_IER_OVRIE_Pos',
    'ADC_IER_OVRIE_Msk', 'ADC_IER_OVRIE', 'ADC_IER_EOSEQIE_Pos', 'ADC_IER_EOSEQIE_Msk',
    'ADC_IER_EOSEQIE', 'ADC_IER_EOCIE_Pos', 'ADC_IER_EOCIE_Msk', 'ADC_IER_EOCIE',
    'ADC_IER_EOSMPIE_Pos', 'ADC_IER_EOSMPIE_Msk', 'ADC_IER_EOSMPIE',
    'ADC_IER_ADRDYIE_Pos', 'ADC_IER_ADRDYIE_Msk', 'ADC_IER_ADRDYIE', 'ADC_IER_EOSIE',
    'ADC_CR_ADCAL_Pos', 'ADC_CR_ADCAL_Msk', 'ADC_CR_ADCAL', 'ADC_CR_ADVREGEN_Pos',
    'ADC_CR_ADVREGEN_Msk', 'ADC_CR_ADVREGEN', 'ADC_CR_ADSTP_Pos', 'ADC_CR_ADSTP_Msk',
    'ADC_CR_ADSTP', 'ADC_CR_ADSTART_Pos', 'ADC_CR_ADSTART_Msk', 'ADC_CR_ADSTART',
    'ADC_CR_ADDIS_Pos', 'ADC_CR_ADDIS_Msk', 'ADC_CR_ADDIS', 'ADC_CR_ADEN_Pos',
    'ADC_CR_ADEN_Msk', 'ADC_CR_ADEN', 'ADC_CFGR1_AWDCH_Pos', 'ADC_CFGR1_AWDCH_Msk',
    'ADC_CFGR1_AWDCH', 'ADC_CFGR1_AWDCH_0', 'ADC_CFGR1_AWDCH_1', 'ADC_CFGR1_AWDCH_2',
    'ADC_CFGR1_AWDCH_3', 'ADC_CFGR1_AWDCH_4', 'ADC_CFGR1_AWDEN_Pos',
    'ADC_CFGR1_AWDEN_Msk', 'ADC_CFGR1_AWDEN', 'ADC_CFGR1_AWDSGL_Pos',
    'ADC_CFGR1_AWDSGL_Msk', 'ADC_CFGR1_AWDSGL', 'ADC_CFGR1_DISCEN_Pos',
    'ADC_CFGR1_DISCEN_Msk', 'ADC_CFGR1_DISCEN', 'ADC_CFGR1_AUTOFF_Pos',
    'ADC_CFGR1_AUTOFF_Msk', 'ADC_CFGR1_AUTOFF', 'ADC_CFGR1_WAIT_Pos',
    'ADC_CFGR1_WAIT_Msk', 'ADC_CFGR1_WAIT', 'ADC_CFGR1_CONT_Pos', 'ADC_CFGR1_CONT_Msk',
    'ADC_CFGR1_CONT', 'ADC_CFGR1_OVRMOD_Pos', 'ADC_CFGR1_OVRMOD_Msk',
    'ADC_CFGR1_OVRMOD', 'ADC_CFGR1_EXTEN_Pos', 'ADC_CFGR1_EXTEN_Msk', 'ADC_CFGR1_EXTEN',
    'ADC_CFGR1_EXTEN_0', 'ADC_CFGR1_EXTEN_1', 'ADC_CFGR1_EXTSEL_Pos',
    'ADC_CFGR1_EXTSEL_Msk', 'ADC_CFGR1_EXTSEL', 'ADC_CFGR1_EXTSEL_0',
    'ADC_CFGR1_EXTSEL_1', 'ADC_CFGR1_EXTSEL_2', 'ADC_CFGR1_ALIGN_Pos',
    'ADC_CFGR1_ALIGN_Msk', 'ADC_CFGR1_ALIGN', 'ADC_CFGR1_RES_Pos', 'ADC_CFGR1_RES_Msk',
    'ADC_CFGR1_RES', 'ADC_CFGR1_RES_0', 'ADC_CFGR1_RES_1', 'ADC_CFGR1_SCANDIR_Pos',
    'ADC_CFGR1_SCANDIR_Msk', 'ADC_CFGR1_SCANDIR', 'ADC_CFGR1_DMACFG_Pos',
    'ADC_CFGR1_DMACFG_Msk', 'ADC_CFGR1_DMACFG', 'ADC_CFGR1_DMAEN_Pos',
    'ADC_CFGR1_DMAEN_Msk', 'ADC_CFGR1_DMAEN', 'ADC_CFGR1_AUTDLY', 'ADC_CFGR2_TOVS_Pos',
    'ADC_CFGR2_TOVS_Msk', 'ADC_CFGR2_TOVS', 'ADC_CFGR2_OVSS_Pos', 'ADC_CFGR2_OVSS_Msk',
    'ADC_CFGR2_OVSS', 'ADC_CFGR2_OVSS_0', 'ADC_CFGR2_OVSS_1', 'ADC_CFGR2_OVSS_2',
    'ADC_CFGR2_OVSS_3', 'ADC_CFGR2_OVSR_Pos', 'ADC_CFGR2_OVSR_Msk', 'ADC_CFGR2_OVSR',
    'ADC_CFGR2_OVSR_0', 'ADC_CFGR2_OVSR_1', 'ADC_CFGR2_OVSR_2', 'ADC_CFGR2_OVSE_Pos',
    'ADC_CFGR2_OVSE_Msk', 'ADC_CFGR2_OVSE', 'ADC_CFGR2_CKMODE_Pos',
    'ADC_CFGR2_CKMODE_Msk', 'ADC_CFGR2_CKMODE', 'ADC_CFGR2_CKMODE_0',
    'ADC_CFGR2_CKMODE_1', 'ADC_SMPR_SMP_Pos', 'ADC_SMPR_SMP_Msk', 'ADC_SMPR_SMP',
    'ADC_SMPR_SMP_0', 'ADC_SMPR_SMP_1', 'ADC_SMPR_SMP_2', 'ADC_SMPR_SMPR',
    'ADC_SMPR_SMPR_0', 'ADC_SMPR_SMPR_1', 'ADC_SMPR_SMPR_2', 'ADC_TR_HT_Pos',
    'ADC_TR_HT_Msk', 'ADC_TR_HT', 'ADC_TR_LT_Pos', 'ADC_TR_LT_Msk', 'ADC_TR_LT',
    'ADC_CHSELR_CHSEL_Pos', 'ADC_CHSELR_CHSEL_Msk', 'ADC_CHSELR_CHSEL',
    'ADC_CHSELR_CHSEL18_Pos', 'ADC_CHSELR_CHSEL18_Msk', 'ADC_CHSELR_CHSEL18',
    'ADC_CHSELR_CHSEL17_Pos', 'ADC_CHSELR_CHSEL17_Msk', 'ADC_CHSELR_CHSEL17',
    'ADC_CHSELR_CHSEL16_Pos', 'ADC_CHSELR_CHSEL16_Msk', 'ADC_CHSELR_CHSEL16',
    'ADC_CHSELR_CHSEL15_Pos', 'ADC_CHSELR_CHSEL15_Msk', 'ADC_CHSELR_CHSEL15',
    'ADC_CHSELR_CHSEL14_Pos', 'ADC_CHSELR_CHSEL14_Msk', 'ADC_CHSELR_CHSEL14',
    'ADC_CHSELR_CHSEL13_Pos', 'ADC_CHSELR_CHSEL13_Msk', 'ADC_CHSELR_CHSEL13',
    'ADC_CHSELR_CHSEL12_Pos', 'ADC_CHSELR_CHSEL12_Msk', 'ADC_CHSELR_CHSEL12',
    'ADC_CHSELR_CHSEL11_Pos', 'ADC_CHSELR_CHSEL11_Msk', 'ADC_CHSELR_CHSEL11',
    'ADC_CHSELR_CHSEL10_Pos', 'ADC_CHSELR_CHSEL10_Msk', 'ADC_CHSELR_CHSEL10',
    'ADC_CHSELR_CHSEL9_Pos', 'ADC_CHSELR_CHSEL9_Msk', 'ADC_CHSELR_CHSEL9',
    'ADC_CHSELR_CHSEL8_Pos', 'ADC_CHSELR_CHSEL8_Msk', 'ADC_CHSELR_CHSEL8',
    'ADC_CHSELR_CHSEL7_Pos', 'ADC_CHSELR_CHSEL7_Msk', 'ADC_CHSELR_CHSEL7',
    'ADC_CHSELR_CHSEL6_Pos', 'ADC_CHSELR_CHSEL6_Msk', 'ADC_CHSELR_CHSEL6',
    'ADC_CHSELR_CHSEL5_Pos', 'ADC_CHSELR_CHSEL5_Msk', 'ADC_CHSELR_CHSEL5',
    'ADC_CHSELR_CHSEL4_Pos', 'ADC_CHSELR_CHSEL4_Msk', 'ADC_CHSELR_CHSEL4',
    'ADC_CHSELR_CHSEL3_Pos', 'ADC_CHSELR_CHSEL3_Msk', 'ADC_CHSELR_CHSEL3',
    'ADC_CHSELR_CHSEL2_Pos', 'ADC_CHSELR_CHSEL2_Msk', 'ADC_CHSELR_CHSEL2',
    'ADC_CHSELR_CHSEL1_Pos', 'ADC_CHSELR_CHSEL1_Msk', 'ADC_CHSELR_CHSEL1',
    'ADC_CHSELR_CHSEL0_Pos', 'ADC_CHSELR_CHSEL0_Msk', 'ADC_CHSELR_CHSEL0',
    'ADC_DR_DATA_Pos', 'ADC_DR_DATA_Msk', 'ADC_DR_DATA', 'ADC_CALFACT_CALFACT_Pos',
    'ADC_CALFACT_CALFACT_Msk', 'ADC_CALFACT_CALFACT', 'ADC_CCR_LFMEN_Pos',
    'ADC_CCR_LFMEN_Msk', 'ADC_CCR_LFMEN', 'ADC_CCR_VLCDEN_Pos', 'ADC_CCR_VLCDEN_Msk',
    'ADC_CCR_VLCDEN', 'ADC_CCR_TSEN_Pos', 'ADC_CCR_TSEN_Msk', 'ADC_CCR_TSEN',
    'ADC_CCR_VREFEN_Pos', 'ADC_CCR_VREFEN_Msk', 'ADC_CCR_VREFEN', 'ADC_CCR_PRESC_Pos',
    'ADC_CCR_PRESC_Msk', 'ADC_CCR_PRESC', 'ADC_CCR_PRESC_0', 'ADC_CCR_PRESC_1',
    'ADC_CCR_PRESC_2', 'ADC_CCR_PRESC_3', 'AES_CR_EN_Pos', 'AES_CR_EN_Msk', 'AES_CR_EN',
    'AES_CR_DATATYPE_Pos', 'AES_CR_DATATYPE_Msk', 'AES_CR_DATATYPE',
    'AES_CR_DATATYPE_0', 'AES_CR_DATATYPE_1', 'AES_CR_MODE_Pos', 'AES_CR_MODE_Msk',
    'AES_CR_MODE', 'AES_CR_MODE_0', 'AES_CR_MODE_1', 'AES_CR_CHMOD_Pos',
    'AES_CR_CHMOD_Msk', 'AES_CR_CHMOD', 'AES_CR_CHMOD_0', 'AES_CR_CHMOD_1',
    'AES_CR_CCFC_Pos', 'AES_CR_CCFC_Msk', 'AES_CR_CCFC', 'AES_CR_ERRC_Pos',
    'AES_CR_ERRC_Msk', 'AES_CR_ERRC', 'AES_CR_CCIE_Pos', 'AES_CR_CCIE_Msk',
    'AES_CR_CCIE', 'AES_CR_ERRIE_Pos', 'AES_CR_ERRIE_Msk', 'AES_CR_ERRIE',
    'AES_CR_DMAINEN_Pos', 'AES_CR_DMAINEN_Msk', 'AES_CR_DMAINEN', 'AES_CR_DMAOUTEN_Pos',
    'AES_CR_DMAOUTEN_Msk', 'AES_CR_DMAOUTEN', 'AES_SR_CCF_Pos', 'AES_SR_CCF_Msk',
    'AES_SR_CCF', 'AES_SR_RDERR_Pos', 'AES_SR_RDERR_Msk', 'AES_SR_RDERR',
    'AES_SR_WRERR_Pos', 'AES_SR_WRERR_Msk', 'AES_SR_WRERR', 'AES_DINR_Pos',
    'AES_DINR_Msk', 'AES_DINR', 'AES_DOUTR_Pos', 'AES_DOUTR_Msk', 'AES_DOUTR',
    'AES_KEYR0_Pos', 'AES_KEYR0_Msk', 'AES_KEYR0', 'AES_KEYR1_Pos', 'AES_KEYR1_Msk',
    'AES_KEYR1', 'AES_KEYR2_Pos', 'AES_KEYR2_Msk', 'AES_KEYR2', 'AES_KEYR3_Pos',
    'AES_KEYR3_Msk', 'AES_KEYR3', 'AES_IVR0_Pos', 'AES_IVR0_Msk', 'AES_IVR0',
    'AES_IVR1_Pos', 'AES_IVR1_Msk', 'AES_IVR1', 'AES_IVR2_Pos', 'AES_IVR2_Msk',
    'AES_IVR2', 'AES_IVR3_Pos', 'AES_IVR3_Msk', 'AES_IVR3', 'COMP_CSR_COMP1EN_Pos',
    'COMP_CSR_COMP1EN_Msk', 'COMP_CSR_COMP1EN', 'COMP_CSR_COMP1INNSEL_Pos',
    'COMP_CSR_COMP1INNSEL_Msk', 'COMP_CSR_COMP1INNSEL', 'COMP_CSR_COMP1INNSEL_0',
    'COMP_CSR_COMP1INNSEL_1', 'COMP_CSR_COMP1WM_Pos', 'COMP_CSR_COMP1WM_Msk',
    'COMP_CSR_COMP1WM', 'COMP_CSR_COMP1LPTIM1IN1_Pos', 'COMP_CSR_COMP1LPTIM1IN1_Msk',
    'COMP_CSR_COMP1LPTIM1IN1', 'COMP_CSR_COMP1POLARITY_Pos',
    'COMP_CSR_COMP1POLARITY_Msk', 'COMP_CSR_COMP1POLARITY', 'COMP_CSR_COMP1VALUE_Pos',
    'COMP_CSR_COMP1VALUE_Msk', 'COMP_CSR_COMP1VALUE', 'COMP_CSR_COMP1LOCK_Pos',
    'COMP_CSR_COMP1LOCK_Msk', 'COMP_CSR_COMP1LOCK', 'COMP_CSR_COMP2EN_Pos',
    'COMP_CSR_COMP2EN_Msk', 'COMP_CSR_COMP2EN', 'COMP_CSR_COMP2SPEED_Pos',
    'COMP_CSR_COMP2SPEED_Msk', 'COMP_CSR_COMP2SPEED', 'COMP_CSR_COMP2INNSEL_Pos',
    'COMP_CSR_COMP2INNSEL_Msk', 'COMP_CSR_COMP2INNSEL', 'COMP_CSR_COMP2INNSEL_0',
    'COMP_CSR_COMP2INNSEL_1', 'COMP_CSR_COMP2INNSEL_2', 'COMP_CSR_COMP2INPSEL_Pos',
    'COMP_CSR_COMP2INPSEL_Msk', 'COMP_CSR_COMP2INPSEL', 'COMP_CSR_COMP2INPSEL_0',
    'COMP_CSR_COMP2INPSEL_1', 'COMP_CSR_COMP2INPSEL_2', 'COMP_CSR_COMP2LPTIM1IN2_Pos',
    'COMP_CSR_COMP2LPTIM1IN2_Msk', 'COMP_CSR_COMP2LPTIM1IN2',
    'COMP_CSR_COMP2LPTIM1IN1_Pos', 'COMP_CSR_COMP2LPTIM1IN1_Msk',
    'COMP_CSR_COMP2LPTIM1IN1', 'COMP_CSR_COMP2POLARITY_Pos',
    'COMP_CSR_COMP2POLARITY_Msk', 'COMP_CSR_COMP2POLARITY', 'COMP_CSR_COMP2VALUE_Pos',
    'COMP_CSR_COMP2VALUE_Msk', 'COMP_CSR_COMP2VALUE', 'COMP_CSR_COMP2LOCK_Pos',
    'COMP_CSR_COMP2LOCK_Msk', 'COMP_CSR_COMP2LOCK', 'COMP_CSR_COMPxEN_Pos',
    'COMP_CSR_COMPxEN_Msk', 'COMP_CSR_COMPxEN', 'COMP_CSR_COMPxPOLARITY_Pos',
    'COMP_CSR_COMPxPOLARITY_Msk', 'COMP_CSR_COMPxPOLARITY',
    'COMP_CSR_COMPxOUTVALUE_Pos', 'COMP_CSR_COMPxOUTVALUE_Msk',
    'COMP_CSR_COMPxOUTVALUE', 'COMP_CSR_COMPxLOCK_Pos', 'COMP_CSR_COMPxLOCK_Msk',
    'COMP_CSR_COMPxLOCK', 'COMP_CSR_WINMODE', 'CRC_DR_DR_Pos', 'CRC_DR_DR_Msk',
    'CRC_DR_DR', 'CRC_IDR_IDR', 'CRC_CR_RESET_Pos', 'CRC_CR_RESET_Msk', 'CRC_CR_RESET',
    'CRC_CR_POLYSIZE_Pos', 'CRC_CR_POLYSIZE_Msk', 'CRC_CR_POLYSIZE',
    'CRC_CR_POLYSIZE_0', 'CRC_CR_POLYSIZE_1', 'CRC_CR_REV_IN_Pos', 'CRC_CR_REV_IN_Msk',
    'CRC_CR_REV_IN', 'CRC_CR_REV_IN_0', 'CRC_CR_REV_IN_1', 'CRC_CR_REV_OUT_Pos',
    'CRC_CR_REV_OUT_Msk', 'CRC_CR_REV_OUT', 'CRC_INIT_INIT_Pos', 'CRC_INIT_INIT_Msk',
    'CRC_INIT_INIT', 'CRC_POL_POL_Pos', 'CRC_POL_POL_Msk', 'CRC_POL_POL',
    'CRS_CR_SYNCOKIE_Pos', 'CRS_CR_SYNCOKIE_Msk', 'CRS_CR_SYNCOKIE',
    'CRS_CR_SYNCWARNIE_Pos', 'CRS_CR_SYNCWARNIE_Msk', 'CRS_CR_SYNCWARNIE',
    'CRS_CR_ERRIE_Pos', 'CRS_CR_ERRIE_Msk', 'CRS_CR_ERRIE', 'CRS_CR_ESYNCIE_Pos',
    'CRS_CR_ESYNCIE_Msk', 'CRS_CR_ESYNCIE', 'CRS_CR_CEN_Pos', 'CRS_CR_CEN_Msk',
    'CRS_CR_CEN', 'CRS_CR_AUTOTRIMEN_Pos', 'CRS_CR_AUTOTRIMEN_Msk', 'CRS_CR_AUTOTRIMEN',
    'CRS_CR_SWSYNC_Pos', 'CRS_CR_SWSYNC_Msk', 'CRS_CR_SWSYNC', 'CRS_CR_TRIM_Pos',
    'CRS_CR_TRIM_Msk', 'CRS_CR_TRIM', 'CRS_CFGR_RELOAD_Pos', 'CRS_CFGR_RELOAD_Msk',
    'CRS_CFGR_RELOAD', 'CRS_CFGR_FELIM_Pos', 'CRS_CFGR_FELIM_Msk', 'CRS_CFGR_FELIM',
    'CRS_CFGR_SYNCDIV_Pos', 'CRS_CFGR_SYNCDIV_Msk', 'CRS_CFGR_SYNCDIV',
    'CRS_CFGR_SYNCDIV_0', 'CRS_CFGR_SYNCDIV_1', 'CRS_CFGR_SYNCDIV_2',
    'CRS_CFGR_SYNCSRC_Pos', 'CRS_CFGR_SYNCSRC_Msk', 'CRS_CFGR_SYNCSRC',
    'CRS_CFGR_SYNCSRC_0', 'CRS_CFGR_SYNCSRC_1', 'CRS_CFGR_SYNCPOL_Pos',
    'CRS_CFGR_SYNCPOL_Msk', 'CRS_CFGR_SYNCPOL', 'CRS_ISR_SYNCOKF_Pos',
    'CRS_ISR_SYNCOKF_Msk', 'CRS_ISR_SYNCOKF', 'CRS_ISR_SYNCWARNF_Pos',
    'CRS_ISR_SYNCWARNF_Msk', 'CRS_ISR_SYNCWARNF', 'CRS_ISR_ERRF_Pos',
    'CRS_ISR_ERRF_Msk', 'CRS_ISR_ERRF', 'CRS_ISR_ESYNCF_Pos', 'CRS_ISR_ESYNCF_Msk',
    'CRS_ISR_ESYNCF', 'CRS_ISR_SYNCERR_Pos', 'CRS_ISR_SYNCERR_Msk', 'CRS_ISR_SYNCERR',
    'CRS_ISR_SYNCMISS_Pos', 'CRS_ISR_SYNCMISS_Msk', 'CRS_ISR_SYNCMISS',
    'CRS_ISR_TRIMOVF_Pos', 'CRS_ISR_TRIMOVF_Msk', 'CRS_ISR_TRIMOVF',
    'CRS_ISR_FEDIR_Pos', 'CRS_ISR_FEDIR_Msk', 'CRS_ISR_FEDIR', 'CRS_ISR_FECAP_Pos',
    'CRS_ISR_FECAP_Msk', 'CRS_ISR_FECAP', 'CRS_ICR_SYNCOKC_Pos', 'CRS_ICR_SYNCOKC_Msk',
    'CRS_ICR_SYNCOKC', 'CRS_ICR_SYNCWARNC_Pos', 'CRS_ICR_SYNCWARNC_Msk',
    'CRS_ICR_SYNCWARNC', 'CRS_ICR_ERRC_Pos', 'CRS_ICR_ERRC_Msk', 'CRS_ICR_ERRC',
    'CRS_ICR_ESYNCC_Pos', 'CRS_ICR_ESYNCC_Msk', 'CRS_ICR_ESYNCC', 'DAC_CR_EN1_Pos',
    'DAC_CR_EN1_Msk', 'DAC_CR_EN1', 'DAC_CR_BOFF1_Pos', 'DAC_CR_BOFF1_Msk',
    'DAC_CR_BOFF1', 'DAC_CR_TEN1_Pos', 'DAC_CR_TEN1_Msk', 'DAC_CR_TEN1',
    'DAC_CR_TSEL1_Pos', 'DAC_CR_TSEL1_Msk', 'DAC_CR_TSEL1', 'DAC_CR_TSEL1_0',
    'DAC_CR_TSEL1_1', 'DAC_CR_TSEL1_2', 'DAC_CR_WAVE1_Pos', 'DAC_CR_WAVE1_Msk',
    'DAC_CR_WAVE1', 'DAC_CR_WAVE1_0', 'DAC_CR_WAVE1_1', 'DAC_CR_MAMP1_Pos',
    'DAC_CR_MAMP1_Msk', 'DAC_CR_MAMP1', 'DAC_CR_MAMP1_0', 'DAC_CR_MAMP1_1',
    'DAC_CR_MAMP1_2', 'DAC_CR_MAMP1_3', 'DAC_CR_DMAEN1_Pos', 'DAC_CR_DMAEN1_Msk',
    'DAC_CR_DMAEN1', 'DAC_CR_DMAUDRIE1_Pos', 'DAC_CR_DMAUDRIE1_Msk', 'DAC_CR_DMAUDRIE1',
    'DAC_SWTRIGR_SWTRIG1_Pos', 'DAC_SWTRIGR_SWTRIG1_Msk', 'DAC_SWTRIGR_SWTRIG1',
    'DAC_DHR12R1_DACC1DHR_Pos', 'DAC_DHR12R1_DACC1DHR_Msk', 'DAC_DHR12R1_DACC1DHR',
    'DAC_DHR12L1_DACC1DHR_Pos', 'DAC_DHR12L1_DACC1DHR_Msk', 'DAC_DHR12L1_DACC1DHR',
    'DAC_DHR8R1_DACC1DHR_Pos', 'DAC_DHR8R1_DACC1DHR_Msk', 'DAC_DHR8R1_DACC1DHR',
    'DAC_DOR1_DACC1DOR_Pos', 'DAC_DOR1_DACC1DOR_Msk', 'DAC_DOR1_DACC1DOR',
    'DAC_SR_DMAUDR1_Pos', 'DAC_SR_DMAUDR1_Msk', 'DAC_SR_DMAUDR1',
    'DBGMCU_IDCODE_DEV_ID_Pos', 'DBGMCU_IDCODE_DEV_ID_Msk', 'DBGMCU_IDCODE_DEV_ID',
    'DBGMCU_IDCODE_REV_ID_Pos', 'DBGMCU_IDCODE_REV_ID_Msk', 'DBGMCU_IDCODE_REV_ID',
    'DBGMCU_IDCODE_REV_ID_0', 'DBGMCU_IDCODE_REV_ID_1', 'DBGMCU_IDCODE_REV_ID_2',
    'DBGMCU_IDCODE_REV_ID_3', 'DBGMCU_IDCODE_REV_ID_4', 'DBGMCU_IDCODE_REV_ID_5',
    'DBGMCU_IDCODE_REV_ID_6', 'DBGMCU_IDCODE_REV_ID_7', 'DBGMCU_IDCODE_REV_ID_8',
    'DBGMCU_IDCODE_REV_ID_9', 'DBGMCU_IDCODE_REV_ID_10', 'DBGMCU_IDCODE_REV_ID_11',
    'DBGMCU_IDCODE_REV_ID_12', 'DBGMCU_IDCODE_REV_ID_13', 'DBGMCU_IDCODE_REV_ID_14',
    'DBGMCU_IDCODE_REV_ID_15', 'DBGMCU_CR_DBG_Pos', 'DBGMCU_CR_DBG_Msk',
    'DBGMCU_CR_DBG', 'DBGMCU_CR_DBG_SLEEP_Pos', 'DBGMCU_CR_DBG_SLEEP_Msk',
    'DBGMCU_CR_DBG_SLEEP', 'DBGMCU_CR_DBG_STOP_Pos', 'DBGMCU_CR_DBG_STOP_Msk',
    'DBGMCU_CR_DBG_STOP', 'DBGMCU_CR_DBG_STANDBY_Pos', 'DBGMCU_CR_DBG_STANDBY_Msk',
    'DBGMCU_CR_DBG_STANDBY', 'DBGMCU_APB1_FZ_DBG_TIM2_STOP_Pos',
    'DBGMCU_APB1_FZ_DBG_TIM2_STOP_Msk', 'DBGMCU_APB1_FZ_DBG_TIM2_STOP',
    'DBGMCU_APB1_FZ_DBG_TIM6_STOP_Pos', 'DBGMCU_APB1_FZ_DBG_TIM6_STOP_Msk',
    'DBGMCU_APB1_FZ_DBG_TIM6_STOP', 'DBGMCU_APB1_FZ_DBG_RTC_STOP_Pos',
    'DBGMCU_APB1_FZ_DBG_RTC_STOP_Msk', 'DBGMCU_APB1_FZ_DBG_RTC_STOP',
    'DBGMCU_APB1_FZ_DBG_WWDG_STOP_Pos', 'DBGMCU_APB1_FZ_DBG_WWDG_STOP_Msk',
    'DBGMCU_APB1_FZ_DBG_WWDG_STOP', 'DBGMCU_APB1_FZ_DBG_IWDG_STOP_Pos',
    'DBGMCU_APB1_FZ_DBG_IWDG_STOP_Msk', 'DBGMCU_APB1_FZ_DBG_IWDG_STOP',
    'DBGMCU_APB1_FZ_DBG_I2C1_STOP_Pos', 'DBGMCU_APB1_FZ_DBG_I2C1_STOP_Msk',
    'DBGMCU_APB1_FZ_DBG_I2C1_STOP', 'DBGMCU_APB1_FZ_DBG_I2C2_STOP_Pos',
    'DBGMCU_APB1_FZ_DBG_I2C2_STOP_Msk', 'DBGMCU_APB1_FZ_DBG_I2C2_STOP',
    'DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Pos', 'DBGMCU_APB1_FZ_DBG_LPTIMER_STOP_Msk',
    'DBGMCU_APB1_FZ_DBG_LPTIMER_STOP', 'DBGMCU_APB2_FZ_DBG_TIM22_STOP_Pos',
    'DBGMCU_APB2_FZ_DBG_TIM22_STOP_Msk', 'DBGMCU_APB2_FZ_DBG_TIM22_STOP',
    'DBGMCU_APB2_FZ_DBG_TIM21_STOP_Pos', 'DBGMCU_APB2_FZ_DBG_TIM21_STOP_Msk',
    'DBGMCU_APB2_FZ_DBG_TIM21_STOP', 'DMA_ISR_GIF1_Pos', 'DMA_ISR_GIF1_Msk',
    'DMA_ISR_GIF1', 'DMA_ISR_TCIF1_Pos', 'DMA_ISR_TCIF1_Msk', 'DMA_ISR_TCIF1',
    'DMA_ISR_HTIF1_Pos', 'DMA_ISR_HTIF1_Msk', 'DMA_ISR_HTIF1', 'DMA_ISR_TEIF1_Pos',
    'DMA_ISR_TEIF1_Msk', 'DMA_ISR_TEIF1', 'DMA_ISR_GIF2_Pos', 'DMA_ISR_GIF2_Msk',
    'DMA_ISR_GIF2', 'DMA_ISR_TCIF2_Pos', 'DMA_ISR_TCIF2_Msk', 'DMA_ISR_TCIF2',
    'DMA_ISR_HTIF2_Pos', 'DMA_ISR_HTIF2_Msk', 'DMA_ISR_HTIF2', 'DMA_ISR_TEIF2_Pos',
    'DMA_ISR_TEIF2_Msk', 'DMA_ISR_TEIF2', 'DMA_ISR_GIF3_Pos', 'DMA_ISR_GIF3_Msk',
    'DMA_ISR_GIF3', 'DMA_ISR_TCIF3_Pos', 'DMA_ISR_TCIF3_Msk', 'DMA_ISR_TCIF3',
    'DMA_ISR_HTIF3_Pos', 'DMA_ISR_HTIF3_Msk', 'DMA_ISR_HTIF3', 'DMA_ISR_TEIF3_Pos',
    'DMA_ISR_TEIF3_Msk', 'DMA_ISR_TEIF3', 'DMA_ISR_GIF4_Pos', 'DMA_ISR_GIF4_Msk',
    'DMA_ISR_GIF4', 'DMA_ISR_TCIF4_Pos', 'DMA_ISR_TCIF4_Msk', 'DMA_ISR_TCIF4',
    'DMA_ISR_HTIF4_Pos', 'DMA_ISR_HTIF4_Msk', 'DMA_ISR_HTIF4', 'DMA_ISR_TEIF4_Pos',
    'DMA_ISR_TEIF4_Msk', 'DMA_ISR_TEIF4', 'DMA_ISR_GIF5_Pos', 'DMA_ISR_GIF5_Msk',
    'DMA_ISR_GIF5', 'DMA_ISR_TCIF5_Pos', 'DMA_ISR_TCIF5_Msk', 'DMA_ISR_TCIF5',
    'DMA_ISR_HTIF5_Pos', 'DMA_ISR_HTIF5_Msk', 'DMA_ISR_HTIF5', 'DMA_ISR_TEIF5_Pos',
    'DMA_ISR_TEIF5_Msk', 'DMA_ISR_TEIF5', 'DMA_ISR_GIF6_Pos', 'DMA_ISR_GIF6_Msk',
    'DMA_ISR_GIF6', 'DMA_ISR_TCIF6_Pos', 'DMA_ISR_TCIF6_Msk', 'DMA_ISR_TCIF6',
    'DMA_ISR_HTIF6_Pos', 'DMA_ISR_HTIF6_Msk', 'DMA_ISR_HTIF6', 'DMA_ISR_TEIF6_Pos',
    'DMA_ISR_TEIF6_Msk', 'DMA_ISR_TEIF6', 'DMA_ISR_GIF7_Pos', 'DMA_ISR_GIF7_Msk',
    'DMA_ISR_GIF7', 'DMA_ISR_TCIF7_Pos', 'DMA_ISR_TCIF7_Msk', 'DMA_ISR_TCIF7',
    'DMA_ISR_HTIF7_Pos', 'DMA_ISR_HTIF7_Msk', 'DMA_ISR_HTIF7', 'DMA_ISR_TEIF7_Pos',
    'DMA_ISR_TEIF7_Msk', 'DMA_ISR_TEIF7', 'DMA_IFCR_CGIF1_Pos', 'DMA_IFCR_CGIF1_Msk',
    'DMA_IFCR_CGIF1', 'DMA_IFCR_CTCIF1_Pos', 'DMA_IFCR_CTCIF1_Msk', 'DMA_IFCR_CTCIF1',
    'DMA_IFCR_CHTIF1_Pos', 'DMA_IFCR_CHTIF1_Msk', 'DMA_IFCR_CHTIF1',
    'DMA_IFCR_CTEIF1_Pos', 'DMA_IFCR_CTEIF1_Msk', 'DMA_IFCR_CTEIF1',
    'DMA_IFCR_CGIF2_Pos', 'DMA_IFCR_CGIF2_Msk', 'DMA_IFCR_CGIF2', 'DMA_IFCR_CTCIF2_Pos',
    'DMA_IFCR_CTCIF2_Msk', 'DMA_IFCR_CTCIF2', 'DMA_IFCR_CHTIF2_Pos',
    'DMA_IFCR_CHTIF2_Msk', 'DMA_IFCR_CHTIF2', 'DMA_IFCR_CTEIF2_Pos',
    'DMA_IFCR_CTEIF2_Msk', 'DMA_IFCR_CTEIF2', 'DMA_IFCR_CGIF3_Pos',
    'DMA_IFCR_CGIF3_Msk', 'DMA_IFCR_CGIF3', 'DMA_IFCR_CTCIF3_Pos',
    'DMA_IFCR_CTCIF3_Msk', 'DMA_IFCR_CTCIF3', 'DMA_IFCR_CHTIF3_Pos',
    'DMA_IFCR_CHTIF3_Msk', 'DMA_IFCR_CHTIF3', 'DMA_IFCR_CTEIF3_Pos',
    'DMA_IFCR_CTEIF3_Msk', 'DMA_IFCR_CTEIF3', 'DMA_IFCR_CGIF4_Pos',
    'DMA_IFCR_CGIF4_Msk', 'DMA_IFCR_CGIF4', 'DMA_IFCR_CTCIF4_Pos',
    'DMA_IFCR_CTCIF4_Msk', 'DMA_IFCR_CTCIF4', 'DMA_IFCR_CHTIF4_Pos',
    'DMA_IFCR_CHTIF4_Msk', 'DMA_IFCR_CHTIF4', 'DMA_IFCR_CTEIF4_Pos',
    'DMA_IFCR_CTEIF4_Msk', 'DMA_IFCR_CTEIF4', 'DMA_IFCR_CGIF5_Pos',
    'DMA_IFCR_CGIF5_Msk', 'DMA_IFCR_CGIF5', 'DMA_IFCR_CTCIF5_Pos',
    'DMA_IFCR_CTCIF5_Msk', 'DMA_IFCR_CTCIF5', 'DMA_IFCR_CHTIF5_Pos',
    'DMA_IFCR_CHTIF5_Msk', 'DMA_IFCR_CHTIF5', 'DMA_IFCR_CTEIF5_Pos',
    'DMA_IFCR_CTEIF5_Msk', 'DMA_IFCR_CTEIF5', 'DMA_IFCR_CGIF6_Pos',
    'DMA_IFCR_CGIF6_Msk', 'DMA_IFCR_CGIF6', 'DMA_IFCR_CTCIF6_Pos',
    'DMA_IFCR_CTCIF6_Msk', 'DMA_IFCR_CTCIF6', 'DMA_IFCR_CHTIF6_Pos',
    'DMA_IFCR_CHTIF6_Msk', 'DMA_IFCR_CHTIF6', 'DMA_IFCR_CTEIF6_Pos',
    'DMA_IFCR_CTEIF6_Msk', 'DMA_IFCR_CTEIF6', 'DMA_IFCR_CGIF7_Pos',
    'DMA_IFCR_CGIF7_Msk', 'DMA_IFCR_CGIF7', 'DMA_IFCR_CTCIF7_Pos',
    'DMA_IFCR_CTCIF7_Msk', 'DMA_IFCR_CTCIF7', 'DMA_IFCR_CHTIF7_Pos',
    'DMA_IFCR_CHTIF7_Msk', 'DMA_IFCR_CHTIF7', 'DMA_IFCR_CTEIF7_Pos',
    'DMA_IFCR_CTEIF7_Msk', 'DMA_IFCR_CTEIF7', 'DMA_CCR_EN_Pos', 'DMA_CCR_EN_Msk',
    'DMA_CCR_EN', 'DMA_CCR_TCIE_Pos', 'DMA_CCR_TCIE_Msk', 'DMA_CCR_TCIE',
    'DMA_CCR_HTIE_Pos', 'DMA_CCR_HTIE_Msk', 'DMA_CCR_HTIE', 'DMA_CCR_TEIE_Pos',
    'DMA_CCR_TEIE_Msk', 'DMA_CCR_TEIE', 'DMA_CCR_DIR_Pos', 'DMA_CCR_DIR_Msk',
    'DMA_CCR_DIR', 'DMA_CCR_CIRC_Pos', 'DMA_CCR_CIRC_Msk', 'DMA_CCR_CIRC',
    'DMA_CCR_PINC_Pos', 'DMA_CCR_PINC_Msk', 'DMA_CCR_PINC', 'DMA_CCR_MINC_Pos',
    'DMA_CCR_MINC_Msk', 'DMA_CCR_MINC', 'DMA_CCR_PSIZE_Pos', 'DMA_CCR_PSIZE_Msk',
    'DMA_CCR_PSIZE', 'DMA_CCR_PSIZE_0', 'DMA_CCR_PSIZE_1', 'DMA_CCR_MSIZE_Pos',
    'DMA_CCR_MSIZE_Msk', 'DMA_CCR_MSIZE', 'DMA_CCR_MSIZE_0', 'DMA_CCR_MSIZE_1',
    'DMA_CCR_PL_Pos', 'DMA_CCR_PL_Msk', 'DMA_CCR_PL', 'DMA_CCR_PL_0', 'DMA_CCR_PL_1',
    'DMA_CCR_MEM2MEM_Pos', 'DMA_CCR_MEM2MEM_Msk', 'DMA_CCR_MEM2MEM',
    'DMA_CNDTR_NDT_Pos', 'DMA_CNDTR_NDT_Msk', 'DMA_CNDTR_NDT', 'DMA_CPAR_PA_Pos',
    'DMA_CPAR_PA_Msk', 'DMA_CPAR_PA', 'DMA_CMAR_MA_Pos', 'DMA_CMAR_MA_Msk',
    'DMA_CMAR_MA', 'DMA_CSELR_C1S_Pos', 'DMA_CSELR_C1S_Msk', 'DMA_CSELR_C1S',
    'DMA_CSELR_C2S_Pos', 'DMA_CSELR_C2S_Msk', 'DMA_CSELR_C2S', 'DMA_CSELR_C3S_Pos',
    'DMA_CSELR_C3S_Msk', 'DMA_CSELR_C3S', 'DMA_CSELR_C4S_Pos', 'DMA_CSELR_C4S_Msk',
    'DMA_CSELR_C4S', 'DMA_CSELR_C5S_Pos', 'DMA_CSELR_C5S_Msk', 'DMA_CSELR_C5S',
    'DMA_CSELR_C6S_Pos', 'DMA_CSELR_C6S_Msk', 'DMA_CSELR_C6S', 'DMA_CSELR_C7S_Pos',
    'DMA_CSELR_C7S_Msk', 'DMA_CSELR_C7S', 'EXTI_IMR_IM0_Pos', 'EXTI_IMR_IM0_Msk',
    'EXTI_IMR_IM0', 'EXTI_IMR_IM1_Pos', 'EXTI_IMR_IM1_Msk', 'EXTI_IMR_IM1',
    'EXTI_IMR_IM2_Pos', 'EXTI_IMR_IM2_Msk', 'EXTI_IMR_IM2', 'EXTI_IMR_IM3_Pos',
    'EXTI_IMR_IM3_Msk', 'EXTI_IMR_IM3', 'EXTI_IMR_IM4_Pos', 'EXTI_IMR_IM4_Msk',
    'EXTI_IMR_IM4', 'EXTI_IMR_IM5_Pos', 'EXTI_IMR_IM5_Msk', 'EXTI_IMR_IM5',
    'EXTI_IMR_IM6_Pos', 'EXTI_IMR_IM6_Msk', 'EXTI_IMR_IM6', 'EXTI_IMR_IM7_Pos',
    'EXTI_IMR_IM7_Msk', 'EXTI_IMR_IM7', 'EXTI_IMR_IM8_Pos', 'EXTI_IMR_IM8_Msk',
    'EXTI_IMR_IM8', 'EXTI_IMR_IM9_Pos', 'EXTI_IMR_IM9_Msk', 'EXTI_IMR_IM9',
    'EXTI_IMR_IM10_Pos', 'EXTI_IMR_IM10_Msk', 'EXTI_IMR_IM10', 'EXTI_IMR_IM11_Pos',
    'EXTI_IMR_IM11_Msk', 'EXTI_IMR_IM11', 'EXTI_IMR_IM12_Pos', 'EXTI_IMR_IM12_Msk',
    'EXTI_IMR_IM12', 'EXTI_IMR_IM13_Pos', 'EXTI_IMR_IM13_Msk', 'EXTI_IMR_IM13',
    'EXTI_IMR_IM14_Pos', 'EXTI_IMR_IM14_Msk', 'EXTI_IMR_IM14', 'EXTI_IMR_IM15_Pos',
    'EXTI_IMR_IM15_Msk', 'EXTI_IMR_IM15', 'EXTI_IMR_IM16_Pos', 'EXTI_IMR_IM16_Msk',
    'EXTI_IMR_IM16', 'EXTI_IMR_IM17_Pos', 'EXTI_IMR_IM17_Msk', 'EXTI_IMR_IM17',
    'EXTI_IMR_IM18_Pos', 'EXTI_IMR_IM18_Msk', 'EXTI_IMR_IM18', 'EXTI_IMR_IM19_Pos',
    'EXTI_IMR_IM19_Msk', 'EXTI_IMR_IM19', 'EXTI_IMR_IM20_Pos', 'EXTI_IMR_IM20_Msk',
    'EXTI_IMR_IM20', 'EXTI_IMR_IM21_Pos', 'EXTI_IMR_IM21_Msk', 'EXTI_IMR_IM21',
    'EXTI_IMR_IM22_Pos', 'EXTI_IMR_IM22_Msk', 'EXTI_IMR_IM22', 'EXTI_IMR_IM23_Pos',
    'EXTI_IMR_IM23_Msk', 'EXTI_IMR_IM23', 'EXTI_IMR_IM25_Pos', 'EXTI_IMR_IM25_Msk',
    'EXTI_IMR_IM25', 'EXTI_IMR_IM26_Pos', 'EXTI_IMR_IM26_Msk', 'EXTI_IMR_IM26',
    'EXTI_IMR_IM28_Pos', 'EXTI_IMR_IM28_Msk', 'EXTI_IMR_IM28', 'EXTI_IMR_IM29_Pos',
    'EXTI_IMR_IM29_Msk', 'EXTI_IMR_IM29', 'EXTI_IMR_IM_Pos', 'EXTI_IMR_IM_Msk',
    'EXTI_IMR_IM', 'EXTI_EMR_EM0_Pos', 'EXTI_EMR_EM0_Msk', 'EXTI_EMR_EM0',
    'EXTI_EMR_EM1_Pos', 'EXTI_EMR_EM1_Msk', 'EXTI_EMR_EM1', 'EXTI_EMR_EM2_Pos',
    'EXTI_EMR_EM2_Msk', 'EXTI_EMR_EM2', 'EXTI_EMR_EM3_Pos', 'EXTI_EMR_EM3_Msk',
    'EXTI_EMR_EM3', 'EXTI_EMR_EM4_Pos', 'EXTI_EMR_EM4_Msk', 'EXTI_EMR_EM4',
    'EXTI_EMR_EM5_Pos', 'EXTI_EMR_EM5_Msk', 'EXTI_EMR_EM5', 'EXTI_EMR_EM6_Pos',
    'EXTI_EMR_EM6_Msk', 'EXTI_EMR_EM6', 'EXTI_EMR_EM7_Pos', 'EXTI_EMR_EM7_Msk',
    'EXTI_EMR_EM7', 'EXTI_EMR_EM8_Pos', 'EXTI_EMR_EM8_Msk', 'EXTI_EMR_EM8',
    'EXTI_EMR_EM9_Pos', 'EXTI_EMR_EM9_Msk', 'EXTI_EMR_EM9', 'EXTI_EMR_EM10_Pos',
    'EXTI_EMR_EM10_Msk', 'EXTI_EMR_EM10', 'EXTI_EMR_EM11_Pos', 'EXTI_EMR_EM11_Msk',
    'EXTI_EMR_EM11', 'EXTI_EMR_EM12_Pos', 'EXTI_EMR_EM12_Msk', 'EXTI_EMR_EM12',
    'EXTI_EMR_EM13_Pos', 'EXTI_EMR_EM13_Msk', 'EXTI_EMR_EM13', 'EXTI_EMR_EM14_Pos',
    'EXTI_EMR_EM14_Msk', 'EXTI_EMR_EM14', 'EXTI_EMR_EM15_Pos', 'EXTI_EMR_EM15_Msk',
    'EXTI_EMR_EM15', 'EXTI_EMR_EM16_Pos', 'EXTI_EMR_EM16_Msk', 'EXTI_EMR_EM16',
    'EXTI_EMR_EM17_Pos', 'EXTI_EMR_EM17_Msk', 'EXTI_EMR_EM17', 'EXTI_EMR_EM18_Pos',
    'EXTI_EMR_EM18_Msk', 'EXTI_EMR_EM18', 'EXTI_EMR_EM19_Pos', 'EXTI_EMR_EM19_Msk',
    'EXTI_EMR_EM19', 'EXTI_EMR_EM20_Pos', 'EXTI_EMR_EM20_Msk', 'EXTI_EMR_EM20',
    'EXTI_EMR_EM21_Pos', 'EXTI_EMR_EM21_Msk', 'EXTI_EMR_EM21', 'EXTI_EMR_EM22_Pos',
    'EXTI_EMR_EM22_Msk', 'EXTI_EMR_EM22', 'EXTI_EMR_EM23_Pos', 'EXTI_EMR_EM23_Msk',
    'EXTI_EMR_EM23', 'EXTI_EMR_EM25_Pos', 'EXTI_EMR_EM25_Msk', 'EXTI_EMR_EM25',
    'EXTI_EMR_EM26_Pos', 'EXTI_EMR_EM26_Msk', 'EXTI_EMR_EM26', 'EXTI_EMR_EM28_Pos',
    'EXTI_EMR_EM28_Msk', 'EXTI_EMR_EM28', 'EXTI_EMR_EM29_Pos', 'EXTI_EMR_EM29_Msk',
    'EXTI_EMR_EM29', 'EXTI_RTSR_RT0_Pos', 'EXTI_RTSR_RT0_Msk', 'EXTI_RTSR_RT0',
    'EXTI_RTSR_RT1_Pos', 'EXTI_RTSR_RT1_Msk', 'EXTI_RTSR_RT1', 'EXTI_RTSR_RT2_Pos',
    'EXTI_RTSR_RT2_Msk', 'EXTI_RTSR_RT2', 'EXTI_RTSR_RT3_Pos', 'EXTI_RTSR_RT3_Msk',
    'EXTI_RTSR_RT3', 'EXTI_RTSR_RT4_Pos', 'EXTI_RTSR_RT4_Msk', 'EXTI_RTSR_RT4',
    'EXTI_RTSR_RT5_Pos', 'EXTI_RTSR_RT5_Msk', 'EXTI_RTSR_RT5', 'EXTI_RTSR_RT6_Pos',
    'EXTI_RTSR_RT6_Msk', 'EXTI_RTSR_RT6', 'EXTI_RTSR_RT7_Pos', 'EXTI_RTSR_RT7_Msk',
    'EXTI_RTSR_RT7', 'EXTI_RTSR_RT8_Pos', 'EXTI_RTSR_RT8_Msk', 'EXTI_RTSR_RT8',
    'EXTI_RTSR_RT9_Pos', 'EXTI_RTSR_RT9_Msk', 'EXTI_RTSR_RT9', 'EXTI_RTSR_RT10_Pos',
    'EXTI_RTSR_RT10_Msk', 'EXTI_RTSR_RT10', 'EXTI_RTSR_RT11_Pos', 'EXTI_RTSR_RT11_Msk',
    'EXTI_RTSR_RT11', 'EXTI_RTSR_RT12_Pos', 'EXTI_RTSR_RT12_Msk', 'EXTI_RTSR_RT12',
    'EXTI_RTSR_RT13_Pos', 'EXTI_RTSR_RT13_Msk', 'EXTI_RTSR_RT13', 'EXTI_RTSR_RT14_Pos',
    'EXTI_RTSR_RT14_Msk', 'EXTI_RTSR_RT14', 'EXTI_RTSR_RT15_Pos', 'EXTI_RTSR_RT15_Msk',
    'EXTI_RTSR_RT15', 'EXTI_RTSR_RT16_Pos', 'EXTI_RTSR_RT16_Msk', 'EXTI_RTSR_RT16',
    'EXTI_RTSR_RT17_Pos', 'EXTI_RTSR_RT17_Msk', 'EXTI_RTSR_RT17', 'EXTI_RTSR_RT19_Pos',
    'EXTI_RTSR_RT19_Msk', 'EXTI_RTSR_RT19', 'EXTI_RTSR_RT20_Pos', 'EXTI_RTSR_RT20_Msk',
    'EXTI_RTSR_RT20', 'EXTI_RTSR_RT21_Pos', 'EXTI_RTSR_RT21_Msk', 'EXTI_RTSR_RT21',
    'EXTI_RTSR_RT22_Pos', 'EXTI_RTSR_RT22_Msk', 'EXTI_RTSR_RT22', 'EXTI_RTSR_TR0',
    'EXTI_RTSR_TR1', 'EXTI_RTSR_TR2', 'EXTI_RTSR_TR3', 'EXTI_RTSR_TR4', 'EXTI_RTSR_TR5',
    'EXTI_RTSR_TR6', 'EXTI_RTSR_TR7', 'EXTI_RTSR_TR8', 'EXTI_RTSR_TR9',
    'EXTI_RTSR_TR10', 'EXTI_RTSR_TR11', 'EXTI_RTSR_TR12', 'EXTI_RTSR_TR13',
    'EXTI_RTSR_TR14', 'EXTI_RTSR_TR15', 'EXTI_RTSR_TR16', 'EXTI_RTSR_TR17',
    'EXTI_RTSR_TR19', 'EXTI_RTSR_TR20', 'EXTI_RTSR_TR21', 'EXTI_RTSR_TR22',
    'EXTI_FTSR_FT0_Pos', 'EXTI_FTSR_FT0_Msk', 'EXTI_FTSR_FT0', 'EXTI_FTSR_FT1_Pos',
    'EXTI_FTSR_FT1_Msk', 'EXTI_FTSR_FT1', 'EXTI_FTSR_FT2_Pos', 'EXTI_FTSR_FT2_Msk',
    'EXTI_FTSR_FT2', 'EXTI_FTSR_FT3_Pos', 'EXTI_FTSR_FT3_Msk', 'EXTI_FTSR_FT3',
    'EXTI_FTSR_FT4_Pos', 'EXTI_FTSR_FT4_Msk', 'EXTI_FTSR_FT4', 'EXTI_FTSR_FT5_Pos',
    'EXTI_FTSR_FT5_Msk', 'EXTI_FTSR_FT5', 'EXTI_FTSR_FT6_Pos', 'EXTI_FTSR_FT6_Msk',
    'EXTI_FTSR_FT6', 'EXTI_FTSR_FT7_Pos', 'EXTI_FTSR_FT7_Msk', 'EXTI_FTSR_FT7',
    'EXTI_FTSR_FT8_Pos', 'EXTI_FTSR_FT8_Msk', 'EXTI_FTSR_FT8', 'EXTI_FTSR_FT9_Pos',
    'EXTI_FTSR_FT9_Msk', 'EXTI_FTSR_FT9', 'EXTI_FTSR_FT10_Pos', 'EXTI_FTSR_FT10_Msk',
    'EXTI_FTSR_FT10', 'EXTI_FTSR_FT11_Pos', 'EXTI_FTSR_FT11_Msk', 'EXTI_FTSR_FT11',
    'EXTI_FTSR_FT12_Pos', 'EXTI_FTSR_FT12_Msk', 'EXTI_FTSR_FT12', 'EXTI_FTSR_FT13_Pos',
    'EXTI_FTSR_FT13_Msk', 'EXTI_FTSR_FT13', 'EXTI_FTSR_FT14_Pos', 'EXTI_FTSR_FT14_Msk',
    'EXTI_FTSR_FT14', 'EXTI_FTSR_FT15_Pos', 'EXTI_FTSR_FT15_Msk', 'EXTI_FTSR_FT15',
    'EXTI_FTSR_FT16_Pos', 'EXTI_FTSR_FT16_Msk', 'EXTI_FTSR_FT16', 'EXTI_FTSR_FT17_Pos',
    'EXTI_FTSR_FT17_Msk', 'EXTI_FTSR_FT17', 'EXTI_FTSR_FT19_Pos', 'EXTI_FTSR_FT19_Msk',
    'EXTI_FTSR_FT19', 'EXTI_FTSR_FT20_Pos', 'EXTI_FTSR_FT20_Msk', 'EXTI_FTSR_FT20',
    'EXTI_FTSR_FT21_Pos', 'EXTI_FTSR_FT21_Msk', 'EXTI_FTSR_FT21', 'EXTI_FTSR_FT22_Pos',
    'EXTI_FTSR_FT22_Msk', 'EXTI_FTSR_FT22', 'EXTI_FTSR_TR0', 'EXTI_FTSR_TR1',
    'EXTI_FTSR_TR2', 'EXTI_FTSR_TR3', 'EXTI_FTSR_TR4', 'EXTI_FTSR_TR5', 'EXTI_FTSR_TR6',
    'EXTI_FTSR_TR7', 'EXTI_FTSR_TR8', 'EXTI_FTSR_TR9', 'EXTI_FTSR_TR10',
    'EXTI_FTSR_TR11', 'EXTI_FTSR_TR12', 'EXTI_FTSR_TR13', 'EXTI_FTSR_TR14',
    'EXTI_FTSR_TR15', 'EXTI_FTSR_TR16', 'EXTI_FTSR_TR17', 'EXTI_FTSR_TR19',
    'EXTI_FTSR_TR20', 'EXTI_FTSR_TR21', 'EXTI_FTSR_TR22', 'EXTI_SWIER_SWI0_Pos',
    'EXTI_SWIER_SWI0_Msk', 'EXTI_SWIER_SWI0', 'EXTI_SWIER_SWI1_Pos',
    'EXTI_SWIER_SWI1_Msk', 'EXTI_SWIER_SWI1', 'EXTI_SWIER_SWI2_Pos',
    'EXTI_SWIER_SWI2_Msk', 'EXTI_SWIER_SWI2', 'EXTI_SWIER_SWI3_Pos',
    'EXTI_SWIER_SWI3_Msk', 'EXTI_SWIER_SWI3', 'EXTI_SWIER_SWI4_Pos',
    'EXTI_SWIER_SWI4_Msk', 'EXTI_SWIER_SWI4', 'EXTI_SWIER_SWI5_Pos',
    'EXTI_SWIER_SWI5_Msk', 'EXTI_SWIER_SWI5', 'EXTI_SWIER_SWI6_Pos',
    'EXTI_SWIER_SWI6_Msk', 'EXTI_SWIER_SWI6', 'EXTI_SWIER_SWI7_Pos',
    'EXTI_SWIER_SWI7_Msk', 'EXTI_SWIER_SWI7', 'EXTI_SWIER_SWI8_Pos',
    'EXTI_SWIER_SWI8_Msk', 'EXTI_SWIER_SWI8', 'EXTI_SWIER_SWI9_Pos',
    'EXTI_SWIER_SWI9_Msk', 'EXTI_SWIER_SWI9', 'EXTI_SWIER_SWI10_Pos',
    'EXTI_SWIER_SWI10_Msk', 'EXTI_SWIER_SWI10', 'EXTI_SWIER_SWI11_Pos',
    'EXTI_SWIER_SWI11_Msk', 'EXTI_SWIER_SWI11', 'EXTI_SWIER_SWI12_Pos',
    'EXTI_SWIER_SWI12_Msk', 'EXTI_SWIER_SWI12', 'EXTI_SWIER_SWI13_Pos',
    'EXTI_SWIER_SWI13_Msk', 'EXTI_SWIER_SWI13', 'EXTI_SWIER_SWI14_Pos',
    'EXTI_SWIER_SWI14_Msk', 'EXTI_SWIER_SWI14', 'EXTI_SWIER_SWI15_Pos',
    'EXTI_SWIER_SWI15_Msk', 'EXTI_SWIER_SWI15', 'EXTI_SWIER_SWI16_Pos',
    'EXTI_SWIER_SWI16_Msk', 'EXTI_SWIER_SWI16', 'EXTI_SWIER_SWI17_Pos',
    'EXTI_SWIER_SWI17_Msk', 'EXTI_SWIER_SWI17', 'EXTI_SWIER_SWI19_Pos',
    'EXTI_SWIER_SWI19_Msk', 'EXTI_SWIER_SWI19', 'EXTI_SWIER_SWI20_Pos',
    'EXTI_SWIER_SWI20_Msk', 'EXTI_SWIER_SWI20', 'EXTI_SWIER_SWI21_Pos',
    'EXTI_SWIER_SWI21_Msk', 'EXTI_SWIER_SWI21', 'EXTI_SWIER_SWI22_Pos',
    'EXTI_SWIER_SWI22_Msk', 'EXTI_SWIER_SWI22', 'EXTI_SWIER_SWIER0',
    'EXTI_SWIER_SWIER1', 'EXTI_SWIER_SWIER2', 'EXTI_SWIER_SWIER3', 'EXTI_SWIER_SWIER4',
    'EXTI_SWIER_SWIER5', 'EXTI_SWIER_SWIER6', 'EXTI_SWIER_SWIER7', 'EXTI_SWIER_SWIER8',
    'EXTI_SWIER_SWIER9', 'EXTI_SWIER_SWIER10', 'EXTI_SWIER_SWIER11',
    'EXTI_SWIER_SWIER12', 'EXTI_SWIER_SWIER13', 'EXTI_SWIER_SWIER14',
    'EXTI_SWIER_SWIER15', 'EXTI_SWIER_SWIER16', 'EXTI_SWIER_SWIER17',
    'EXTI_SWIER_SWIER19', 'EXTI_SWIER_SWIER20', 'EXTI_SWIER_SWIER21',
    'EXTI_SWIER_SWIER22', 'EXTI_PR_PIF0_Pos', 'EXTI_PR_PIF0_Msk', 'EXTI_PR_PIF0',
    'EXTI_PR_PIF1_Pos', 'EXTI_PR_PIF1_Msk', 'EXTI_PR_PIF1', 'EXTI_PR_PIF2_Pos',
    'EXTI_PR_PIF2_Msk', 'EXTI_PR_PIF2', 'EXTI_PR_PIF3_Pos', 'EXTI_PR_PIF3_Msk',
    'EXTI_PR_PIF3', 'EXTI_PR_PIF4_Pos', 'EXTI_PR_PIF4_Msk', 'EXTI_PR_PIF4',
    'EXTI_PR_PIF5_Pos', 'EXTI_PR_PIF5_Msk', 'EXTI_PR_PIF5', 'EXTI_PR_PIF6_Pos',
    'EXTI_PR_PIF6_Msk', 'EXTI_PR_PIF6', 'EXTI_PR_PIF7_Pos', 'EXTI_PR_PIF7_Msk',
    'EXTI_PR_PIF7', 'EXTI_PR_PIF8_Pos', 'EXTI_PR_PIF8_Msk', 'EXTI_PR_PIF8',
    'EXTI_PR_PIF9_Pos', 'EXTI_PR_PIF9_Msk', 'EXTI_PR_PIF9', 'EXTI_PR_PIF10_Pos',
    'EXTI_PR_PIF10_Msk', 'EXTI_PR_PIF10', 'EXTI_PR_PIF11_Pos', 'EXTI_PR_PIF11_Msk',
    'EXTI_PR_PIF11', 'EXTI_PR_PIF12_Pos', 'EXTI_PR_PIF12_Msk', 'EXTI_PR_PIF12',
    'EXTI_PR_PIF13_Pos', 'EXTI_PR_PIF13_Msk', 'EXTI_PR_PIF13', 'EXTI_PR_PIF14_Pos',
    'EXTI_PR_PIF14_Msk', 'EXTI_PR_PIF14', 'EXTI_PR_PIF15_Pos', 'EXTI_PR_PIF15_Msk',
    'EXTI_PR_PIF15', 'EXTI_PR_PIF16_Pos', 'EXTI_PR_PIF16_Msk', 'EXTI_PR_PIF16',
    'EXTI_PR_PIF17_Pos', 'EXTI_PR_PIF17_Msk', 'EXTI_PR_PIF17', 'EXTI_PR_PIF19_Pos',
    'EXTI_PR_PIF19_Msk', 'EXTI_PR_PIF19', 'EXTI_PR_PIF20_Pos', 'EXTI_PR_PIF20_Msk',
    'EXTI_PR_PIF20', 'EXTI_PR_PIF21_Pos', 'EXTI_PR_PIF21_Msk', 'EXTI_PR_PIF21',
    'EXTI_PR_PIF22_Pos', 'EXTI_PR_PIF22_Msk', 'EXTI_PR_PIF22', 'EXTI_PR_PR0',
    'EXTI_PR_PR1', 'EXTI_PR_PR2', 'EXTI_PR_PR3', 'EXTI_PR_PR4', 'EXTI_PR_PR5',
    'EXTI_PR_PR6', 'EXTI_PR_PR7', 'EXTI_PR_PR8', 'EXTI_PR_PR9', 'EXTI_PR_PR10',
    'EXTI_PR_PR11', 'EXTI_PR_PR12', 'EXTI_PR_PR13', 'EXTI_PR_PR14', 'EXTI_PR_PR15',
    'EXTI_PR_PR16', 'EXTI_PR_PR17', 'EXTI_PR_PR19', 'EXTI_PR_PR20', 'EXTI_PR_PR21',
    'EXTI_PR_PR22', 'FLASH_ACR_LATENCY_Pos', 'FLASH_ACR_LATENCY_Msk',
    'FLASH_ACR_LATENCY', 'FLASH_ACR_PRFTEN_Pos', 'FLASH_ACR_PRFTEN_Msk',
    'FLASH_ACR_PRFTEN', 'FLASH_ACR_SLEEP_PD_Pos', 'FLASH_ACR_SLEEP_PD_Msk',
    'FLASH_ACR_SLEEP_PD', 'FLASH_ACR_RUN_PD_Pos', 'FLASH_ACR_RUN_PD_Msk',
    'FLASH_ACR_RUN_PD', 'FLASH_ACR_DISAB_BUF_Pos', 'FLASH_ACR_DISAB_BUF_Msk',
    'FLASH_ACR_DISAB_BUF', 'FLASH_ACR_PRE_READ_Pos', 'FLASH_ACR_PRE_READ_Msk',
    'FLASH_ACR_PRE_READ', 'FLASH_PECR_PELOCK_Pos', 'FLASH_PECR_PELOCK_Msk',
    'FLASH_PECR_PELOCK', 'FLASH_PECR_PRGLOCK_Pos', 'FLASH_PECR_PRGLOCK_Msk',
    'FLASH_PECR_PRGLOCK', 'FLASH_PECR_OPTLOCK_Pos', 'FLASH_PECR_OPTLOCK_Msk',
    'FLASH_PECR_OPTLOCK', 'FLASH_PECR_PROG_Pos', 'FLASH_PECR_PROG_Msk',
    'FLASH_PECR_PROG', 'FLASH_PECR_DATA_Pos', 'FLASH_PECR_DATA_Msk', 'FLASH_PECR_DATA',
    'FLASH_PECR_FIX_Pos', 'FLASH_PECR_FIX_Msk', 'FLASH_PECR_FIX',
    'FLASH_PECR_ERASE_Pos', 'FLASH_PECR_ERASE_Msk', 'FLASH_PECR_ERASE',
    'FLASH_PECR_FPRG_Pos', 'FLASH_PECR_FPRG_Msk', 'FLASH_PECR_FPRG',
    'FLASH_PECR_EOPIE_Pos', 'FLASH_PECR_EOPIE_Msk', 'FLASH_PECR_EOPIE',
    'FLASH_PECR_ERRIE_Pos', 'FLASH_PECR_ERRIE_Msk', 'FLASH_PECR_ERRIE',
    'FLASH_PECR_OBL_LAUNCH_Pos', 'FLASH_PECR_OBL_LAUNCH_Msk', 'FLASH_PECR_OBL_LAUNCH',
    'FLASH_PECR_HALF_ARRAY_Pos', 'FLASH_PECR_HALF_ARRAY_Msk', 'FLASH_PECR_HALF_ARRAY',
    'FLASH_PDKEYR_PDKEYR_Pos', 'FLASH_PDKEYR_PDKEYR_Msk', 'FLASH_PDKEYR_PDKEYR',
    'FLASH_PEKEYR_PEKEYR_Pos', 'FLASH_PEKEYR_PEKEYR_Msk', 'FLASH_PEKEYR_PEKEYR',
    'FLASH_PRGKEYR_PRGKEYR_Pos', 'FLASH_PRGKEYR_PRGKEYR_Msk', 'FLASH_PRGKEYR_PRGKEYR',
    'FLASH_OPTKEYR_OPTKEYR_Pos', 'FLASH_OPTKEYR_OPTKEYR_Msk', 'FLASH_OPTKEYR_OPTKEYR',
    'FLASH_SR_BSY_Pos', 'FLASH_SR_BSY_Msk', 'FLASH_SR_BSY', 'FLASH_SR_EOP_Pos',
    'FLASH_SR_EOP_Msk', 'FLASH_SR_EOP', 'FLASH_SR_HVOFF_Pos', 'FLASH_SR_HVOFF_Msk',
    'FLASH_SR_HVOFF', 'FLASH_SR_READY_Pos', 'FLASH_SR_READY_Msk', 'FLASH_SR_READY',
    'FLASH_SR_WRPERR_Pos', 'FLASH_SR_WRPERR_Msk', 'FLASH_SR_WRPERR',
    'FLASH_SR_PGAERR_Pos', 'FLASH_SR_PGAERR_Msk', 'FLASH_SR_PGAERR',
    'FLASH_SR_SIZERR_Pos', 'FLASH_SR_SIZERR_Msk', 'FLASH_SR_SIZERR',
    'FLASH_SR_OPTVERR_Pos', 'FLASH_SR_OPTVERR_Msk', 'FLASH_SR_OPTVERR',
    'FLASH_SR_RDERR_Pos', 'FLASH_SR_RDERR_Msk', 'FLASH_SR_RDERR',
    'FLASH_SR_NOTZEROERR_Pos', 'FLASH_SR_NOTZEROERR_Msk', 'FLASH_SR_NOTZEROERR',
    'FLASH_SR_FWWERR_Pos', 'FLASH_SR_FWWERR_Msk', 'FLASH_SR_FWWERR', 'FLASH_SR_FWWER',
    'FLASH_SR_ENHV', 'FLASH_SR_ENDHV', 'FLASH_OPTR_RDPROT_Pos', 'FLASH_OPTR_RDPROT_Msk',
    'FLASH_OPTR_RDPROT', 'FLASH_OPTR_WPRMOD_Pos', 'FLASH_OPTR_WPRMOD_Msk',
    'FLASH_OPTR_WPRMOD', 'FLASH_OPTR_BOR_LEV_Pos', 'FLASH_OPTR_BOR_LEV_Msk',
    'FLASH_OPTR_BOR_LEV', 'FLASH_OPTR_IWDG_SW_Pos', 'FLASH_OPTR_IWDG_SW_Msk',
    'FLASH_OPTR_IWDG_SW', 'FLASH_OPTR_nRST_STOP_Pos', 'FLASH_OPTR_nRST_STOP_Msk',
    'FLASH_OPTR_nRST_STOP', 'FLASH_OPTR_nRST_STDBY_Pos', 'FLASH_OPTR_nRST_STDBY_Msk',
    'FLASH_OPTR_nRST_STDBY', 'FLASH_OPTR_USER_Pos', 'FLASH_OPTR_USER_Msk',
    'FLASH_OPTR_USER', 'FLASH_OPTR_BOOT1_Pos', 'FLASH_OPTR_BOOT1_Msk',
    'FLASH_OPTR_BOOT1', 'FLASH_WRPR_WRP_Pos', 'FLASH_WRPR_WRP_Msk', 'FLASH_WRPR_WRP',
    'GPIO_MODER_MODE0_Pos', 'GPIO_MODER_MODE0_Msk', 'GPIO_MODER_MODE0',
    'GPIO_MODER_MODE0_0', 'GPIO_MODER_MODE0_1', 'GPIO_MODER_MODE1_Pos',
    'GPIO_MODER_MODE1_Msk', 'GPIO_MODER_MODE1', 'GPIO_MODER_MODE1_0',
    'GPIO_MODER_MODE1_1', 'GPIO_MODER_MODE2_Pos', 'GPIO_MODER_MODE2_Msk',
    'GPIO_MODER_MODE2', 'GPIO_MODER_MODE2_0', 'GPIO_MODER_MODE2_1',
    'GPIO_MODER_MODE3_Pos', 'GPIO_MODER_MODE3_Msk', 'GPIO_MODER_MODE3',
    'GPIO_MODER_MODE3_0', 'GPIO_MODER_MODE3_1', 'GPIO_MODER_MODE4_Pos',
    'GPIO_MODER_MODE4_Msk', 'GPIO_MODER_MODE4', 'GPIO_MODER_MODE4_0',
    'GPIO_MODER_MODE4_1', 'GPIO_MODER_MODE5_Pos', 'GPIO_MODER_MODE5_Msk',
    'GPIO_MODER_MODE5', 'GPIO_MODER_MODE5_0', 'GPIO_MODER_MODE5_1',
    'GPIO_MODER_MODE6_Pos', 'GPIO_MODER_MODE6_Msk', 'GPIO_MODER_MODE6',
    'GPIO_MODER_MODE6_0', 'GPIO_MODER_MODE6_1', 'GPIO_MODER_MODE7_Pos',
    'GPIO_MODER_MODE7_Msk', 'GPIO_MODER_MODE7', 'GPIO_MODER_MODE7_0',
    'GPIO_MODER_MODE7_1', 'GPIO_MODER_MODE8_Pos', 'GPIO_MODER_MODE8_Msk',
    'GPIO_MODER_MODE8', 'GPIO_MODER_MODE8_0', 'GPIO_MODER_MODE8_1',
    'GPIO_MODER_MODE9_Pos', 'GPIO_MODER_MODE9_Msk', 'GPIO_MODER_MODE9',
    'GPIO_MODER_MODE9_0', 'GPIO_MODER_MODE9_1', 'GPIO_MODER_MODE10_Pos',
    'GPIO_MODER_MODE10_Msk', 'GPIO_MODER_MODE10', 'GPIO_MODER_MODE10_0',
    'GPIO_MODER_MODE10_1', 'GPIO_MODER_MODE11_Pos', 'GPIO_MODER_MODE11_Msk',
    'GPIO_MODER_MODE11', 'GPIO_MODER_MODE11_0', 'GPIO_MODER_MODE11_1',
    'GPIO_MODER_MODE12_Pos', 'GPIO_MODER_MODE12_Msk', 'GPIO_MODER_MODE12',
    'GPIO_MODER_MODE12_0', 'GPIO_MODER_MODE12_1', 'GPIO_MODER_MODE13_Pos',
    'GPIO_MODER_MODE13_Msk', 'GPIO_MODER_MODE13', 'GPIO_MODER_MODE13_0',
    'GPIO_MODER_MODE13_1', 'GPIO_MODER_MODE14_Pos', 'GPIO_MODER_MODE14_Msk',
    'GPIO_MODER_MODE14', 'GPIO_MODER_MODE14_0', 'GPIO_MODER_MODE14_1',
    'GPIO_MODER_MODE15_Pos', 'GPIO_MODER_MODE15_Msk', 'GPIO_MODER_MODE15',
    'GPIO_MODER_MODE15_0', 'GPIO_MODER_MODE15_1', 'GPIO_OTYPER_OT_0',
    'GPIO_OTYPER_OT_1', 'GPIO_OTYPER_OT_2', 'GPIO_OTYPER_OT_3', 'GPIO_OTYPER_OT_4',
    'GPIO_OTYPER_OT_5', 'GPIO_OTYPER_OT_6', 'GPIO_OTYPER_OT_7', 'GPIO_OTYPER_OT_8',
    'GPIO_OTYPER_OT_9', 'GPIO_OTYPER_OT_10', 'GPIO_OTYPER_OT_11', 'GPIO_OTYPER_OT_12',
    'GPIO_OTYPER_OT_13', 'GPIO_OTYPER_OT_14', 'GPIO_OTYPER_OT_15',
    'GPIO_OSPEEDER_OSPEED0_Pos', 'GPIO_OSPEEDER_OSPEED0_Msk', 'GPIO_OSPEEDER_OSPEED0',
    'GPIO_OSPEEDER_OSPEED0_0', 'GPIO_OSPEEDER_OSPEED0_1', 'GPIO_OSPEEDER_OSPEED1_Pos',
    'GPIO_OSPEEDER_OSPEED1_Msk', 'GPIO_OSPEEDER_OSPEED1', 'GPIO_OSPEEDER_OSPEED1_0',
    'GPIO_OSPEEDER_OSPEED1_1', 'GPIO_OSPEEDER_OSPEED2_Pos', 'GPIO_OSPEEDER_OSPEED2_Msk',
    'GPIO_OSPEEDER_OSPEED2', 'GPIO_OSPEEDER_OSPEED2_0', 'GPIO_OSPEEDER_OSPEED2_1',
    'GPIO_OSPEEDER_OSPEED3_Pos', 'GPIO_OSPEEDER_OSPEED3_Msk', 'GPIO_OSPEEDER_OSPEED3',
    'GPIO_OSPEEDER_OSPEED3_0', 'GPIO_OSPEEDER_OSPEED3_1', 'GPIO_OSPEEDER_OSPEED4_Pos',
    'GPIO_OSPEEDER_OSPEED4_Msk', 'GPIO_OSPEEDER_OSPEED4', 'GPIO_OSPEEDER_OSPEED4_0',
    'GPIO_OSPEEDER_OSPEED4_1', 'GPIO_OSPEEDER_OSPEED5_Pos', 'GPIO_OSPEEDER_OSPEED5_Msk',
    'GPIO_OSPEEDER_OSPEED5', 'GPIO_OSPEEDER_OSPEED5_0', 'GPIO_OSPEEDER_OSPEED5_1',
    'GPIO_OSPEEDER_OSPEED6_Pos', 'GPIO_OSPEEDER_OSPEED6_Msk', 'GPIO_OSPEEDER_OSPEED6',
    'GPIO_OSPEEDER_OSPEED6_0', 'GPIO_OSPEEDER_OSPEED6_1', 'GPIO_OSPEEDER_OSPEED7_Pos',
    'GPIO_OSPEEDER_OSPEED7_Msk', 'GPIO_OSPEEDER_OSPEED7', 'GPIO_OSPEEDER_OSPEED7_0',
    'GPIO_OSPEEDER_OSPEED7_1', 'GPIO_OSPEEDER_OSPEED8_Pos', 'GPIO_OSPEEDER_OSPEED8_Msk',
    'GPIO_OSPEEDER_OSPEED8', 'GPIO_OSPEEDER_OSPEED8_0', 'GPIO_OSPEEDER_OSPEED8_1',
    'GPIO_OSPEEDER_OSPEED9_Pos', 'GPIO_OSPEEDER_OSPEED9_Msk', 'GPIO_OSPEEDER_OSPEED9',
    'GPIO_OSPEEDER_OSPEED9_0', 'GPIO_OSPEEDER_OSPEED9_1', 'GPIO_OSPEEDER_OSPEED10_Pos',
    'GPIO_OSPEEDER_OSPEED10_Msk', 'GPIO_OSPEEDER_OSPEED10', 'GPIO_OSPEEDER_OSPEED10_0',
    'GPIO_OSPEEDER_OSPEED10_1', 'GPIO_OSPEEDER_OSPEED11_Pos',
    'GPIO_OSPEEDER_OSPEED11_Msk', 'GPIO_OSPEEDER_OSPEED11', 'GPIO_OSPEEDER_OSPEED11_0',
    'GPIO_OSPEEDER_OSPEED11_1', 'GPIO_OSPEEDER_OSPEED12_Pos',
    'GPIO_OSPEEDER_OSPEED12_Msk', 'GPIO_OSPEEDER_OSPEED12', 'GPIO_OSPEEDER_OSPEED12_0',
    'GPIO_OSPEEDER_OSPEED12_1', 'GPIO_OSPEEDER_OSPEED13_Pos',
    'GPIO_OSPEEDER_OSPEED13_Msk', 'GPIO_OSPEEDER_OSPEED13', 'GPIO_OSPEEDER_OSPEED13_0',
    'GPIO_OSPEEDER_OSPEED13_1', 'GPIO_OSPEEDER_OSPEED14_Pos',
    'GPIO_OSPEEDER_OSPEED14_Msk', 'GPIO_OSPEEDER_OSPEED14', 'GPIO_OSPEEDER_OSPEED14_0',
    'GPIO_OSPEEDER_OSPEED14_1', 'GPIO_OSPEEDER_OSPEED15_Pos',
    'GPIO_OSPEEDER_OSPEED15_Msk', 'GPIO_OSPEEDER_OSPEED15', 'GPIO_OSPEEDER_OSPEED15_0',
    'GPIO_OSPEEDER_OSPEED15_1', 'GPIO_PUPDR_PUPD0_Pos', 'GPIO_PUPDR_PUPD0_Msk',
    'GPIO_PUPDR_PUPD0', 'GPIO_PUPDR_PUPD0_0', 'GPIO_PUPDR_PUPD0_1',
    'GPIO_PUPDR_PUPD1_Pos', 'GPIO_PUPDR_PUPD1_Msk', 'GPIO_PUPDR_PUPD1',
    'GPIO_PUPDR_PUPD1_0', 'GPIO_PUPDR_PUPD1_1', 'GPIO_PUPDR_PUPD2_Pos',
    'GPIO_PUPDR_PUPD2_Msk', 'GPIO_PUPDR_PUPD2', 'GPIO_PUPDR_PUPD2_0',
    'GPIO_PUPDR_PUPD2_1', 'GPIO_PUPDR_PUPD3_Pos', 'GPIO_PUPDR_PUPD3_Msk',
    'GPIO_PUPDR_PUPD3', 'GPIO_PUPDR_PUPD3_0', 'GPIO_PUPDR_PUPD3_1',
    'GPIO_PUPDR_PUPD4_Pos', 'GPIO_PUPDR_PUPD4_Msk', 'GPIO_PUPDR_PUPD4',
    'GPIO_PUPDR_PUPD4_0', 'GPIO_PUPDR_PUPD4_1', 'GPIO_PUPDR_PUPD5_Pos',
    'GPIO_PUPDR_PUPD5_Msk', 'GPIO_PUPDR_PUPD5', 'GPIO_PUPDR_PUPD5_0',
    'GPIO_PUPDR_PUPD5_1', 'GPIO_PUPDR_PUPD6_Pos', 'GPIO_PUPDR_PUPD6_Msk',
    'GPIO_PUPDR_PUPD6', 'GPIO_PUPDR_PUPD6_0', 'GPIO_PUPDR_PUPD6_1',
    'GPIO_PUPDR_PUPD7_Pos', 'GPIO_PUPDR_PUPD7_Msk', 'GPIO_PUPDR_PUPD7',
    'GPIO_PUPDR_PUPD7_0', 'GPIO_PUPDR_PUPD7_1', 'GPIO_PUPDR_PUPD8_Pos',
    'GPIO_PUPDR_PUPD8_Msk', 'GPIO_PUPDR_PUPD8', 'GPIO_PUPDR_PUPD8_0',
    'GPIO_PUPDR_PUPD8_1', 'GPIO_PUPDR_PUPD9_Pos', 'GPIO_PUPDR_PUPD9_Msk',
    'GPIO_PUPDR_PUPD9', 'GPIO_PUPDR_PUPD9_0', 'GPIO_PUPDR_PUPD9_1',
    'GPIO_PUPDR_PUPD10_Pos', 'GPIO_PUPDR_PUPD10_Msk', 'GPIO_PUPDR_PUPD10',
    'GPIO_PUPDR_PUPD10_0', 'GPIO_PUPDR_PUPD10_1', 'GPIO_PUPDR_PUPD11_Pos',
    'GPIO_PUPDR_PUPD11_Msk', 'GPIO_PUPDR_PUPD11', 'GPIO_PUPDR_PUPD11_0',
    'GPIO_PUPDR_PUPD11_1', 'GPIO_PUPDR_PUPD12_Pos', 'GPIO_PUPDR_PUPD12_Msk',
    'GPIO_PUPDR_PUPD12', 'GPIO_PUPDR_PUPD12_0', 'GPIO_PUPDR_PUPD12_1',
    'GPIO_PUPDR_PUPD13_Pos', 'GPIO_PUPDR_PUPD13_Msk', 'GPIO_PUPDR_PUPD13',
    'GPIO_PUPDR_PUPD13_0', 'GPIO_PUPDR_PUPD13_1', 'GPIO_PUPDR_PUPD14_Pos',
    'GPIO_PUPDR_PUPD14_Msk', 'GPIO_PUPDR_PUPD14', 'GPIO_PUPDR_PUPD14_0',
    'GPIO_PUPDR_PUPD14_1', 'GPIO_PUPDR_PUPD15_Pos', 'GPIO_PUPDR_PUPD15_Msk',
    'GPIO_PUPDR_PUPD15', 'GPIO_PUPDR_PUPD15_0', 'GPIO_PUPDR_PUPD15_1',
    'GPIO_IDR_ID0_Pos', 'GPIO_IDR_ID0_Msk', 'GPIO_IDR_ID0', 'GPIO_IDR_ID1_Pos',
    'GPIO_IDR_ID1_Msk', 'GPIO_IDR_ID1', 'GPIO_IDR_ID2_Pos', 'GPIO_IDR_ID2_Msk',
    'GPIO_IDR_ID2', 'GPIO_IDR_ID3_Pos', 'GPIO_IDR_ID3_Msk', 'GPIO_IDR_ID3',
    'GPIO_IDR_ID4_Pos', 'GPIO_IDR_ID4_Msk', 'GPIO_IDR_ID4', 'GPIO_IDR_ID5_Pos',
    'GPIO_IDR_ID5_Msk', 'GPIO_IDR_ID5', 'GPIO_IDR_ID6_Pos', 'GPIO_IDR_ID6_Msk',
    'GPIO_IDR_ID6', 'GPIO_IDR_ID7_Pos', 'GPIO_IDR_ID7_Msk', 'GPIO_IDR_ID7',
    'GPIO_IDR_ID8_Pos', 'GPIO_IDR_ID8_Msk', 'GPIO_IDR_ID8', 'GPIO_IDR_ID9_Pos',
    'GPIO_IDR_ID9_Msk', 'GPIO_IDR_ID9', 'GPIO_IDR_ID10_Pos', 'GPIO_IDR_ID10_Msk',
    'GPIO_IDR_ID10', 'GPIO_IDR_ID11_Pos', 'GPIO_IDR_ID11_Msk', 'GPIO_IDR_ID11',
    'GPIO_IDR_ID12_Pos', 'GPIO_IDR_ID12_Msk', 'GPIO_IDR_ID12', 'GPIO_IDR_ID13_Pos',
    'GPIO_IDR_ID13_Msk', 'GPIO_IDR_ID13', 'GPIO_IDR_ID14_Pos', 'GPIO_IDR_ID14_Msk',
    'GPIO_IDR_ID14', 'GPIO_IDR_ID15_Pos', 'GPIO_IDR_ID15_Msk', 'GPIO_IDR_ID15',
    'GPIO_ODR_OD0_Pos', 'GPIO_ODR_OD0_Msk', 'GPIO_ODR_OD0', 'GPIO_ODR_OD1_Pos',
    'GPIO_ODR_OD1_Msk', 'GPIO_ODR_OD1', 'GPIO_ODR_OD2_Pos', 'GPIO_ODR_OD2_Msk',
    'GPIO_ODR_OD2', 'GPIO_ODR_OD3_Pos', 'GPIO_ODR_OD3_Msk', 'GPIO_ODR_OD3',
    'GPIO_ODR_OD4_Pos', 'GPIO_ODR_OD4_Msk', 'GPIO_ODR_OD4', 'GPIO_ODR_OD5_Pos',
    'GPIO_ODR_OD5_Msk', 'GPIO_ODR_OD5', 'GPIO_ODR_OD6_Pos', 'GPIO_ODR_OD6_Msk',
    'GPIO_ODR_OD6', 'GPIO_ODR_OD7_Pos', 'GPIO_ODR_OD7_Msk', 'GPIO_ODR_OD7',
    'GPIO_ODR_OD8_Pos', 'GPIO_ODR_OD8_Msk', 'GPIO_ODR_OD8', 'GPIO_ODR_OD9_Pos',
    'GPIO_ODR_OD9_Msk', 'GPIO_ODR_OD9', 'GPIO_ODR_OD10_Pos', 'GPIO_ODR_OD10_Msk',
    'GPIO_ODR_OD10', 'GPIO_ODR_OD11_Pos', 'GPIO_ODR_OD11_Msk', 'GPIO_ODR_OD11',
    'GPIO_ODR_OD12_Pos', 'GPIO_ODR_OD12_Msk', 'GPIO_ODR_OD12', 'GPIO_ODR_OD13_Pos',
    'GPIO_ODR_OD13_Msk', 'GPIO_ODR_OD13', 'GPIO_ODR_OD14_Pos', 'GPIO_ODR_OD14_Msk',
    'GPIO_ODR_OD14', 'GPIO_ODR_OD15_Pos', 'GPIO_ODR_OD15_Msk', 'GPIO_ODR_OD15',
    'GPIO_BSRR_BS_0', 'GPIO_BSRR_BS_1', 'GPIO_BSRR_BS_2', 'GPIO_BSRR_BS_3',
    'GPIO_BSRR_BS_4', 'GPIO_BSRR_BS_5', 'GPIO_BSRR_BS_6', 'GPIO_BSRR_BS_7',
    'GPIO_BSRR_BS_8', 'GPIO_BSRR_BS_9', 'GPIO_BSRR_BS_10', 'GPIO_BSRR_BS_11',
    'GPIO_BSRR_BS_12', 'GPIO_BSRR_BS_13', 'GPIO_BSRR_BS_14', 'GPIO_BSRR_BS_15',
    'GPIO_BSRR_BR_0', 'GPIO_BSRR_BR_1', 'GPIO_BSRR_BR_2', 'GPIO_BSRR_BR_3',
    'GPIO_BSRR_BR_4', 'GPIO_BSRR_BR_5', 'GPIO_BSRR_BR_6', 'GPIO_BSRR_BR_7',
    'GPIO_BSRR_BR_8', 'GPIO_BSRR_BR_9', 'GPIO_BSRR_BR_10', 'GPIO_BSRR_BR_11',
    'GPIO_BSRR_BR_12', 'GPIO_BSRR_BR_13', 'GPIO_BSRR_BR_14', 'GPIO_BSRR_BR_15',
    'GPIO_LCKR_LCK0_Pos', 'GPIO_LCKR_LCK0_Msk', 'GPIO_LCKR_LCK0', 'GPIO_LCKR_LCK1_Pos',
    'GPIO_LCKR_LCK1_Msk', 'GPIO_LCKR_LCK1', 'GPIO_LCKR_LCK2_Pos', 'GPIO_LCKR_LCK2_Msk',
    'GPIO_LCKR_LCK2', 'GPIO_LCKR_LCK3_Pos', 'GPIO_LCKR_LCK3_Msk', 'GPIO_LCKR_LCK3',
    'GPIO_LCKR_LCK4_Pos', 'GPIO_LCKR_LCK4_Msk', 'GPIO_LCKR_LCK4', 'GPIO_LCKR_LCK5_Pos',
    'GPIO_LCKR_LCK5_Msk', 'GPIO_LCKR_LCK5', 'GPIO_LCKR_LCK6_Pos', 'GPIO_LCKR_LCK6_Msk',
    'GPIO_LCKR_LCK6', 'GPIO_LCKR_LCK7_Pos', 'GPIO_LCKR_LCK7_Msk', 'GPIO_LCKR_LCK7',
    'GPIO_LCKR_LCK8_Pos', 'GPIO_LCKR_LCK8_Msk', 'GPIO_LCKR_LCK8', 'GPIO_LCKR_LCK9_Pos',
    'GPIO_LCKR_LCK9_Msk', 'GPIO_LCKR_LCK9', 'GPIO_LCKR_LCK10_Pos',
    'GPIO_LCKR_LCK10_Msk', 'GPIO_LCKR_LCK10', 'GPIO_LCKR_LCK11_Pos',
    'GPIO_LCKR_LCK11_Msk', 'GPIO_LCKR_LCK11', 'GPIO_LCKR_LCK12_Pos',
    'GPIO_LCKR_LCK12_Msk', 'GPIO_LCKR_LCK12', 'GPIO_LCKR_LCK13_Pos',
    'GPIO_LCKR_LCK13_Msk', 'GPIO_LCKR_LCK13', 'GPIO_LCKR_LCK14_Pos',
    'GPIO_LCKR_LCK14_Msk', 'GPIO_LCKR_LCK14', 'GPIO_LCKR_LCK15_Pos',
    'GPIO_LCKR_LCK15_Msk', 'GPIO_LCKR_LCK15', 'GPIO_LCKR_LCKK_Pos',
    'GPIO_LCKR_LCKK_Msk', 'GPIO_LCKR_LCKK', 'GPIO_AFRL_AFSEL0_Pos',
    'GPIO_AFRL_AFSEL0_Msk', 'GPIO_AFRL_AFSEL0', 'GPIO_AFRL_AFSEL1_Pos',
    'GPIO_AFRL_AFSEL1_Msk', 'GPIO_AFRL_AFSEL1', 'GPIO_AFRL_AFSEL2_Pos',
    'GPIO_AFRL_AFSEL2_Msk', 'GPIO_AFRL_AFSEL2', 'GPIO_AFRL_AFSEL3_Pos',
    'GPIO_AFRL_AFSEL3_Msk', 'GPIO_AFRL_AFSEL3', 'GPIO_AFRL_AFSEL4_Pos',
    'GPIO_AFRL_AFSEL4_Msk', 'GPIO_AFRL_AFSEL4', 'GPIO_AFRL_AFSEL5_Pos',
    'GPIO_AFRL_AFSEL5_Msk', 'GPIO_AFRL_AFSEL5', 'GPIO_AFRL_AFSEL6_Pos',
    'GPIO_AFRL_AFSEL6_Msk', 'GPIO_AFRL_AFSEL6', 'GPIO_AFRL_AFSEL7_Pos',
    'GPIO_AFRL_AFSEL7_Msk', 'GPIO_AFRL_AFSEL7', 'GPIO_AFRH_AFSEL8_Pos',
    'GPIO_AFRH_AFSEL8_Msk', 'GPIO_AFRH_AFSEL8', 'GPIO_AFRH_AFSEL9_Pos',
    'GPIO_AFRH_AFSEL9_Msk', 'GPIO_AFRH_AFSEL9', 'GPIO_AFRH_AFSEL10_Pos',
    'GPIO_AFRH_AFSEL10_Msk', 'GPIO_AFRH_AFSEL10', 'GPIO_AFRH_AFSEL11_Pos',
    'GPIO_AFRH_AFSEL11_Msk', 'GPIO_AFRH_AFSEL11', 'GPIO_AFRH_AFSEL12_Pos',
    'GPIO_AFRH_AFSEL12_Msk', 'GPIO_AFRH_AFSEL12', 'GPIO_AFRH_AFSEL13_Pos',
    'GPIO_AFRH_AFSEL13_Msk', 'GPIO_AFRH_AFSEL13', 'GPIO_AFRH_AFSEL14_Pos',
    'GPIO_AFRH_AFSEL14_Msk', 'GPIO_AFRH_AFSEL14', 'GPIO_AFRH_AFSEL15_Pos',
    'GPIO_AFRH_AFSEL15_Msk', 'GPIO_AFRH_AFSEL15', 'GPIO_BRR_BR_0', 'GPIO_BRR_BR_1',
    'GPIO_BRR_BR_2', 'GPIO_BRR_BR_3', 'GPIO_BRR_BR_4', 'GPIO_BRR_BR_5', 'GPIO_BRR_BR_6',
    'GPIO_BRR_BR_7', 'GPIO_BRR_BR_8', 'GPIO_BRR_BR_9', 'GPIO_BRR_BR_10',
    'GPIO_BRR_BR_11', 'GPIO_BRR_BR_12', 'GPIO_BRR_BR_13', 'GPIO_BRR_BR_14',
    'GPIO_BRR_BR_15', 'I2C_CR1_PE_Pos', 'I2C_CR1_PE_Msk', 'I2C_CR1_PE',
    'I2C_CR1_TXIE_Pos', 'I2C_CR1_TXIE_Msk', 'I2C_CR1_TXIE', 'I2C_CR1_RXIE_Pos',
    'I2C_CR1_RXIE_Msk', 'I2C_CR1_RXIE', 'I2C_CR1_ADDRIE_Pos', 'I2C_CR1_ADDRIE_Msk',
    'I2C_CR1_ADDRIE', 'I2C_CR1_NACKIE_Pos', 'I2C_CR1_NACKIE_Msk', 'I2C_CR1_NACKIE',
    'I2C_CR1_STOPIE_Pos', 'I2C_CR1_STOPIE_Msk', 'I2C_CR1_STOPIE', 'I2C_CR1_TCIE_Pos',
    'I2C_CR1_TCIE_Msk', 'I2C_CR1_TCIE', 'I2C_CR1_ERRIE_Pos', 'I2C_CR1_ERRIE_Msk',
    'I2C_CR1_ERRIE', 'I2C_CR1_DNF_Pos', 'I2C_CR1_DNF_Msk', 'I2C_CR1_DNF',
    'I2C_CR1_ANFOFF_Pos', 'I2C_CR1_ANFOFF_Msk', 'I2C_CR1_ANFOFF', 'I2C_CR1_TXDMAEN_Pos',
    'I2C_CR1_TXDMAEN_Msk', 'I2C_CR1_TXDMAEN', 'I2C_CR1_RXDMAEN_Pos',
    'I2C_CR1_RXDMAEN_Msk', 'I2C_CR1_RXDMAEN', 'I2C_CR1_SBC_Pos', 'I2C_CR1_SBC_Msk',
    'I2C_CR1_SBC', 'I2C_CR1_NOSTRETCH_Pos', 'I2C_CR1_NOSTRETCH_Msk',
    'I2C_CR1_NOSTRETCH', 'I2C_CR1_WUPEN_Pos', 'I2C_CR1_WUPEN_Msk', 'I2C_CR1_WUPEN',
    'I2C_CR1_GCEN_Pos', 'I2C_CR1_GCEN_Msk', 'I2C_CR1_GCEN', 'I2C_CR1_SMBHEN_Pos',
    'I2C_CR1_SMBHEN_Msk', 'I2C_CR1_SMBHEN', 'I2C_CR1_SMBDEN_Pos', 'I2C_CR1_SMBDEN_Msk',
    'I2C_CR1_SMBDEN', 'I2C_CR1_ALERTEN_Pos', 'I2C_CR1_ALERTEN_Msk', 'I2C_CR1_ALERTEN',
    'I2C_CR1_PECEN_Pos', 'I2C_CR1_PECEN_Msk', 'I2C_CR1_PECEN', 'I2C_CR2_SADD_Pos',
    'I2C_CR2_SADD_Msk', 'I2C_CR2_SADD', 'I2C_CR2_RD_WRN_Pos', 'I2C_CR2_RD_WRN_Msk',
    'I2C_CR2_RD_WRN', 'I2C_CR2_ADD10_Pos', 'I2C_CR2_ADD10_Msk', 'I2C_CR2_ADD10',
    'I2C_CR2_HEAD10R_Pos', 'I2C_CR2_HEAD10R_Msk', 'I2C_CR2_HEAD10R',
    'I2C_CR2_START_Pos', 'I2C_CR2_START_Msk', 'I2C_CR2_START', 'I2C_CR2_STOP_Pos',
    'I2C_CR2_STOP_Msk', 'I2C_CR2_STOP', 'I2C_CR2_NACK_Pos', 'I2C_CR2_NACK_Msk',
    'I2C_CR2_NACK', 'I2C_CR2_NBYTES_Pos', 'I2C_CR2_NBYTES_Msk', 'I2C_CR2_NBYTES',
    'I2C_CR2_RELOAD_Pos', 'I2C_CR2_RELOAD_Msk', 'I2C_CR2_RELOAD', 'I2C_CR2_AUTOEND_Pos',
    'I2C_CR2_AUTOEND_Msk', 'I2C_CR2_AUTOEND', 'I2C_CR2_PECBYTE_Pos',
    'I2C_CR2_PECBYTE_Msk', 'I2C_CR2_PECBYTE', 'I2C_OAR1_OA1_Pos', 'I2C_OAR1_OA1_Msk',
    'I2C_OAR1_OA1', 'I2C_OAR1_OA1MODE_Pos', 'I2C_OAR1_OA1MODE_Msk', 'I2C_OAR1_OA1MODE',
    'I2C_OAR1_OA1EN_Pos', 'I2C_OAR1_OA1EN_Msk', 'I2C_OAR1_OA1EN', 'I2C_OAR2_OA2_Pos',
    'I2C_OAR2_OA2_Msk', 'I2C_OAR2_OA2', 'I2C_OAR2_OA2MSK_Pos', 'I2C_OAR2_OA2MSK_Msk',
    'I2C_OAR2_OA2MSK', 'I2C_OAR2_OA2NOMASK', 'I2C_OAR2_OA2MASK01_Pos',
    'I2C_OAR2_OA2MASK01_Msk', 'I2C_OAR2_OA2MASK01', 'I2C_OAR2_OA2MASK02_Pos',
    'I2C_OAR2_OA2MASK02_Msk', 'I2C_OAR2_OA2MASK02', 'I2C_OAR2_OA2MASK03_Pos',
    'I2C_OAR2_OA2MASK03_Msk', 'I2C_OAR2_OA2MASK03', 'I2C_OAR2_OA2MASK04_Pos',
    'I2C_OAR2_OA2MASK04_Msk', 'I2C_OAR2_OA2MASK04', 'I2C_OAR2_OA2MASK05_Pos',
    'I2C_OAR2_OA2MASK05_Msk', 'I2C_OAR2_OA2MASK05', 'I2C_OAR2_OA2MASK06_Pos',
    'I2C_OAR2_OA2MASK06_Msk', 'I2C_OAR2_OA2MASK06', 'I2C_OAR2_OA2MASK07_Pos',
    'I2C_OAR2_OA2MASK07_Msk', 'I2C_OAR2_OA2MASK07', 'I2C_OAR2_OA2EN_Pos',
    'I2C_OAR2_OA2EN_Msk', 'I2C_OAR2_OA2EN', 'I2C_TIMINGR_SCLL_Pos',
    'I2C_TIMINGR_SCLL_Msk', 'I2C_TIMINGR_SCLL', 'I2C_TIMINGR_SCLH_Pos',
    'I2C_TIMINGR_SCLH_Msk', 'I2C_TIMINGR_SCLH', 'I2C_TIMINGR_SDADEL_Pos',
    'I2C_TIMINGR_SDADEL_Msk', 'I2C_TIMINGR_SDADEL', 'I2C_TIMINGR_SCLDEL_Pos',
    'I2C_TIMINGR_SCLDEL_Msk', 'I2C_TIMINGR_SCLDEL', 'I2C_TIMINGR_PRESC_Pos',
    'I2C_TIMINGR_PRESC_Msk', 'I2C_TIMINGR_PRESC', 'I2C_TIMEOUTR_TIMEOUTA_Pos',
    'I2C_TIMEOUTR_TIMEOUTA_Msk', 'I2C_TIMEOUTR_TIMEOUTA', 'I2C_TIMEOUTR_TIDLE_Pos',
    'I2C_TIMEOUTR_TIDLE_Msk', 'I2C_TIMEOUTR_TIDLE', 'I2C_TIMEOUTR_TIMOUTEN_Pos',
    'I2C_TIMEOUTR_TIMOUTEN_Msk', 'I2C_TIMEOUTR_TIMOUTEN', 'I2C_TIMEOUTR_TIMEOUTB_Pos',
    'I2C_TIMEOUTR_TIMEOUTB_Msk', 'I2C_TIMEOUTR_TIMEOUTB', 'I2C_TIMEOUTR_TEXTEN_Pos',
    'I2C_TIMEOUTR_TEXTEN_Msk', 'I2C_TIMEOUTR_TEXTEN', 'I2C_ISR_TXE_Pos',
    'I2C_ISR_TXE_Msk', 'I2C_ISR_TXE', 'I2C_ISR_TXIS_Pos', 'I2C_ISR_TXIS_Msk',
    'I2C_ISR_TXIS', 'I2C_ISR_RXNE_Pos', 'I2C_ISR_RXNE_Msk', 'I2C_ISR_RXNE',
    'I2C_ISR_ADDR_Pos', 'I2C_ISR_ADDR_Msk', 'I2C_ISR_ADDR', 'I2C_ISR_NACKF_Pos',
    'I2C_ISR_NACKF_Msk', 'I2C_ISR_NACKF', 'I2C_ISR_STOPF_Pos', 'I2C_ISR_STOPF_Msk',
    'I2C_ISR_STOPF', 'I2C_ISR_TC_Pos', 'I2C_ISR_TC_Msk', 'I2C_ISR_TC',
    'I2C_ISR_TCR_Pos', 'I2C_ISR_TCR_Msk', 'I2C_ISR_TCR', 'I2C_ISR_BERR_Pos',
    'I2C_ISR_BERR_Msk', 'I2C_ISR_BERR', 'I2C_ISR_ARLO_Pos', 'I2C_ISR_ARLO_Msk',
    'I2C_ISR_ARLO', 'I2C_ISR_OVR_Pos', 'I2C_ISR_OVR_Msk', 'I2C_ISR_OVR',
    'I2C_ISR_PECERR_Pos', 'I2C_ISR_PECERR_Msk', 'I2C_ISR_PECERR', 'I2C_ISR_TIMEOUT_Pos',
    'I2C_ISR_TIMEOUT_Msk', 'I2C_ISR_TIMEOUT', 'I2C_ISR_ALERT_Pos', 'I2C_ISR_ALERT_Msk',
    'I2C_ISR_ALERT', 'I2C_ISR_BUSY_Pos', 'I2C_ISR_BUSY_Msk', 'I2C_ISR_BUSY',
    'I2C_ISR_DIR_Pos', 'I2C_ISR_DIR_Msk', 'I2C_ISR_DIR', 'I2C_ISR_ADDCODE_Pos',
    'I2C_ISR_ADDCODE_Msk', 'I2C_ISR_ADDCODE', 'I2C_ICR_ADDRCF_Pos',
    'I2C_ICR_ADDRCF_Msk', 'I2C_ICR_ADDRCF', 'I2C_ICR_NACKCF_Pos', 'I2C_ICR_NACKCF_Msk',
    'I2C_ICR_NACKCF', 'I2C_ICR_STOPCF_Pos', 'I2C_ICR_STOPCF_Msk', 'I2C_ICR_STOPCF',
    'I2C_ICR_BERRCF_Pos', 'I2C_ICR_BERRCF_Msk', 'I2C_ICR_BERRCF', 'I2C_ICR_ARLOCF_Pos',
    'I2C_ICR_ARLOCF_Msk', 'I2C_ICR_ARLOCF', 'I2C_ICR_OVRCF_Pos', 'I2C_ICR_OVRCF_Msk',
    'I2C_ICR_OVRCF', 'I2C_ICR_PECCF_Pos', 'I2C_ICR_PECCF_Msk', 'I2C_ICR_PECCF',
    'I2C_ICR_TIMOUTCF_Pos', 'I2C_ICR_TIMOUTCF_Msk', 'I2C_ICR_TIMOUTCF',
    'I2C_ICR_ALERTCF_Pos', 'I2C_ICR_ALERTCF_Msk', 'I2C_ICR_ALERTCF', 'I2C_PECR_PEC_Pos',
    'I2C_PECR_PEC_Msk', 'I2C_PECR_PEC', 'I2C_RXDR_RXDATA_Pos', 'I2C_RXDR_RXDATA_Msk',
    'I2C_RXDR_RXDATA', 'I2C_TXDR_TXDATA_Pos', 'I2C_TXDR_TXDATA_Msk', 'I2C_TXDR_TXDATA',
    'IWDG_KR_KEY_Pos', 'IWDG_KR_KEY_Msk', 'IWDG_KR_KEY', 'IWDG_PR_PR_Pos',
    'IWDG_PR_PR_Msk', 'IWDG_PR_PR', 'IWDG_PR_PR_0', 'IWDG_PR_PR_1', 'IWDG_PR_PR_2',
    'IWDG_RLR_RL_Pos', 'IWDG_RLR_RL_Msk', 'IWDG_RLR_RL', 'IWDG_SR_PVU_Pos',
    'IWDG_SR_PVU_Msk', 'IWDG_SR_PVU', 'IWDG_SR_RVU_Pos', 'IWDG_SR_RVU_Msk',
    'IWDG_SR_RVU', 'IWDG_SR_WVU_Pos', 'IWDG_SR_WVU_Msk', 'IWDG_SR_WVU',
    'IWDG_WINR_WIN_Pos', 'IWDG_WINR_WIN_Msk', 'IWDG_WINR_WIN', 'LCD_CR_LCDEN_Pos',
    'LCD_CR_LCDEN_Msk', 'LCD_CR_LCDEN', 'LCD_CR_VSEL_Pos', 'LCD_CR_VSEL_Msk',
    'LCD_CR_VSEL', 'LCD_CR_DUTY_Pos', 'LCD_CR_DUTY_Msk', 'LCD_CR_DUTY', 'LCD_CR_DUTY_0',
    'LCD_CR_DUTY_1', 'LCD_CR_DUTY_2', 'LCD_CR_BIAS_Pos', 'LCD_CR_BIAS_Msk',
    'LCD_CR_BIAS', 'LCD_CR_BIAS_0', 'LCD_CR_BIAS_1', 'LCD_CR_MUX_SEG_Pos',
    'LCD_CR_MUX_SEG_Msk', 'LCD_CR_MUX_SEG', 'LCD_CR_BUFEN_Pos', 'LCD_CR_BUFEN_Msk',
    'LCD_CR_BUFEN', 'LCD_FCR_HD_Pos', 'LCD_FCR_HD_Msk', 'LCD_FCR_HD',
    'LCD_FCR_SOFIE_Pos', 'LCD_FCR_SOFIE_Msk', 'LCD_FCR_SOFIE', 'LCD_FCR_UDDIE_Pos',
    'LCD_FCR_UDDIE_Msk', 'LCD_FCR_UDDIE', 'LCD_FCR_PON_Pos', 'LCD_FCR_PON_Msk',
    'LCD_FCR_PON', 'LCD_FCR_PON_0', 'LCD_FCR_PON_1', 'LCD_FCR_PON_2',
    'LCD_FCR_DEAD_Pos', 'LCD_FCR_DEAD_Msk', 'LCD_FCR_DEAD', 'LCD_FCR_DEAD_0',
    'LCD_FCR_DEAD_1', 'LCD_FCR_DEAD_2', 'LCD_FCR_CC_Pos', 'LCD_FCR_CC_Msk',
    'LCD_FCR_CC', 'LCD_FCR_CC_0', 'LCD_FCR_CC_1', 'LCD_FCR_CC_2', 'LCD_FCR_BLINKF_Pos',
    'LCD_FCR_BLINKF_Msk', 'LCD_FCR_BLINKF', 'LCD_FCR_BLINKF_0', 'LCD_FCR_BLINKF_1',
    'LCD_FCR_BLINKF_2', 'LCD_FCR_BLINK_Pos', 'LCD_FCR_BLINK_Msk', 'LCD_FCR_BLINK',
    'LCD_FCR_BLINK_0', 'LCD_FCR_BLINK_1', 'LCD_FCR_DIV_Pos', 'LCD_FCR_DIV_Msk',
    'LCD_FCR_DIV', 'LCD_FCR_PS_Pos', 'LCD_FCR_PS_Msk', 'LCD_FCR_PS', 'LCD_SR_ENS_Pos',
    'LCD_SR_ENS_Msk', 'LCD_SR_ENS', 'LCD_SR_SOF_Pos', 'LCD_SR_SOF_Msk', 'LCD_SR_SOF',
    'LCD_SR_UDR_Pos', 'LCD_SR_UDR_Msk', 'LCD_SR_UDR', 'LCD_SR_UDD_Pos',
    'LCD_SR_UDD_Msk', 'LCD_SR_UDD', 'LCD_SR_RDY_Pos', 'LCD_SR_RDY_Msk', 'LCD_SR_RDY',
    'LCD_SR_FCRSR_Pos', 'LCD_SR_FCRSR_Msk', 'LCD_SR_FCRSR', 'LCD_CLR_SOFC_Pos',
    'LCD_CLR_SOFC_Msk', 'LCD_CLR_SOFC', 'LCD_CLR_UDDC_Pos', 'LCD_CLR_UDDC_Msk',
    'LCD_CLR_UDDC', 'LCD_RAM_SEGMENT_DATA_Pos', 'LCD_RAM_SEGMENT_DATA_Msk',
    'LCD_RAM_SEGMENT_DATA', 'LPTIM_ISR_CMPM_Pos', 'LPTIM_ISR_CMPM_Msk',
    'LPTIM_ISR_CMPM', 'LPTIM_ISR_ARRM_Pos', 'LPTIM_ISR_ARRM_Msk', 'LPTIM_ISR_ARRM',
    'LPTIM_ISR_EXTTRIG_Pos', 'LPTIM_ISR_EXTTRIG_Msk', 'LPTIM_ISR_EXTTRIG',
    'LPTIM_ISR_CMPOK_Pos', 'LPTIM_ISR_CMPOK_Msk', 'LPTIM_ISR_CMPOK',
    'LPTIM_ISR_ARROK_Pos', 'LPTIM_ISR_ARROK_Msk', 'LPTIM_ISR_ARROK', 'LPTIM_ISR_UP_Pos',
    'LPTIM_ISR_UP_Msk', 'LPTIM_ISR_UP', 'LPTIM_ISR_DOWN_Pos', 'LPTIM_ISR_DOWN_Msk',
    'LPTIM_ISR_DOWN', 'LPTIM_ICR_CMPMCF_Pos', 'LPTIM_ICR_CMPMCF_Msk',
    'LPTIM_ICR_CMPMCF', 'LPTIM_ICR_ARRMCF_Pos', 'LPTIM_ICR_ARRMCF_Msk',
    'LPTIM_ICR_ARRMCF', 'LPTIM_ICR_EXTTRIGCF_Pos', 'LPTIM_ICR_EXTTRIGCF_Msk',
    'LPTIM_ICR_EXTTRIGCF', 'LPTIM_ICR_CMPOKCF_Pos', 'LPTIM_ICR_CMPOKCF_Msk',
    'LPTIM_ICR_CMPOKCF', 'LPTIM_ICR_ARROKCF_Pos', 'LPTIM_ICR_ARROKCF_Msk',
    'LPTIM_ICR_ARROKCF', 'LPTIM_ICR_UPCF_Pos', 'LPTIM_ICR_UPCF_Msk', 'LPTIM_ICR_UPCF',
    'LPTIM_ICR_DOWNCF_Pos', 'LPTIM_ICR_DOWNCF_Msk', 'LPTIM_ICR_DOWNCF',
    'LPTIM_IER_CMPMIE_Pos', 'LPTIM_IER_CMPMIE_Msk', 'LPTIM_IER_CMPMIE',
    'LPTIM_IER_ARRMIE_Pos', 'LPTIM_IER_ARRMIE_Msk', 'LPTIM_IER_ARRMIE',
    'LPTIM_IER_EXTTRIGIE_Pos', 'LPTIM_IER_EXTTRIGIE_Msk', 'LPTIM_IER_EXTTRIGIE',
    'LPTIM_IER_CMPOKIE_Pos', 'LPTIM_IER_CMPOKIE_Msk', 'LPTIM_IER_CMPOKIE',
    'LPTIM_IER_ARROKIE_Pos', 'LPTIM_IER_ARROKIE_Msk', 'LPTIM_IER_ARROKIE',
    'LPTIM_IER_UPIE_Pos', 'LPTIM_IER_UPIE_Msk', 'LPTIM_IER_UPIE',
    'LPTIM_IER_DOWNIE_Pos', 'LPTIM_IER_DOWNIE_Msk', 'LPTIM_IER_DOWNIE',
    'LPTIM_CFGR_CKSEL_Pos', 'LPTIM_CFGR_CKSEL_Msk', 'LPTIM_CFGR_CKSEL',
    'LPTIM_CFGR_CKPOL_Pos', 'LPTIM_CFGR_CKPOL_Msk', 'LPTIM_CFGR_CKPOL',
    'LPTIM_CFGR_CKPOL_0', 'LPTIM_CFGR_CKPOL_1', 'LPTIM_CFGR_CKFLT_Pos',
    'LPTIM_CFGR_CKFLT_Msk', 'LPTIM_CFGR_CKFLT', 'LPTIM_CFGR_CKFLT_0',
    'LPTIM_CFGR_CKFLT_1', 'LPTIM_CFGR_TRGFLT_Pos', 'LPTIM_CFGR_TRGFLT_Msk',
    'LPTIM_CFGR_TRGFLT', 'LPTIM_CFGR_TRGFLT_0', 'LPTIM_CFGR_TRGFLT_1',
    'LPTIM_CFGR_PRESC_Pos', 'LPTIM_CFGR_PRESC_Msk', 'LPTIM_CFGR_PRESC',
    'LPTIM_CFGR_PRESC_0', 'LPTIM_CFGR_PRESC_1', 'LPTIM_CFGR_PRESC_2',
    'LPTIM_CFGR_TRIGSEL_Pos', 'LPTIM_CFGR_TRIGSEL_Msk', 'LPTIM_CFGR_TRIGSEL',
    'LPTIM_CFGR_TRIGSEL_0', 'LPTIM_CFGR_TRIGSEL_1', 'LPTIM_CFGR_TRIGSEL_2',
    'LPTIM_CFGR_TRIGEN_Pos', 'LPTIM_CFGR_TRIGEN_Msk', 'LPTIM_CFGR_TRIGEN',
    'LPTIM_CFGR_TRIGEN_0', 'LPTIM_CFGR_TRIGEN_1', 'LPTIM_CFGR_TIMOUT_Pos',
    'LPTIM_CFGR_TIMOUT_Msk', 'LPTIM_CFGR_TIMOUT', 'LPTIM_CFGR_WAVE_Pos',
    'LPTIM_CFGR_WAVE_Msk', 'LPTIM_CFGR_WAVE', 'LPTIM_CFGR_WAVPOL_Pos',
    'LPTIM_CFGR_WAVPOL_Msk', 'LPTIM_CFGR_WAVPOL', 'LPTIM_CFGR_PRELOAD_Pos',
    'LPTIM_CFGR_PRELOAD_Msk', 'LPTIM_CFGR_PRELOAD', 'LPTIM_CFGR_COUNTMODE_Pos',
    'LPTIM_CFGR_COUNTMODE_Msk', 'LPTIM_CFGR_COUNTMODE', 'LPTIM_CFGR_ENC_Pos',
    'LPTIM_CFGR_ENC_Msk', 'LPTIM_CFGR_ENC', 'LPTIM_CR_ENABLE_Pos',
    'LPTIM_CR_ENABLE_Msk', 'LPTIM_CR_ENABLE', 'LPTIM_CR_SNGSTRT_Pos',
    'LPTIM_CR_SNGSTRT_Msk', 'LPTIM_CR_SNGSTRT', 'LPTIM_CR_CNTSTRT_Pos',
    'LPTIM_CR_CNTSTRT_Msk', 'LPTIM_CR_CNTSTRT', 'LPTIM_CMP_CMP_Pos',
    'LPTIM_CMP_CMP_Msk', 'LPTIM_CMP_CMP', 'LPTIM_ARR_ARR_Pos', 'LPTIM_ARR_ARR_Msk',
    'LPTIM_ARR_ARR', 'LPTIM_CNT_CNT_Pos', 'LPTIM_CNT_CNT_Msk', 'LPTIM_CNT_CNT',
    'FW_CSSA_ADD_Pos', 'FW_CSSA_ADD_Msk', 'FW_CSSA_ADD', 'FW_CSL_LENG_Pos',
    'FW_CSL_LENG_Msk', 'FW_CSL_LENG', 'FW_NVDSSA_ADD_Pos', 'FW_NVDSSA_ADD_Msk',
    'FW_NVDSSA_ADD', 'FW_NVDSL_LENG_Pos', 'FW_NVDSL_LENG_Msk', 'FW_NVDSL_LENG',
    'FW_VDSSA_ADD_Pos', 'FW_VDSSA_ADD_Msk', 'FW_VDSSA_ADD', 'FW_VDSL_LENG_Pos',
    'FW_VDSL_LENG_Msk', 'FW_VDSL_LENG', 'FW_CR_FPA_Pos', 'FW_CR_FPA_Msk', 'FW_CR_FPA',
    'FW_CR_VDS_Pos', 'FW_CR_VDS_Msk', 'FW_CR_VDS', 'FW_CR_VDE_Pos', 'FW_CR_VDE_Msk',
    'FW_CR_VDE', 'PWR_CR_LPSDSR_Pos', 'PWR_CR_LPSDSR_Msk', 'PWR_CR_LPSDSR',
    'PWR_CR_PDDS_Pos', 'PWR_CR_PDDS_Msk', 'PWR_CR_PDDS', 'PWR_CR_CWUF_Pos',
    'PWR_CR_CWUF_Msk', 'PWR_CR_CWUF', 'PWR_CR_CSBF_Pos', 'PWR_CR_CSBF_Msk',
    'PWR_CR_CSBF', 'PWR_CR_PVDE_Pos', 'PWR_CR_PVDE_Msk', 'PWR_CR_PVDE',
    'PWR_CR_PLS_Pos', 'PWR_CR_PLS_Msk', 'PWR_CR_PLS', 'PWR_CR_PLS_0', 'PWR_CR_PLS_1',
    'PWR_CR_PLS_2', 'PWR_CR_PLS_LEV0', 'PWR_CR_PLS_LEV1', 'PWR_CR_PLS_LEV2',
    'PWR_CR_PLS_LEV3', 'PWR_CR_PLS_LEV4', 'PWR_CR_PLS_LEV5', 'PWR_CR_PLS_LEV6',
    'PWR_CR_PLS_LEV7', 'PWR_CR_DBP_Pos', 'PWR_CR_DBP_Msk', 'PWR_CR_DBP',
    'PWR_CR_ULP_Pos', 'PWR_CR_ULP_Msk', 'PWR_CR_ULP', 'PWR_CR_FWU_Pos',
    'PWR_CR_FWU_Msk', 'PWR_CR_FWU', 'PWR_CR_VOS_Pos', 'PWR_CR_VOS_Msk', 'PWR_CR_VOS',
    'PWR_CR_VOS_0', 'PWR_CR_VOS_1', 'PWR_CR_DSEEKOFF_Pos', 'PWR_CR_DSEEKOFF_Msk',
    'PWR_CR_DSEEKOFF', 'PWR_CR_LPRUN_Pos', 'PWR_CR_LPRUN_Msk', 'PWR_CR_LPRUN',
    'PWR_CSR_WUF_Pos', 'PWR_CSR_WUF_Msk', 'PWR_CSR_WUF', 'PWR_CSR_SBF_Pos',
    'PWR_CSR_SBF_Msk', 'PWR_CSR_SBF', 'PWR_CSR_PVDO_Pos', 'PWR_CSR_PVDO_Msk',
    'PWR_CSR_PVDO', 'PWR_CSR_VREFINTRDYF_Pos', 'PWR_CSR_VREFINTRDYF_Msk',
    'PWR_CSR_VREFINTRDYF', 'PWR_CSR_VOSF_Pos', 'PWR_CSR_VOSF_Msk', 'PWR_CSR_VOSF',
    'PWR_CSR_REGLPF_Pos', 'PWR_CSR_REGLPF_Msk', 'PWR_CSR_REGLPF', 'PWR_CSR_EWUP1_Pos',
    'PWR_CSR_EWUP1_Msk', 'PWR_CSR_EWUP1', 'PWR_CSR_EWUP2_Pos', 'PWR_CSR_EWUP2_Msk',
    'PWR_CSR_EWUP2', 'RCC_CR_HSION_Pos', 'RCC_CR_HSION_Msk', 'RCC_CR_HSION',
    'RCC_CR_HSIKERON_Pos', 'RCC_CR_HSIKERON_Msk', 'RCC_CR_HSIKERON',
    'RCC_CR_HSIRDY_Pos', 'RCC_CR_HSIRDY_Msk', 'RCC_CR_HSIRDY', 'RCC_CR_HSIDIVEN_Pos',
    'RCC_CR_HSIDIVEN_Msk', 'RCC_CR_HSIDIVEN', 'RCC_CR_HSIDIVF_Pos',
    'RCC_CR_HSIDIVF_Msk', 'RCC_CR_HSIDIVF', 'RCC_CR_MSION_Pos', 'RCC_CR_MSION_Msk',
    'RCC_CR_MSION', 'RCC_CR_MSIRDY_Pos', 'RCC_CR_MSIRDY_Msk', 'RCC_CR_MSIRDY',
    'RCC_CR_HSEON_Pos', 'RCC_CR_HSEON_Msk', 'RCC_CR_HSEON', 'RCC_CR_HSERDY_Pos',
    'RCC_CR_HSERDY_Msk', 'RCC_CR_HSERDY', 'RCC_CR_HSEBYP_Pos', 'RCC_CR_HSEBYP_Msk',
    'RCC_CR_HSEBYP', 'RCC_CR_CSSHSEON_Pos', 'RCC_CR_CSSHSEON_Msk', 'RCC_CR_CSSHSEON',
    'RCC_CR_RTCPRE_Pos', 'RCC_CR_RTCPRE_Msk', 'RCC_CR_RTCPRE', 'RCC_CR_RTCPRE_0',
    'RCC_CR_RTCPRE_1', 'RCC_CR_PLLON_Pos', 'RCC_CR_PLLON_Msk', 'RCC_CR_PLLON',
    'RCC_CR_PLLRDY_Pos', 'RCC_CR_PLLRDY_Msk', 'RCC_CR_PLLRDY', 'RCC_CR_CSSON',
    'RCC_ICSCR_HSICAL_Pos', 'RCC_ICSCR_HSICAL_Msk', 'RCC_ICSCR_HSICAL',
    'RCC_ICSCR_HSITRIM_Pos', 'RCC_ICSCR_HSITRIM_Msk', 'RCC_ICSCR_HSITRIM',
    'RCC_ICSCR_MSIRANGE_Pos', 'RCC_ICSCR_MSIRANGE_Msk', 'RCC_ICSCR_MSIRANGE',
    'RCC_ICSCR_MSIRANGE_0', 'RCC_ICSCR_MSIRANGE_1', 'RCC_ICSCR_MSIRANGE_2',
    'RCC_ICSCR_MSIRANGE_3', 'RCC_ICSCR_MSIRANGE_4', 'RCC_ICSCR_MSIRANGE_5',
    'RCC_ICSCR_MSIRANGE_6', 'RCC_ICSCR_MSICAL_Pos', 'RCC_ICSCR_MSICAL_Msk',
    'RCC_ICSCR_MSICAL', 'RCC_ICSCR_MSITRIM_Pos', 'RCC_ICSCR_MSITRIM_Msk',
    'RCC_ICSCR_MSITRIM', 'RCC_CRRCR_HSI48ON_Pos', 'RCC_CRRCR_HSI48ON_Msk',
    'RCC_CRRCR_HSI48ON', 'RCC_CRRCR_HSI48RDY_Pos', 'RCC_CRRCR_HSI48RDY_Msk',
    'RCC_CRRCR_HSI48RDY', 'RCC_CRRCR_HSI48CAL_Pos', 'RCC_CRRCR_HSI48CAL_Msk',
    'RCC_CRRCR_HSI48CAL', 'RCC_CFGR_SW_Pos', 'RCC_CFGR_SW_Msk', 'RCC_CFGR_SW',
    'RCC_CFGR_SW_0', 'RCC_CFGR_SW_1', 'RCC_CFGR_SW_MSI', 'RCC_CFGR_SW_HSI',
    'RCC_CFGR_SW_HSE', 'RCC_CFGR_SW_PLL', 'RCC_CFGR_SWS_Pos', 'RCC_CFGR_SWS_Msk',
    'RCC_CFGR_SWS', 'RCC_CFGR_SWS_0', 'RCC_CFGR_SWS_1', 'RCC_CFGR_SWS_MSI',
    'RCC_CFGR_SWS_HSI', 'RCC_CFGR_SWS_HSE', 'RCC_CFGR_SWS_PLL', 'RCC_CFGR_HPRE_Pos',
    'RCC_CFGR_HPRE_Msk', 'RCC_CFGR_HPRE', 'RCC_CFGR_HPRE_0', 'RCC_CFGR_HPRE_1',
    'RCC_CFGR_HPRE_2', 'RCC_CFGR_HPRE_3', 'RCC_CFGR_HPRE_DIV1', 'RCC_CFGR_HPRE_DIV2',
    'RCC_CFGR_HPRE_DIV4', 'RCC_CFGR_HPRE_DIV8', 'RCC_CFGR_HPRE_DIV16',
    'RCC_CFGR_HPRE_DIV64', 'RCC_CFGR_HPRE_DIV128', 'RCC_CFGR_HPRE_DIV256',
    'RCC_CFGR_HPRE_DIV512', 'RCC_CFGR_PPRE1_Pos', 'RCC_CFGR_PPRE1_Msk',
    'RCC_CFGR_PPRE1', 'RCC_CFGR_PPRE1_0', 'RCC_CFGR_PPRE1_1', 'RCC_CFGR_PPRE1_2',
    'RCC_CFGR_PPRE1_DIV1', 'RCC_CFGR_PPRE1_DIV2', 'RCC_CFGR_PPRE1_DIV4',
    'RCC_CFGR_PPRE1_DIV8', 'RCC_CFGR_PPRE1_DIV16', 'RCC_CFGR_PPRE2_Pos',
    'RCC_CFGR_PPRE2_Msk', 'RCC_CFGR_PPRE2', 'RCC_CFGR_PPRE2_0', 'RCC_CFGR_PPRE2_1',
    'RCC_CFGR_PPRE2_2', 'RCC_CFGR_PPRE2_DIV1', 'RCC_CFGR_PPRE2_DIV2',
    'RCC_CFGR_PPRE2_DIV4', 'RCC_CFGR_PPRE2_DIV8', 'RCC_CFGR_PPRE2_DIV16',
    'RCC_CFGR_STOPWUCK_Pos', 'RCC_CFGR_STOPWUCK_Msk', 'RCC_CFGR_STOPWUCK',
    'RCC_CFGR_PLLSRC_Pos', 'RCC_CFGR_PLLSRC_Msk', 'RCC_CFGR_PLLSRC',
    'RCC_CFGR_PLLSRC_HSI', 'RCC_CFGR_PLLSRC_HSE', 'RCC_CFGR_PLLMUL_Pos',
    'RCC_CFGR_PLLMUL_Msk', 'RCC_CFGR_PLLMUL', 'RCC_CFGR_PLLMUL_0', 'RCC_CFGR_PLLMUL_1',
    'RCC_CFGR_PLLMUL_2', 'RCC_CFGR_PLLMUL_3', 'RCC_CFGR_PLLMUL3', 'RCC_CFGR_PLLMUL4',
    'RCC_CFGR_PLLMUL6', 'RCC_CFGR_PLLMUL8', 'RCC_CFGR_PLLMUL12', 'RCC_CFGR_PLLMUL16',
    'RCC_CFGR_PLLMUL24', 'RCC_CFGR_PLLMUL32', 'RCC_CFGR_PLLMUL48',
    'RCC_CFGR_PLLDIV_Pos', 'RCC_CFGR_PLLDIV_Msk', 'RCC_CFGR_PLLDIV',
    'RCC_CFGR_PLLDIV_0', 'RCC_CFGR_PLLDIV_1', 'RCC_CFGR_PLLDIV2_Pos',
    'RCC_CFGR_PLLDIV2_Msk', 'RCC_CFGR_PLLDIV2', 'RCC_CFGR_PLLDIV3_Pos',
    'RCC_CFGR_PLLDIV3_Msk', 'RCC_CFGR_PLLDIV3', 'RCC_CFGR_PLLDIV4_Pos',
    'RCC_CFGR_PLLDIV4_Msk', 'RCC_CFGR_PLLDIV4', 'RCC_CFGR_MCOSEL_Pos',
    'RCC_CFGR_MCOSEL_Msk', 'RCC_CFGR_MCOSEL', 'RCC_CFGR_MCOSEL_0', 'RCC_CFGR_MCOSEL_1',
    'RCC_CFGR_MCOSEL_2', 'RCC_CFGR_MCOSEL_3', 'RCC_CFGR_MCOSEL_NOCLOCK',
    'RCC_CFGR_MCOSEL_SYSCLK_Pos', 'RCC_CFGR_MCOSEL_SYSCLK_Msk',
    'RCC_CFGR_MCOSEL_SYSCLK', 'RCC_CFGR_MCOSEL_HSI_Pos', 'RCC_CFGR_MCOSEL_HSI_Msk',
    'RCC_CFGR_MCOSEL_HSI', 'RCC_CFGR_MCOSEL_MSI_Pos', 'RCC_CFGR_MCOSEL_MSI_Msk',
    'RCC_CFGR_MCOSEL_MSI', 'RCC_CFGR_MCOSEL_HSE_Pos', 'RCC_CFGR_MCOSEL_HSE_Msk',
    'RCC_CFGR_MCOSEL_HSE', 'RCC_CFGR_MCOSEL_PLL_Pos', 'RCC_CFGR_MCOSEL_PLL_Msk',
    'RCC_CFGR_MCOSEL_PLL', 'RCC_CFGR_MCOSEL_LSI_Pos', 'RCC_CFGR_MCOSEL_LSI_Msk',
    'RCC_CFGR_MCOSEL_LSI', 'RCC_CFGR_MCOSEL_LSE_Pos', 'RCC_CFGR_MCOSEL_LSE_Msk',
    'RCC_CFGR_MCOSEL_LSE', 'RCC_CFGR_MCOSEL_HSI48_Pos', 'RCC_CFGR_MCOSEL_HSI48_Msk',
    'RCC_CFGR_MCOSEL_HSI48', 'RCC_CFGR_MCOPRE_Pos', 'RCC_CFGR_MCOPRE_Msk',
    'RCC_CFGR_MCOPRE', 'RCC_CFGR_MCOPRE_0', 'RCC_CFGR_MCOPRE_1', 'RCC_CFGR_MCOPRE_2',
    'RCC_CFGR_MCOPRE_DIV1', 'RCC_CFGR_MCOPRE_DIV2', 'RCC_CFGR_MCOPRE_DIV4',
    'RCC_CFGR_MCOPRE_DIV8', 'RCC_CFGR_MCOPRE_DIV16', 'RCC_CFGR_MCO_NOCLOCK',
    'RCC_CFGR_MCO_SYSCLK', 'RCC_CFGR_MCO_HSI', 'RCC_CFGR_MCO_MSI', 'RCC_CFGR_MCO_HSE',
    'RCC_CFGR_MCO_PLL', 'RCC_CFGR_MCO_LSI', 'RCC_CFGR_MCO_LSE', 'RCC_CFGR_MCO_HSI48',
    'RCC_CFGR_MCO_PRE', 'RCC_CFGR_MCO_PRE_1', 'RCC_CFGR_MCO_PRE_2',
    'RCC_CFGR_MCO_PRE_4', 'RCC_CFGR_MCO_PRE_8', 'RCC_CFGR_MCO_PRE_16',
    'RCC_CIER_LSIRDYIE_Pos', 'RCC_CIER_LSIRDYIE_Msk', 'RCC_CIER_LSIRDYIE',
    'RCC_CIER_LSERDYIE_Pos', 'RCC_CIER_LSERDYIE_Msk', 'RCC_CIER_LSERDYIE',
    'RCC_CIER_HSIRDYIE_Pos', 'RCC_CIER_HSIRDYIE_Msk', 'RCC_CIER_HSIRDYIE',
    'RCC_CIER_HSERDYIE_Pos', 'RCC_CIER_HSERDYIE_Msk', 'RCC_CIER_HSERDYIE',
    'RCC_CIER_PLLRDYIE_Pos', 'RCC_CIER_PLLRDYIE_Msk', 'RCC_CIER_PLLRDYIE',
    'RCC_CIER_MSIRDYIE_Pos', 'RCC_CIER_MSIRDYIE_Msk', 'RCC_CIER_MSIRDYIE',
    'RCC_CIER_HSI48RDYIE_Pos', 'RCC_CIER_HSI48RDYIE_Msk', 'RCC_CIER_HSI48RDYIE',
    'RCC_CIER_CSSLSE_Pos', 'RCC_CIER_CSSLSE_Msk', 'RCC_CIER_CSSLSE',
    'RCC_CIER_LSECSSIE', 'RCC_CIFR_LSIRDYF_Pos', 'RCC_CIFR_LSIRDYF_Msk',
    'RCC_CIFR_LSIRDYF', 'RCC_CIFR_LSERDYF_Pos', 'RCC_CIFR_LSERDYF_Msk',
    'RCC_CIFR_LSERDYF', 'RCC_CIFR_HSIRDYF_Pos', 'RCC_CIFR_HSIRDYF_Msk',
    'RCC_CIFR_HSIRDYF', 'RCC_CIFR_HSERDYF_Pos', 'RCC_CIFR_HSERDYF_Msk',
    'RCC_CIFR_HSERDYF', 'RCC_CIFR_PLLRDYF_Pos', 'RCC_CIFR_PLLRDYF_Msk',
    'RCC_CIFR_PLLRDYF', 'RCC_CIFR_MSIRDYF_Pos', 'RCC_CIFR_MSIRDYF_Msk',
    'RCC_CIFR_MSIRDYF', 'RCC_CIFR_HSI48RDYF_Pos', 'RCC_CIFR_HSI48RDYF_Msk',
    'RCC_CIFR_HSI48RDYF', 'RCC_CIFR_CSSLSEF_Pos', 'RCC_CIFR_CSSLSEF_Msk',
    'RCC_CIFR_CSSLSEF', 'RCC_CIFR_CSSHSEF_Pos', 'RCC_CIFR_CSSHSEF_Msk',
    'RCC_CIFR_CSSHSEF', 'RCC_CIFR_LSECSSF', 'RCC_CIFR_CSSF', 'RCC_CICR_LSIRDYC_Pos',
    'RCC_CICR_LSIRDYC_Msk', 'RCC_CICR_LSIRDYC', 'RCC_CICR_LSERDYC_Pos',
    'RCC_CICR_LSERDYC_Msk', 'RCC_CICR_LSERDYC', 'RCC_CICR_HSIRDYC_Pos',
    'RCC_CICR_HSIRDYC_Msk', 'RCC_CICR_HSIRDYC', 'RCC_CICR_HSERDYC_Pos',
    'RCC_CICR_HSERDYC_Msk', 'RCC_CICR_HSERDYC', 'RCC_CICR_PLLRDYC_Pos',
    'RCC_CICR_PLLRDYC_Msk', 'RCC_CICR_PLLRDYC', 'RCC_CICR_MSIRDYC_Pos',
    'RCC_CICR_MSIRDYC_Msk', 'RCC_CICR_MSIRDYC', 'RCC_CICR_HSI48RDYC_Pos',
    'RCC_CICR_HSI48RDYC_Msk', 'RCC_CICR_HSI48RDYC', 'RCC_CICR_CSSLSEC_Pos',
    'RCC_CICR_CSSLSEC_Msk', 'RCC_CICR_CSSLSEC', 'RCC_CICR_CSSHSEC_Pos',
    'RCC_CICR_CSSHSEC_Msk', 'RCC_CICR_CSSHSEC', 'RCC_CICR_LSECSSC', 'RCC_CICR_CSSC',
    'RCC_IOPRSTR_IOPARST_Pos', 'RCC_IOPRSTR_IOPARST_Msk', 'RCC_IOPRSTR_IOPARST',
    'RCC_IOPRSTR_IOPBRST_Pos', 'RCC_IOPRSTR_IOPBRST_Msk', 'RCC_IOPRSTR_IOPBRST',
    'RCC_IOPRSTR_IOPCRST_Pos', 'RCC_IOPRSTR_IOPCRST_Msk', 'RCC_IOPRSTR_IOPCRST',
    'RCC_IOPRSTR_IOPDRST_Pos', 'RCC_IOPRSTR_IOPDRST_Msk', 'RCC_IOPRSTR_IOPDRST',
    'RCC_IOPRSTR_IOPHRST_Pos', 'RCC_IOPRSTR_IOPHRST_Msk', 'RCC_IOPRSTR_IOPHRST',
    'RCC_IOPRSTR_GPIOARST', 'RCC_IOPRSTR_GPIOBRST', 'RCC_IOPRSTR_GPIOCRST',
    'RCC_IOPRSTR_GPIODRST', 'RCC_IOPRSTR_GPIOHRST', 'RCC_AHBRSTR_DMARST_Pos',
    'RCC_AHBRSTR_DMARST_Msk', 'RCC_AHBRSTR_DMARST', 'RCC_AHBRSTR_MIFRST_Pos',
    'RCC_AHBRSTR_MIFRST_Msk', 'RCC_AHBRSTR_MIFRST', 'RCC_AHBRSTR_CRCRST_Pos',
    'RCC_AHBRSTR_CRCRST_Msk', 'RCC_AHBRSTR_CRCRST', 'RCC_AHBRSTR_TSCRST_Pos',
    'RCC_AHBRSTR_TSCRST_Msk', 'RCC_AHBRSTR_TSCRST', 'RCC_AHBRSTR_RNGRST_Pos',
    'RCC_AHBRSTR_RNGRST_Msk', 'RCC_AHBRSTR_RNGRST', 'RCC_AHBRSTR_CRYPRST_Pos',
    'RCC_AHBRSTR_CRYPRST_Msk', 'RCC_AHBRSTR_CRYPRST', 'RCC_AHBRSTR_DMA1RST',
    'RCC_APB2RSTR_SYSCFGRST_Pos', 'RCC_APB2RSTR_SYSCFGRST_Msk',
    'RCC_APB2RSTR_SYSCFGRST', 'RCC_APB2RSTR_TIM21RST_Pos', 'RCC_APB2RSTR_TIM21RST_Msk',
    'RCC_APB2RSTR_TIM21RST', 'RCC_APB2RSTR_TIM22RST_Pos', 'RCC_APB2RSTR_TIM22RST_Msk',
    'RCC_APB2RSTR_TIM22RST', 'RCC_APB2RSTR_ADCRST_Pos', 'RCC_APB2RSTR_ADCRST_Msk',
    'RCC_APB2RSTR_ADCRST', 'RCC_APB2RSTR_SPI1RST_Pos', 'RCC_APB2RSTR_SPI1RST_Msk',
    'RCC_APB2RSTR_SPI1RST', 'RCC_APB2RSTR_USART1RST_Pos', 'RCC_APB2RSTR_USART1RST_Msk',
    'RCC_APB2RSTR_USART1RST', 'RCC_APB2RSTR_DBGRST_Pos', 'RCC_APB2RSTR_DBGRST_Msk',
    'RCC_APB2RSTR_DBGRST', 'RCC_APB2RSTR_ADC1RST', 'RCC_APB2RSTR_DBGMCURST',
    'RCC_APB1RSTR_TIM2RST_Pos', 'RCC_APB1RSTR_TIM2RST_Msk', 'RCC_APB1RSTR_TIM2RST',
    'RCC_APB1RSTR_TIM6RST_Pos', 'RCC_APB1RSTR_TIM6RST_Msk', 'RCC_APB1RSTR_TIM6RST',
    'RCC_APB1RSTR_LCDRST_Pos', 'RCC_APB1RSTR_LCDRST_Msk', 'RCC_APB1RSTR_LCDRST',
    'RCC_APB1RSTR_WWDGRST_Pos', 'RCC_APB1RSTR_WWDGRST_Msk', 'RCC_APB1RSTR_WWDGRST',
    'RCC_APB1RSTR_SPI2RST_Pos', 'RCC_APB1RSTR_SPI2RST_Msk', 'RCC_APB1RSTR_SPI2RST',
    'RCC_APB1RSTR_USART2RST_Pos', 'RCC_APB1RSTR_USART2RST_Msk',
    'RCC_APB1RSTR_USART2RST', 'RCC_APB1RSTR_LPUART1RST_Pos',
    'RCC_APB1RSTR_LPUART1RST_Msk', 'RCC_APB1RSTR_LPUART1RST',
    'RCC_APB1RSTR_I2C1RST_Pos', 'RCC_APB1RSTR_I2C1RST_Msk', 'RCC_APB1RSTR_I2C1RST',
    'RCC_APB1RSTR_I2C2RST_Pos', 'RCC_APB1RSTR_I2C2RST_Msk', 'RCC_APB1RSTR_I2C2RST',
    'RCC_APB1RSTR_USBRST_Pos', 'RCC_APB1RSTR_USBRST_Msk', 'RCC_APB1RSTR_USBRST',
    'RCC_APB1RSTR_CRSRST_Pos', 'RCC_APB1RSTR_CRSRST_Msk', 'RCC_APB1RSTR_CRSRST',
    'RCC_APB1RSTR_PWRRST_Pos', 'RCC_APB1RSTR_PWRRST_Msk', 'RCC_APB1RSTR_PWRRST',
    'RCC_APB1RSTR_DACRST_Pos', 'RCC_APB1RSTR_DACRST_Msk', 'RCC_APB1RSTR_DACRST',
    'RCC_APB1RSTR_LPTIM1RST_Pos', 'RCC_APB1RSTR_LPTIM1RST_Msk',
    'RCC_APB1RSTR_LPTIM1RST', 'RCC_IOPENR_IOPAEN_Pos', 'RCC_IOPENR_IOPAEN_Msk',
    'RCC_IOPENR_IOPAEN', 'RCC_IOPENR_IOPBEN_Pos', 'RCC_IOPENR_IOPBEN_Msk',
    'RCC_IOPENR_IOPBEN', 'RCC_IOPENR_IOPCEN_Pos', 'RCC_IOPENR_IOPCEN_Msk',
    'RCC_IOPENR_IOPCEN', 'RCC_IOPENR_IOPDEN_Pos', 'RCC_IOPENR_IOPDEN_Msk',
    'RCC_IOPENR_IOPDEN', 'RCC_IOPENR_IOPHEN_Pos', 'RCC_IOPENR_IOPHEN_Msk',
    'RCC_IOPENR_IOPHEN', 'RCC_IOPENR_GPIOAEN', 'RCC_IOPENR_GPIOBEN',
    'RCC_IOPENR_GPIOCEN', 'RCC_IOPENR_GPIODEN', 'RCC_IOPENR_GPIOHEN',
    'RCC_AHBENR_DMAEN_Pos', 'RCC_AHBENR_DMAEN_Msk', 'RCC_AHBENR_DMAEN',
    'RCC_AHBENR_MIFEN_Pos', 'RCC_AHBENR_MIFEN_Msk', 'RCC_AHBENR_MIFEN',
    'RCC_AHBENR_CRCEN_Pos', 'RCC_AHBENR_CRCEN_Msk', 'RCC_AHBENR_CRCEN',
    'RCC_AHBENR_TSCEN_Pos', 'RCC_AHBENR_TSCEN_Msk', 'RCC_AHBENR_TSCEN',
    'RCC_AHBENR_RNGEN_Pos', 'RCC_AHBENR_RNGEN_Msk', 'RCC_AHBENR_RNGEN',
    'RCC_AHBENR_CRYPEN_Pos', 'RCC_AHBENR_CRYPEN_Msk', 'RCC_AHBENR_CRYPEN',
    'RCC_AHBENR_DMA1EN', 'RCC_APB2ENR_SYSCFGEN_Pos', 'RCC_APB2ENR_SYSCFGEN_Msk',
    'RCC_APB2ENR_SYSCFGEN', 'RCC_APB2ENR_TIM21EN_Pos', 'RCC_APB2ENR_TIM21EN_Msk',
    'RCC_APB2ENR_TIM21EN', 'RCC_APB2ENR_TIM22EN_Pos', 'RCC_APB2ENR_TIM22EN_Msk',
    'RCC_APB2ENR_TIM22EN', 'RCC_APB2ENR_FWEN_Pos', 'RCC_APB2ENR_FWEN_Msk',
    'RCC_APB2ENR_FWEN', 'RCC_APB2ENR_ADCEN_Pos', 'RCC_APB2ENR_ADCEN_Msk',
    'RCC_APB2ENR_ADCEN', 'RCC_APB2ENR_SPI1EN_Pos', 'RCC_APB2ENR_SPI1EN_Msk',
    'RCC_APB2ENR_SPI1EN', 'RCC_APB2ENR_USART1EN_Pos', 'RCC_APB2ENR_USART1EN_Msk',
    'RCC_APB2ENR_USART1EN', 'RCC_APB2ENR_DBGEN_Pos', 'RCC_APB2ENR_DBGEN_Msk',
    'RCC_APB2ENR_DBGEN', 'RCC_APB2ENR_MIFIEN', 'RCC_APB2ENR_ADC1EN',
    'RCC_APB2ENR_DBGMCUEN', 'RCC_APB1ENR_TIM2EN_Pos', 'RCC_APB1ENR_TIM2EN_Msk',
    'RCC_APB1ENR_TIM2EN', 'RCC_APB1ENR_TIM6EN_Pos', 'RCC_APB1ENR_TIM6EN_Msk',
    'RCC_APB1ENR_TIM6EN', 'RCC_APB1ENR_LCDEN_Pos', 'RCC_APB1ENR_LCDEN_Msk',
    'RCC_APB1ENR_LCDEN', 'RCC_APB1ENR_WWDGEN_Pos', 'RCC_APB1ENR_WWDGEN_Msk',
    'RCC_APB1ENR_WWDGEN', 'RCC_APB1ENR_SPI2EN_Pos', 'RCC_APB1ENR_SPI2EN_Msk',
    'RCC_APB1ENR_SPI2EN', 'RCC_APB1ENR_USART2EN_Pos', 'RCC_APB1ENR_USART2EN_Msk',
    'RCC_APB1ENR_USART2EN', 'RCC_APB1ENR_LPUART1EN_Pos', 'RCC_APB1ENR_LPUART1EN_Msk',
    'RCC_APB1ENR_LPUART1EN', 'RCC_APB1ENR_I2C1EN_Pos', 'RCC_APB1ENR_I2C1EN_Msk',
    'RCC_APB1ENR_I2C1EN', 'RCC_APB1ENR_I2C2EN_Pos', 'RCC_APB1ENR_I2C2EN_Msk',
    'RCC_APB1ENR_I2C2EN', 'RCC_APB1ENR_USBEN_Pos', 'RCC_APB1ENR_USBEN_Msk',
    'RCC_APB1ENR_USBEN', 'RCC_APB1ENR_CRSEN_Pos', 'RCC_APB1ENR_CRSEN_Msk',
    'RCC_APB1ENR_CRSEN', 'RCC_APB1ENR_PWREN_Pos', 'RCC_APB1ENR_PWREN_Msk',
    'RCC_APB1ENR_PWREN', 'RCC_APB1ENR_DACEN_Pos', 'RCC_APB1ENR_DACEN_Msk',
    'RCC_APB1ENR_DACEN', 'RCC_APB1ENR_LPTIM1EN_Pos', 'RCC_APB1ENR_LPTIM1EN_Msk',
    'RCC_APB1ENR_LPTIM1EN', 'RCC_IOPSMENR_IOPASMEN_Pos', 'RCC_IOPSMENR_IOPASMEN_Msk',
    'RCC_IOPSMENR_IOPASMEN', 'RCC_IOPSMENR_IOPBSMEN_Pos', 'RCC_IOPSMENR_IOPBSMEN_Msk',
    'RCC_IOPSMENR_IOPBSMEN', 'RCC_IOPSMENR_IOPCSMEN_Pos', 'RCC_IOPSMENR_IOPCSMEN_Msk',
    'RCC_IOPSMENR_IOPCSMEN', 'RCC_IOPSMENR_IOPDSMEN_Pos', 'RCC_IOPSMENR_IOPDSMEN_Msk',
    'RCC_IOPSMENR_IOPDSMEN', 'RCC_IOPSMENR_IOPHSMEN_Pos', 'RCC_IOPSMENR_IOPHSMEN_Msk',
    'RCC_IOPSMENR_IOPHSMEN', 'RCC_IOPSMENR_GPIOASMEN', 'RCC_IOPSMENR_GPIOBSMEN',
    'RCC_IOPSMENR_GPIOCSMEN', 'RCC_IOPSMENR_GPIODSMEN', 'RCC_IOPSMENR_GPIOHSMEN',
    'RCC_AHBSMENR_DMASMEN_Pos', 'RCC_AHBSMENR_DMASMEN_Msk', 'RCC_AHBSMENR_DMASMEN',
    'RCC_AHBSMENR_MIFSMEN_Pos', 'RCC_AHBSMENR_MIFSMEN_Msk', 'RCC_AHBSMENR_MIFSMEN',
    'RCC_AHBSMENR_SRAMSMEN_Pos', 'RCC_AHBSMENR_SRAMSMEN_Msk', 'RCC_AHBSMENR_SRAMSMEN',
    'RCC_AHBSMENR_CRCSMEN_Pos', 'RCC_AHBSMENR_CRCSMEN_Msk', 'RCC_AHBSMENR_CRCSMEN',
    'RCC_AHBSMENR_TSCSMEN_Pos', 'RCC_AHBSMENR_TSCSMEN_Msk', 'RCC_AHBSMENR_TSCSMEN',
    'RCC_AHBSMENR_RNGSMEN_Pos', 'RCC_AHBSMENR_RNGSMEN_Msk', 'RCC_AHBSMENR_RNGSMEN',
    'RCC_AHBSMENR_CRYPSMEN_Pos', 'RCC_AHBSMENR_CRYPSMEN_Msk', 'RCC_AHBSMENR_CRYPSMEN',
    'RCC_AHBSMENR_DMA1SMEN', 'RCC_APB2SMENR_SYSCFGSMEN_Pos',
    'RCC_APB2SMENR_SYSCFGSMEN_Msk', 'RCC_APB2SMENR_SYSCFGSMEN',
    'RCC_APB2SMENR_TIM21SMEN_Pos', 'RCC_APB2SMENR_TIM21SMEN_Msk',
    'RCC_APB2SMENR_TIM21SMEN', 'RCC_APB2SMENR_TIM22SMEN_Pos',
    'RCC_APB2SMENR_TIM22SMEN_Msk', 'RCC_APB2SMENR_TIM22SMEN',
    'RCC_APB2SMENR_ADCSMEN_Pos', 'RCC_APB2SMENR_ADCSMEN_Msk', 'RCC_APB2SMENR_ADCSMEN',
    'RCC_APB2SMENR_SPI1SMEN_Pos', 'RCC_APB2SMENR_SPI1SMEN_Msk',
    'RCC_APB2SMENR_SPI1SMEN', 'RCC_APB2SMENR_USART1SMEN_Pos',
    'RCC_APB2SMENR_USART1SMEN_Msk', 'RCC_APB2SMENR_USART1SMEN',
    'RCC_APB2SMENR_DBGSMEN_Pos', 'RCC_APB2SMENR_DBGSMEN_Msk', 'RCC_APB2SMENR_DBGSMEN',
    'RCC_APB2SMENR_ADC1SMEN', 'RCC_APB2SMENR_DBGMCUSMEN', 'RCC_APB1SMENR_TIM2SMEN_Pos',
    'RCC_APB1SMENR_TIM2SMEN_Msk', 'RCC_APB1SMENR_TIM2SMEN',
    'RCC_APB1SMENR_TIM6SMEN_Pos', 'RCC_APB1SMENR_TIM6SMEN_Msk',
    'RCC_APB1SMENR_TIM6SMEN', 'RCC_APB1SMENR_LCDSMEN_Pos', 'RCC_APB1SMENR_LCDSMEN_Msk',
    'RCC_APB1SMENR_LCDSMEN', 'RCC_APB1SMENR_WWDGSMEN_Pos', 'RCC_APB1SMENR_WWDGSMEN_Msk',
    'RCC_APB1SMENR_WWDGSMEN', 'RCC_APB1SMENR_SPI2SMEN_Pos',
    'RCC_APB1SMENR_SPI2SMEN_Msk', 'RCC_APB1SMENR_SPI2SMEN',
    'RCC_APB1SMENR_USART2SMEN_Pos', 'RCC_APB1SMENR_USART2SMEN_Msk',
    'RCC_APB1SMENR_USART2SMEN', 'RCC_APB1SMENR_LPUART1SMEN_Pos',
    'RCC_APB1SMENR_LPUART1SMEN_Msk', 'RCC_APB1SMENR_LPUART1SMEN',
    'RCC_APB1SMENR_I2C1SMEN_Pos', 'RCC_APB1SMENR_I2C1SMEN_Msk',
    'RCC_APB1SMENR_I2C1SMEN', 'RCC_APB1SMENR_I2C2SMEN_Pos',
    'RCC_APB1SMENR_I2C2SMEN_Msk', 'RCC_APB1SMENR_I2C2SMEN', 'RCC_APB1SMENR_USBSMEN_Pos',
    'RCC_APB1SMENR_USBSMEN_Msk', 'RCC_APB1SMENR_USBSMEN', 'RCC_APB1SMENR_CRSSMEN_Pos',
    'RCC_APB1SMENR_CRSSMEN_Msk', 'RCC_APB1SMENR_CRSSMEN', 'RCC_APB1SMENR_PWRSMEN_Pos',
    'RCC_APB1SMENR_PWRSMEN_Msk', 'RCC_APB1SMENR_PWRSMEN', 'RCC_APB1SMENR_DACSMEN_Pos',
    'RCC_APB1SMENR_DACSMEN_Msk', 'RCC_APB1SMENR_DACSMEN',
    'RCC_APB1SMENR_LPTIM1SMEN_Pos', 'RCC_APB1SMENR_LPTIM1SMEN_Msk',
    'RCC_APB1SMENR_LPTIM1SMEN', 'RCC_CCIPR_USART1SEL_Pos', 'RCC_CCIPR_USART1SEL_Msk',
    'RCC_CCIPR_USART1SEL', 'RCC_CCIPR_USART1SEL_0', 'RCC_CCIPR_USART1SEL_1',
    'RCC_CCIPR_USART2SEL_Pos', 'RCC_CCIPR_USART2SEL_Msk', 'RCC_CCIPR_USART2SEL',
    'RCC_CCIPR_USART2SEL_0', 'RCC_CCIPR_USART2SEL_1', 'RCC_CCIPR_LPUART1SEL_Pos',
    'RCC_CCIPR_LPUART1SEL_Msk', 'RCC_CCIPR_LPUART1SEL', 'RCC_CCIPR_LPUART1SEL_0',
    'RCC_CCIPR_LPUART1SEL_1', 'RCC_CCIPR_I2C1SEL_Pos', 'RCC_CCIPR_I2C1SEL_Msk',
    'RCC_CCIPR_I2C1SEL', 'RCC_CCIPR_I2C1SEL_0', 'RCC_CCIPR_I2C1SEL_1',
    'RCC_CCIPR_LPTIM1SEL_Pos', 'RCC_CCIPR_LPTIM1SEL_Msk', 'RCC_CCIPR_LPTIM1SEL',
    'RCC_CCIPR_LPTIM1SEL_0', 'RCC_CCIPR_LPTIM1SEL_1', 'RCC_CCIPR_HSI48SEL_Pos',
    'RCC_CCIPR_HSI48SEL_Msk', 'RCC_CCIPR_HSI48SEL', 'RCC_CCIPR_HSI48MSEL',
    'RCC_CSR_LSION_Pos', 'RCC_CSR_LSION_Msk', 'RCC_CSR_LSION', 'RCC_CSR_LSIRDY_Pos',
    'RCC_CSR_LSIRDY_Msk', 'RCC_CSR_LSIRDY', 'RCC_CSR_LSEON_Pos', 'RCC_CSR_LSEON_Msk',
    'RCC_CSR_LSEON', 'RCC_CSR_LSERDY_Pos', 'RCC_CSR_LSERDY_Msk', 'RCC_CSR_LSERDY',
    'RCC_CSR_LSEBYP_Pos', 'RCC_CSR_LSEBYP_Msk', 'RCC_CSR_LSEBYP', 'RCC_CSR_LSEDRV_Pos',
    'RCC_CSR_LSEDRV_Msk', 'RCC_CSR_LSEDRV', 'RCC_CSR_LSEDRV_0', 'RCC_CSR_LSEDRV_1',
    'RCC_CSR_LSECSSON_Pos', 'RCC_CSR_LSECSSON_Msk', 'RCC_CSR_LSECSSON',
    'RCC_CSR_LSECSSD_Pos', 'RCC_CSR_LSECSSD_Msk', 'RCC_CSR_LSECSSD',
    'RCC_CSR_RTCSEL_Pos', 'RCC_CSR_RTCSEL_Msk', 'RCC_CSR_RTCSEL', 'RCC_CSR_RTCSEL_0',
    'RCC_CSR_RTCSEL_1', 'RCC_CSR_RTCSEL_NOCLOCK', 'RCC_CSR_RTCSEL_LSE_Pos',
    'RCC_CSR_RTCSEL_LSE_Msk', 'RCC_CSR_RTCSEL_LSE', 'RCC_CSR_RTCSEL_LSI_Pos',
    'RCC_CSR_RTCSEL_LSI_Msk', 'RCC_CSR_RTCSEL_LSI', 'RCC_CSR_RTCSEL_HSE_Pos',
    'RCC_CSR_RTCSEL_HSE_Msk', 'RCC_CSR_RTCSEL_HSE', 'RCC_CSR_RTCEN_Pos',
    'RCC_CSR_RTCEN_Msk', 'RCC_CSR_RTCEN', 'RCC_CSR_RTCRST_Pos', 'RCC_CSR_RTCRST_Msk',
    'RCC_CSR_RTCRST', 'RCC_CSR_RMVF_Pos', 'RCC_CSR_RMVF_Msk', 'RCC_CSR_RMVF',
    'RCC_CSR_FWRSTF_Pos', 'RCC_CSR_FWRSTF_Msk', 'RCC_CSR_FWRSTF', 'RCC_CSR_OBLRSTF_Pos',
    'RCC_CSR_OBLRSTF_Msk', 'RCC_CSR_OBLRSTF', 'RCC_CSR_PINRSTF_Pos',
    'RCC_CSR_PINRSTF_Msk', 'RCC_CSR_PINRSTF', 'RCC_CSR_PORRSTF_Pos',
    'RCC_CSR_PORRSTF_Msk', 'RCC_CSR_PORRSTF', 'RCC_CSR_SFTRSTF_Pos',
    'RCC_CSR_SFTRSTF_Msk', 'RCC_CSR_SFTRSTF', 'RCC_CSR_IWDGRSTF_Pos',
    'RCC_CSR_IWDGRSTF_Msk', 'RCC_CSR_IWDGRSTF', 'RCC_CSR_WWDGRSTF_Pos',
    'RCC_CSR_WWDGRSTF_Msk', 'RCC_CSR_WWDGRSTF', 'RCC_CSR_LPWRRSTF_Pos',
    'RCC_CSR_LPWRRSTF_Msk', 'RCC_CSR_LPWRRSTF', 'RCC_CSR_OBL', 'RNG_CR_RNGEN_Pos',
    'RNG_CR_RNGEN_Msk', 'RNG_CR_RNGEN', 'RNG_CR_IE_Pos', 'RNG_CR_IE_Msk', 'RNG_CR_IE',
    'RNG_SR_DRDY_Pos', 'RNG_SR_DRDY_Msk', 'RNG_SR_DRDY', 'RNG_SR_CECS_Pos',
    'RNG_SR_CECS_Msk', 'RNG_SR_CECS', 'RNG_SR_SECS_Pos', 'RNG_SR_SECS_Msk',
    'RNG_SR_SECS', 'RNG_SR_CEIS_Pos', 'RNG_SR_CEIS_Msk', 'RNG_SR_CEIS',
    'RNG_SR_SEIS_Pos', 'RNG_SR_SEIS_Msk', 'RNG_SR_SEIS', 'RTC_TR_PM_Pos',
    'RTC_TR_PM_Msk', 'RTC_TR_PM', 'RTC_TR_HT_Pos', 'RTC_TR_HT_Msk', 'RTC_TR_HT',
    'RTC_TR_HT_0', 'RTC_TR_HT_1', 'RTC_TR_HU_Pos', 'RTC_TR_HU_Msk', 'RTC_TR_HU',
    'RTC_TR_HU_0', 'RTC_TR_HU_1', 'RTC_TR_HU_2', 'RTC_TR_HU_3', 'RTC_TR_MNT_Pos',
    'RTC_TR_MNT_Msk', 'RTC_TR_MNT', 'RTC_TR_MNT_0', 'RTC_TR_MNT_1', 'RTC_TR_MNT_2',
    'RTC_TR_MNU_Pos', 'RTC_TR_MNU_Msk', 'RTC_TR_MNU', 'RTC_TR_MNU_0', 'RTC_TR_MNU_1',
    'RTC_TR_MNU_2', 'RTC_TR_MNU_3', 'RTC_TR_ST_Pos', 'RTC_TR_ST_Msk', 'RTC_TR_ST',
    'RTC_TR_ST_0', 'RTC_TR_ST_1', 'RTC_TR_ST_2', 'RTC_TR_SU_Pos', 'RTC_TR_SU_Msk',
    'RTC_TR_SU', 'RTC_TR_SU_0', 'RTC_TR_SU_1', 'RTC_TR_SU_2', 'RTC_TR_SU_3',
    'RTC_DR_YT_Pos', 'RTC_DR_YT_Msk', 'RTC_DR_YT', 'RTC_DR_YT_0', 'RTC_DR_YT_1',
    'RTC_DR_YT_2', 'RTC_DR_YT_3', 'RTC_DR_YU_Pos', 'RTC_DR_YU_Msk', 'RTC_DR_YU',
    'RTC_DR_YU_0', 'RTC_DR_YU_1', 'RTC_DR_YU_2', 'RTC_DR_YU_3', 'RTC_DR_WDU_Pos',
    'RTC_DR_WDU_Msk', 'RTC_DR_WDU', 'RTC_DR_WDU_0', 'RTC_DR_WDU_1', 'RTC_DR_WDU_2',
    'RTC_DR_MT_Pos', 'RTC_DR_MT_Msk', 'RTC_DR_MT', 'RTC_DR_MU_Pos', 'RTC_DR_MU_Msk',
    'RTC_DR_MU', 'RTC_DR_MU_0', 'RTC_DR_MU_1', 'RTC_DR_MU_2', 'RTC_DR_MU_3',
    'RTC_DR_DT_Pos', 'RTC_DR_DT_Msk', 'RTC_DR_DT', 'RTC_DR_DT_0', 'RTC_DR_DT_1',
    'RTC_DR_DU_Pos', 'RTC_DR_DU_Msk', 'RTC_DR_DU', 'RTC_DR_DU_0', 'RTC_DR_DU_1',
    'RTC_DR_DU_2', 'RTC_DR_DU_3', 'RTC_CR_COE_Pos', 'RTC_CR_COE_Msk', 'RTC_CR_COE',
    'RTC_CR_OSEL_Pos', 'RTC_CR_OSEL_Msk', 'RTC_CR_OSEL', 'RTC_CR_OSEL_0',
    'RTC_CR_OSEL_1', 'RTC_CR_POL_Pos', 'RTC_CR_POL_Msk', 'RTC_CR_POL',
    'RTC_CR_COSEL_Pos', 'RTC_CR_COSEL_Msk', 'RTC_CR_COSEL', 'RTC_CR_BKP_Pos',
    'RTC_CR_BKP_Msk', 'RTC_CR_BKP', 'RTC_CR_SUB1H_Pos', 'RTC_CR_SUB1H_Msk',
    'RTC_CR_SUB1H', 'RTC_CR_ADD1H_Pos', 'RTC_CR_ADD1H_Msk', 'RTC_CR_ADD1H',
    'RTC_CR_TSIE_Pos', 'RTC_CR_TSIE_Msk', 'RTC_CR_TSIE', 'RTC_CR_WUTIE_Pos',
    'RTC_CR_WUTIE_Msk', 'RTC_CR_WUTIE', 'RTC_CR_ALRBIE_Pos', 'RTC_CR_ALRBIE_Msk',
    'RTC_CR_ALRBIE', 'RTC_CR_ALRAIE_Pos', 'RTC_CR_ALRAIE_Msk', 'RTC_CR_ALRAIE',
    'RTC_CR_TSE_Pos', 'RTC_CR_TSE_Msk', 'RTC_CR_TSE', 'RTC_CR_WUTE_Pos',
    'RTC_CR_WUTE_Msk', 'RTC_CR_WUTE', 'RTC_CR_ALRBE_Pos', 'RTC_CR_ALRBE_Msk',
    'RTC_CR_ALRBE', 'RTC_CR_ALRAE_Pos', 'RTC_CR_ALRAE_Msk', 'RTC_CR_ALRAE',
    'RTC_CR_FMT_Pos', 'RTC_CR_FMT_Msk', 'RTC_CR_FMT', 'RTC_CR_BYPSHAD_Pos',
    'RTC_CR_BYPSHAD_Msk', 'RTC_CR_BYPSHAD', 'RTC_CR_REFCKON_Pos', 'RTC_CR_REFCKON_Msk',
    'RTC_CR_REFCKON', 'RTC_CR_TSEDGE_Pos', 'RTC_CR_TSEDGE_Msk', 'RTC_CR_TSEDGE',
    'RTC_CR_WUCKSEL_Pos', 'RTC_CR_WUCKSEL_Msk', 'RTC_CR_WUCKSEL', 'RTC_CR_WUCKSEL_0',
    'RTC_CR_WUCKSEL_1', 'RTC_CR_WUCKSEL_2', 'RTC_ISR_RECALPF_Pos',
    'RTC_ISR_RECALPF_Msk', 'RTC_ISR_RECALPF', 'RTC_ISR_TAMP2F_Pos',
    'RTC_ISR_TAMP2F_Msk', 'RTC_ISR_TAMP2F', 'RTC_ISR_TAMP1F_Pos', 'RTC_ISR_TAMP1F_Msk',
    'RTC_ISR_TAMP1F', 'RTC_ISR_TSOVF_Pos', 'RTC_ISR_TSOVF_Msk', 'RTC_ISR_TSOVF',
    'RTC_ISR_TSF_Pos', 'RTC_ISR_TSF_Msk', 'RTC_ISR_TSF', 'RTC_ISR_WUTF_Pos',
    'RTC_ISR_WUTF_Msk', 'RTC_ISR_WUTF', 'RTC_ISR_ALRBF_Pos', 'RTC_ISR_ALRBF_Msk',
    'RTC_ISR_ALRBF', 'RTC_ISR_ALRAF_Pos', 'RTC_ISR_ALRAF_Msk', 'RTC_ISR_ALRAF',
    'RTC_ISR_INIT_Pos', 'RTC_ISR_INIT_Msk', 'RTC_ISR_INIT', 'RTC_ISR_INITF_Pos',
    'RTC_ISR_INITF_Msk', 'RTC_ISR_INITF', 'RTC_ISR_RSF_Pos', 'RTC_ISR_RSF_Msk',
    'RTC_ISR_RSF', 'RTC_ISR_INITS_Pos', 'RTC_ISR_INITS_Msk', 'RTC_ISR_INITS',
    'RTC_ISR_SHPF_Pos', 'RTC_ISR_SHPF_Msk', 'RTC_ISR_SHPF', 'RTC_ISR_WUTWF_Pos',
    'RTC_ISR_WUTWF_Msk', 'RTC_ISR_WUTWF', 'RTC_ISR_ALRBWF_Pos', 'RTC_ISR_ALRBWF_Msk',
    'RTC_ISR_ALRBWF', 'RTC_ISR_ALRAWF_Pos', 'RTC_ISR_ALRAWF_Msk', 'RTC_ISR_ALRAWF',
    'RTC_PRER_PREDIV_A_Pos', 'RTC_PRER_PREDIV_A_Msk', 'RTC_PRER_PREDIV_A',
    'RTC_PRER_PREDIV_S_Pos', 'RTC_PRER_PREDIV_S_Msk', 'RTC_PRER_PREDIV_S',
    'RTC_WUTR_WUT_Pos', 'RTC_WUTR_WUT_Msk', 'RTC_WUTR_WUT', 'RTC_ALRMAR_MSK4_Pos',
    'RTC_ALRMAR_MSK4_Msk', 'RTC_ALRMAR_MSK4', 'RTC_ALRMAR_WDSEL_Pos',
    'RTC_ALRMAR_WDSEL_Msk', 'RTC_ALRMAR_WDSEL', 'RTC_ALRMAR_DT_Pos',
    'RTC_ALRMAR_DT_Msk', 'RTC_ALRMAR_DT', 'RTC_ALRMAR_DT_0', 'RTC_ALRMAR_DT_1',
    'RTC_ALRMAR_DU_Pos', 'RTC_ALRMAR_DU_Msk', 'RTC_ALRMAR_DU', 'RTC_ALRMAR_DU_0',
    'RTC_ALRMAR_DU_1', 'RTC_ALRMAR_DU_2', 'RTC_ALRMAR_DU_3', 'RTC_ALRMAR_MSK3_Pos',
    'RTC_ALRMAR_MSK3_Msk', 'RTC_ALRMAR_MSK3', 'RTC_ALRMAR_PM_Pos', 'RTC_ALRMAR_PM_Msk',
    'RTC_ALRMAR_PM', 'RTC_ALRMAR_HT_Pos', 'RTC_ALRMAR_HT_Msk', 'RTC_ALRMAR_HT',
    'RTC_ALRMAR_HT_0', 'RTC_ALRMAR_HT_1', 'RTC_ALRMAR_HU_Pos', 'RTC_ALRMAR_HU_Msk',
    'RTC_ALRMAR_HU', 'RTC_ALRMAR_HU_0', 'RTC_ALRMAR_HU_1', 'RTC_ALRMAR_HU_2',
    'RTC_ALRMAR_HU_3', 'RTC_ALRMAR_MSK2_Pos', 'RTC_ALRMAR_MSK2_Msk', 'RTC_ALRMAR_MSK2',
    'RTC_ALRMAR_MNT_Pos', 'RTC_ALRMAR_MNT_Msk', 'RTC_ALRMAR_MNT', 'RTC_ALRMAR_MNT_0',
    'RTC_ALRMAR_MNT_1', 'RTC_ALRMAR_MNT_2', 'RTC_ALRMAR_MNU_Pos', 'RTC_ALRMAR_MNU_Msk',
    'RTC_ALRMAR_MNU', 'RTC_ALRMAR_MNU_0', 'RTC_ALRMAR_MNU_1', 'RTC_ALRMAR_MNU_2',
    'RTC_ALRMAR_MNU_3', 'RTC_ALRMAR_MSK1_Pos', 'RTC_ALRMAR_MSK1_Msk', 'RTC_ALRMAR_MSK1',
    'RTC_ALRMAR_ST_Pos', 'RTC_ALRMAR_ST_Msk', 'RTC_ALRMAR_ST', 'RTC_ALRMAR_ST_0',
    'RTC_ALRMAR_ST_1', 'RTC_ALRMAR_ST_2', 'RTC_ALRMAR_SU_Pos', 'RTC_ALRMAR_SU_Msk',
    'RTC_ALRMAR_SU', 'RTC_ALRMAR_SU_0', 'RTC_ALRMAR_SU_1', 'RTC_ALRMAR_SU_2',
    'RTC_ALRMAR_SU_3', 'RTC_ALRMBR_MSK4_Pos', 'RTC_ALRMBR_MSK4_Msk', 'RTC_ALRMBR_MSK4',
    'RTC_ALRMBR_WDSEL_Pos', 'RTC_ALRMBR_WDSEL_Msk', 'RTC_ALRMBR_WDSEL',
    'RTC_ALRMBR_DT_Pos', 'RTC_ALRMBR_DT_Msk', 'RTC_ALRMBR_DT', 'RTC_ALRMBR_DT_0',
    'RTC_ALRMBR_DT_1', 'RTC_ALRMBR_DU_Pos', 'RTC_ALRMBR_DU_Msk', 'RTC_ALRMBR_DU',
    'RTC_ALRMBR_DU_0', 'RTC_ALRMBR_DU_1', 'RTC_ALRMBR_DU_2', 'RTC_ALRMBR_DU_3',
    'RTC_ALRMBR_MSK3_Pos', 'RTC_ALRMBR_MSK3_Msk', 'RTC_ALRMBR_MSK3',
    'RTC_ALRMBR_PM_Pos', 'RTC_ALRMBR_PM_Msk', 'RTC_ALRMBR_PM', 'RTC_ALRMBR_HT_Pos',
    'RTC_ALRMBR_HT_Msk', 'RTC_ALRMBR_HT', 'RTC_ALRMBR_HT_0', 'RTC_ALRMBR_HT_1',
    'RTC_ALRMBR_HU_Pos', 'RTC_ALRMBR_HU_Msk', 'RTC_ALRMBR_HU', 'RTC_ALRMBR_HU_0',
    'RTC_ALRMBR_HU_1', 'RTC_ALRMBR_HU_2', 'RTC_ALRMBR_HU_3', 'RTC_ALRMBR_MSK2_Pos',
    'RTC_ALRMBR_MSK2_Msk', 'RTC_ALRMBR_MSK2', 'RTC_ALRMBR_MNT_Pos',
    'RTC_ALRMBR_MNT_Msk', 'RTC_ALRMBR_MNT', 'RTC_ALRMBR_MNT_0', 'RTC_ALRMBR_MNT_1',
    'RTC_ALRMBR_MNT_2', 'RTC_ALRMBR_MNU_Pos', 'RTC_ALRMBR_MNU_Msk', 'RTC_ALRMBR_MNU',
    'RTC_ALRMBR_MNU_0', 'RTC_ALRMBR_MNU_1', 'RTC_ALRMBR_MNU_2', 'RTC_ALRMBR_MNU_3',
    'RTC_ALRMBR_MSK1_Pos', 'RTC_ALRMBR_MSK1_Msk', 'RTC_ALRMBR_MSK1',
    'RTC_ALRMBR_ST_Pos', 'RTC_ALRMBR_ST_Msk', 'RTC_ALRMBR_ST', 'RTC_ALRMBR_ST_0',
    'RTC_ALRMBR_ST_1', 'RTC_ALRMBR_ST_2', 'RTC_ALRMBR_SU_Pos', 'RTC_ALRMBR_SU_Msk',
    'RTC_ALRMBR_SU', 'RTC_ALRMBR_SU_0', 'RTC_ALRMBR_SU_1', 'RTC_ALRMBR_SU_2',
    'RTC_ALRMBR_SU_3', 'RTC_WPR_KEY_Pos', 'RTC_WPR_KEY_Msk', 'RTC_WPR_KEY',
    'RTC_SSR_SS_Pos', 'RTC_SSR_SS_Msk', 'RTC_SSR_SS', 'RTC_SHIFTR_SUBFS_Pos',
    'RTC_SHIFTR_SUBFS_Msk', 'RTC_SHIFTR_SUBFS', 'RTC_SHIFTR_ADD1S_Pos',
    'RTC_SHIFTR_ADD1S_Msk', 'RTC_SHIFTR_ADD1S', 'RTC_TSTR_PM_Pos', 'RTC_TSTR_PM_Msk',
    'RTC_TSTR_PM', 'RTC_TSTR_HT_Pos', 'RTC_TSTR_HT_Msk', 'RTC_TSTR_HT', 'RTC_TSTR_HT_0',
    'RTC_TSTR_HT_1', 'RTC_TSTR_HU_Pos', 'RTC_TSTR_HU_Msk', 'RTC_TSTR_HU',
    'RTC_TSTR_HU_0', 'RTC_TSTR_HU_1', 'RTC_TSTR_HU_2', 'RTC_TSTR_HU_3',
    'RTC_TSTR_MNT_Pos', 'RTC_TSTR_MNT_Msk', 'RTC_TSTR_MNT', 'RTC_TSTR_MNT_0',
    'RTC_TSTR_MNT_1', 'RTC_TSTR_MNT_2', 'RTC_TSTR_MNU_Pos', 'RTC_TSTR_MNU_Msk',
    'RTC_TSTR_MNU', 'RTC_TSTR_MNU_0', 'RTC_TSTR_MNU_1', 'RTC_TSTR_MNU_2',
    'RTC_TSTR_MNU_3', 'RTC_TSTR_ST_Pos', 'RTC_TSTR_ST_Msk', 'RTC_TSTR_ST',
    'RTC_TSTR_ST_0', 'RTC_TSTR_ST_1', 'RTC_TSTR_ST_2', 'RTC_TSTR_SU_Pos',
    'RTC_TSTR_SU_Msk', 'RTC_TSTR_SU', 'RTC_TSTR_SU_0', 'RTC_TSTR_SU_1', 'RTC_TSTR_SU_2',
    'RTC_TSTR_SU_3', 'RTC_TSDR_WDU_Pos', 'RTC_TSDR_WDU_Msk', 'RTC_TSDR_WDU',
    'RTC_TSDR_WDU_0', 'RTC_TSDR_WDU_1', 'RTC_TSDR_WDU_2', 'RTC_TSDR_MT_Pos',
    'RTC_TSDR_MT_Msk', 'RTC_TSDR_MT', 'RTC_TSDR_MU_Pos', 'RTC_TSDR_MU_Msk',
    'RTC_TSDR_MU', 'RTC_TSDR_MU_0', 'RTC_TSDR_MU_1', 'RTC_TSDR_MU_2', 'RTC_TSDR_MU_3',
    'RTC_TSDR_DT_Pos', 'RTC_TSDR_DT_Msk', 'RTC_TSDR_DT', 'RTC_TSDR_DT_0',
    'RTC_TSDR_DT_1', 'RTC_TSDR_DU_Pos', 'RTC_TSDR_DU_Msk', 'RTC_TSDR_DU',
    'RTC_TSDR_DU_0', 'RTC_TSDR_DU_1', 'RTC_TSDR_DU_2', 'RTC_TSDR_DU_3',
    'RTC_TSSSR_SS_Pos', 'RTC_TSSSR_SS_Msk', 'RTC_TSSSR_SS', 'RTC_CALR_CALP_Pos',
    'RTC_CALR_CALP_Msk', 'RTC_CALR_CALP', 'RTC_CALR_CALW8_Pos', 'RTC_CALR_CALW8_Msk',
    'RTC_CALR_CALW8', 'RTC_CALR_CALW16_Pos', 'RTC_CALR_CALW16_Msk', 'RTC_CALR_CALW16',
    'RTC_CALR_CALM_Pos', 'RTC_CALR_CALM_Msk', 'RTC_CALR_CALM', 'RTC_CALR_CALM_0',
    'RTC_CALR_CALM_1', 'RTC_CALR_CALM_2', 'RTC_CALR_CALM_3', 'RTC_CALR_CALM_4',
    'RTC_CALR_CALM_5', 'RTC_CALR_CALM_6', 'RTC_CALR_CALM_7', 'RTC_CALR_CALM_8',
    'RTC_CAL_CALP', 'RTC_CAL_CALW8', 'RTC_CAL_CALW16', 'RTC_CAL_CALM', 'RTC_CAL_CALM_0',
    'RTC_CAL_CALM_1', 'RTC_CAL_CALM_2', 'RTC_CAL_CALM_3', 'RTC_CAL_CALM_4',
    'RTC_CAL_CALM_5', 'RTC_CAL_CALM_6', 'RTC_CAL_CALM_7', 'RTC_CAL_CALM_8',
    'RTC_TAMPCR_TAMP2MF_Pos', 'RTC_TAMPCR_TAMP2MF_Msk', 'RTC_TAMPCR_TAMP2MF',
    'RTC_TAMPCR_TAMP2NOERASE_Pos', 'RTC_TAMPCR_TAMP2NOERASE_Msk',
    'RTC_TAMPCR_TAMP2NOERASE', 'RTC_TAMPCR_TAMP2IE_Pos', 'RTC_TAMPCR_TAMP2IE_Msk',
    'RTC_TAMPCR_TAMP2IE', 'RTC_TAMPCR_TAMP1MF_Pos', 'RTC_TAMPCR_TAMP1MF_Msk',
    'RTC_TAMPCR_TAMP1MF', 'RTC_TAMPCR_TAMP1NOERASE_Pos', 'RTC_TAMPCR_TAMP1NOERASE_Msk',
    'RTC_TAMPCR_TAMP1NOERASE', 'RTC_TAMPCR_TAMP1IE_Pos', 'RTC_TAMPCR_TAMP1IE_Msk',
    'RTC_TAMPCR_TAMP1IE', 'RTC_TAMPCR_TAMPPUDIS_Pos', 'RTC_TAMPCR_TAMPPUDIS_Msk',
    'RTC_TAMPCR_TAMPPUDIS', 'RTC_TAMPCR_TAMPPRCH_Pos', 'RTC_TAMPCR_TAMPPRCH_Msk',
    'RTC_TAMPCR_TAMPPRCH', 'RTC_TAMPCR_TAMPPRCH_0', 'RTC_TAMPCR_TAMPPRCH_1',
    'RTC_TAMPCR_TAMPFLT_Pos', 'RTC_TAMPCR_TAMPFLT_Msk', 'RTC_TAMPCR_TAMPFLT',
    'RTC_TAMPCR_TAMPFLT_0', 'RTC_TAMPCR_TAMPFLT_1', 'RTC_TAMPCR_TAMPFREQ_Pos',
    'RTC_TAMPCR_TAMPFREQ_Msk', 'RTC_TAMPCR_TAMPFREQ', 'RTC_TAMPCR_TAMPFREQ_0',
    'RTC_TAMPCR_TAMPFREQ_1', 'RTC_TAMPCR_TAMPFREQ_2', 'RTC_TAMPCR_TAMPTS_Pos',
    'RTC_TAMPCR_TAMPTS_Msk', 'RTC_TAMPCR_TAMPTS', 'RTC_TAMPCR_TAMP2TRG_Pos',
    'RTC_TAMPCR_TAMP2TRG_Msk', 'RTC_TAMPCR_TAMP2TRG', 'RTC_TAMPCR_TAMP2E_Pos',
    'RTC_TAMPCR_TAMP2E_Msk', 'RTC_TAMPCR_TAMP2E', 'RTC_TAMPCR_TAMPIE_Pos',
    'RTC_TAMPCR_TAMPIE_Msk', 'RTC_TAMPCR_TAMPIE', 'RTC_TAMPCR_TAMP1TRG_Pos',
    'RTC_TAMPCR_TAMP1TRG_Msk', 'RTC_TAMPCR_TAMP1TRG', 'RTC_TAMPCR_TAMP1E_Pos',
    'RTC_TAMPCR_TAMP1E_Msk', 'RTC_TAMPCR_TAMP1E', 'RTC_ALRMASSR_MASKSS_Pos',
    'RTC_ALRMASSR_MASKSS_Msk', 'RTC_ALRMASSR_MASKSS', 'RTC_ALRMASSR_MASKSS_0',
    'RTC_ALRMASSR_MASKSS_1', 'RTC_ALRMASSR_MASKSS_2', 'RTC_ALRMASSR_MASKSS_3',
    'RTC_ALRMASSR_SS_Pos', 'RTC_ALRMASSR_SS_Msk', 'RTC_ALRMASSR_SS',
    'RTC_ALRMBSSR_MASKSS_Pos', 'RTC_ALRMBSSR_MASKSS_Msk', 'RTC_ALRMBSSR_MASKSS',
    'RTC_ALRMBSSR_MASKSS_0', 'RTC_ALRMBSSR_MASKSS_1', 'RTC_ALRMBSSR_MASKSS_2',
    'RTC_ALRMBSSR_MASKSS_3', 'RTC_ALRMBSSR_SS_Pos', 'RTC_ALRMBSSR_SS_Msk',
    'RTC_ALRMBSSR_SS', 'RTC_OR_OUT_RMP_Pos', 'RTC_OR_OUT_RMP_Msk', 'RTC_OR_OUT_RMP',
    'RTC_OR_ALARMOUTTYPE_Pos', 'RTC_OR_ALARMOUTTYPE_Msk', 'RTC_OR_ALARMOUTTYPE',
    'RTC_OR_RTC_OUT_RMP', 'RTC_BKP0R_Pos', 'RTC_BKP0R_Msk', 'RTC_BKP0R',
    'RTC_BKP1R_Pos', 'RTC_BKP1R_Msk', 'RTC_BKP1R', 'RTC_BKP2R_Pos', 'RTC_BKP2R_Msk',
    'RTC_BKP2R', 'RTC_BKP3R_Pos', 'RTC_BKP3R_Msk', 'RTC_BKP3R', 'RTC_BKP4R_Pos',
    'RTC_BKP4R_Msk', 'RTC_BKP4R', 'RTC_BKP_NUMBER', 'SPI_CR1_CPHA_Pos',
    'SPI_CR1_CPHA_Msk', 'SPI_CR1_CPHA', 'SPI_CR1_CPOL_Pos', 'SPI_CR1_CPOL_Msk',
    'SPI_CR1_CPOL', 'SPI_CR1_MSTR_Pos', 'SPI_CR1_MSTR_Msk', 'SPI_CR1_MSTR',
    'SPI_CR1_BR_Pos', 'SPI_CR1_BR_Msk', 'SPI_CR1_BR', 'SPI_CR1_BR_0', 'SPI_CR1_BR_1',
    'SPI_CR1_BR_2', 'SPI_CR1_SPE_Pos', 'SPI_CR1_SPE_Msk', 'SPI_CR1_SPE',
    'SPI_CR1_LSBFIRST_Pos', 'SPI_CR1_LSBFIRST_Msk', 'SPI_CR1_LSBFIRST',
    'SPI_CR1_SSI_Pos', 'SPI_CR1_SSI_Msk', 'SPI_CR1_SSI', 'SPI_CR1_SSM_Pos',
    'SPI_CR1_SSM_Msk', 'SPI_CR1_SSM', 'SPI_CR1_RXONLY_Pos', 'SPI_CR1_RXONLY_Msk',
    'SPI_CR1_RXONLY', 'SPI_CR1_DFF_Pos', 'SPI_CR1_DFF_Msk', 'SPI_CR1_DFF',
    'SPI_CR1_CRCNEXT_Pos', 'SPI_CR1_CRCNEXT_Msk', 'SPI_CR1_CRCNEXT',
    'SPI_CR1_CRCEN_Pos', 'SPI_CR1_CRCEN_Msk', 'SPI_CR1_CRCEN', 'SPI_CR1_BIDIOE_Pos',
    'SPI_CR1_BIDIOE_Msk', 'SPI_CR1_BIDIOE', 'SPI_CR1_BIDIMODE_Pos',
    'SPI_CR1_BIDIMODE_Msk', 'SPI_CR1_BIDIMODE', 'SPI_CR2_RXDMAEN_Pos',
    'SPI_CR2_RXDMAEN_Msk', 'SPI_CR2_RXDMAEN', 'SPI_CR2_TXDMAEN_Pos',
    'SPI_CR2_TXDMAEN_Msk', 'SPI_CR2_TXDMAEN', 'SPI_CR2_SSOE_Pos', 'SPI_CR2_SSOE_Msk',
    'SPI_CR2_SSOE', 'SPI_CR2_FRF_Pos', 'SPI_CR2_FRF_Msk', 'SPI_CR2_FRF',
    'SPI_CR2_ERRIE_Pos', 'SPI_CR2_ERRIE_Msk', 'SPI_CR2_ERRIE', 'SPI_CR2_RXNEIE_Pos',
    'SPI_CR2_RXNEIE_Msk', 'SPI_CR2_RXNEIE', 'SPI_CR2_TXEIE_Pos', 'SPI_CR2_TXEIE_Msk',
    'SPI_CR2_TXEIE', 'SPI_SR_RXNE_Pos', 'SPI_SR_RXNE_Msk', 'SPI_SR_RXNE',
    'SPI_SR_TXE_Pos', 'SPI_SR_TXE_Msk', 'SPI_SR_TXE', 'SPI_SR_CHSIDE_Pos',
    'SPI_SR_CHSIDE_Msk', 'SPI_SR_CHSIDE', 'SPI_SR_UDR_Pos', 'SPI_SR_UDR_Msk',
    'SPI_SR_UDR', 'SPI_SR_CRCERR_Pos', 'SPI_SR_CRCERR_Msk', 'SPI_SR_CRCERR',
    'SPI_SR_MODF_Pos', 'SPI_SR_MODF_Msk', 'SPI_SR_MODF', 'SPI_SR_OVR_Pos',
    'SPI_SR_OVR_Msk', 'SPI_SR_OVR', 'SPI_SR_BSY_Pos', 'SPI_SR_BSY_Msk', 'SPI_SR_BSY',
    'SPI_SR_FRE_Pos', 'SPI_SR_FRE_Msk', 'SPI_SR_FRE', 'SPI_DR_DR_Pos', 'SPI_DR_DR_Msk',
    'SPI_DR_DR', 'SPI_CRCPR_CRCPOLY_Pos', 'SPI_CRCPR_CRCPOLY_Msk', 'SPI_CRCPR_CRCPOLY',
    'SPI_RXCRCR_RXCRC_Pos', 'SPI_RXCRCR_RXCRC_Msk', 'SPI_RXCRCR_RXCRC',
    'SPI_TXCRCR_TXCRC_Pos', 'SPI_TXCRCR_TXCRC_Msk', 'SPI_TXCRCR_TXCRC',
    'SPI_I2SCFGR_CHLEN_Pos', 'SPI_I2SCFGR_CHLEN_Msk', 'SPI_I2SCFGR_CHLEN',
    'SPI_I2SCFGR_DATLEN_Pos', 'SPI_I2SCFGR_DATLEN_Msk', 'SPI_I2SCFGR_DATLEN',
    'SPI_I2SCFGR_DATLEN_0', 'SPI_I2SCFGR_DATLEN_1', 'SPI_I2SCFGR_CKPOL_Pos',
    'SPI_I2SCFGR_CKPOL_Msk', 'SPI_I2SCFGR_CKPOL', 'SPI_I2SCFGR_I2SSTD_Pos',
    'SPI_I2SCFGR_I2SSTD_Msk', 'SPI_I2SCFGR_I2SSTD', 'SPI_I2SCFGR_I2SSTD_0',
    'SPI_I2SCFGR_I2SSTD_1', 'SPI_I2SCFGR_PCMSYNC_Pos', 'SPI_I2SCFGR_PCMSYNC_Msk',
    'SPI_I2SCFGR_PCMSYNC', 'SPI_I2SCFGR_I2SCFG_Pos', 'SPI_I2SCFGR_I2SCFG_Msk',
    'SPI_I2SCFGR_I2SCFG', 'SPI_I2SCFGR_I2SCFG_0', 'SPI_I2SCFGR_I2SCFG_1',
    'SPI_I2SCFGR_I2SE_Pos', 'SPI_I2SCFGR_I2SE_Msk', 'SPI_I2SCFGR_I2SE',
    'SPI_I2SCFGR_I2SMOD_Pos', 'SPI_I2SCFGR_I2SMOD_Msk', 'SPI_I2SCFGR_I2SMOD',
    'SPI_I2SPR_I2SDIV_Pos', 'SPI_I2SPR_I2SDIV_Msk', 'SPI_I2SPR_I2SDIV',
    'SPI_I2SPR_ODD_Pos', 'SPI_I2SPR_ODD_Msk', 'SPI_I2SPR_ODD', 'SPI_I2SPR_MCKOE_Pos',
    'SPI_I2SPR_MCKOE_Msk', 'SPI_I2SPR_MCKOE', 'SYSCFG_CFGR1_MEM_MODE_Pos',
    'SYSCFG_CFGR1_MEM_MODE_Msk', 'SYSCFG_CFGR1_MEM_MODE', 'SYSCFG_CFGR1_MEM_MODE_0',
    'SYSCFG_CFGR1_MEM_MODE_1', 'SYSCFG_CFGR1_BOOT_MODE_Pos',
    'SYSCFG_CFGR1_BOOT_MODE_Msk', 'SYSCFG_CFGR1_BOOT_MODE', 'SYSCFG_CFGR1_BOOT_MODE_0',
    'SYSCFG_CFGR1_BOOT_MODE_1', 'SYSCFG_CFGR2_FWDISEN_Pos', 'SYSCFG_CFGR2_FWDISEN_Msk',
    'SYSCFG_CFGR2_FWDISEN', 'SYSCFG_CFGR2_CAPA_Pos', 'SYSCFG_CFGR2_CAPA_Msk',
    'SYSCFG_CFGR2_CAPA', 'SYSCFG_CFGR2_CAPA_0', 'SYSCFG_CFGR2_CAPA_1',
    'SYSCFG_CFGR2_CAPA_2', 'SYSCFG_CFGR2_I2C_PB6_FMP_Pos',
    'SYSCFG_CFGR2_I2C_PB6_FMP_Msk', 'SYSCFG_CFGR2_I2C_PB6_FMP',
    'SYSCFG_CFGR2_I2C_PB7_FMP_Pos', 'SYSCFG_CFGR2_I2C_PB7_FMP_Msk',
    'SYSCFG_CFGR2_I2C_PB7_FMP', 'SYSCFG_CFGR2_I2C_PB8_FMP_Pos',
    'SYSCFG_CFGR2_I2C_PB8_FMP_Msk', 'SYSCFG_CFGR2_I2C_PB8_FMP',
    'SYSCFG_CFGR2_I2C_PB9_FMP_Pos', 'SYSCFG_CFGR2_I2C_PB9_FMP_Msk',
    'SYSCFG_CFGR2_I2C_PB9_FMP', 'SYSCFG_CFGR2_I2C1_FMP_Pos',
    'SYSCFG_CFGR2_I2C1_FMP_Msk', 'SYSCFG_CFGR2_I2C1_FMP', 'SYSCFG_CFGR2_I2C2_FMP_Pos',
    'SYSCFG_CFGR2_I2C2_FMP_Msk', 'SYSCFG_CFGR2_I2C2_FMP', 'SYSCFG_EXTICR1_EXTI0_Pos',
    'SYSCFG_EXTICR1_EXTI0_Msk', 'SYSCFG_EXTICR1_EXTI0', 'SYSCFG_EXTICR1_EXTI1_Pos',
    'SYSCFG_EXTICR1_EXTI1_Msk', 'SYSCFG_EXTICR1_EXTI1', 'SYSCFG_EXTICR1_EXTI2_Pos',
    'SYSCFG_EXTICR1_EXTI2_Msk', 'SYSCFG_EXTICR1_EXTI2', 'SYSCFG_EXTICR1_EXTI3_Pos',
    'SYSCFG_EXTICR1_EXTI3_Msk', 'SYSCFG_EXTICR1_EXTI3', 'SYSCFG_EXTICR1_EXTI0_PA',
    'SYSCFG_EXTICR1_EXTI0_PB', 'SYSCFG_EXTICR1_EXTI0_PC', 'SYSCFG_EXTICR1_EXTI0_PH',
    'SYSCFG_EXTICR1_EXTI1_PA', 'SYSCFG_EXTICR1_EXTI1_PB', 'SYSCFG_EXTICR1_EXTI1_PC',
    'SYSCFG_EXTICR1_EXTI1_PH', 'SYSCFG_EXTICR1_EXTI2_PA', 'SYSCFG_EXTICR1_EXTI2_PB',
    'SYSCFG_EXTICR1_EXTI2_PC', 'SYSCFG_EXTICR1_EXTI2_PD', 'SYSCFG_EXTICR1_EXTI3_PA',
    'SYSCFG_EXTICR1_EXTI3_PB', 'SYSCFG_EXTICR1_EXTI3_PC', 'SYSCFG_EXTICR2_EXTI4_Pos',
    'SYSCFG_EXTICR2_EXTI4_Msk', 'SYSCFG_EXTICR2_EXTI4', 'SYSCFG_EXTICR2_EXTI5_Pos',
    'SYSCFG_EXTICR2_EXTI5_Msk', 'SYSCFG_EXTICR2_EXTI5', 'SYSCFG_EXTICR2_EXTI6_Pos',
    'SYSCFG_EXTICR2_EXTI6_Msk', 'SYSCFG_EXTICR2_EXTI6', 'SYSCFG_EXTICR2_EXTI7_Pos',
    'SYSCFG_EXTICR2_EXTI7_Msk', 'SYSCFG_EXTICR2_EXTI7', 'SYSCFG_EXTICR2_EXTI4_PA',
    'SYSCFG_EXTICR2_EXTI4_PB', 'SYSCFG_EXTICR2_EXTI4_PC', 'SYSCFG_EXTICR2_EXTI5_PA',
    'SYSCFG_EXTICR2_EXTI5_PB', 'SYSCFG_EXTICR2_EXTI5_PC', 'SYSCFG_EXTICR2_EXTI6_PA',
    'SYSCFG_EXTICR2_EXTI6_PB', 'SYSCFG_EXTICR2_EXTI6_PC', 'SYSCFG_EXTICR2_EXTI7_PA',
    'SYSCFG_EXTICR2_EXTI7_PB', 'SYSCFG_EXTICR2_EXTI7_PC', 'SYSCFG_EXTICR3_EXTI8_Pos',
    'SYSCFG_EXTICR3_EXTI8_Msk', 'SYSCFG_EXTICR3_EXTI8', 'SYSCFG_EXTICR3_EXTI9_Pos',
    'SYSCFG_EXTICR3_EXTI9_Msk', 'SYSCFG_EXTICR3_EXTI9', 'SYSCFG_EXTICR3_EXTI10_Pos',
    'SYSCFG_EXTICR3_EXTI10_Msk', 'SYSCFG_EXTICR3_EXTI10', 'SYSCFG_EXTICR3_EXTI11_Pos',
    'SYSCFG_EXTICR3_EXTI11_Msk', 'SYSCFG_EXTICR3_EXTI11', 'SYSCFG_EXTICR3_EXTI8_PA',
    'SYSCFG_EXTICR3_EXTI8_PB', 'SYSCFG_EXTICR3_EXTI8_PC', 'SYSCFG_EXTICR3_EXTI9_PA',
    'SYSCFG_EXTICR3_EXTI9_PB', 'SYSCFG_EXTICR3_EXTI9_PC', 'SYSCFG_EXTICR3_EXTI10_PA',
    'SYSCFG_EXTICR3_EXTI10_PB', 'SYSCFG_EXTICR3_EXTI10_PC', 'SYSCFG_EXTICR3_EXTI11_PA',
    'SYSCFG_EXTICR3_EXTI11_PB', 'SYSCFG_EXTICR3_EXTI11_PC', 'SYSCFG_EXTICR4_EXTI12_Pos',
    'SYSCFG_EXTICR4_EXTI12_Msk', 'SYSCFG_EXTICR4_EXTI12', 'SYSCFG_EXTICR4_EXTI13_Pos',
    'SYSCFG_EXTICR4_EXTI13_Msk', 'SYSCFG_EXTICR4_EXTI13', 'SYSCFG_EXTICR4_EXTI14_Pos',
    'SYSCFG_EXTICR4_EXTI14_Msk', 'SYSCFG_EXTICR4_EXTI14', 'SYSCFG_EXTICR4_EXTI15_Pos',
    'SYSCFG_EXTICR4_EXTI15_Msk', 'SYSCFG_EXTICR4_EXTI15', 'SYSCFG_EXTICR4_EXTI12_PA',
    'SYSCFG_EXTICR4_EXTI12_PB', 'SYSCFG_EXTICR4_EXTI12_PC', 'SYSCFG_EXTICR4_EXTI13_PA',
    'SYSCFG_EXTICR4_EXTI13_PB', 'SYSCFG_EXTICR4_EXTI13_PC', 'SYSCFG_EXTICR4_EXTI14_PA',
    'SYSCFG_EXTICR4_EXTI14_PB', 'SYSCFG_EXTICR4_EXTI14_PC', 'SYSCFG_EXTICR4_EXTI15_PA',
    'SYSCFG_EXTICR4_EXTI15_PB', 'SYSCFG_EXTICR4_EXTI15_PC',
    'SYSCFG_CFGR3_EN_VREFINT_Pos', 'SYSCFG_CFGR3_EN_VREFINT_Msk',
    'SYSCFG_CFGR3_EN_VREFINT', 'SYSCFG_CFGR3_VREF_OUT_Pos', 'SYSCFG_CFGR3_VREF_OUT_Msk',
    'SYSCFG_CFGR3_VREF_OUT', 'SYSCFG_CFGR3_VREF_OUT_0', 'SYSCFG_CFGR3_VREF_OUT_1',
    'SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Pos', 'SYSCFG_CFGR3_ENBUF_VREFINT_ADC_Msk',
    'SYSCFG_CFGR3_ENBUF_VREFINT_ADC', 'SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Pos',
    'SYSCFG_CFGR3_ENBUF_SENSOR_ADC_Msk', 'SYSCFG_CFGR3_ENBUF_SENSOR_ADC',
    'SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Pos', 'SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP_Msk',
    'SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP', 'SYSCFG_CFGR3_ENREF_HSI48_Pos',
    'SYSCFG_CFGR3_ENREF_HSI48_Msk', 'SYSCFG_CFGR3_ENREF_HSI48',
    'SYSCFG_CFGR3_VREFINT_RDYF_Pos', 'SYSCFG_CFGR3_VREFINT_RDYF_Msk',
    'SYSCFG_CFGR3_VREFINT_RDYF', 'SYSCFG_CFGR3_REF_LOCK_Pos',
    'SYSCFG_CFGR3_REF_LOCK_Msk', 'SYSCFG_CFGR3_REF_LOCK', 'SYSCFG_CFGR3_EN_BGAP',
    'SYSCFG_CFGR3_ENBUF_BGAP_ADC', 'SYSCFG_CFGR3_ENBUFLP_BGAP_COMP',
    'SYSCFG_CFGR3_ENREF_RC48MHz', 'SYSCFG_CFGR3_REF_RC48MHz_RDYF',
    'SYSCFG_CFGR3_REF_HSI48_RDYF', 'SYSCFG_VREFINT_ADC_RDYF',
    'SYSCFG_CFGR3_SENSOR_ADC_RDYF', 'SYSCFG_CFGR3_VREFINT_ADC_RDYF',
    'SYSCFG_CFGR3_VREFINT_COMP_RDYF', 'TIM_CR1_CEN_Pos', 'TIM_CR1_CEN_Msk',
    'TIM_CR1_CEN', 'TIM_CR1_UDIS_Pos', 'TIM_CR1_UDIS_Msk', 'TIM_CR1_UDIS',
    'TIM_CR1_URS_Pos', 'TIM_CR1_URS_Msk', 'TIM_CR1_URS', 'TIM_CR1_OPM_Pos',
    'TIM_CR1_OPM_Msk', 'TIM_CR1_OPM', 'TIM_CR1_DIR_Pos', 'TIM_CR1_DIR_Msk',
    'TIM_CR1_DIR', 'TIM_CR1_CMS_Pos', 'TIM_CR1_CMS_Msk', 'TIM_CR1_CMS', 'TIM_CR1_CMS_0',
    'TIM_CR1_CMS_1', 'TIM_CR1_ARPE_Pos', 'TIM_CR1_ARPE_Msk', 'TIM_CR1_ARPE',
    'TIM_CR1_CKD_Pos', 'TIM_CR1_CKD_Msk', 'TIM_CR1_CKD', 'TIM_CR1_CKD_0',
    'TIM_CR1_CKD_1', 'TIM_CR2_CCDS_Pos', 'TIM_CR2_CCDS_Msk', 'TIM_CR2_CCDS',
    'TIM_CR2_MMS_Pos', 'TIM_CR2_MMS_Msk', 'TIM_CR2_MMS', 'TIM_CR2_MMS_0',
    'TIM_CR2_MMS_1', 'TIM_CR2_MMS_2', 'TIM_CR2_TI1S_Pos', 'TIM_CR2_TI1S_Msk',
    'TIM_CR2_TI1S', 'TIM_SMCR_SMS_Pos', 'TIM_SMCR_SMS_Msk', 'TIM_SMCR_SMS',
    'TIM_SMCR_SMS_0', 'TIM_SMCR_SMS_1', 'TIM_SMCR_SMS_2', 'TIM_SMCR_TS_Pos',
    'TIM_SMCR_TS_Msk', 'TIM_SMCR_TS', 'TIM_SMCR_TS_0', 'TIM_SMCR_TS_1', 'TIM_SMCR_TS_2',
    'TIM_SMCR_MSM_Pos', 'TIM_SMCR_MSM_Msk', 'TIM_SMCR_MSM', 'TIM_SMCR_ETF_Pos',
    'TIM_SMCR_ETF_Msk', 'TIM_SMCR_ETF', 'TIM_SMCR_ETF_0', 'TIM_SMCR_ETF_1',
    'TIM_SMCR_ETF_2', 'TIM_SMCR_ETF_3', 'TIM_SMCR_ETPS_Pos', 'TIM_SMCR_ETPS_Msk',
    'TIM_SMCR_ETPS', 'TIM_SMCR_ETPS_0', 'TIM_SMCR_ETPS_1', 'TIM_SMCR_ECE_Pos',
    'TIM_SMCR_ECE_Msk', 'TIM_SMCR_ECE', 'TIM_SMCR_ETP_Pos', 'TIM_SMCR_ETP_Msk',
    'TIM_SMCR_ETP', 'TIM_DIER_UIE_Pos', 'TIM_DIER_UIE_Msk', 'TIM_DIER_UIE',
    'TIM_DIER_CC1IE_Pos', 'TIM_DIER_CC1IE_Msk', 'TIM_DIER_CC1IE', 'TIM_DIER_CC2IE_Pos',
    'TIM_DIER_CC2IE_Msk', 'TIM_DIER_CC2IE', 'TIM_DIER_CC3IE_Pos', 'TIM_DIER_CC3IE_Msk',
    'TIM_DIER_CC3IE', 'TIM_DIER_CC4IE_Pos', 'TIM_DIER_CC4IE_Msk', 'TIM_DIER_CC4IE',
    'TIM_DIER_TIE_Pos', 'TIM_DIER_TIE_Msk', 'TIM_DIER_TIE', 'TIM_DIER_UDE_Pos',
    'TIM_DIER_UDE_Msk', 'TIM_DIER_UDE', 'TIM_DIER_CC1DE_Pos', 'TIM_DIER_CC1DE_Msk',
    'TIM_DIER_CC1DE', 'TIM_DIER_CC2DE_Pos', 'TIM_DIER_CC2DE_Msk', 'TIM_DIER_CC2DE',
    'TIM_DIER_CC3DE_Pos', 'TIM_DIER_CC3DE_Msk', 'TIM_DIER_CC3DE', 'TIM_DIER_CC4DE_Pos',
    'TIM_DIER_CC4DE_Msk', 'TIM_DIER_CC4DE', 'TIM_DIER_TDE_Pos', 'TIM_DIER_TDE_Msk',
    'TIM_DIER_TDE', 'TIM_SR_UIF_Pos', 'TIM_SR_UIF_Msk', 'TIM_SR_UIF',
    'TIM_SR_CC1IF_Pos', 'TIM_SR_CC1IF_Msk', 'TIM_SR_CC1IF', 'TIM_SR_CC2IF_Pos',
    'TIM_SR_CC2IF_Msk', 'TIM_SR_CC2IF', 'TIM_SR_CC3IF_Pos', 'TIM_SR_CC3IF_Msk',
    'TIM_SR_CC3IF', 'TIM_SR_CC4IF_Pos', 'TIM_SR_CC4IF_Msk', 'TIM_SR_CC4IF',
    'TIM_SR_TIF_Pos', 'TIM_SR_TIF_Msk', 'TIM_SR_TIF', 'TIM_SR_CC1OF_Pos',
    'TIM_SR_CC1OF_Msk', 'TIM_SR_CC1OF', 'TIM_SR_CC2OF_Pos', 'TIM_SR_CC2OF_Msk',
    'TIM_SR_CC2OF', 'TIM_SR_CC3OF_Pos', 'TIM_SR_CC3OF_Msk', 'TIM_SR_CC3OF',
    'TIM_SR_CC4OF_Pos', 'TIM_SR_CC4OF_Msk', 'TIM_SR_CC4OF', 'TIM_EGR_UG_Pos',
    'TIM_EGR_UG_Msk', 'TIM_EGR_UG', 'TIM_EGR_CC1G_Pos', 'TIM_EGR_CC1G_Msk',
    'TIM_EGR_CC1G', 'TIM_EGR_CC2G_Pos', 'TIM_EGR_CC2G_Msk', 'TIM_EGR_CC2G',
    'TIM_EGR_CC3G_Pos', 'TIM_EGR_CC3G_Msk', 'TIM_EGR_CC3G', 'TIM_EGR_CC4G_Pos',
    'TIM_EGR_CC4G_Msk', 'TIM_EGR_CC4G', 'TIM_EGR_TG_Pos', 'TIM_EGR_TG_Msk',
    'TIM_EGR_TG', 'TIM_CCMR1_CC1S_Pos', 'TIM_CCMR1_CC1S_Msk', 'TIM_CCMR1_CC1S',
    'TIM_CCMR1_CC1S_0', 'TIM_CCMR1_CC1S_1', 'TIM_CCMR1_OC1FE_Pos',
    'TIM_CCMR1_OC1FE_Msk', 'TIM_CCMR1_OC1FE', 'TIM_CCMR1_OC1PE_Pos',
    'TIM_CCMR1_OC1PE_Msk', 'TIM_CCMR1_OC1PE', 'TIM_CCMR1_OC1M_Pos',
    'TIM_CCMR1_OC1M_Msk', 'TIM_CCMR1_OC1M', 'TIM_CCMR1_OC1M_0', 'TIM_CCMR1_OC1M_1',
    'TIM_CCMR1_OC1M_2', 'TIM_CCMR1_OC1CE_Pos', 'TIM_CCMR1_OC1CE_Msk', 'TIM_CCMR1_OC1CE',
    'TIM_CCMR1_CC2S_Pos', 'TIM_CCMR1_CC2S_Msk', 'TIM_CCMR1_CC2S', 'TIM_CCMR1_CC2S_0',
    'TIM_CCMR1_CC2S_1', 'TIM_CCMR1_OC2FE_Pos', 'TIM_CCMR1_OC2FE_Msk', 'TIM_CCMR1_OC2FE',
    'TIM_CCMR1_OC2PE_Pos', 'TIM_CCMR1_OC2PE_Msk', 'TIM_CCMR1_OC2PE',
    'TIM_CCMR1_OC2M_Pos', 'TIM_CCMR1_OC2M_Msk', 'TIM_CCMR1_OC2M', 'TIM_CCMR1_OC2M_0',
    'TIM_CCMR1_OC2M_1', 'TIM_CCMR1_OC2M_2', 'TIM_CCMR1_OC2CE_Pos',
    'TIM_CCMR1_OC2CE_Msk', 'TIM_CCMR1_OC2CE', 'TIM_CCMR1_IC1PSC_Pos',
    'TIM_CCMR1_IC1PSC_Msk', 'TIM_CCMR1_IC1PSC', 'TIM_CCMR1_IC1PSC_0',
    'TIM_CCMR1_IC1PSC_1', 'TIM_CCMR1_IC1F_Pos', 'TIM_CCMR1_IC1F_Msk', 'TIM_CCMR1_IC1F',
    'TIM_CCMR1_IC1F_0', 'TIM_CCMR1_IC1F_1', 'TIM_CCMR1_IC1F_2', 'TIM_CCMR1_IC1F_3',
    'TIM_CCMR1_IC2PSC_Pos', 'TIM_CCMR1_IC2PSC_Msk', 'TIM_CCMR1_IC2PSC',
    'TIM_CCMR1_IC2PSC_0', 'TIM_CCMR1_IC2PSC_1', 'TIM_CCMR1_IC2F_Pos',
    'TIM_CCMR1_IC2F_Msk', 'TIM_CCMR1_IC2F', 'TIM_CCMR1_IC2F_0', 'TIM_CCMR1_IC2F_1',
    'TIM_CCMR1_IC2F_2', 'TIM_CCMR1_IC2F_3', 'TIM_CCMR2_CC3S_Pos', 'TIM_CCMR2_CC3S_Msk',
    'TIM_CCMR2_CC3S', 'TIM_CCMR2_CC3S_0', 'TIM_CCMR2_CC3S_1', 'TIM_CCMR2_OC3FE_Pos',
    'TIM_CCMR2_OC3FE_Msk', 'TIM_CCMR2_OC3FE', 'TIM_CCMR2_OC3PE_Pos',
    'TIM_CCMR2_OC3PE_Msk', 'TIM_CCMR2_OC3PE', 'TIM_CCMR2_OC3M_Pos',
    'TIM_CCMR2_OC3M_Msk', 'TIM_CCMR2_OC3M', 'TIM_CCMR2_OC3M_0', 'TIM_CCMR2_OC3M_1',
    'TIM_CCMR2_OC3M_2', 'TIM_CCMR2_OC3CE_Pos', 'TIM_CCMR2_OC3CE_Msk', 'TIM_CCMR2_OC3CE',
    'TIM_CCMR2_CC4S_Pos', 'TIM_CCMR2_CC4S_Msk', 'TIM_CCMR2_CC4S', 'TIM_CCMR2_CC4S_0',
    'TIM_CCMR2_CC4S_1', 'TIM_CCMR2_OC4FE_Pos', 'TIM_CCMR2_OC4FE_Msk', 'TIM_CCMR2_OC4FE',
    'TIM_CCMR2_OC4PE_Pos', 'TIM_CCMR2_OC4PE_Msk', 'TIM_CCMR2_OC4PE',
    'TIM_CCMR2_OC4M_Pos', 'TIM_CCMR2_OC4M_Msk', 'TIM_CCMR2_OC4M', 'TIM_CCMR2_OC4M_0',
    'TIM_CCMR2_OC4M_1', 'TIM_CCMR2_OC4M_2', 'TIM_CCMR2_OC4CE_Pos',
    'TIM_CCMR2_OC4CE_Msk', 'TIM_CCMR2_OC4CE', 'TIM_CCMR2_IC3PSC_Pos',
    'TIM_CCMR2_IC3PSC_Msk', 'TIM_CCMR2_IC3PSC', 'TIM_CCMR2_IC3PSC_0',
    'TIM_CCMR2_IC3PSC_1', 'TIM_CCMR2_IC3F_Pos', 'TIM_CCMR2_IC3F_Msk', 'TIM_CCMR2_IC3F',
    'TIM_CCMR2_IC3F_0', 'TIM_CCMR2_IC3F_1', 'TIM_CCMR2_IC3F_2', 'TIM_CCMR2_IC3F_3',
    'TIM_CCMR2_IC4PSC_Pos', 'TIM_CCMR2_IC4PSC_Msk', 'TIM_CCMR2_IC4PSC',
    'TIM_CCMR2_IC4PSC_0', 'TIM_CCMR2_IC4PSC_1', 'TIM_CCMR2_IC4F_Pos',
    'TIM_CCMR2_IC4F_Msk', 'TIM_CCMR2_IC4F', 'TIM_CCMR2_IC4F_0', 'TIM_CCMR2_IC4F_1',
    'TIM_CCMR2_IC4F_2', 'TIM_CCMR2_IC4F_3', 'TIM_CCER_CC1E_Pos', 'TIM_CCER_CC1E_Msk',
    'TIM_CCER_CC1E', 'TIM_CCER_CC1P_Pos', 'TIM_CCER_CC1P_Msk', 'TIM_CCER_CC1P',
    'TIM_CCER_CC1NP_Pos', 'TIM_CCER_CC1NP_Msk', 'TIM_CCER_CC1NP', 'TIM_CCER_CC2E_Pos',
    'TIM_CCER_CC2E_Msk', 'TIM_CCER_CC2E', 'TIM_CCER_CC2P_Pos', 'TIM_CCER_CC2P_Msk',
    'TIM_CCER_CC2P', 'TIM_CCER_CC2NP_Pos', 'TIM_CCER_CC2NP_Msk', 'TIM_CCER_CC2NP',
    'TIM_CCER_CC3E_Pos', 'TIM_CCER_CC3E_Msk', 'TIM_CCER_CC3E', 'TIM_CCER_CC3P_Pos',
    'TIM_CCER_CC3P_Msk', 'TIM_CCER_CC3P', 'TIM_CCER_CC3NP_Pos', 'TIM_CCER_CC3NP_Msk',
    'TIM_CCER_CC3NP', 'TIM_CCER_CC4E_Pos', 'TIM_CCER_CC4E_Msk', 'TIM_CCER_CC4E',
    'TIM_CCER_CC4P_Pos', 'TIM_CCER_CC4P_Msk', 'TIM_CCER_CC4P', 'TIM_CCER_CC4NP_Pos',
    'TIM_CCER_CC4NP_Msk', 'TIM_CCER_CC4NP', 'TIM_CNT_CNT_Pos', 'TIM_CNT_CNT_Msk',
    'TIM_CNT_CNT', 'TIM_PSC_PSC_Pos', 'TIM_PSC_PSC_Msk', 'TIM_PSC_PSC',
    'TIM_ARR_ARR_Pos', 'TIM_ARR_ARR_Msk', 'TIM_ARR_ARR', 'TIM_CCR1_CCR1_Pos',
    'TIM_CCR1_CCR1_Msk', 'TIM_CCR1_CCR1', 'TIM_CCR2_CCR2_Pos', 'TIM_CCR2_CCR2_Msk',
    'TIM_CCR2_CCR2', 'TIM_CCR3_CCR3_Pos', 'TIM_CCR3_CCR3_Msk', 'TIM_CCR3_CCR3',
    'TIM_CCR4_CCR4_Pos', 'TIM_CCR4_CCR4_Msk', 'TIM_CCR4_CCR4', 'TIM_DCR_DBA_Pos',
    'TIM_DCR_DBA_Msk', 'TIM_DCR_DBA', 'TIM_DCR_DBA_0', 'TIM_DCR_DBA_1', 'TIM_DCR_DBA_2',
    'TIM_DCR_DBA_3', 'TIM_DCR_DBA_4', 'TIM_DCR_DBL_Pos', 'TIM_DCR_DBL_Msk',
    'TIM_DCR_DBL', 'TIM_DCR_DBL_0', 'TIM_DCR_DBL_1', 'TIM_DCR_DBL_2', 'TIM_DCR_DBL_3',
    'TIM_DCR_DBL_4', 'TIM_DMAR_DMAB_Pos', 'TIM_DMAR_DMAB_Msk', 'TIM_DMAR_DMAB',
    'TIM2_OR_ETR_RMP_Pos', 'TIM2_OR_ETR_RMP_Msk', 'TIM2_OR_ETR_RMP',
    'TIM2_OR_ETR_RMP_0', 'TIM2_OR_ETR_RMP_1', 'TIM2_OR_ETR_RMP_2',
    'TIM2_OR_TI4_RMP_Pos', 'TIM2_OR_TI4_RMP_Msk', 'TIM2_OR_TI4_RMP',
    'TIM2_OR_TI4_RMP_0', 'TIM2_OR_TI4_RMP_1', 'TIM21_OR_ETR_RMP_Pos',
    'TIM21_OR_ETR_RMP_Msk', 'TIM21_OR_ETR_RMP', 'TIM21_OR_ETR_RMP_0',
    'TIM21_OR_ETR_RMP_1', 'TIM21_OR_TI1_RMP_Pos', 'TIM21_OR_TI1_RMP_Msk',
    'TIM21_OR_TI1_RMP', 'TIM21_OR_TI1_RMP_0', 'TIM21_OR_TI1_RMP_1',
    'TIM21_OR_TI1_RMP_2', 'TIM21_OR_TI2_RMP_Pos', 'TIM21_OR_TI2_RMP_Msk',
    'TIM21_OR_TI2_RMP', 'TIM22_OR_ETR_RMP_Pos', 'TIM22_OR_ETR_RMP_Msk',
    'TIM22_OR_ETR_RMP', 'TIM22_OR_ETR_RMP_0', 'TIM22_OR_ETR_RMP_1',
    'TIM22_OR_TI1_RMP_Pos', 'TIM22_OR_TI1_RMP_Msk', 'TIM22_OR_TI1_RMP',
    'TIM22_OR_TI1_RMP_0', 'TIM22_OR_TI1_RMP_1', 'TSC_CR_TSCE_Pos', 'TSC_CR_TSCE_Msk',
    'TSC_CR_TSCE', 'TSC_CR_START_Pos', 'TSC_CR_START_Msk', 'TSC_CR_START',
    'TSC_CR_AM_Pos', 'TSC_CR_AM_Msk', 'TSC_CR_AM', 'TSC_CR_SYNCPOL_Pos',
    'TSC_CR_SYNCPOL_Msk', 'TSC_CR_SYNCPOL', 'TSC_CR_IODEF_Pos', 'TSC_CR_IODEF_Msk',
    'TSC_CR_IODEF', 'TSC_CR_MCV_Pos', 'TSC_CR_MCV_Msk', 'TSC_CR_MCV', 'TSC_CR_MCV_0',
    'TSC_CR_MCV_1', 'TSC_CR_MCV_2', 'TSC_CR_PGPSC_Pos', 'TSC_CR_PGPSC_Msk',
    'TSC_CR_PGPSC', 'TSC_CR_PGPSC_0', 'TSC_CR_PGPSC_1', 'TSC_CR_PGPSC_2',
    'TSC_CR_SSPSC_Pos', 'TSC_CR_SSPSC_Msk', 'TSC_CR_SSPSC', 'TSC_CR_SSE_Pos',
    'TSC_CR_SSE_Msk', 'TSC_CR_SSE', 'TSC_CR_SSD_Pos', 'TSC_CR_SSD_Msk', 'TSC_CR_SSD',
    'TSC_CR_SSD_0', 'TSC_CR_SSD_1', 'TSC_CR_SSD_2', 'TSC_CR_SSD_3', 'TSC_CR_SSD_4',
    'TSC_CR_SSD_5', 'TSC_CR_SSD_6', 'TSC_CR_CTPL_Pos', 'TSC_CR_CTPL_Msk', 'TSC_CR_CTPL',
    'TSC_CR_CTPL_0', 'TSC_CR_CTPL_1', 'TSC_CR_CTPL_2', 'TSC_CR_CTPL_3',
    'TSC_CR_CTPH_Pos', 'TSC_CR_CTPH_Msk', 'TSC_CR_CTPH', 'TSC_CR_CTPH_0',
    'TSC_CR_CTPH_1', 'TSC_CR_CTPH_2', 'TSC_CR_CTPH_3', 'TSC_IER_EOAIE_Pos',
    'TSC_IER_EOAIE_Msk', 'TSC_IER_EOAIE', 'TSC_IER_MCEIE_Pos', 'TSC_IER_MCEIE_Msk',
    'TSC_IER_MCEIE', 'TSC_ICR_EOAIC_Pos', 'TSC_ICR_EOAIC_Msk', 'TSC_ICR_EOAIC',
    'TSC_ICR_MCEIC_Pos', 'TSC_ICR_MCEIC_Msk', 'TSC_ICR_MCEIC', 'TSC_ISR_EOAF_Pos',
    'TSC_ISR_EOAF_Msk', 'TSC_ISR_EOAF', 'TSC_ISR_MCEF_Pos', 'TSC_ISR_MCEF_Msk',
    'TSC_ISR_MCEF', 'TSC_IOHCR_G1_IO1_Pos', 'TSC_IOHCR_G1_IO1_Msk', 'TSC_IOHCR_G1_IO1',
    'TSC_IOHCR_G1_IO2_Pos', 'TSC_IOHCR_G1_IO2_Msk', 'TSC_IOHCR_G1_IO2',
    'TSC_IOHCR_G1_IO3_Pos', 'TSC_IOHCR_G1_IO3_Msk', 'TSC_IOHCR_G1_IO3',
    'TSC_IOHCR_G1_IO4_Pos', 'TSC_IOHCR_G1_IO4_Msk', 'TSC_IOHCR_G1_IO4',
    'TSC_IOHCR_G2_IO1_Pos', 'TSC_IOHCR_G2_IO1_Msk', 'TSC_IOHCR_G2_IO1',
    'TSC_IOHCR_G2_IO2_Pos', 'TSC_IOHCR_G2_IO2_Msk', 'TSC_IOHCR_G2_IO2',
    'TSC_IOHCR_G2_IO3_Pos', 'TSC_IOHCR_G2_IO3_Msk', 'TSC_IOHCR_G2_IO3',
    'TSC_IOHCR_G2_IO4_Pos', 'TSC_IOHCR_G2_IO4_Msk', 'TSC_IOHCR_G2_IO4',
    'TSC_IOHCR_G3_IO1_Pos', 'TSC_IOHCR_G3_IO1_Msk', 'TSC_IOHCR_G3_IO1',
    'TSC_IOHCR_G3_IO2_Pos', 'TSC_IOHCR_G3_IO2_Msk', 'TSC_IOHCR_G3_IO2',
    'TSC_IOHCR_G3_IO3_Pos', 'TSC_IOHCR_G3_IO3_Msk', 'TSC_IOHCR_G3_IO3',
    'TSC_IOHCR_G3_IO4_Pos', 'TSC_IOHCR_G3_IO4_Msk', 'TSC_IOHCR_G3_IO4',
    'TSC_IOHCR_G4_IO1_Pos', 'TSC_IOHCR_G4_IO1_Msk', 'TSC_IOHCR_G4_IO1',
    'TSC_IOHCR_G4_IO2_Pos', 'TSC_IOHCR_G4_IO2_Msk', 'TSC_IOHCR_G4_IO2',
    'TSC_IOHCR_G4_IO3_Pos', 'TSC_IOHCR_G4_IO3_Msk', 'TSC_IOHCR_G4_IO3',
    'TSC_IOHCR_G4_IO4_Pos', 'TSC_IOHCR_G4_IO4_Msk', 'TSC_IOHCR_G4_IO4',
    'TSC_IOHCR_G5_IO1_Pos', 'TSC_IOHCR_G5_IO1_Msk', 'TSC_IOHCR_G5_IO1',
    'TSC_IOHCR_G5_IO2_Pos', 'TSC_IOHCR_G5_IO2_Msk', 'TSC_IOHCR_G5_IO2',
    'TSC_IOHCR_G5_IO3_Pos', 'TSC_IOHCR_G5_IO3_Msk', 'TSC_IOHCR_G5_IO3',
    'TSC_IOHCR_G5_IO4_Pos', 'TSC_IOHCR_G5_IO4_Msk', 'TSC_IOHCR_G5_IO4',
    'TSC_IOHCR_G6_IO1_Pos', 'TSC_IOHCR_G6_IO1_Msk', 'TSC_IOHCR_G6_IO1',
    'TSC_IOHCR_G6_IO2_Pos', 'TSC_IOHCR_G6_IO2_Msk', 'TSC_IOHCR_G6_IO2',
    'TSC_IOHCR_G6_IO3_Pos', 'TSC_IOHCR_G6_IO3_Msk', 'TSC_IOHCR_G6_IO3',
    'TSC_IOHCR_G6_IO4_Pos', 'TSC_IOHCR_G6_IO4_Msk', 'TSC_IOHCR_G6_IO4',
    'TSC_IOHCR_G7_IO1_Pos', 'TSC_IOHCR_G7_IO1_Msk', 'TSC_IOHCR_G7_IO1',
    'TSC_IOHCR_G7_IO2_Pos', 'TSC_IOHCR_G7_IO2_Msk', 'TSC_IOHCR_G7_IO2',
    'TSC_IOHCR_G7_IO3_Pos', 'TSC_IOHCR_G7_IO3_Msk', 'TSC_IOHCR_G7_IO3',
    'TSC_IOHCR_G7_IO4_Pos', 'TSC_IOHCR_G7_IO4_Msk', 'TSC_IOHCR_G7_IO4',
    'TSC_IOHCR_G8_IO1_Pos', 'TSC_IOHCR_G8_IO1_Msk', 'TSC_IOHCR_G8_IO1',
    'TSC_IOHCR_G8_IO2_Pos', 'TSC_IOHCR_G8_IO2_Msk', 'TSC_IOHCR_G8_IO2',
    'TSC_IOHCR_G8_IO3_Pos', 'TSC_IOHCR_G8_IO3_Msk', 'TSC_IOHCR_G8_IO3',
    'TSC_IOHCR_G8_IO4_Pos', 'TSC_IOHCR_G8_IO4_Msk', 'TSC_IOHCR_G8_IO4',
    'TSC_IOASCR_G1_IO1_Pos', 'TSC_IOASCR_G1_IO1_Msk', 'TSC_IOASCR_G1_IO1',
    'TSC_IOASCR_G1_IO2_Pos', 'TSC_IOASCR_G1_IO2_Msk', 'TSC_IOASCR_G1_IO2',
    'TSC_IOASCR_G1_IO3_Pos', 'TSC_IOASCR_G1_IO3_Msk', 'TSC_IOASCR_G1_IO3',
    'TSC_IOASCR_G1_IO4_Pos', 'TSC_IOASCR_G1_IO4_Msk', 'TSC_IOASCR_G1_IO4',
    'TSC_IOASCR_G2_IO1_Pos', 'TSC_IOASCR_G2_IO1_Msk', 'TSC_IOASCR_G2_IO1',
    'TSC_IOASCR_G2_IO2_Pos', 'TSC_IOASCR_G2_IO2_Msk', 'TSC_IOASCR_G2_IO2',
    'TSC_IOASCR_G2_IO3_Pos', 'TSC_IOASCR_G2_IO3_Msk', 'TSC_IOASCR_G2_IO3',
    'TSC_IOASCR_G2_IO4_Pos', 'TSC_IOASCR_G2_IO4_Msk', 'TSC_IOASCR_G2_IO4',
    'TSC_IOASCR_G3_IO1_Pos', 'TSC_IOASCR_G3_IO1_Msk', 'TSC_IOASCR_G3_IO1',
    'TSC_IOASCR_G3_IO2_Pos', 'TSC_IOASCR_G3_IO2_Msk', 'TSC_IOASCR_G3_IO2',
    'TSC_IOASCR_G3_IO3_Pos', 'TSC_IOASCR_G3_IO3_Msk', 'TSC_IOASCR_G3_IO3',
    'TSC_IOASCR_G3_IO4_Pos', 'TSC_IOASCR_G3_IO4_Msk', 'TSC_IOASCR_G3_IO4',
    'TSC_IOASCR_G4_IO1_Pos', 'TSC_IOASCR_G4_IO1_Msk', 'TSC_IOASCR_G4_IO1',
    'TSC_IOASCR_G4_IO2_Pos', 'TSC_IOASCR_G4_IO2_Msk', 'TSC_IOASCR_G4_IO2',
    'TSC_IOASCR_G4_IO3_Pos', 'TSC_IOASCR_G4_IO3_Msk', 'TSC_IOASCR_G4_IO3',
    'TSC_IOASCR_G4_IO4_Pos', 'TSC_IOASCR_G4_IO4_Msk', 'TSC_IOASCR_G4_IO4',
    'TSC_IOASCR_G5_IO1_Pos', 'TSC_IOASCR_G5_IO1_Msk', 'TSC_IOASCR_G5_IO1',
    'TSC_IOASCR_G5_IO2_Pos', 'TSC_IOASCR_G5_IO2_Msk', 'TSC_IOASCR_G5_IO2',
    'TSC_IOASCR_G5_IO3_Pos', 'TSC_IOASCR_G5_IO3_Msk', 'TSC_IOASCR_G5_IO3',
    'TSC_IOASCR_G5_IO4_Pos', 'TSC_IOASCR_G5_IO4_Msk', 'TSC_IOASCR_G5_IO4',
    'TSC_IOASCR_G6_IO1_Pos', 'TSC_IOASCR_G6_IO1_Msk', 'TSC_IOASCR_G6_IO1',
    'TSC_IOASCR_G6_IO2_Pos', 'TSC_IOASCR_G6_IO2_Msk', 'TSC_IOASCR_G6_IO2',
    'TSC_IOASCR_G6_IO3_Pos', 'TSC_IOASCR_G6_IO3_Msk', 'TSC_IOASCR_G6_IO3',
    'TSC_IOASCR_G6_IO4_Pos', 'TSC_IOASCR_G6_IO4_Msk', 'TSC_IOASCR_G6_IO4',
    'TSC_IOASCR_G7_IO1_Pos', 'TSC_IOASCR_G7_IO1_Msk', 'TSC_IOASCR_G7_IO1',
    'TSC_IOASCR_G7_IO2_Pos', 'TSC_IOASCR_G7_IO2_Msk', 'TSC_IOASCR_G7_IO2',
    'TSC_IOASCR_G7_IO3_Pos', 'TSC_IOASCR_G7_IO3_Msk', 'TSC_IOASCR_G7_IO3',
    'TSC_IOASCR_G7_IO4_Pos', 'TSC_IOASCR_G7_IO4_Msk', 'TSC_IOASCR_G7_IO4',
    'TSC_IOASCR_G8_IO1_Pos', 'TSC_IOASCR_G8_IO1_Msk', 'TSC_IOASCR_G8_IO1',
    'TSC_IOASCR_G8_IO2_Pos', 'TSC_IOASCR_G8_IO2_Msk', 'TSC_IOASCR_G8_IO2',
    'TSC_IOASCR_G8_IO3_Pos', 'TSC_IOASCR_G8_IO3_Msk', 'TSC_IOASCR_G8_IO3',
    'TSC_IOASCR_G8_IO4_Pos', 'TSC_IOASCR_G8_IO4_Msk', 'TSC_IOASCR_G8_IO4',
    'TSC_IOSCR_G1_IO1_Pos', 'TSC_IOSCR_G1_IO1_Msk', 'TSC_IOSCR_G1_IO1',
    'TSC_IOSCR_G1_IO2_Pos', 'TSC_IOSCR_G1_IO2_Msk', 'TSC_IOSCR_G1_IO2',
    'TSC_IOSCR_G1_IO3_Pos', 'TSC_IOSCR_G1_IO3_Msk', 'TSC_IOSCR_G1_IO3',
    'TSC_IOSCR_G1_IO4_Pos', 'TSC_IOSCR_G1_IO4_Msk', 'TSC_IOSCR_G1_IO4',
    'TSC_IOSCR_G2_IO1_Pos', 'TSC_IOSCR_G2_IO1_Msk', 'TSC_IOSCR_G2_IO1',
    'TSC_IOSCR_G2_IO2_Pos', 'TSC_IOSCR_G2_IO2_Msk', 'TSC_IOSCR_G2_IO2',
    'TSC_IOSCR_G2_IO3_Pos', 'TSC_IOSCR_G2_IO3_Msk', 'TSC_IOSCR_G2_IO3',
    'TSC_IOSCR_G2_IO4_Pos', 'TSC_IOSCR_G2_IO4_Msk', 'TSC_IOSCR_G2_IO4',
    'TSC_IOSCR_G3_IO1_Pos', 'TSC_IOSCR_G3_IO1_Msk', 'TSC_IOSCR_G3_IO1',
    'TSC_IOSCR_G3_IO2_Pos', 'TSC_IOSCR_G3_IO2_Msk', 'TSC_IOSCR_G3_IO2',
    'TSC_IOSCR_G3_IO3_Pos', 'TSC_IOSCR_G3_IO3_Msk', 'TSC_IOSCR_G3_IO3',
    'TSC_IOSCR_G3_IO4_Pos', 'TSC_IOSCR_G3_IO4_Msk', 'TSC_IOSCR_G3_IO4',
    'TSC_IOSCR_G4_IO1_Pos', 'TSC_IOSCR_G4_IO1_Msk', 'TSC_IOSCR_G4_IO1',
    'TSC_IOSCR_G4_IO2_Pos', 'TSC_IOSCR_G4_IO2_Msk', 'TSC_IOSCR_G4_IO2',
    'TSC_IOSCR_G4_IO3_Pos', 'TSC_IOSCR_G4_IO3_Msk', 'TSC_IOSCR_G4_IO3',
    'TSC_IOSCR_G4_IO4_Pos', 'TSC_IOSCR_G4_IO4_Msk', 'TSC_IOSCR_G4_IO4',
    'TSC_IOSCR_G5_IO1_Pos', 'TSC_IOSCR_G5_IO1_Msk', 'TSC_IOSCR_G5_IO1',
    'TSC_IOSCR_G5_IO2_Pos', 'TSC_IOSCR_G5_IO2_Msk', 'TSC_IOSCR_G5_IO2',
    'TSC_IOSCR_G5_IO3_Pos', 'TSC_IOSCR_G5_IO3_Msk', 'TSC_IOSCR_G5_IO3',
    'TSC_IOSCR_G5_IO4_Pos', 'TSC_IOSCR_G5_IO4_Msk', 'TSC_IOSCR_G5_IO4',
    'TSC_IOSCR_G6_IO1_Pos', 'TSC_IOSCR_G6_IO1_Msk', 'TSC_IOSCR_G6_IO1',
    'TSC_IOSCR_G6_IO2_Pos', 'TSC_IOSCR_G6_IO2_Msk', 'TSC_IOSCR_G6_IO2',
    'TSC_IOSCR_G6_IO3_Pos', 'TSC_IOSCR_G6_IO3_Msk', 'TSC_IOSCR_G6_IO3',
    'TSC_IOSCR_G6_IO4_Pos', 'TSC_IOSCR_G6_IO4_Msk', 'TSC_IOSCR_G6_IO4',
    'TSC_IOSCR_G7_IO1_Pos', 'TSC_IOSCR_G7_IO1_Msk', 'TSC_IOSCR_G7_IO1',
    'TSC_IOSCR_G7_IO2_Pos', 'TSC_IOSCR_G7_IO2_Msk', 'TSC_IOSCR_G7_IO2',
    'TSC_IOSCR_G7_IO3_Pos', 'TSC_IOSCR_G7_IO3_Msk', 'TSC_IOSCR_G7_IO3',
    'TSC_IOSCR_G7_IO4_Pos', 'TSC_IOSCR_G7_IO4_Msk', 'TSC_IOSCR_G7_IO4',
    'TSC_IOSCR_G8_IO1_Pos', 'TSC_IOSCR_G8_IO1_Msk', 'TSC_IOSCR_G8_IO1',
    'TSC_IOSCR_G8_IO2_Pos', 'TSC_IOSCR_G8_IO2_Msk', 'TSC_IOSCR_G8_IO2',
    'TSC_IOSCR_G8_IO3_Pos', 'TSC_IOSCR_G8_IO3_Msk', 'TSC_IOSCR_G8_IO3',
    'TSC_IOSCR_G8_IO4_Pos', 'TSC_IOSCR_G8_IO4_Msk', 'TSC_IOSCR_G8_IO4',
    'TSC_IOCCR_G1_IO1_Pos', 'TSC_IOCCR_G1_IO1_Msk', 'TSC_IOCCR_G1_IO1',
    'TSC_IOCCR_G1_IO2_Pos', 'TSC_IOCCR_G1_IO2_Msk', 'TSC_IOCCR_G1_IO2',
    'TSC_IOCCR_G1_IO3_Pos', 'TSC_IOCCR_G1_IO3_Msk', 'TSC_IOCCR_G1_IO3',
    'TSC_IOCCR_G1_IO4_Pos', 'TSC_IOCCR_G1_IO4_Msk', 'TSC_IOCCR_G1_IO4',
    'TSC_IOCCR_G2_IO1_Pos', 'TSC_IOCCR_G2_IO1_Msk', 'TSC_IOCCR_G2_IO1',
    'TSC_IOCCR_G2_IO2_Pos', 'TSC_IOCCR_G2_IO2_Msk', 'TSC_IOCCR_G2_IO2',
    'TSC_IOCCR_G2_IO3_Pos', 'TSC_IOCCR_G2_IO3_Msk', 'TSC_IOCCR_G2_IO3',
    'TSC_IOCCR_G2_IO4_Pos', 'TSC_IOCCR_G2_IO4_Msk', 'TSC_IOCCR_G2_IO4',
    'TSC_IOCCR_G3_IO1_Pos', 'TSC_IOCCR_G3_IO1_Msk', 'TSC_IOCCR_G3_IO1',
    'TSC_IOCCR_G3_IO2_Pos', 'TSC_IOCCR_G3_IO2_Msk', 'TSC_IOCCR_G3_IO2',
    'TSC_IOCCR_G3_IO3_Pos', 'TSC_IOCCR_G3_IO3_Msk', 'TSC_IOCCR_G3_IO3',
    'TSC_IOCCR_G3_IO4_Pos', 'TSC_IOCCR_G3_IO4_Msk', 'TSC_IOCCR_G3_IO4',
    'TSC_IOCCR_G4_IO1_Pos', 'TSC_IOCCR_G4_IO1_Msk', 'TSC_IOCCR_G4_IO1',
    'TSC_IOCCR_G4_IO2_Pos', 'TSC_IOCCR_G4_IO2_Msk', 'TSC_IOCCR_G4_IO2',
    'TSC_IOCCR_G4_IO3_Pos', 'TSC_IOCCR_G4_IO3_Msk', 'TSC_IOCCR_G4_IO3',
    'TSC_IOCCR_G4_IO4_Pos', 'TSC_IOCCR_G4_IO4_Msk', 'TSC_IOCCR_G4_IO4',
    'TSC_IOCCR_G5_IO1_Pos', 'TSC_IOCCR_G5_IO1_Msk', 'TSC_IOCCR_G5_IO1',
    'TSC_IOCCR_G5_IO2_Pos', 'TSC_IOCCR_G5_IO2_Msk', 'TSC_IOCCR_G5_IO2',
    'TSC_IOCCR_G5_IO3_Pos', 'TSC_IOCCR_G5_IO3_Msk', 'TSC_IOCCR_G5_IO3',
    'TSC_IOCCR_G5_IO4_Pos', 'TSC_IOCCR_G5_IO4_Msk', 'TSC_IOCCR_G5_IO4',
    'TSC_IOCCR_G6_IO1_Pos', 'TSC_IOCCR_G6_IO1_Msk', 'TSC_IOCCR_G6_IO1',
    'TSC_IOCCR_G6_IO2_Pos', 'TSC_IOCCR_G6_IO2_Msk', 'TSC_IOCCR_G6_IO2',
    'TSC_IOCCR_G6_IO3_Pos', 'TSC_IOCCR_G6_IO3_Msk', 'TSC_IOCCR_G6_IO3',
    'TSC_IOCCR_G6_IO4_Pos', 'TSC_IOCCR_G6_IO4_Msk', 'TSC_IOCCR_G6_IO4',
    'TSC_IOCCR_G7_IO1_Pos', 'TSC_IOCCR_G7_IO1_Msk', 'TSC_IOCCR_G7_IO1',
    'TSC_IOCCR_G7_IO2_Pos', 'TSC_IOCCR_G7_IO2_Msk', 'TSC_IOCCR_G7_IO2',
    'TSC_IOCCR_G7_IO3_Pos', 'TSC_IOCCR_G7_IO3_Msk', 'TSC_IOCCR_G7_IO3',
    'TSC_IOCCR_G7_IO4_Pos', 'TSC_IOCCR_G7_IO4_Msk', 'TSC_IOCCR_G7_IO4',
    'TSC_IOCCR_G8_IO1_Pos', 'TSC_IOCCR_G8_IO1_Msk', 'TSC_IOCCR_G8_IO1',
    'TSC_IOCCR_G8_IO2_Pos', 'TSC_IOCCR_G8_IO2_Msk', 'TSC_IOCCR_G8_IO2',
    'TSC_IOCCR_G8_IO3_Pos', 'TSC_IOCCR_G8_IO3_Msk', 'TSC_IOCCR_G8_IO3',
    'TSC_IOCCR_G8_IO4_Pos', 'TSC_IOCCR_G8_IO4_Msk', 'TSC_IOCCR_G8_IO4',
    'TSC_IOGCSR_G1E_Pos', 'TSC_IOGCSR_G1E_Msk', 'TSC_IOGCSR_G1E', 'TSC_IOGCSR_G2E_Pos',
    'TSC_IOGCSR_G2E_Msk', 'TSC_IOGCSR_G2E', 'TSC_IOGCSR_G3E_Pos', 'TSC_IOGCSR_G3E_Msk',
    'TSC_IOGCSR_G3E', 'TSC_IOGCSR_G4E_Pos', 'TSC_IOGCSR_G4E_Msk', 'TSC_IOGCSR_G4E',
    'TSC_IOGCSR_G5E_Pos', 'TSC_IOGCSR_G5E_Msk', 'TSC_IOGCSR_G5E', 'TSC_IOGCSR_G6E_Pos',
    'TSC_IOGCSR_G6E_Msk', 'TSC_IOGCSR_G6E', 'TSC_IOGCSR_G7E_Pos', 'TSC_IOGCSR_G7E_Msk',
    'TSC_IOGCSR_G7E', 'TSC_IOGCSR_G8E_Pos', 'TSC_IOGCSR_G8E_Msk', 'TSC_IOGCSR_G8E',
    'TSC_IOGCSR_G1S_Pos', 'TSC_IOGCSR_G1S_Msk', 'TSC_IOGCSR_G1S', 'TSC_IOGCSR_G2S_Pos',
    'TSC_IOGCSR_G2S_Msk', 'TSC_IOGCSR_G2S', 'TSC_IOGCSR_G3S_Pos', 'TSC_IOGCSR_G3S_Msk',
    'TSC_IOGCSR_G3S', 'TSC_IOGCSR_G4S_Pos', 'TSC_IOGCSR_G4S_Msk', 'TSC_IOGCSR_G4S',
    'TSC_IOGCSR_G5S_Pos', 'TSC_IOGCSR_G5S_Msk', 'TSC_IOGCSR_G5S', 'TSC_IOGCSR_G6S_Pos',
    'TSC_IOGCSR_G6S_Msk', 'TSC_IOGCSR_G6S', 'TSC_IOGCSR_G7S_Pos', 'TSC_IOGCSR_G7S_Msk',
    'TSC_IOGCSR_G7S', 'TSC_IOGCSR_G8S_Pos', 'TSC_IOGCSR_G8S_Msk', 'TSC_IOGCSR_G8S',
    'TSC_IOGXCR_CNT_Pos', 'TSC_IOGXCR_CNT_Msk', 'TSC_IOGXCR_CNT', 'USART_CR1_UE_Pos',
    'USART_CR1_UE_Msk', 'USART_CR1_UE', 'USART_CR1_UESM_Pos', 'USART_CR1_UESM_Msk',
    'USART_CR1_UESM', 'USART_CR1_RE_Pos', 'USART_CR1_RE_Msk', 'USART_CR1_RE',
    'USART_CR1_TE_Pos', 'USART_CR1_TE_Msk', 'USART_CR1_TE', 'USART_CR1_IDLEIE_Pos',
    'USART_CR1_IDLEIE_Msk', 'USART_CR1_IDLEIE', 'USART_CR1_RXNEIE_Pos',
    'USART_CR1_RXNEIE_Msk', 'USART_CR1_RXNEIE', 'USART_CR1_TCIE_Pos',
    'USART_CR1_TCIE_Msk', 'USART_CR1_TCIE', 'USART_CR1_TXEIE_Pos',
    'USART_CR1_TXEIE_Msk', 'USART_CR1_TXEIE', 'USART_CR1_PEIE_Pos',
    'USART_CR1_PEIE_Msk', 'USART_CR1_PEIE', 'USART_CR1_PS_Pos', 'USART_CR1_PS_Msk',
    'USART_CR1_PS', 'USART_CR1_PCE_Pos', 'USART_CR1_PCE_Msk', 'USART_CR1_PCE',
    'USART_CR1_WAKE_Pos', 'USART_CR1_WAKE_Msk', 'USART_CR1_WAKE', 'USART_CR1_M_Pos',
    'USART_CR1_M_Msk', 'USART_CR1_M', 'USART_CR1_M0_Pos', 'USART_CR1_M0_Msk',
    'USART_CR1_M0', 'USART_CR1_MME_Pos', 'USART_CR1_MME_Msk', 'USART_CR1_MME',
    'USART_CR1_CMIE_Pos', 'USART_CR1_CMIE_Msk', 'USART_CR1_CMIE', 'USART_CR1_OVER8_Pos',
    'USART_CR1_OVER8_Msk', 'USART_CR1_OVER8', 'USART_CR1_DEDT_Pos',
    'USART_CR1_DEDT_Msk', 'USART_CR1_DEDT', 'USART_CR1_DEDT_0', 'USART_CR1_DEDT_1',
    'USART_CR1_DEDT_2', 'USART_CR1_DEDT_3', 'USART_CR1_DEDT_4', 'USART_CR1_DEAT_Pos',
    'USART_CR1_DEAT_Msk', 'USART_CR1_DEAT', 'USART_CR1_DEAT_0', 'USART_CR1_DEAT_1',
    'USART_CR1_DEAT_2', 'USART_CR1_DEAT_3', 'USART_CR1_DEAT_4', 'USART_CR1_RTOIE_Pos',
    'USART_CR1_RTOIE_Msk', 'USART_CR1_RTOIE', 'USART_CR1_EOBIE_Pos',
    'USART_CR1_EOBIE_Msk', 'USART_CR1_EOBIE', 'USART_CR1_M1_Pos', 'USART_CR1_M1_Msk',
    'USART_CR1_M1', 'USART_CR2_ADDM7_Pos', 'USART_CR2_ADDM7_Msk', 'USART_CR2_ADDM7',
    'USART_CR2_LBDL_Pos', 'USART_CR2_LBDL_Msk', 'USART_CR2_LBDL', 'USART_CR2_LBDIE_Pos',
    'USART_CR2_LBDIE_Msk', 'USART_CR2_LBDIE', 'USART_CR2_LBCL_Pos',
    'USART_CR2_LBCL_Msk', 'USART_CR2_LBCL', 'USART_CR2_CPHA_Pos', 'USART_CR2_CPHA_Msk',
    'USART_CR2_CPHA', 'USART_CR2_CPOL_Pos', 'USART_CR2_CPOL_Msk', 'USART_CR2_CPOL',
    'USART_CR2_CLKEN_Pos', 'USART_CR2_CLKEN_Msk', 'USART_CR2_CLKEN',
    'USART_CR2_STOP_Pos', 'USART_CR2_STOP_Msk', 'USART_CR2_STOP', 'USART_CR2_STOP_0',
    'USART_CR2_STOP_1', 'USART_CR2_LINEN_Pos', 'USART_CR2_LINEN_Msk', 'USART_CR2_LINEN',
    'USART_CR2_SWAP_Pos', 'USART_CR2_SWAP_Msk', 'USART_CR2_SWAP', 'USART_CR2_RXINV_Pos',
    'USART_CR2_RXINV_Msk', 'USART_CR2_RXINV', 'USART_CR2_TXINV_Pos',
    'USART_CR2_TXINV_Msk', 'USART_CR2_TXINV', 'USART_CR2_DATAINV_Pos',
    'USART_CR2_DATAINV_Msk', 'USART_CR2_DATAINV', 'USART_CR2_MSBFIRST_Pos',
    'USART_CR2_MSBFIRST_Msk', 'USART_CR2_MSBFIRST', 'USART_CR2_ABREN_Pos',
    'USART_CR2_ABREN_Msk', 'USART_CR2_ABREN', 'USART_CR2_ABRMODE_Pos',
    'USART_CR2_ABRMODE_Msk', 'USART_CR2_ABRMODE', 'USART_CR2_ABRMODE_0',
    'USART_CR2_ABRMODE_1', 'USART_CR2_RTOEN_Pos', 'USART_CR2_RTOEN_Msk',
    'USART_CR2_RTOEN', 'USART_CR2_ADD_Pos', 'USART_CR2_ADD_Msk', 'USART_CR2_ADD',
    'USART_CR3_EIE_Pos', 'USART_CR3_EIE_Msk', 'USART_CR3_EIE', 'USART_CR3_IREN_Pos',
    'USART_CR3_IREN_Msk', 'USART_CR3_IREN', 'USART_CR3_IRLP_Pos', 'USART_CR3_IRLP_Msk',
    'USART_CR3_IRLP', 'USART_CR3_HDSEL_Pos', 'USART_CR3_HDSEL_Msk', 'USART_CR3_HDSEL',
    'USART_CR3_NACK_Pos', 'USART_CR3_NACK_Msk', 'USART_CR3_NACK', 'USART_CR3_SCEN_Pos',
    'USART_CR3_SCEN_Msk', 'USART_CR3_SCEN', 'USART_CR3_DMAR_Pos', 'USART_CR3_DMAR_Msk',
    'USART_CR3_DMAR', 'USART_CR3_DMAT_Pos', 'USART_CR3_DMAT_Msk', 'USART_CR3_DMAT',
    'USART_CR3_RTSE_Pos', 'USART_CR3_RTSE_Msk', 'USART_CR3_RTSE', 'USART_CR3_CTSE_Pos',
    'USART_CR3_CTSE_Msk', 'USART_CR3_CTSE', 'USART_CR3_CTSIE_Pos',
    'USART_CR3_CTSIE_Msk', 'USART_CR3_CTSIE', 'USART_CR3_ONEBIT_Pos',
    'USART_CR3_ONEBIT_Msk', 'USART_CR3_ONEBIT', 'USART_CR3_OVRDIS_Pos',
    'USART_CR3_OVRDIS_Msk', 'USART_CR3_OVRDIS', 'USART_CR3_DDRE_Pos',
    'USART_CR3_DDRE_Msk', 'USART_CR3_DDRE', 'USART_CR3_DEM_Pos', 'USART_CR3_DEM_Msk',
    'USART_CR3_DEM', 'USART_CR3_DEP_Pos', 'USART_CR3_DEP_Msk', 'USART_CR3_DEP',
    'USART_CR3_SCARCNT_Pos', 'USART_CR3_SCARCNT_Msk', 'USART_CR3_SCARCNT',
    'USART_CR3_SCARCNT_0', 'USART_CR3_SCARCNT_1', 'USART_CR3_SCARCNT_2',
    'USART_CR3_WUS_Pos', 'USART_CR3_WUS_Msk', 'USART_CR3_WUS', 'USART_CR3_WUS_0',
    'USART_CR3_WUS_1', 'USART_CR3_WUFIE_Pos', 'USART_CR3_WUFIE_Msk', 'USART_CR3_WUFIE',
    'USART_CR3_UCESM_Pos', 'USART_CR3_UCESM_Msk', 'USART_CR3_UCESM',
    'USART_BRR_DIV_FRACTION_Pos', 'USART_BRR_DIV_FRACTION_Msk',
    'USART_BRR_DIV_FRACTION', 'USART_BRR_DIV_MANTISSA_Pos',
    'USART_BRR_DIV_MANTISSA_Msk', 'USART_BRR_DIV_MANTISSA', 'USART_GTPR_PSC_Pos',
    'USART_GTPR_PSC_Msk', 'USART_GTPR_PSC', 'USART_GTPR_GT_Pos', 'USART_GTPR_GT_Msk',
    'USART_GTPR_GT', 'USART_RTOR_RTO_Pos', 'USART_RTOR_RTO_Msk', 'USART_RTOR_RTO',
    'USART_RTOR_BLEN_Pos', 'USART_RTOR_BLEN_Msk', 'USART_RTOR_BLEN',
    'USART_RQR_ABRRQ_Pos', 'USART_RQR_ABRRQ_Msk', 'USART_RQR_ABRRQ',
    'USART_RQR_SBKRQ_Pos', 'USART_RQR_SBKRQ_Msk', 'USART_RQR_SBKRQ',
    'USART_RQR_MMRQ_Pos', 'USART_RQR_MMRQ_Msk', 'USART_RQR_MMRQ', 'USART_RQR_RXFRQ_Pos',
    'USART_RQR_RXFRQ_Msk', 'USART_RQR_RXFRQ', 'USART_RQR_TXFRQ_Pos',
    'USART_RQR_TXFRQ_Msk', 'USART_RQR_TXFRQ', 'USART_ISR_PE_Pos', 'USART_ISR_PE_Msk',
    'USART_ISR_PE', 'USART_ISR_FE_Pos', 'USART_ISR_FE_Msk', 'USART_ISR_FE',
    'USART_ISR_NE_Pos', 'USART_ISR_NE_Msk', 'USART_ISR_NE', 'USART_ISR_ORE_Pos',
    'USART_ISR_ORE_Msk', 'USART_ISR_ORE', 'USART_ISR_IDLE_Pos', 'USART_ISR_IDLE_Msk',
    'USART_ISR_IDLE', 'USART_ISR_RXNE_Pos', 'USART_ISR_RXNE_Msk', 'USART_ISR_RXNE',
    'USART_ISR_TC_Pos', 'USART_ISR_TC_Msk', 'USART_ISR_TC', 'USART_ISR_TXE_Pos',
    'USART_ISR_TXE_Msk', 'USART_ISR_TXE', 'USART_ISR_LBDF_Pos', 'USART_ISR_LBDF_Msk',
    'USART_ISR_LBDF', 'USART_ISR_CTSIF_Pos', 'USART_ISR_CTSIF_Msk', 'USART_ISR_CTSIF',
    'USART_ISR_CTS_Pos', 'USART_ISR_CTS_Msk', 'USART_ISR_CTS', 'USART_ISR_RTOF_Pos',
    'USART_ISR_RTOF_Msk', 'USART_ISR_RTOF', 'USART_ISR_EOBF_Pos', 'USART_ISR_EOBF_Msk',
    'USART_ISR_EOBF', 'USART_ISR_ABRE_Pos', 'USART_ISR_ABRE_Msk', 'USART_ISR_ABRE',
    'USART_ISR_ABRF_Pos', 'USART_ISR_ABRF_Msk', 'USART_ISR_ABRF', 'USART_ISR_BUSY_Pos',
    'USART_ISR_BUSY_Msk', 'USART_ISR_BUSY', 'USART_ISR_CMF_Pos', 'USART_ISR_CMF_Msk',
    'USART_ISR_CMF', 'USART_ISR_SBKF_Pos', 'USART_ISR_SBKF_Msk', 'USART_ISR_SBKF',
    'USART_ISR_RWU_Pos', 'USART_ISR_RWU_Msk', 'USART_ISR_RWU', 'USART_ISR_WUF_Pos',
    'USART_ISR_WUF_Msk', 'USART_ISR_WUF', 'USART_ISR_TEACK_Pos', 'USART_ISR_TEACK_Msk',
    'USART_ISR_TEACK', 'USART_ISR_REACK_Pos', 'USART_ISR_REACK_Msk', 'USART_ISR_REACK',
    'USART_ICR_PECF_Pos', 'USART_ICR_PECF_Msk', 'USART_ICR_PECF', 'USART_ICR_FECF_Pos',
    'USART_ICR_FECF_Msk', 'USART_ICR_FECF', 'USART_ICR_NCF_Pos', 'USART_ICR_NCF_Msk',
    'USART_ICR_NCF', 'USART_ICR_ORECF_Pos', 'USART_ICR_ORECF_Msk', 'USART_ICR_ORECF',
    'USART_ICR_IDLECF_Pos', 'USART_ICR_IDLECF_Msk', 'USART_ICR_IDLECF',
    'USART_ICR_TCCF_Pos', 'USART_ICR_TCCF_Msk', 'USART_ICR_TCCF', 'USART_ICR_LBDCF_Pos',
    'USART_ICR_LBDCF_Msk', 'USART_ICR_LBDCF', 'USART_ICR_CTSCF_Pos',
    'USART_ICR_CTSCF_Msk', 'USART_ICR_CTSCF', 'USART_ICR_RTOCF_Pos',
    'USART_ICR_RTOCF_Msk', 'USART_ICR_RTOCF', 'USART_ICR_EOBCF_Pos',
    'USART_ICR_EOBCF_Msk', 'USART_ICR_EOBCF', 'USART_ICR_CMCF_Pos',
    'USART_ICR_CMCF_Msk', 'USART_ICR_CMCF', 'USART_ICR_WUCF_Pos', 'USART_ICR_WUCF_Msk',
    'USART_ICR_WUCF', 'USART_ICR_NECF', 'USART_RDR_RDR_Pos', 'USART_RDR_RDR_Msk',
    'USART_RDR_RDR', 'USART_TDR_TDR_Pos', 'USART_TDR_TDR_Msk', 'USART_TDR_TDR',
    'USB_BASE', 'USB_PMAADDR_Pos', 'USB_PMAADDR_Msk', 'USB_PMAADDR', 'USB_CNTR',
    'USB_ISTR', 'USB_FNR', 'USB_DADDR', 'USB_BTABLE', 'USB_LPMCSR', 'USB_BCDR',
    'USB_ISTR_CTR', 'USB_ISTR_PMAOVR', 'USB_ISTR_ERR', 'USB_ISTR_WKUP', 'USB_ISTR_SUSP',
    'USB_ISTR_RESET', 'USB_ISTR_SOF', 'USB_ISTR_ESOF', 'USB_ISTR_L1REQ', 'USB_ISTR_DIR',
    'USB_ISTR_EP_ID', 'USB_CLR_CTR', 'USB_CLR_PMAOVR', 'USB_CLR_ERR', 'USB_CLR_WKUP',
    'USB_CLR_SUSP', 'USB_CLR_RESET', 'USB_CLR_SOF', 'USB_CLR_ESOF', 'USB_CLR_L1REQ',
    'USB_CNTR_CTRM', 'USB_CNTR_PMAOVRM', 'USB_CNTR_ERRM', 'USB_CNTR_WKUPM',
    'USB_CNTR_SUSPM', 'USB_CNTR_RESETM', 'USB_CNTR_SOFM', 'USB_CNTR_ESOFM',
    'USB_CNTR_L1REQM', 'USB_CNTR_L1RESUME', 'USB_CNTR_RESUME', 'USB_CNTR_FSUSP',
    'USB_CNTR_LPMODE', 'USB_CNTR_PDWN', 'USB_CNTR_FRES', 'USB_BCDR_DPPU',
    'USB_BCDR_PS2DET', 'USB_BCDR_SDET', 'USB_BCDR_PDET', 'USB_BCDR_DCDET',
    'USB_BCDR_SDEN', 'USB_BCDR_PDEN', 'USB_BCDR_DCDEN', 'USB_BCDR_BCDEN',
    'USB_LPMCSR_BESL', 'USB_LPMCSR_REMWAKE', 'USB_LPMCSR_LPMACK', 'USB_LPMCSR_LMPEN',
    'USB_FNR_RXDP', 'USB_FNR_RXDM', 'USB_FNR_LCK', 'USB_FNR_LSOF', 'USB_FNR_FN',
    'USB_DADDR_EF', 'USB_DADDR_ADD', 'USB_EP0R', 'USB_EP1R', 'USB_EP2R', 'USB_EP3R',
    'USB_EP4R', 'USB_EP5R', 'USB_EP6R', 'USB_EP7R', 'USB_EP_CTR_RX', 'USB_EP_DTOG_RX',
    'USB_EPRX_STAT', 'USB_EP_SETUP', 'USB_EP_T_FIELD', 'USB_EP_KIND', 'USB_EP_CTR_TX',
    'USB_EP_DTOG_TX', 'USB_EPTX_STAT', 'USB_EPADDR_FIELD', 'USB_EPREG_MASK',
    'USB_EP_TYPE_MASK', 'USB_EP_BULK', 'USB_EP_CONTROL', 'USB_EP_ISOCHRONOUS',
    'USB_EP_INTERRUPT', 'USB_EP_T_MASK', 'USB_EPKIND_MASK', 'USB_EP_TX_DIS',
    'USB_EP_TX_STALL', 'USB_EP_TX_NAK', 'USB_EP_TX_VALID', 'USB_EPTX_DTOG1',
    'USB_EPTX_DTOG2', 'USB_EPTX_DTOGMASK', 'USB_EP_RX_DIS', 'USB_EP_RX_STALL',
    'USB_EP_RX_NAK', 'USB_EP_RX_VALID', 'USB_EPRX_DTOG1', 'USB_EPRX_DTOG2',
    'USB_EPRX_DTOGMASK', 'WWDG_CR_T_Pos', 'WWDG_CR_T_Msk', 'WWDG_CR_T', 'WWDG_CR_T_0',
    'WWDG_CR_T_1', 'WWDG_CR_T_2', 'WWDG_CR_T_3', 'WWDG_CR_T_4', 'WWDG_CR_T_5',
    'WWDG_CR_T_6', 'WWDG_CR_T0', 'WWDG_CR_T1', 'WWDG_CR_T2', 'WWDG_CR_T3', 'WWDG_CR_T4',
    'WWDG_CR_T5', 'WWDG_CR_T6', 'WWDG_CR_WDGA_Pos', 'WWDG_CR_WDGA_Msk', 'WWDG_CR_WDGA',
    'WWDG_CFR_W_Pos', 'WWDG_CFR_W_Msk', 'WWDG_CFR_W', 'WWDG_CFR_W_0', 'WWDG_CFR_W_1',
    'WWDG_CFR_W_2', 'WWDG_CFR_W_3', 'WWDG_CFR_W_4', 'WWDG_CFR_W_5', 'WWDG_CFR_W_6',
    'WWDG_CFR_W0', 'WWDG_CFR_W1', 'WWDG_CFR_W2', 'WWDG_CFR_W3', 'WWDG_CFR_W4',
    'WWDG_CFR_W5', 'WWDG_CFR_W6', 'WWDG_CFR_WDGTB_Pos', 'WWDG_CFR_WDGTB_Msk',
    'WWDG_CFR_WDGTB', 'WWDG_CFR_WDGTB_0', 'WWDG_CFR_WDGTB_1', 'WWDG_CFR_WDGTB0',
    'WWDG_CFR_WDGTB1', 'WWDG_CFR_EWI_Pos', 'WWDG_CFR_EWI_Msk', 'WWDG_CFR_EWI',
    'WWDG_SR_EWIF_Pos', 'WWDG_SR_EWIF_Msk', 'WWDG_SR_EWIF', 'LPUART1_IRQn',
    'AES_LPUART1_IRQn', 'RNG_LPUART1_IRQn', 'TIM6_IRQn', 'RCC_IRQn',
    'DMA1_Channel4_5_IRQn', 'ADC1_IRQn', 'ADC_TypeDef', 'ADC_Common_TypeDef',
    'AES_TypeDef', 'COMP_TypeDef', 'COMP_Common_TypeDef', 'CRC_TypeDef', 'CRS_TypeDef',
    'DAC_TypeDef', 'DBGMCU_TypeDef', 'DMA_Channel_TypeDef', 'DMA_TypeDef',
    'DMA_Request_TypeDef', 'EXTI_TypeDef', 'FLASH_TypeDef', 'OB_TypeDef',
    'GPIO_TypeDef', 'LPTIM_TypeDef', 'SYSCFG_TypeDef', 'I2C_TypeDef', 'IWDG_TypeDef',
    'LCD_TypeDef', 'FIREWALL_TypeDef', 'PWR_TypeDef', 'RCC_TypeDef', 'RNG_TypeDef',
    'RTC_TypeDef', 'SPI_TypeDef', 'TIM_TypeDef', 'TSC_TypeDef', 'USART_TypeDef',
    'WWDG_TypeDef', 'USB_TypeDef', 'ADC_SINGLE_ENDED', 'ADC_EXTERNALTRIGCONV_T6_TRGO',
    'ADC_EXTERNALTRIGCONV_T21_CC2', 'ADC_EXTERNALTRIGCONV_T2_TRGO',
    'ADC_EXTERNALTRIGCONV_T2_CC4', 'ADC_EXTERNALTRIGCONV_T22_TRGO',
    'ADC_EXTERNALTRIGCONV_T3_TRGO', 'ADC_EXTERNALTRIGCONV_EXT_IT11',
    'ADC_SOFTWARE_START', 'ADC_EXTERNALTRIGCONV_T21_TRGO', 'ADC_FLAG_SENSOR',
    'ADC_FLAG_VREFINT', 'HAL_ADC_STATE_RESET', 'HAL_ADC_STATE_READY',
    'HAL_ADC_STATE_BUSY_INTERNAL', 'HAL_ADC_STATE_TIMEOUT',
    'HAL_ADC_STATE_ERROR_INTERNAL', 'HAL_ADC_STATE_ERROR_CONFIG',
    'HAL_ADC_STATE_ERROR_DMA', 'HAL_ADC_STATE_REG_BUSY', 'HAL_ADC_STATE_REG_EOC',
    'HAL_ADC_STATE_REG_OVR', 'HAL_ADC_STATE_REG_EOSMP', 'HAL_ADC_STATE_INJ_BUSY',
    'HAL_ADC_STATE_INJ_EOC', 'HAL_ADC_STATE_INJ_JQOVF', 'HAL_ADC_STATE_AWD1',
    'HAL_ADC_STATE_AWD2', 'HAL_ADC_STATE_AWD3', 'HAL_ADC_STATE_MULTIMODE_SLAVE',
    'HAL_ADC_ERROR_NONE', 'HAL_ADC_ERROR_INTERNAL', 'HAL_ADC_ERROR_OVR',
    'HAL_ADC_ERROR_DMA', 'ADC_ENABLE_TIMEOUT', 'ADC_DISABLE_TIMEOUT',
    'ADC_STOP_CONVERSION_TIMEOUT', 'ADC_DELAY_10US_MIN_CPU_CYCLES',
    'ADC_CLOCK_ASYNC_DIV1', 'ADC_CLOCK_ASYNC_DIV2', 'ADC_CLOCK_ASYNC_DIV4',
    'ADC_CLOCK_ASYNC_DIV6', 'ADC_CLOCK_ASYNC_DIV8', 'ADC_CLOCK_ASYNC_DIV10',
    'ADC_CLOCK_ASYNC_DIV12', 'ADC_CLOCK_ASYNC_DIV16', 'ADC_CLOCK_ASYNC_DIV32',
    'ADC_CLOCK_ASYNC_DIV64', 'ADC_CLOCK_ASYNC_DIV128', 'ADC_CLOCK_ASYNC_DIV256',
    'ADC_CLOCK_SYNC_PCLK_DIV1', 'ADC_CLOCK_SYNC_PCLK_DIV2', 'ADC_CLOCK_SYNC_PCLK_DIV4',
    'ADC_RESOLUTION_12B', 'ADC_RESOLUTION_10B', 'ADC_RESOLUTION_8B',
    'ADC_RESOLUTION_6B', 'ADC_DATAALIGN_RIGHT', 'ADC_DATAALIGN_LEFT',
    'ADC_EXTERNALTRIGCONVEDGE_NONE', 'ADC_EXTERNALTRIGCONVEDGE_RISING',
    'ADC_EXTERNALTRIGCONVEDGE_FALLING', 'ADC_EXTERNALTRIGCONVEDGE_RISINGFALLING',
    'ADC_EOC_SINGLE_CONV', 'ADC_EOC_SEQ_CONV', 'ADC_OVR_DATA_PRESERVED',
    'ADC_OVR_DATA_OVERWRITTEN', 'ADC_RANK_CHANNEL_NUMBER', 'ADC_RANK_NONE',
    'ADC_CHANNEL_0', 'ADC_CHANNEL_1', 'ADC_CHANNEL_2', 'ADC_CHANNEL_3', 'ADC_CHANNEL_4',
    'ADC_CHANNEL_5', 'ADC_CHANNEL_6', 'ADC_CHANNEL_7', 'ADC_CHANNEL_8', 'ADC_CHANNEL_9',
    'ADC_CHANNEL_10', 'ADC_CHANNEL_11', 'ADC_CHANNEL_12', 'ADC_CHANNEL_13',
    'ADC_CHANNEL_14', 'ADC_CHANNEL_15', 'ADC_CHANNEL_16', 'ADC_CHANNEL_17',
    'ADC_CHANNEL_18', 'ADC_CHANNEL_VLCD', 'ADC_CHANNEL_VREFINT',
    'ADC_CHANNEL_TEMPSENSOR', 'ADC_CHANNEL_MASK', 'ADC_CHANNEL_AWD_MASK',
    'ADC_SAMPLETIME_1CYCLE_5', 'ADC_SAMPLETIME_3CYCLES_5', 'ADC_SAMPLETIME_7CYCLES_5',
    'ADC_SAMPLETIME_12CYCLES_5', 'ADC_SAMPLETIME_19CYCLES_5',
    'ADC_SAMPLETIME_39CYCLES_5', 'ADC_SAMPLETIME_79CYCLES_5',
    'ADC_SAMPLETIME_160CYCLES_5', 'ADC_SCAN_DIRECTION_FORWARD',
    'ADC_SCAN_DIRECTION_BACKWARD', 'ADC_SCAN_ENABLE', 'ADC_OVERSAMPLING_RATIO_2',
    'ADC_OVERSAMPLING_RATIO_4', 'ADC_OVERSAMPLING_RATIO_8', 'ADC_OVERSAMPLING_RATIO_16',
    'ADC_OVERSAMPLING_RATIO_32', 'ADC_OVERSAMPLING_RATIO_64',
    'ADC_OVERSAMPLING_RATIO_128', 'ADC_OVERSAMPLING_RATIO_256',
    'ADC_RIGHTBITSHIFT_NONE', 'ADC_RIGHTBITSHIFT_1', 'ADC_RIGHTBITSHIFT_2',
    'ADC_RIGHTBITSHIFT_3', 'ADC_RIGHTBITSHIFT_4', 'ADC_RIGHTBITSHIFT_5',
    'ADC_RIGHTBITSHIFT_6', 'ADC_RIGHTBITSHIFT_7', 'ADC_RIGHTBITSHIFT_8',
    'ADC_TRIGGEREDMODE_SINGLE_TRIGGER', 'ADC_TRIGGEREDMODE_MULTI_TRIGGER',
    'ADC_ANALOGWATCHDOG_NONE', 'ADC_ANALOGWATCHDOG_SINGLE_REG',
    'ADC_ANALOGWATCHDOG_ALL_REG', 'ADC_REGULAR_GROUP', 'ADC_AWD_EVENT', 'ADC_OVR_EVENT',
    'ADC_IT_RDY', 'ADC_IT_EOSMP', 'ADC_IT_EOC', 'ADC_IT_EOS', 'ADC_IT_OVR',
    'ADC_IT_AWD', 'ADC_IT_EOCAL', 'ADC_FLAG_RDY', 'ADC_FLAG_EOSMP', 'ADC_FLAG_EOC',
    'ADC_FLAG_EOS', 'ADC_FLAG_OVR', 'ADC_FLAG_AWD', 'ADC_FLAG_EOCAL', 'ADC_FLAG_ALL',
    'ADC_OversamplingTypeDef', 'ADC_ChannelConfTypeDef', 'ADC_AnalogWDGConfTypeDef',
    'HAL_COMP_STATE_RESET', 'HAL_COMP_STATE_RESET_LOCKED', 'HAL_COMP_STATE_READY',
    'HAL_COMP_STATE_READY_LOCKED', 'HAL_COMP_STATE_BUSY', 'HAL_COMP_STATE_BUSY_LOCKED',
    'COMP_STATE_BITFIELD_LOCK', 'HAL_COMP_ERROR_NONE', 'COMP_WINDOWMODE_DISABLE',
    'COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON', 'COMP_POWERMODE_MEDIUMSPEED',
    'COMP_POWERMODE_ULTRALOWPOWER', 'COMP_INPUT_PLUS_IO1', 'COMP_INPUT_PLUS_IO2',
    'COMP_INPUT_PLUS_IO3', 'COMP_INPUT_PLUS_IO4', 'COMP_INPUT_PLUS_IO5',
    'COMP_INPUT_MINUS_1_4VREFINT', 'COMP_INPUT_MINUS_1_2VREFINT',
    'COMP_INPUT_MINUS_3_4VREFINT', 'COMP_INPUT_MINUS_VREFINT',
    'COMP_INPUT_MINUS_DAC1_CH1', 'COMP_INPUT_MINUS_DAC1_CH2', 'COMP_INPUT_MINUS_IO1',
    'COMP_INPUT_MINUS_IO2', 'COMP_LPTIMCONNECTION_DISABLED',
    'COMP_LPTIMCONNECTION_IN1_ENABLED', 'COMP_LPTIMCONNECTION_IN2_ENABLED',
    'COMP_OUTPUTPOL_NONINVERTED', 'COMP_OUTPUTPOL_INVERTED', 'COMP_OUTPUT_LEVEL_LOW',
    'COMP_OUTPUT_LEVEL_HIGH', 'COMP_TRIGGERMODE_NONE', 'COMP_TRIGGERMODE_IT_RISING',
    'COMP_TRIGGERMODE_IT_FALLING', 'COMP_TRIGGERMODE_IT_RISING_FALLING',
    'COMP_TRIGGERMODE_EVENT_RISING', 'COMP_TRIGGERMODE_EVENT_FALLING',
    'COMP_TRIGGERMODE_EVENT_RISING_FALLING', 'COMP_EXTI_LINE_COMP1',
    'COMP_EXTI_LINE_COMP2', 'COMP_EXTI_IT', 'COMP_EXTI_EVENT', 'COMP_EXTI_RISING',
    'COMP_EXTI_FALLING', 'COMP_InitTypeDef', 'CRC_INPUTDATA_INVERSION_NONE',
    'CRC_INPUTDATA_INVERSION_BYTE', 'CRC_INPUTDATA_INVERSION_HALFWORD',
    'CRC_INPUTDATA_INVERSION_WORD', 'CRC_OUTPUTDATA_INVERSION_DISABLE',
    'CRC_OUTPUTDATA_INVERSION_ENABLE', 'HAL_CRC_STATE_RESET', 'HAL_CRC_STATE_READY',
    'HAL_CRC_STATE_BUSY', 'HAL_CRC_STATE_TIMEOUT', 'HAL_CRC_STATE_ERROR',
    'DEFAULT_CRC32_POLY', 'DEFAULT_CRC_INITVALUE', 'DEFAULT_POLYNOMIAL_ENABLE',
    'DEFAULT_POLYNOMIAL_DISABLE', 'DEFAULT_INIT_VALUE_ENABLE',
    'DEFAULT_INIT_VALUE_DISABLE', 'CRC_POLYLENGTH_32B', 'CRC_POLYLENGTH_16B',
    'CRC_POLYLENGTH_8B', 'CRC_POLYLENGTH_7B', 'HAL_CRC_LENGTH_32B',
    'HAL_CRC_LENGTH_16B', 'HAL_CRC_LENGTH_8B', 'HAL_CRC_LENGTH_7B',
    'CRC_INPUTDATA_FORMAT_UNDEFINED', 'CRC_INPUTDATA_FORMAT_BYTES',
    'CRC_INPUTDATA_FORMAT_HALFWORDS', 'CRC_INPUTDATA_FORMAT_WORDS', 'CRC_InitTypeDef',
    'HAL_CRYP_STATE_RESET', 'HAL_CRYP_STATE_READY', 'HAL_CRYP_STATE_BUSY',
    'HAL_CRYP_STATE_TIMEOUT', 'HAL_CRYP_STATE_ERROR', 'HAL_CRYP_PHASE_READY',
    'HAL_CRYP_PHASE_PROCESS', 'CRYP_DATATYPE_32B', 'CRYP_DATATYPE_16B',
    'CRYP_DATATYPE_8B', 'CRYP_DATATYPE_1B', 'CRYP_CR_ALGOMODE_DIRECTION',
    'CRYP_CR_ALGOMODE_AES_ECB_ENCRYPT', 'CRYP_CR_ALGOMODE_AES_ECB_KEYDERDECRYPT',
    'CRYP_CR_ALGOMODE_AES_CBC_ENCRYPT', 'CRYP_CR_ALGOMODE_AES_CBC_KEYDERDECRYPT',
    'CRYP_CR_ALGOMODE_AES_CTR_ENCRYPT', 'CRYP_CR_ALGOMODE_AES_CTR_DECRYPT',
    'CRYP_IT_CC', 'CRYP_IT_ERR', 'CRYP_FLAG_CCF', 'CRYP_FLAG_RDERR', 'CRYP_FLAG_WRERR',
    'CRYP_CLEARFLAG_CCF', 'CRYP_CLEARFLAG_RDERR', 'CRYP_CLEARFLAG_WRERR',
    'CRYP_InitTypeDef', 'DAC_LFSRUNMASK_BIT0', 'DAC_LFSRUNMASK_BITS1_0',
    'DAC_LFSRUNMASK_BITS2_0', 'DAC_LFSRUNMASK_BITS3_0', 'DAC_LFSRUNMASK_BITS4_0',
    'DAC_LFSRUNMASK_BITS5_0', 'DAC_LFSRUNMASK_BITS6_0', 'DAC_LFSRUNMASK_BITS7_0',
    'DAC_LFSRUNMASK_BITS8_0', 'DAC_LFSRUNMASK_BITS9_0', 'DAC_LFSRUNMASK_BITS10_0',
    'DAC_LFSRUNMASK_BITS11_0', 'DAC_TRIANGLEAMPLITUDE_1', 'DAC_TRIANGLEAMPLITUDE_3',
    'DAC_TRIANGLEAMPLITUDE_7', 'DAC_TRIANGLEAMPLITUDE_15', 'DAC_TRIANGLEAMPLITUDE_31',
    'DAC_TRIANGLEAMPLITUDE_63', 'DAC_TRIANGLEAMPLITUDE_127',
    'DAC_TRIANGLEAMPLITUDE_255', 'DAC_TRIANGLEAMPLITUDE_511',
    'DAC_TRIANGLEAMPLITUDE_1023', 'DAC_TRIANGLEAMPLITUDE_2047',
    'DAC_TRIANGLEAMPLITUDE_4095', 'HAL_DAC_STATE_RESET', 'HAL_DAC_STATE_READY',
    'HAL_DAC_STATE_BUSY', 'HAL_DAC_STATE_TIMEOUT', 'HAL_DAC_STATE_ERROR',
    'HAL_DAC_ERROR_NONE', 'HAL_DAC_ERROR_DMAUNDERRUNCH1', 'HAL_DAC_ERROR_DMA',
    'DAC_TRIGGER_NONE', 'DAC_TRIGGER_T6_TRGO', 'DAC_TRIGGER_T21_TRGO',
    'DAC_TRIGGER_T2_TRGO', 'DAC_TRIGGER_EXT_IT9', 'DAC_TRIGGER_SOFTWARE',
    'DAC_OUTPUTBUFFER_ENABLE', 'DAC_OUTPUTBUFFER_DISABLE', 'DAC_CHANNEL_1',
    'DAC_ALIGN_12B_R', 'DAC_ALIGN_12B_L', 'DAC_ALIGN_8B_R', 'DAC_FLAG_DMAUDR1',
    'DAC_IT_DMAUDR1', 'DAC_ChannelConfTypeDef', 'HAL_OK', 'HAL_ERROR', 'HAL_BUSY',
    'HAL_TIMEOUT', 'HAL_UNLOCKED', 'HAL_LOCKED', 'HAL_MAX_DELAY', 'HAL_DMA_STATE_RESET',
    'HAL_DMA_STATE_READY', 'HAL_DMA_STATE_BUSY', 'HAL_DMA_STATE_TIMEOUT',
    'HAL_DMA_FULL_TRANSFER', 'HAL_DMA_HALF_TRANSFER', 'HAL_DMA_XFER_CPLT_CB_ID',
    'HAL_DMA_XFER_HALFCPLT_CB_ID', 'HAL_DMA_XFER_ERROR_CB_ID',
    'HAL_DMA_XFER_ABORT_CB_ID', 'HAL_DMA_XFER_ALL_CB_ID', 'HAL_DMA_ERROR_NONE',
    'HAL_DMA_ERROR_TE', 'HAL_DMA_ERROR_NO_XFER', 'HAL_DMA_ERROR_TIMEOUT',
    'HAL_DMA_ERROR_NOT_SUPPORTED', 'DMA_REQUEST_0', 'DMA_REQUEST_1', 'DMA_REQUEST_4',
    'DMA_REQUEST_5', 'DMA_REQUEST_6', 'DMA_REQUEST_8', 'DMA_REQUEST_0', 'DMA_REQUEST_1',
    'DMA_REQUEST_2', 'DMA_REQUEST_3', 'DMA_REQUEST_4', 'DMA_REQUEST_5', 'DMA_REQUEST_6',
    'DMA_REQUEST_7', 'DMA_REQUEST_8', 'DMA_REQUEST_9', 'DMA_REQUEST_10',
    'DMA_REQUEST_11', 'DMA_REQUEST_12', 'DMA_REQUEST_13', 'DMA_REQUEST_14',
    'DMA_REQUEST_15', 'DMA_REQUEST_0', 'DMA_REQUEST_1', 'DMA_REQUEST_2',
    'DMA_REQUEST_3', 'DMA_REQUEST_4', 'DMA_REQUEST_5', 'DMA_REQUEST_6', 'DMA_REQUEST_7',
    'DMA_REQUEST_8', 'DMA_REQUEST_9', 'DMA_REQUEST_10', 'DMA_REQUEST_12',
    'DMA_REQUEST_13', 'DMA_REQUEST_14', 'DMA_REQUEST_15', 'DMA_PERIPH_TO_MEMORY',
    'DMA_MEMORY_TO_PERIPH', 'DMA_MEMORY_TO_MEMORY', 'DMA_PINC_ENABLE',
    'DMA_PINC_DISABLE', 'DMA_MINC_ENABLE', 'DMA_MINC_DISABLE', 'DMA_PDATAALIGN_BYTE',
    'DMA_PDATAALIGN_HALFWORD', 'DMA_PDATAALIGN_WORD', 'DMA_MDATAALIGN_BYTE',
    'DMA_MDATAALIGN_HALFWORD', 'DMA_MDATAALIGN_WORD', 'DMA_NORMAL', 'DMA_CIRCULAR',
    'DMA_PRIORITY_LOW', 'DMA_PRIORITY_MEDIUM', 'DMA_PRIORITY_HIGH',
    'DMA_PRIORITY_VERY_HIGH', 'DMA_IT_TC', 'DMA_IT_HT', 'DMA_IT_TE', 'DMA_FLAG_GL1',
    'DMA_FLAG_TC1', 'DMA_FLAG_HT1', 'DMA_FLAG_TE1', 'DMA_FLAG_GL2', 'DMA_FLAG_TC2',
    'DMA_FLAG_HT2', 'DMA_FLAG_TE2', 'DMA_FLAG_GL3', 'DMA_FLAG_TC3', 'DMA_FLAG_HT3',
    'DMA_FLAG_TE3', 'DMA_FLAG_GL4', 'DMA_FLAG_TC4', 'DMA_FLAG_HT4', 'DMA_FLAG_TE4',
    'DMA_FLAG_GL5', 'DMA_FLAG_TC5', 'DMA_FLAG_HT5', 'DMA_FLAG_TE5', 'DMA_FLAG_GL6',
    'DMA_FLAG_TC6', 'DMA_FLAG_HT6', 'DMA_FLAG_TE6', 'DMA_FLAG_GL7', 'DMA_FLAG_TC7',
    'DMA_FLAG_HT7', 'DMA_FLAG_TE7', 'DMA_InitTypeDef',
    'FIREWALL_VOLATILEDATA_NOT_EXECUTABLE', 'FIREWALL_VOLATILEDATA_EXECUTABLE',
    'FIREWALL_VOLATILEDATA_NOT_SHARED', 'FIREWALL_VOLATILEDATA_SHARED',
    'FIREWALL_PRE_ARM_RESET', 'FIREWALL_PRE_ARM_SET', 'FIREWALL_InitTypeDef',
    'FLASH_SIZE_DATA_REGISTER', 'WRP_MASK_LOW', 'WRP_MASK_HIGH',
    'FLASH_TYPEERASE_PAGES', 'OPTIONBYTE_WRP', 'OPTIONBYTE_RDP', 'OPTIONBYTE_USER',
    'OPTIONBYTE_BOR', 'OPTIONBYTE_BOOT_BIT1', 'OB_WRPSTATE_DISABLE',
    'OB_WRPSTATE_ENABLE', 'OB_WRP_Pages0to31', 'OB_WRP_Pages32to63',
    'OB_WRP_Pages64to95', 'OB_WRP_Pages96to127', 'OB_WRP_Pages128to159',
    'OB_WRP_Pages160to191', 'OB_WRP_Pages192to223', 'OB_WRP_Pages224to255',
    'OB_WRP_AllPages', 'OB_WRP_Pages0to31', 'OB_WRP_Pages32to63', 'OB_WRP_Pages64to95',
    'OB_WRP_Pages96to127', 'OB_WRP_Pages128to159', 'OB_WRP_Pages160to191',
    'OB_WRP_Pages192to223', 'OB_WRP_Pages224to255', 'OB_WRP_Pages256to287',
    'OB_WRP_Pages288to319', 'OB_WRP_Pages320to351', 'OB_WRP_Pages352to383',
    'OB_WRP_Pages384to415', 'OB_WRP_Pages416to447', 'OB_WRP_Pages448to479',
    'OB_WRP_Pages480to511', 'OB_WRP_AllPages', 'OB_WRP_Pages0to31',
    'OB_WRP_Pages32to63', 'OB_WRP_Pages64to95', 'OB_WRP_Pages96to127',
    'OB_WRP_Pages128to159', 'OB_WRP_Pages160to191', 'OB_WRP_Pages192to223',
    'OB_WRP_Pages224to255', 'OB_WRP_Pages256to287', 'OB_WRP_Pages288to319',
    'OB_WRP_Pages320to351', 'OB_WRP_Pages352to383', 'OB_WRP_Pages384to415',
    'OB_WRP_Pages416to447', 'OB_WRP_Pages448to479', 'OB_WRP_Pages480to511',
    'OB_WRP_AllPages', 'OB_RDP_LEVEL_0', 'OB_RDP_LEVEL_1', 'OB_RDP_LEVEL_2',
    'OB_BOR_OFF', 'OB_BOR_LEVEL1', 'OB_BOR_LEVEL2', 'OB_BOR_LEVEL3', 'OB_BOR_LEVEL4',
    'OB_BOR_LEVEL5', 'OB_IWDG_SW', 'OB_IWDG_HW', 'OB_STOP_NORST', 'OB_STOP_RST',
    'OB_STDBY_NORST', 'OB_STDBY_RST', 'OPTIONBYTE_PCROP', 'OB_PCROP_STATE_DISABLE',
    'OB_PCROP_STATE_ENABLE', 'OB_PCROP_DESELECTED', 'OB_PCROP_SELECTED',
    'OB_PCROP_Pages0to31', 'OB_PCROP_Pages32to63', 'OB_PCROP_Pages64to95',
    'OB_PCROP_Pages96to127', 'OB_PCROP_Pages128to159', 'OB_PCROP_Pages160to191',
    'OB_PCROP_Pages192to223', 'OB_PCROP_Pages224to255', 'OB_PCROP_AllPages',
    'OB_PCROP_Pages0to31', 'OB_PCROP_Pages32to63', 'OB_PCROP_Pages64to95',
    'OB_PCROP_Pages96to127', 'OB_PCROP_Pages128to159', 'OB_PCROP_Pages160to191',
    'OB_PCROP_Pages192to223', 'OB_PCROP_Pages224to255', 'OB_PCROP_Pages256to287',
    'OB_PCROP_Pages288to319', 'OB_PCROP_Pages320to351', 'OB_PCROP_Pages352to383',
    'OB_PCROP_Pages384to415', 'OB_PCROP_Pages416to447', 'OB_PCROP_Pages448to479',
    'OB_PCROP_Pages480to511', 'OB_PCROP_AllPages', 'OB_PCROP_Pages0to31',
    'OB_PCROP_Pages32to63', 'OB_PCROP_Pages64to95', 'OB_PCROP_Pages96to127',
    'OB_PCROP_Pages128to159', 'OB_PCROP_Pages160to191', 'OB_PCROP_Pages192to223',
    'OB_PCROP_Pages224to255', 'OB_PCROP_Pages256to287', 'OB_PCROP_Pages288to319',
    'OB_PCROP_Pages320to351', 'OB_PCROP_Pages352to383', 'OB_PCROP_Pages384to415',
    'OB_PCROP_Pages416to447', 'OB_PCROP_Pages448to479', 'OB_PCROP_Pages480to511',
    'OB_PCROP_AllPages', 'OB_BOOT_BIT1_RESET', 'OB_BOOT_BIT1_SET',
    'FLASH_TYPEPROGRAMDATA_BYTE', 'FLASH_TYPEPROGRAMDATA_HALFWORD',
    'FLASH_TYPEPROGRAMDATA_WORD', 'FLASH_EraseInitTypeDef',
    'FLASH_OBProgramInitTypeDef', 'FLASH_AdvOBProgramInitTypeDef', 'FLASH_PROC_NONE',
    'FLASH_PROC_PAGEERASE', 'FLASH_PROC_PROGRAM', 'FLASH_TIMEOUT_VALUE',
    'FLASH_SIZE_DATA_REGISTER', 'HAL_FLASH_ERROR_NONE', 'HAL_FLASH_ERROR_PGA',
    'HAL_FLASH_ERROR_WRP', 'HAL_FLASH_ERROR_OPTV', 'HAL_FLASH_ERROR_SIZE',
    'HAL_FLASH_ERROR_RD', 'HAL_FLASH_ERROR_FWWERR', 'HAL_FLASH_ERROR_NOTZERO',
    'FLASH_PAGE_SIZE', 'FLASH_TYPEPROGRAM_WORD', 'FLASH_LATENCY_0', 'FLASH_LATENCY_1',
    'FLASH_IT_EOP', 'FLASH_IT_ERR', 'FLASH_FLAG_BSY', 'FLASH_FLAG_EOP',
    'FLASH_FLAG_ENDHV', 'FLASH_FLAG_READY', 'FLASH_FLAG_WRPERR', 'FLASH_FLAG_PGAERR',
    'FLASH_FLAG_SIZERR', 'FLASH_FLAG_OPTVERR', 'FLASH_FLAG_RDERR', 'FLASH_FLAG_FWWERR',
    'FLASH_FLAG_NOTZEROERR', 'FLASH_PDKEY1', 'FLASH_PDKEY2', 'FLASH_PEKEY1',
    'FLASH_PEKEY2', 'FLASH_PRGKEY1', 'FLASH_PRGKEY2', 'FLASH_OPTKEY1', 'FLASH_OPTKEY2',
    'FLASH_ProcessTypeDef', 'GPIO_AF0_EVENTOUT', 'GPIO_AF0_TIM21', 'GPIO_AF0_SPI1',
    'GPIO_AF0_MCO', 'GPIO_AF0_SWDIO', 'GPIO_AF0_SWCLK', 'GPIO_AF0_USART1',
    'GPIO_AF0_SPI2', 'GPIO_AF0_LPTIM1', 'GPIO_AF0_TIM22', 'GPIO_AF0_LPUART1',
    'GPIO_AF0_USART2', 'GPIO_AF0_TIM2', 'GPIO_AF0_USB', 'GPIO_AF1_I2C1',
    'GPIO_AF1_SPI2', 'GPIO_AF1_LCD', 'GPIO_AF2_TIM2', 'GPIO_AF2_EVENTOUT',
    'GPIO_AF2_LPTIM1', 'GPIO_AF2_LPUART1', 'GPIO_AF2_RTC', 'GPIO_AF2_SPI2',
    'GPIO_AF2_USB', 'GPIO_AF3_EVENTOUT', 'GPIO_AF3_I2C1', 'GPIO_AF3_TSC',
    'GPIO_AF4_USART2', 'GPIO_AF4_LPUART1', 'GPIO_AF4_USART1', 'GPIO_AF4_EVENTOUT',
    'GPIO_AF4_TIM22', 'GPIO_AF4_I2C1', 'GPIO_AF5_TIM2', 'GPIO_AF5_TIM21',
    'GPIO_AF5_TIM22', 'GPIO_AF5_SPI2', 'GPIO_AF5_I2C2', 'GPIO_AF6_EVENTOUT',
    'GPIO_AF6_I2C2', 'GPIO_AF6_TIM21', 'GPIO_AF7_COMP1', 'GPIO_AF7_COMP2',
    'GPIO_AF0_EVENTOUT', 'GPIO_AF0_TIM21', 'GPIO_AF0_SPI1', 'GPIO_AF0_MCO',
    'GPIO_AF0_SWDIO', 'GPIO_AF0_SWCLK', 'GPIO_AF0_USART1', 'GPIO_AF0_SPI2',
    'GPIO_AF0_LPTIM1', 'GPIO_AF0_TIM22', 'GPIO_AF0_LPUART1', 'GPIO_AF0_USART2',
    'GPIO_AF0_TIM2', 'GPIO_AF0_USB', 'GPIO_AF1_I2C1', 'GPIO_AF1_SPI2', 'GPIO_AF2_TIM2',
    'GPIO_AF2_EVENTOUT', 'GPIO_AF2_LPTIM1', 'GPIO_AF2_LPUART1', 'GPIO_AF2_RTC',
    'GPIO_AF2_SPI2', 'GPIO_AF2_USB', 'GPIO_AF3_EVENTOUT', 'GPIO_AF3_I2C1',
    'GPIO_AF3_TSC', 'GPIO_AF4_USART2', 'GPIO_AF4_LPUART1', 'GPIO_AF4_USART1',
    'GPIO_AF4_EVENTOUT', 'GPIO_AF4_TIM22', 'GPIO_AF4_I2C1', 'GPIO_AF5_TIM2',
    'GPIO_AF5_TIM21', 'GPIO_AF5_TIM22', 'GPIO_AF5_SPI2', 'GPIO_AF5_I2C2',
    'GPIO_AF6_EVENTOUT', 'GPIO_AF6_I2C2', 'GPIO_AF6_TIM21', 'GPIO_AF7_COMP1',
    'GPIO_AF7_COMP2', 'GPIO_AF0_EVENTOUT', 'GPIO_AF0_TIM21', 'GPIO_AF0_SPI1',
    'GPIO_AF0_MCO', 'GPIO_AF0_SWDIO', 'GPIO_AF0_SWCLK', 'GPIO_AF0_USART1',
    'GPIO_AF0_SPI2', 'GPIO_AF0_LPTIM1', 'GPIO_AF0_TIM22', 'GPIO_AF0_LPUART1',
    'GPIO_AF0_USART2', 'GPIO_AF0_TIM2', 'GPIO_AF1_I2C1', 'GPIO_AF1_SPI2',
    'GPIO_AF2_TIM2', 'GPIO_AF2_EVENTOUT', 'GPIO_AF2_LPTIM1', 'GPIO_AF2_LPUART1',
    'GPIO_AF2_RTC', 'GPIO_AF2_SPI2', 'GPIO_AF3_EVENTOUT', 'GPIO_AF3_I2C1',
    'GPIO_AF4_USART2', 'GPIO_AF4_LPUART1', 'GPIO_AF4_USART1', 'GPIO_AF4_EVENTOUT',
    'GPIO_AF4_TIM22', 'GPIO_AF4_I2C1', 'GPIO_AF5_TIM2', 'GPIO_AF5_TIM21',
    'GPIO_AF5_TIM22', 'GPIO_AF5_SPI2', 'GPIO_AF5_I2C2', 'GPIO_AF6_EVENTOUT',
    'GPIO_AF6_I2C2', 'GPIO_AF6_TIM21', 'GPIO_AF7_COMP1', 'GPIO_AF7_COMP2',
    'GPIO_AF0_SPI1', 'GPIO_AF0_SPI2', 'GPIO_AF0_USART1', 'GPIO_AF0_USART2',
    'GPIO_AF0_LPUART1', 'GPIO_AF0_USB', 'GPIO_AF0_LPTIM1', 'GPIO_AF0_TSC',
    'GPIO_AF0_TIM2', 'GPIO_AF0_TIM21', 'GPIO_AF0_TIM22', 'GPIO_AF0_EVENTOUT',
    'GPIO_AF0_MCO', 'GPIO_AF0_SWDIO', 'GPIO_AF0_SWCLK', 'GPIO_AF1_SPI1',
    'GPIO_AF1_SPI2', 'GPIO_AF1_I2C1', 'GPIO_AF1_LCD', 'GPIO_AF2_SPI2',
    'GPIO_AF2_LPUART1', 'GPIO_AF2_USB', 'GPIO_AF2_LPTIM1', 'GPIO_AF2_TIM2',
    'GPIO_AF2_EVENTOUT', 'GPIO_AF2_RTC', 'GPIO_AF3_I2C1', 'GPIO_AF3_TSC',
    'GPIO_AF3_EVENTOUT', 'GPIO_AF4_I2C1', 'GPIO_AF4_USART1', 'GPIO_AF4_USART2',
    'GPIO_AF4_LPUART1', 'GPIO_AF4_TIM22', 'GPIO_AF4_EVENTOUT', 'GPIO_AF5_SPI2',
    'GPIO_AF5_I2C2', 'GPIO_AF5_TIM2', 'GPIO_AF5_TIM21', 'GPIO_AF5_TIM22',
    'GPIO_AF6_I2C2', 'GPIO_AF6_TIM21', 'GPIO_AF6_EVENTOUT', 'GPIO_AF7_COMP1',
    'GPIO_AF7_COMP2', 'GPIO_AF0_SPI1', 'GPIO_AF0_SPI2', 'GPIO_AF0_USART1',
    'GPIO_AF0_USART2', 'GPIO_AF0_LPUART1', 'GPIO_AF0_USB', 'GPIO_AF0_LPTIM1',
    'GPIO_AF0_TSC', 'GPIO_AF0_TIM2', 'GPIO_AF0_TIM21', 'GPIO_AF0_TIM22',
    'GPIO_AF0_EVENTOUT', 'GPIO_AF0_MCO', 'GPIO_AF0_SWDIO', 'GPIO_AF0_SWCLK',
    'GPIO_AF1_SPI1', 'GPIO_AF1_SPI2', 'GPIO_AF1_I2C1', 'GPIO_AF2_SPI2',
    'GPIO_AF2_LPUART1', 'GPIO_AF2_USB', 'GPIO_AF2_LPTIM1', 'GPIO_AF2_TIM2',
    'GPIO_AF2_EVENTOUT', 'GPIO_AF2_RTC', 'GPIO_AF3_I2C1', 'GPIO_AF3_TSC',
    'GPIO_AF3_EVENTOUT', 'GPIO_AF4_I2C1', 'GPIO_AF4_USART1', 'GPIO_AF4_USART2',
    'GPIO_AF4_LPUART1', 'GPIO_AF4_TIM22', 'GPIO_AF4_EVENTOUT', 'GPIO_AF5_SPI2',
    'GPIO_AF5_I2C2', 'GPIO_AF5_TIM2', 'GPIO_AF5_TIM21', 'GPIO_AF5_TIM22',
    'GPIO_AF6_I2C2', 'GPIO_AF6_TIM21', 'GPIO_AF6_EVENTOUT', 'GPIO_AF7_COMP1',
    'GPIO_AF7_COMP2', 'GPIO_AF0_SPI1', 'GPIO_AF0_SPI2', 'GPIO_AF0_USART1',
    'GPIO_AF0_USART2', 'GPIO_AF0_LPUART1', 'GPIO_AF0_LPTIM1', 'GPIO_AF0_TIM2',
    'GPIO_AF0_TIM21', 'GPIO_AF0_TIM22', 'GPIO_AF0_EVENTOUT', 'GPIO_AF0_MCO',
    'GPIO_AF0_SWDIO', 'GPIO_AF0_SWCLK', 'GPIO_AF1_SPI1', 'GPIO_AF1_SPI2',
    'GPIO_AF1_I2C1', 'GPIO_AF2_SPI2', 'GPIO_AF2_LPUART1', 'GPIO_AF2_USB',
    'GPIO_AF2_LPTIM1', 'GPIO_AF2_TIM2', 'GPIO_AF2_EVENTOUT', 'GPIO_AF2_RTC',
    'GPIO_AF3_I2C1', 'GPIO_AF3_EVENTOUT', 'GPIO_AF4_I2C1', 'GPIO_AF4_USART1',
    'GPIO_AF4_USART2', 'GPIO_AF4_LPUART1', 'GPIO_AF4_TIM22', 'GPIO_AF4_EVENTOUT',
    'GPIO_AF5_SPI2', 'GPIO_AF5_I2C2', 'GPIO_AF5_TIM2', 'GPIO_AF5_TIM21',
    'GPIO_AF5_TIM22', 'GPIO_AF6_I2C2', 'GPIO_AF6_TIM21', 'GPIO_AF6_EVENTOUT',
    'GPIO_AF7_COMP1', 'GPIO_AF7_COMP2', 'GPIO_AF0_EVENTOUT', 'GPIO_AF0_TIM21',
    'GPIO_AF0_SPI1', 'GPIO_AF0_USART2', 'GPIO_AF0_LPTIM1', 'GPIO_AF0_MCO',
    'GPIO_AF0_SWDIO', 'GPIO_AF0_SWCLK', 'GPIO_AF1_SPI1', 'GPIO_AF1_I2C1',
    'GPIO_AF2_LPTIM1', 'GPIO_AF2_TIM2', 'GPIO_AF2_EVENTOUT', 'GPIO_AF2_RTC',
    'GPIO_AF3_I2C1', 'GPIO_AF3_EVENTOUT', 'GPIO_AF4_I2C1', 'GPIO_AF4_USART2',
    'GPIO_AF4_LPUART1', 'GPIO_AF4_TIM22', 'GPIO_AF4_EVENTOUT', 'GPIO_AF5_TIM2',
    'GPIO_AF5_TIM21', 'GPIO_AF5_TIM22', 'GPIO_AF6_EVENTOUT', 'GPIO_AF7_COMP1',
    'GPIO_AF7_COMP2', 'GPIO_AF0_EVENTOUT', 'GPIO_AF0_TIM21', 'GPIO_AF0_SPI1',
    'GPIO_AF0_USART2', 'GPIO_AF0_MCO', 'GPIO_AF0_SWDIO', 'GPIO_AF0_SWCLK',
    'GPIO_AF1_SPI1', 'GPIO_AF1_I2C1', 'GPIO_AF2_LPTIM1', 'GPIO_AF2_TIM2',
    'GPIO_AF2_RTC', 'GPIO_AF2_EVENTOUT', 'GPIO_AF3_I2C1', 'GPIO_AF3_EVENTOUT',
    'GPIO_AF4_I2C1', 'GPIO_AF4_USART2', 'GPIO_AF4_LPUART1', 'GPIO_AF4_EVENTOUT',
    'GPIO_AF5_TIM2', 'GPIO_AF5_TIM21', 'GPIO_AF6_EVENTOUT', 'GPIO_AF7_COMP1',
    'GPIO_AF7_COMP2', 'GPIO_AF0_EVENTOUT', 'GPIO_AF0_TIM21', 'GPIO_AF0_SPI1',
    'GPIO_AF0_MCO', 'GPIO_AF0_SWDIO', 'GPIO_AF0_SWCLK', 'GPIO_AF0_LPTIM1',
    'GPIO_AF0_TIM22', 'GPIO_AF0_LPUART1', 'GPIO_AF1_I2C1', 'GPIO_AF2_TIM2',
    'GPIO_AF2_EVENTOUT', 'GPIO_AF2_LPTIM1', 'GPIO_AF2_LPUART1', 'GPIO_AF2_RTC',
    'GPIO_AF3_EVENTOUT', 'GPIO_AF3_I2C1', 'GPIO_AF4_USART2', 'GPIO_AF4_LPUART1',
    'GPIO_AF4_EVENTOUT', 'GPIO_AF4_TIM22', 'GPIO_AF4_I2C1', 'GPIO_AF5_TIM2',
    'GPIO_AF5_TIM21', 'GPIO_AF5_TIM22', 'GPIO_AF6_EVENTOUT', 'GPIO_AF6_TIM21',
    'GPIO_AF0_EVENTOUT', 'GPIO_AF0_TIM21', 'GPIO_AF0_SPI1', 'GPIO_AF0_MCO',
    'GPIO_AF0_SWDIO', 'GPIO_AF0_SWCLK', 'GPIO_AF0_LPTIM1', 'GPIO_AF0_LPUART1',
    'GPIO_AF1_I2C1', 'GPIO_AF2_TIM2', 'GPIO_AF2_EVENTOUT', 'GPIO_AF2_LPTIM1',
    'GPIO_AF2_LPUART1', 'GPIO_AF2_RTC', 'GPIO_AF3_I2C1', 'GPIO_AF3_EVENTOUT',
    'GPIO_AF4_USART2', 'GPIO_AF4_LPUART1', 'GPIO_AF4_I2C1', 'GPIO_AF4_EVENTOUT',
    'GPIO_AF5_TIM2', 'GPIO_AF6_TIM21', 'GPIO_AF6_EVENTOUT', 'GPIO_AF0_EVENTOUT',
    'GPIO_AF0_TIM21', 'GPIO_AF0_SPI1', 'GPIO_AF0_MCO', 'GPIO_AF0_SWDIO',
    'GPIO_AF0_SWCLK', 'GPIO_AF0_USART2', 'GPIO_AF0_LPTIM1', 'GPIO_AF1_I2C1',
    'GPIO_AF2_LPTIM1', 'GPIO_AF2_TIM2', 'GPIO_AF2_EVENTOUT', 'GPIO_AF2_RTC',
    'GPIO_AF3_I2C1', 'GPIO_AF3_EVENTOUT', 'GPIO_AF4_USART2', 'GPIO_AF4_LPUART1',
    'GPIO_AF4_I2C1', 'GPIO_AF4_EVENTOUT', 'GPIO_AF5_TIM2', 'GPIO_AF5_TIM21',
    'GPIO_AF6_EVENTOUT', 'GPIO_AF7_COMP1', 'GPIO_AF7_COMP2', 'GPIO_AF0_USART2',
    'GPIO_AF0_EVENTOUT', 'GPIO_AF0_TIM21', 'GPIO_AF0_SPI1', 'GPIO_AF0_MCO',
    'GPIO_AF0_SWDIO', 'GPIO_AF0_SWCLK', 'GPIO_AF1_SPI1', 'GPIO_AF1_I2C1',
    'GPIO_AF2_LPTIM1', 'GPIO_AF2_TIM2', 'GPIO_AF2_RTC', 'GPIO_AF2_EVENTOUT',
    'GPIO_AF3_I2C1', 'GPIO_AF3_EVENTOUT', 'GPIO_AF4_USART2', 'GPIO_AF4_LPUART1',
    'GPIO_AF4_EVENTOUT', 'GPIO_AF5_TIM2', 'GPIO_AF5_TIM21', 'GPIOA_PIN_AVAILABLE',
    'GPIOB_PIN_AVAILABLE', 'GPIOC_PIN_AVAILABLE', 'GPIOD_PIN_AVAILABLE',
    'GPIOH_PIN_AVAILABLE', 'GPIOA_PIN_AVAILABLE', 'GPIOB_PIN_AVAILABLE',
    'GPIOC_PIN_AVAILABLE', 'GPIOH_PIN_AVAILABLE', 'GPIOA_PIN_AVAILABLE',
    'GPIOB_PIN_AVAILABLE', 'GPIOC_PIN_AVAILABLE', 'GPIOA_PIN_AVAILABLE',
    'GPIOB_PIN_AVAILABLE', 'GPIOC_PIN_AVAILABLE', 'GPIOD_PIN_AVAILABLE',
    'GPIOH_PIN_AVAILABLE', 'GPIO_PIN_RESET', 'GPIO_PIN_SET', 'GPIO_PIN_0', 'GPIO_PIN_1',
    'GPIO_PIN_2', 'GPIO_PIN_3', 'GPIO_PIN_4', 'GPIO_PIN_5', 'GPIO_PIN_6', 'GPIO_PIN_7',
    'GPIO_PIN_8', 'GPIO_PIN_9', 'GPIO_PIN_10', 'GPIO_PIN_11', 'GPIO_PIN_12',
    'GPIO_PIN_13', 'GPIO_PIN_14', 'GPIO_PIN_15', 'GPIO_PIN_All', 'GPIO_PIN_MASK',
    'GPIO_MODE_INPUT', 'GPIO_MODE_OUTPUT_PP', 'GPIO_MODE_OUTPUT_OD', 'GPIO_MODE_AF_PP',
    'GPIO_MODE_AF_OD', 'GPIO_MODE_ANALOG', 'GPIO_MODE_IT_RISING',
    'GPIO_MODE_IT_FALLING', 'GPIO_MODE_IT_RISING_FALLING', 'GPIO_MODE_EVT_RISING',
    'GPIO_MODE_EVT_FALLING', 'GPIO_MODE_EVT_RISING_FALLING', 'GPIO_SPEED_FREQ_LOW',
    'GPIO_SPEED_FREQ_MEDIUM', 'GPIO_SPEED_FREQ_HIGH', 'GPIO_SPEED_FREQ_VERY_HIGH',
    'GPIO_NOPULL', 'GPIO_PULLUP', 'GPIO_PULLDOWN', 'GPIO_InitTypeDef',
    'SYSCFG_BOOT_MAINFLASH', 'SYSCFG_BOOT_SYSTEMFLASH', 'SYSCFG_BOOT_SRAM',
    'DBGMCU_SLEEP', 'DBGMCU_STOP', 'DBGMCU_STANDBY', 'SYSCFG_LCD_EXT_CAPA',
    'SYSCFG_VLCD_PB2_EXT_CAPA_ON', 'SYSCFG_VLCD_PB12_EXT_CAPA_ON',
    'SYSCFG_VLCD_PB0_EXT_CAPA_ON', 'SYSCFG_VREFINT_OUT_NONE', 'SYSCFG_VREFINT_OUT_PB0',
    'SYSCFG_VREFINT_OUT_PB1', 'SYSCFG_VREFINT_OUT_PB0_PB1', 'SYSCFG_FLAG_VREFINT_READY',
    'SYSCFG_FASTMODEPLUS_PB6', 'SYSCFG_FASTMODEPLUS_PB7', 'SYSCFG_FASTMODEPLUS_PB8',
    'SYSCFG_FASTMODEPLUS_PB9', 'I2C_ANALOGFILTER_ENABLE', 'I2C_ANALOGFILTER_DISABLE',
    'I2C_FMP_NOT_SUPPORTED', 'I2C_FASTMODEPLUS_PB6', 'I2C_FASTMODEPLUS_PB7',
    'I2C_FASTMODEPLUS_PB6', 'I2C_FASTMODEPLUS_PB7', 'I2C_FASTMODEPLUS_PB8',
    'I2C_FASTMODEPLUS_PB9', 'I2C_FASTMODEPLUS_PB8', 'I2C_FASTMODEPLUS_PB9',
    'I2C_FASTMODEPLUS_I2C1', 'I2C_FASTMODEPLUS_I2C1', 'I2C_FASTMODEPLUS_I2C2',
    'I2C_FASTMODEPLUS_I2C2', 'I2C_FASTMODEPLUS_I2C3', 'I2C_FASTMODEPLUS_I2C3',
    'HAL_I2C_STATE_RESET', 'HAL_I2C_STATE_READY', 'HAL_I2C_STATE_BUSY',
    'HAL_I2C_STATE_BUSY_TX', 'HAL_I2C_STATE_BUSY_RX', 'HAL_I2C_STATE_LISTEN',
    'HAL_I2C_STATE_BUSY_TX_LISTEN', 'HAL_I2C_STATE_BUSY_RX_LISTEN',
    'HAL_I2C_STATE_ABORT', 'HAL_I2C_STATE_TIMEOUT', 'HAL_I2C_STATE_ERROR',
    'HAL_I2C_MODE_NONE', 'HAL_I2C_MODE_MASTER', 'HAL_I2C_MODE_SLAVE',
    'HAL_I2C_MODE_MEM', 'HAL_I2C_ERROR_NONE', 'HAL_I2C_ERROR_BERR',
    'HAL_I2C_ERROR_ARLO', 'HAL_I2C_ERROR_AF', 'HAL_I2C_ERROR_OVR', 'HAL_I2C_ERROR_DMA',
    'HAL_I2C_ERROR_TIMEOUT', 'HAL_I2C_ERROR_SIZE', 'HAL_I2C_ERROR_DMA_PARAM',
    'HAL_I2C_ERROR_INVALID_PARAM', 'I2C_FIRST_FRAME', 'I2C_FIRST_AND_NEXT_FRAME',
    'I2C_NEXT_FRAME', 'I2C_FIRST_AND_LAST_FRAME', 'I2C_LAST_FRAME',
    'I2C_LAST_FRAME_NO_STOP', 'I2C_OTHER_FRAME', 'I2C_OTHER_AND_LAST_FRAME',
    'I2C_ADDRESSINGMODE_7BIT', 'I2C_ADDRESSINGMODE_10BIT', 'I2C_DUALADDRESS_DISABLE',
    'I2C_DUALADDRESS_ENABLE', 'I2C_OA2_NOMASK', 'I2C_OA2_MASK01', 'I2C_OA2_MASK02',
    'I2C_OA2_MASK03', 'I2C_OA2_MASK04', 'I2C_OA2_MASK05', 'I2C_OA2_MASK06',
    'I2C_OA2_MASK07', 'I2C_GENERALCALL_DISABLE', 'I2C_GENERALCALL_ENABLE',
    'I2C_NOSTRETCH_DISABLE', 'I2C_NOSTRETCH_ENABLE', 'I2C_MEMADD_SIZE_8BIT',
    'I2C_MEMADD_SIZE_16BIT', 'I2C_DIRECTION_TRANSMIT', 'I2C_DIRECTION_RECEIVE',
    'I2C_RELOAD_MODE', 'I2C_AUTOEND_MODE', 'I2C_SOFTEND_MODE', 'I2C_NO_STARTSTOP',
    'I2C_GENERATE_STOP', 'I2C_GENERATE_START_READ', 'I2C_GENERATE_START_WRITE',
    'I2C_IT_ERRI', 'I2C_IT_TCI', 'I2C_IT_STOPI', 'I2C_IT_NACKI', 'I2C_IT_ADDRI',
    'I2C_IT_RXI', 'I2C_IT_TXI', 'I2C_FLAG_TXE', 'I2C_FLAG_TXIS', 'I2C_FLAG_RXNE',
    'I2C_FLAG_ADDR', 'I2C_FLAG_AF', 'I2C_FLAG_STOPF', 'I2C_FLAG_TC', 'I2C_FLAG_TCR',
    'I2C_FLAG_BERR', 'I2C_FLAG_ARLO', 'I2C_FLAG_OVR', 'I2C_FLAG_PECERR',
    'I2C_FLAG_TIMEOUT', 'I2C_FLAG_ALERT', 'I2C_FLAG_BUSY', 'I2C_FLAG_DIR',
    'I2C_FLAG_MASK', 'I2C_InitTypeDef', 'HAL_I2S_STATE_RESET', 'HAL_I2S_STATE_READY',
    'HAL_I2S_STATE_BUSY', 'HAL_I2S_STATE_BUSY_TX', 'HAL_I2S_STATE_BUSY_RX',
    'HAL_I2S_STATE_TIMEOUT', 'HAL_I2S_STATE_ERROR', 'HAL_I2S_ERROR_NONE',
    'HAL_I2S_ERROR_TIMEOUT', 'HAL_I2S_ERROR_OVR', 'HAL_I2S_ERROR_UDR',
    'HAL_I2S_ERROR_DMA', 'HAL_I2S_ERROR_PRESCALER', 'I2S_MODE_SLAVE_TX',
    'I2S_MODE_SLAVE_RX', 'I2S_MODE_MASTER_TX', 'I2S_MODE_MASTER_RX',
    'I2S_STANDARD_PHILIPS', 'I2S_STANDARD_MSB', 'I2S_STANDARD_LSB',
    'I2S_STANDARD_PCM_SHORT', 'I2S_STANDARD_PCM_LONG', 'I2S_DATAFORMAT_16B',
    'I2S_DATAFORMAT_16B_EXTENDED', 'I2S_DATAFORMAT_24B', 'I2S_DATAFORMAT_32B',
    'I2S_MCLKOUTPUT_ENABLE', 'I2S_MCLKOUTPUT_DISABLE', 'I2S_AUDIOFREQ_192K',
    'I2S_AUDIOFREQ_96K', 'I2S_AUDIOFREQ_48K', 'I2S_AUDIOFREQ_44K', 'I2S_AUDIOFREQ_32K',
    'I2S_AUDIOFREQ_22K', 'I2S_AUDIOFREQ_16K', 'I2S_AUDIOFREQ_11K', 'I2S_AUDIOFREQ_8K',
    'I2S_AUDIOFREQ_DEFAULT', 'I2S_CPOL_LOW', 'I2S_CPOL_HIGH', 'I2S_IT_TXE',
    'I2S_IT_RXNE', 'I2S_IT_ERR', 'I2S_FLAG_TXE', 'I2S_FLAG_RXNE', 'I2S_FLAG_UDR',
    'I2S_FLAG_OVR', 'I2S_FLAG_FRE', 'I2S_FLAG_CHSIDE', 'I2S_FLAG_BSY',
    'I2S_InitTypeDef', 'IRDA_WORDLENGTH_7B', 'IRDA_WORDLENGTH_8B', 'IRDA_WORDLENGTH_9B',
    'IRDA_CLOCKSOURCE_PCLK1', 'IRDA_CLOCKSOURCE_PCLK2', 'IRDA_CLOCKSOURCE_HSI',
    'IRDA_CLOCKSOURCE_SYSCLK', 'IRDA_CLOCKSOURCE_LSE', 'IRDA_CLOCKSOURCE_UNDEFINED',
    'HAL_IRDA_STATE_RESET', 'HAL_IRDA_STATE_READY', 'HAL_IRDA_STATE_BUSY',
    'HAL_IRDA_STATE_BUSY_TX', 'HAL_IRDA_STATE_BUSY_RX', 'HAL_IRDA_STATE_BUSY_TX_RX',
    'HAL_IRDA_STATE_TIMEOUT', 'HAL_IRDA_STATE_ERROR', 'HAL_IRDA_ERROR_NONE',
    'HAL_IRDA_ERROR_PE', 'HAL_IRDA_ERROR_NE', 'HAL_IRDA_ERROR_FE', 'HAL_IRDA_ERROR_ORE',
    'HAL_IRDA_ERROR_DMA', 'HAL_IRDA_ERROR_BUSY', 'IRDA_PARITY_NONE', 'IRDA_PARITY_EVEN',
    'IRDA_PARITY_ODD', 'IRDA_MODE_RX', 'IRDA_MODE_TX', 'IRDA_MODE_TX_RX',
    'IRDA_POWERMODE_NORMAL', 'IRDA_POWERMODE_LOWPOWER', 'IRDA_STATE_DISABLE',
    'IRDA_STATE_ENABLE', 'IRDA_MODE_DISABLE', 'IRDA_MODE_ENABLE',
    'IRDA_ONE_BIT_SAMPLE_DISABLE', 'IRDA_ONE_BIT_SAMPLE_ENABLE', 'IRDA_DMA_TX_DISABLE',
    'IRDA_DMA_TX_ENABLE', 'IRDA_DMA_RX_DISABLE', 'IRDA_DMA_RX_ENABLE',
    'IRDA_AUTOBAUD_REQUEST', 'IRDA_RXDATA_FLUSH_REQUEST', 'IRDA_TXDATA_FLUSH_REQUEST',
    'IRDA_FLAG_REACK', 'IRDA_FLAG_TEACK', 'IRDA_FLAG_BUSY', 'IRDA_FLAG_ABRF',
    'IRDA_FLAG_ABRE', 'IRDA_FLAG_TXE', 'IRDA_FLAG_TC', 'IRDA_FLAG_RXNE',
    'IRDA_FLAG_ORE', 'IRDA_FLAG_NE', 'IRDA_FLAG_FE', 'IRDA_FLAG_PE', 'IRDA_IT_PE',
    'IRDA_IT_TXE', 'IRDA_IT_TC', 'IRDA_IT_RXNE', 'IRDA_IT_IDLE', 'IRDA_IT_ERR',
    'IRDA_IT_ORE', 'IRDA_IT_NE', 'IRDA_IT_FE', 'IRDA_CLEAR_PEF', 'IRDA_CLEAR_FEF',
    'IRDA_CLEAR_NEF', 'IRDA_CLEAR_OREF', 'IRDA_CLEAR_IDLEF', 'IRDA_CLEAR_TCF',
    'IRDA_IT_MASK', 'IRDA_CR_MASK', 'IRDA_CR_POS', 'IRDA_ISR_MASK', 'IRDA_ISR_POS',
    'IRDA_InitTypeDef', 'IWDG_PRESCALER_4', 'IWDG_PRESCALER_8', 'IWDG_PRESCALER_16',
    'IWDG_PRESCALER_32', 'IWDG_PRESCALER_64', 'IWDG_PRESCALER_128',
    'IWDG_PRESCALER_256', 'IWDG_WINDOW_DISABLE', 'IWDG_KEY_RELOAD', 'IWDG_KEY_ENABLE',
    'IWDG_KEY_WRITE_ACCESS_ENABLE', 'IWDG_KEY_WRITE_ACCESS_DISABLE', 'IWDG_InitTypeDef',
    'HAL_LCD_STATE_RESET', 'HAL_LCD_STATE_READY', 'HAL_LCD_STATE_BUSY',
    'HAL_LCD_STATE_TIMEOUT', 'HAL_LCD_STATE_ERROR', 'HAL_LCD_ERROR_NONE',
    'HAL_LCD_ERROR_FCRSF', 'HAL_LCD_ERROR_UDR', 'HAL_LCD_ERROR_UDD',
    'HAL_LCD_ERROR_ENS', 'HAL_LCD_ERROR_RDY', 'LCD_PRESCALER_1', 'LCD_PRESCALER_2',
    'LCD_PRESCALER_4', 'LCD_PRESCALER_8', 'LCD_PRESCALER_16', 'LCD_PRESCALER_32',
    'LCD_PRESCALER_64', 'LCD_PRESCALER_128', 'LCD_PRESCALER_256', 'LCD_PRESCALER_512',
    'LCD_PRESCALER_1024', 'LCD_PRESCALER_2048', 'LCD_PRESCALER_4096',
    'LCD_PRESCALER_8192', 'LCD_PRESCALER_16384', 'LCD_PRESCALER_32768',
    'LCD_DIVIDER_16', 'LCD_DIVIDER_17', 'LCD_DIVIDER_18', 'LCD_DIVIDER_19',
    'LCD_DIVIDER_20', 'LCD_DIVIDER_21', 'LCD_DIVIDER_22', 'LCD_DIVIDER_23',
    'LCD_DIVIDER_24', 'LCD_DIVIDER_25', 'LCD_DIVIDER_26', 'LCD_DIVIDER_27',
    'LCD_DIVIDER_28', 'LCD_DIVIDER_29', 'LCD_DIVIDER_30', 'LCD_DIVIDER_31',
    'LCD_DUTY_STATIC', 'LCD_DUTY_1_2', 'LCD_DUTY_1_3', 'LCD_DUTY_1_4', 'LCD_DUTY_1_8',
    'LCD_BIAS_1_4', 'LCD_BIAS_1_2', 'LCD_BIAS_1_3', 'LCD_VOLTAGESOURCE_INTERNAL',
    'LCD_VOLTAGESOURCE_EXTERNAL', 'LCD_IT_SOF', 'LCD_IT_UDD', 'LCD_PULSEONDURATION_0',
    'LCD_PULSEONDURATION_1', 'LCD_PULSEONDURATION_2', 'LCD_PULSEONDURATION_3',
    'LCD_PULSEONDURATION_4', 'LCD_PULSEONDURATION_5', 'LCD_PULSEONDURATION_6',
    'LCD_PULSEONDURATION_7', 'LCD_HIGHDRIVE_0', 'LCD_HIGHDRIVE_1', 'LCD_DEADTIME_0',
    'LCD_DEADTIME_1', 'LCD_DEADTIME_2', 'LCD_DEADTIME_3', 'LCD_DEADTIME_4',
    'LCD_DEADTIME_5', 'LCD_DEADTIME_6', 'LCD_DEADTIME_7', 'LCD_BLINKMODE_OFF',
    'LCD_BLINKMODE_SEG0_COM0', 'LCD_BLINKMODE_SEG0_ALLCOM',
    'LCD_BLINKMODE_ALLSEG_ALLCOM', 'LCD_BLINKFREQUENCY_DIV8',
    'LCD_BLINKFREQUENCY_DIV16', 'LCD_BLINKFREQUENCY_DIV32', 'LCD_BLINKFREQUENCY_DIV64',
    'LCD_BLINKFREQUENCY_DIV128', 'LCD_BLINKFREQUENCY_DIV256',
    'LCD_BLINKFREQUENCY_DIV512', 'LCD_BLINKFREQUENCY_DIV1024', 'LCD_CONTRASTLEVEL_0',
    'LCD_CONTRASTLEVEL_1', 'LCD_CONTRASTLEVEL_2', 'LCD_CONTRASTLEVEL_3',
    'LCD_CONTRASTLEVEL_4', 'LCD_CONTRASTLEVEL_5', 'LCD_CONTRASTLEVEL_6',
    'LCD_CONTRASTLEVEL_7', 'LCD_MUXSEGMENT_DISABLE', 'LCD_MUXSEGMENT_ENABLE',
    'LCD_VOLTBUFOUT_DISABLE', 'LCD_VOLTBUFOUT_ENABLE', 'LCD_FLAG_ENS', 'LCD_FLAG_SOF',
    'LCD_FLAG_UDR', 'LCD_FLAG_UDD', 'LCD_FLAG_RDY', 'LCD_FLAG_FCRSF',
    'LCD_RAM_REGISTER0', 'LCD_RAM_REGISTER1', 'LCD_RAM_REGISTER2', 'LCD_RAM_REGISTER3',
    'LCD_RAM_REGISTER4', 'LCD_RAM_REGISTER5', 'LCD_RAM_REGISTER6', 'LCD_RAM_REGISTER7',
    'LCD_RAM_REGISTER8', 'LCD_RAM_REGISTER9', 'LCD_RAM_REGISTER10',
    'LCD_RAM_REGISTER11', 'LCD_RAM_REGISTER12', 'LCD_RAM_REGISTER13',
    'LCD_RAM_REGISTER14', 'LCD_RAM_REGISTER15', 'LCD_InitTypeDef',
    'LPTIM_TRIGSOURCE_SOFTWARE', 'LPTIM_TRIGSOURCE_0', 'LPTIM_TRIGSOURCE_1',
    'LPTIM_TRIGSOURCE_2', 'LPTIM_TRIGSOURCE_3', 'LPTIM_TRIGSOURCE_4',
    'LPTIM_TRIGSOURCE_5', 'LPTIM_TRIGSOURCE_6', 'LPTIM_TRIGSOURCE_7',
    'HAL_LPTIM_STATE_RESET', 'HAL_LPTIM_STATE_READY', 'HAL_LPTIM_STATE_BUSY',
    'HAL_LPTIM_STATE_TIMEOUT', 'HAL_LPTIM_STATE_ERROR',
    'LPTIM_EXTI_LINE_WAKEUPTIMER_EVENT', 'LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC',
    'LPTIM_CLOCKSOURCE_ULPTIM', 'LPTIM_PRESCALER_DIV1', 'LPTIM_PRESCALER_DIV2',
    'LPTIM_PRESCALER_DIV4', 'LPTIM_PRESCALER_DIV8', 'LPTIM_PRESCALER_DIV16',
    'LPTIM_PRESCALER_DIV32', 'LPTIM_PRESCALER_DIV64', 'LPTIM_PRESCALER_DIV128',
    'LPTIM_OUTPUTPOLARITY_HIGH', 'LPTIM_OUTPUTPOLARITY_LOW',
    'LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION', 'LPTIM_CLOCKSAMPLETIME_2TRANSITIONS',
    'LPTIM_CLOCKSAMPLETIME_4TRANSITIONS', 'LPTIM_CLOCKSAMPLETIME_8TRANSITIONS',
    'LPTIM_CLOCKPOLARITY_RISING', 'LPTIM_CLOCKPOLARITY_FALLING',
    'LPTIM_CLOCKPOLARITY_RISING_FALLING', 'LPTIM_TRIGSOURCE_SOFTWARE',
    'LPTIM_TRIGSOURCE_0', 'LPTIM_TRIGSOURCE_1', 'LPTIM_TRIGSOURCE_2',
    'LPTIM_TRIGSOURCE_3', 'LPTIM_TRIGSOURCE_4', 'LPTIM_TRIGSOURCE_5',
    'LPTIM_TRIGSOURCE_6', 'LPTIM_TRIGSOURCE_7', 'LPTIM_ACTIVEEDGE_RISING',
    'LPTIM_ACTIVEEDGE_FALLING', 'LPTIM_ACTIVEEDGE_RISING_FALLING',
    'LPTIM_TRIGSAMPLETIME_DIRECTTRANSITION', 'LPTIM_TRIGSAMPLETIME_2TRANSITIONS',
    'LPTIM_TRIGSAMPLETIME_4TRANSITIONS', 'LPTIM_TRIGSAMPLETIME_8TRANSITIONS',
    'LPTIM_UPDATE_IMMEDIATE', 'LPTIM_UPDATE_ENDOFPERIOD',
    'LPTIM_COUNTERSOURCE_INTERNAL', 'LPTIM_COUNTERSOURCE_EXTERNAL', 'LPTIM_FLAG_DOWN',
    'LPTIM_FLAG_UP', 'LPTIM_FLAG_ARROK', 'LPTIM_FLAG_CMPOK', 'LPTIM_FLAG_EXTTRIG',
    'LPTIM_FLAG_ARRM', 'LPTIM_FLAG_CMPM', 'LPTIM_IT_DOWN', 'LPTIM_IT_UP',
    'LPTIM_IT_ARROK', 'LPTIM_IT_CMPOK', 'LPTIM_IT_EXTTRIG', 'LPTIM_IT_ARRM',
    'LPTIM_IT_CMPM', 'LPTIM_ClockConfigTypeDef', 'LPTIM_ULPClockConfigTypeDef',
    'LPTIM_TriggerConfigTypeDef', 'RCC_CRS_IT_ERROR_MASK', 'RCC_CRS_FLAG_ERROR_MASK',
    'RCC_EXTI_LINE_LSECSS', 'RCC_PERIPHCLK_USART1', 'RCC_PERIPHCLK_USART2',
    'RCC_PERIPHCLK_LPUART1', 'RCC_PERIPHCLK_I2C1', 'RCC_PERIPHCLK_I2C2',
    'RCC_PERIPHCLK_RTC', 'RCC_PERIPHCLK_USB', 'RCC_PERIPHCLK_LPTIM1',
    'RCC_PERIPHCLK_LCD', 'RCC_USART1CLKSOURCE_PCLK2', 'RCC_USART1CLKSOURCE_SYSCLK',
    'RCC_USART1CLKSOURCE_HSI', 'RCC_USART1CLKSOURCE_LSE', 'RCC_USART2CLKSOURCE_PCLK1',
    'RCC_USART2CLKSOURCE_SYSCLK', 'RCC_USART2CLKSOURCE_HSI', 'RCC_USART2CLKSOURCE_LSE',
    'RCC_LPUART1CLKSOURCE_PCLK1', 'RCC_LPUART1CLKSOURCE_SYSCLK',
    'RCC_LPUART1CLKSOURCE_HSI', 'RCC_LPUART1CLKSOURCE_LSE', 'RCC_I2C1CLKSOURCE_PCLK1',
    'RCC_I2C1CLKSOURCE_SYSCLK', 'RCC_I2C1CLKSOURCE_HSI', 'RCC_TIMPRES_DESACTIVATED',
    'RCC_TIMPRES_ACTIVATED', 'RCC_USBCLKSOURCE_HSI48', 'RCC_USBCLKSOURCE_PLL',
    'RCC_RNGCLKSOURCE_HSI48', 'RCC_RNGCLKSOURCE_PLLCLK', 'RCC_FLAG_HSI48',
    'RCC_HSI48M_PLL', 'RCC_HSI48M_HSI48', 'RCC_LPTIM1CLKSOURCE_PCLK1',
    'RCC_LPTIM1CLKSOURCE_LSI', 'RCC_LPTIM1CLKSOURCE_HSI', 'RCC_LPTIM1CLKSOURCE_LSE',
    'RCC_STOP_WAKEUPCLOCK_MSI', 'RCC_STOP_WAKEUPCLOCK_HSI', 'RCC_LSEDRIVE_LOW',
    'RCC_LSEDRIVE_MEDIUMLOW', 'RCC_LSEDRIVE_MEDIUMHIGH', 'RCC_LSEDRIVE_HIGH',
    'RCC_CRS_NONE', 'RCC_CRS_TIMEOUT', 'RCC_CRS_SYNCOK', 'RCC_CRS_SYNCWARN',
    'RCC_CRS_SYNCERR', 'RCC_CRS_SYNCMISS', 'RCC_CRS_TRIMOVF',
    'RCC_CRS_SYNC_SOURCE_GPIO', 'RCC_CRS_SYNC_SOURCE_LSE', 'RCC_CRS_SYNC_SOURCE_USB',
    'RCC_CRS_SYNC_DIV1', 'RCC_CRS_SYNC_DIV2', 'RCC_CRS_SYNC_DIV4', 'RCC_CRS_SYNC_DIV8',
    'RCC_CRS_SYNC_DIV16', 'RCC_CRS_SYNC_DIV32', 'RCC_CRS_SYNC_DIV64',
    'RCC_CRS_SYNC_DIV128', 'RCC_CRS_SYNC_POLARITY_RISING',
    'RCC_CRS_SYNC_POLARITY_FALLING', 'RCC_CRS_RELOADVALUE_DEFAULT',
    'RCC_CRS_ERRORLIMIT_DEFAULT', 'RCC_CRS_HSI48CALIBRATION_DEFAULT',
    'RCC_CRS_FREQERRORDIR_UP', 'RCC_CRS_FREQERRORDIR_DOWN', 'RCC_CRS_IT_SYNCOK',
    'RCC_CRS_IT_SYNCWARN', 'RCC_CRS_IT_ERR', 'RCC_CRS_IT_ESYNC', 'RCC_CRS_IT_SYNCERR',
    'RCC_CRS_IT_SYNCMISS', 'RCC_CRS_IT_TRIMOVF', 'RCC_CRS_FLAG_SYNCOK',
    'RCC_CRS_FLAG_SYNCWARN', 'RCC_CRS_FLAG_ERR', 'RCC_CRS_FLAG_ESYNC',
    'RCC_CRS_FLAG_SYNCERR', 'RCC_CRS_FLAG_SYNCMISS', 'RCC_CRS_FLAG_TRIMOVF',
    'RCC_PeriphCLKInitTypeDef', 'RCC_CRSInitTypeDef', 'RCC_CRSSynchroInfoTypeDef',
    'RCC_DBP_TIMEOUT_VALUE', 'RCC_LSE_TIMEOUT_VALUE', 'CLOCKSWITCH_TIMEOUT_VALUE',
    'HSE_TIMEOUT_VALUE', 'MSI_TIMEOUT_VALUE', 'HSI_TIMEOUT_VALUE', 'LSI_TIMEOUT_VALUE',
    'PLL_TIMEOUT_VALUE', 'HSI48_TIMEOUT_VALUE', 'RCC_OFFSET', 'RCC_CR_OFFSET',
    'RCC_CFGR_OFFSET', 'RCC_CSR_OFFSET', 'RCC_CR_BYTE2_ADDRESS', 'CIER_BYTE0_ADDRESS',
    'CR_REG_INDEX', 'CSR_REG_INDEX', 'CRRCR_REG_INDEX', 'RCC_FLAG_MASK',
    'RCC_PLLSOURCE_HSI', 'RCC_PLLSOURCE_HSE', 'RCC_OSCILLATORTYPE_NONE',
    'RCC_OSCILLATORTYPE_HSE', 'RCC_OSCILLATORTYPE_HSI', 'RCC_OSCILLATORTYPE_LSE',
    'RCC_OSCILLATORTYPE_LSI', 'RCC_OSCILLATORTYPE_MSI', 'RCC_OSCILLATORTYPE_HSI48',
    'RCC_HSE_OFF', 'RCC_HSE_ON', 'RCC_HSE_BYPASS', 'RCC_LSE_OFF', 'RCC_LSE_ON',
    'RCC_LSE_BYPASS', 'RCC_HSI_OFF', 'RCC_HSI_ON', 'RCC_HSI_DIV4',
    'RCC_HSICALIBRATION_DEFAULT', 'RCC_MSIRANGE_0', 'RCC_MSIRANGE_1', 'RCC_MSIRANGE_2',
    'RCC_MSIRANGE_3', 'RCC_MSIRANGE_4', 'RCC_MSIRANGE_5', 'RCC_MSIRANGE_6',
    'RCC_LSI_OFF', 'RCC_LSI_ON', 'RCC_MSI_OFF', 'RCC_MSI_ON',
    'RCC_MSICALIBRATION_DEFAULT', 'RCC_HSI48_OFF', 'RCC_HSI48_ON', 'RCC_PLL_NONE',
    'RCC_PLL_OFF', 'RCC_PLL_ON', 'RCC_CLOCKTYPE_SYSCLK', 'RCC_CLOCKTYPE_HCLK',
    'RCC_CLOCKTYPE_PCLK1', 'RCC_CLOCKTYPE_PCLK2', 'RCC_SYSCLKSOURCE_MSI',
    'RCC_SYSCLKSOURCE_HSI', 'RCC_SYSCLKSOURCE_HSE', 'RCC_SYSCLKSOURCE_PLLCLK',
    'RCC_SYSCLKSOURCE_STATUS_MSI', 'RCC_SYSCLKSOURCE_STATUS_HSI',
    'RCC_SYSCLKSOURCE_STATUS_HSE', 'RCC_SYSCLKSOURCE_STATUS_PLLCLK', 'RCC_SYSCLK_DIV1',
    'RCC_SYSCLK_DIV2', 'RCC_SYSCLK_DIV4', 'RCC_SYSCLK_DIV8', 'RCC_SYSCLK_DIV16',
    'RCC_SYSCLK_DIV64', 'RCC_SYSCLK_DIV128', 'RCC_SYSCLK_DIV256', 'RCC_SYSCLK_DIV512',
    'RCC_HCLK_DIV1', 'RCC_HCLK_DIV2', 'RCC_HCLK_DIV4', 'RCC_HCLK_DIV8',
    'RCC_HCLK_DIV16', 'RCC_RTC_HSE_DIV_2', 'RCC_RTC_HSE_DIV_4', 'RCC_RTC_HSE_DIV_8',
    'RCC_RTC_HSE_DIV_16', 'RCC_RTCCLKSOURCE_NO_CLK', 'RCC_RTCCLKSOURCE_LSE',
    'RCC_RTCCLKSOURCE_LSI', 'RCC_RTCCLKSOURCE_HSE_DIVX', 'RCC_RTCCLKSOURCE_HSE_DIV2',
    'RCC_RTCCLKSOURCE_HSE_DIV4', 'RCC_RTCCLKSOURCE_HSE_DIV8',
    'RCC_RTCCLKSOURCE_HSE_DIV16', 'RCC_PLL_DIV2', 'RCC_PLL_DIV3', 'RCC_PLL_DIV4',
    'RCC_PLL_MUL3', 'RCC_PLL_MUL4', 'RCC_PLL_MUL6', 'RCC_PLL_MUL8', 'RCC_PLL_MUL12',
    'RCC_PLL_MUL16', 'RCC_PLL_MUL24', 'RCC_PLL_MUL32', 'RCC_PLL_MUL48', 'RCC_MCO1',
    'RCC_MCO2', 'RCC_MCODIV_1', 'RCC_MCODIV_2', 'RCC_MCODIV_4', 'RCC_MCODIV_8',
    'RCC_MCODIV_16', 'RCC_MCO1SOURCE_NOCLOCK', 'RCC_MCO1SOURCE_SYSCLK',
    'RCC_MCO1SOURCE_MSI', 'RCC_MCO1SOURCE_HSI', 'RCC_MCO1SOURCE_LSE',
    'RCC_MCO1SOURCE_LSI', 'RCC_MCO1SOURCE_HSE', 'RCC_MCO1SOURCE_PLLCLK',
    'RCC_MCO1SOURCE_HSI48', 'RCC_IT_LSIRDY', 'RCC_IT_LSERDY', 'RCC_IT_HSIRDY',
    'RCC_IT_HSERDY', 'RCC_IT_PLLRDY', 'RCC_IT_MSIRDY', 'RCC_IT_LSECSS', 'RCC_IT_CSS',
    'RCC_IT_HSI48RDY', 'RCC_FLAG_HSIRDY', 'RCC_FLAG_HSIDIV', 'RCC_FLAG_MSIRDY',
    'RCC_FLAG_HSERDY', 'RCC_FLAG_PLLRDY', 'RCC_FLAG_LSIRDY', 'RCC_FLAG_LSERDY',
    'RCC_FLAG_LSECSS', 'RCC_FLAG_OBLRST', 'RCC_FLAG_PINRST', 'RCC_FLAG_PORRST',
    'RCC_FLAG_SFTRST', 'RCC_FLAG_IWDGRST', 'RCC_FLAG_WWDGRST', 'RCC_FLAG_LPWRRST',
    'RCC_FLAG_FWRST', 'RCC_FLAG_HSI48RDY', 'RCC_PLLInitTypeDef', 'RCC_ClkInitTypeDef',
    'HAL_RNG_STATE_RESET', 'HAL_RNG_STATE_READY', 'HAL_RNG_STATE_BUSY',
    'HAL_RNG_STATE_TIMEOUT', 'HAL_RNG_STATE_ERROR', 'RNG_IT_DRDY', 'RNG_IT_CEI',
    'RNG_IT_SEI', 'RNG_FLAG_DRDY', 'RNG_FLAG_CECS', 'RNG_FLAG_SECS',
    'HAL_RNG_ERROR_NONE', 'HAL_RNG_ERROR_TIMEOUT', 'RNG_HandleTypeDef',
    'RTC_OUTPUT_DISABLE', 'RTC_OUTPUT_ALARMA', 'RTC_OUTPUT_ALARMB', 'RTC_OUTPUT_WAKEUP',
    'RTC_BKP_DR0', 'RTC_BKP_DR1', 'RTC_BKP_DR2', 'RTC_BKP_DR3', 'RTC_BKP_DR4',
    'RTC_TIMESTAMPEDGE_RISING', 'RTC_TIMESTAMPEDGE_FALLING', 'RTC_TIMESTAMPPIN_DEFAULT',
    'RTC_TAMPER_1', 'RTC_TAMPER_2', 'RTC_TAMPER1_INTERRUPT', 'RTC_TAMPER2_INTERRUPT',
    'RTC_ALL_TAMPER_INTERRUPT', 'RTC_TAMPERTRIGGER_RISINGEDGE',
    'RTC_TAMPERTRIGGER_FALLINGEDGE', 'RTC_TAMPERTRIGGER_LOWLEVEL',
    'RTC_TAMPERTRIGGER_HIGHLEVEL', 'RTC_TAMPER_ERASE_BACKUP_ENABLE',
    'RTC_TAMPER_ERASE_BACKUP_DISABLE', 'RTC_TAMPERMASK_FLAG_DISABLE',
    'RTC_TAMPERMASK_FLAG_ENABLE', 'RTC_TAMPERFILTER_DISABLE',
    'RTC_TAMPERFILTER_2SAMPLE', 'RTC_TAMPERFILTER_4SAMPLE', 'RTC_TAMPERFILTER_8SAMPLE',
    'RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV32768', 'RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV16384',
    'RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV8192', 'RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV4096',
    'RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV2048', 'RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV1024',
    'RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV512', 'RTC_TAMPERSAMPLINGFREQ_RTCCLK_DIV256',
    'RTC_TAMPERPRECHARGEDURATION_1RTCCLK', 'RTC_TAMPERPRECHARGEDURATION_2RTCCLK',
    'RTC_TAMPERPRECHARGEDURATION_4RTCCLK', 'RTC_TAMPERPRECHARGEDURATION_8RTCCLK',
    'RTC_TIMESTAMPONTAMPERDETECTION_ENABLE', 'RTC_TIMESTAMPONTAMPERDETECTION_DISABLE',
    'RTC_TAMPER_PULLUP_ENABLE', 'RTC_TAMPER_PULLUP_DISABLE',
    'RTC_WAKEUPCLOCK_RTCCLK_DIV16', 'RTC_WAKEUPCLOCK_RTCCLK_DIV8',
    'RTC_WAKEUPCLOCK_RTCCLK_DIV4', 'RTC_WAKEUPCLOCK_RTCCLK_DIV2',
    'RTC_WAKEUPCLOCK_CK_SPRE_16BITS', 'RTC_WAKEUPCLOCK_CK_SPRE_17BITS',
    'RTC_SMOOTHCALIB_PERIOD_32SEC', 'RTC_SMOOTHCALIB_PERIOD_16SEC',
    'RTC_SMOOTHCALIB_PERIOD_8SEC', 'RTC_SMOOTHCALIB_PLUSPULSES_SET',
    'RTC_SMOOTHCALIB_PLUSPULSES_RESET', 'RTC_CALIBOUTPUT_512HZ', 'RTC_CALIBOUTPUT_1HZ',
    'RTC_SHIFTADD1S_RESET', 'RTC_SHIFTADD1S_SET', 'RTC_FLAGS_MASK', 'RTC_TAMPCR_TAMPXE',
    'RTC_TAMPCR_TAMPXIE', 'RTC_FLAGS_MASK', 'RTC_TAMPCR_TAMPXE', 'RTC_TAMPCR_TAMPXIE',
    'RTC_FLAGS_MASK', 'RTC_TAMPCR_TAMPXE', 'RTC_TAMPCR_TAMPXIE',
    'RTC_EXTI_LINE_TAMPER_TIMESTAMP_EVENT', 'RTC_EXTI_LINE_WAKEUPTIMER_EVENT',
    'RTC_TamperTypeDef', 'SMARTCARD_TC', 'SMARTCARD_ADVFEATURE_NO_INIT',
    'SMARTCARD_ADVFEATURE_TXINVERT_INIT', 'SMARTCARD_ADVFEATURE_RXINVERT_INIT',
    'SMARTCARD_ADVFEATURE_DATAINVERT_INIT', 'SMARTCARD_ADVFEATURE_SWAP_INIT',
    'SMARTCARD_ADVFEATURE_RXOVERRUNDISABLE_INIT',
    'SMARTCARD_ADVFEATURE_DMADISABLEONERROR_INIT', 'SMARTCARD_ADVFEATURE_MSBFIRST_INIT',
    'SMARTCARD_FLAG_REACK', 'SMARTCARD_FLAG_TEACK', 'SMARTCARD_FLAG_BUSY',
    'SMARTCARD_FLAG_EOBF', 'SMARTCARD_FLAG_RTOF', 'SMARTCARD_FLAG_TXE',
    'SMARTCARD_FLAG_TC', 'SMARTCARD_FLAG_RXNE', 'SMARTCARD_FLAG_IDLE',
    'SMARTCARD_FLAG_ORE', 'SMARTCARD_FLAG_NE', 'SMARTCARD_FLAG_FE', 'SMARTCARD_FLAG_PE',
    'SMARTCARD_IT_PE', 'SMARTCARD_IT_TXE', 'SMARTCARD_IT_TC', 'SMARTCARD_IT_RXNE',
    'SMARTCARD_IT_IDLE', 'SMARTCARD_IT_ERR', 'SMARTCARD_IT_ORE', 'SMARTCARD_IT_NE',
    'SMARTCARD_IT_FE', 'SMARTCARD_IT_EOB', 'SMARTCARD_IT_RTO', 'SMARTCARD_CLEAR_PEF',
    'SMARTCARD_CLEAR_FEF', 'SMARTCARD_CLEAR_NEF', 'SMARTCARD_CLEAR_OREF',
    'SMARTCARD_CLEAR_IDLEF', 'SMARTCARD_CLEAR_TCF', 'SMARTCARD_CLEAR_RTOF',
    'SMARTCARD_CLEAR_EOBF', 'SMARTCARD_CLOCKSOURCE_PCLK1',
    'SMARTCARD_CLOCKSOURCE_PCLK2', 'SMARTCARD_CLOCKSOURCE_HSI',
    'SMARTCARD_CLOCKSOURCE_SYSCLK', 'SMARTCARD_CLOCKSOURCE_LSE',
    'SMARTCARD_CLOCKSOURCE_UNDEFINED', 'HAL_SMARTCARD_STATE_RESET',
    'HAL_SMARTCARD_STATE_READY', 'HAL_SMARTCARD_STATE_BUSY',
    'HAL_SMARTCARD_STATE_BUSY_TX', 'HAL_SMARTCARD_STATE_BUSY_RX',
    'HAL_SMARTCARD_STATE_BUSY_TX_RX', 'HAL_SMARTCARD_STATE_TIMEOUT',
    'HAL_SMARTCARD_STATE_ERROR', 'HAL_SMARTCARD_ERROR_NONE', 'HAL_SMARTCARD_ERROR_PE',
    'HAL_SMARTCARD_ERROR_NE', 'HAL_SMARTCARD_ERROR_FE', 'HAL_SMARTCARD_ERROR_ORE',
    'HAL_SMARTCARD_ERROR_DMA', 'HAL_SMARTCARD_ERROR_RTO', 'SMARTCARD_WORDLENGTH_9B',
    'SMARTCARD_STOPBITS_0_5', 'SMARTCARD_STOPBITS_1_5', 'SMARTCARD_PARITY_EVEN',
    'SMARTCARD_PARITY_ODD', 'SMARTCARD_MODE_RX', 'SMARTCARD_MODE_TX',
    'SMARTCARD_MODE_TX_RX', 'SMARTCARD_POLARITY_LOW', 'SMARTCARD_POLARITY_HIGH',
    'SMARTCARD_PHASE_1EDGE', 'SMARTCARD_PHASE_2EDGE', 'SMARTCARD_LASTBIT_DISABLE',
    'SMARTCARD_LASTBIT_ENABLE', 'SMARTCARD_ONE_BIT_SAMPLE_DISABLE',
    'SMARTCARD_ONE_BIT_SAMPLE_ENABLE', 'SMARTCARD_NACK_DISABLE',
    'SMARTCARD_NACK_ENABLE', 'SMARTCARD_TIMEOUT_DISABLE', 'SMARTCARD_TIMEOUT_ENABLE',
    'SMARTCARD_ADVFEATURE_TXINV_DISABLE', 'SMARTCARD_ADVFEATURE_TXINV_ENABLE',
    'SMARTCARD_ADVFEATURE_RXINV_DISABLE', 'SMARTCARD_ADVFEATURE_RXINV_ENABLE',
    'SMARTCARD_ADVFEATURE_DATAINV_DISABLE', 'SMARTCARD_ADVFEATURE_DATAINV_ENABLE',
    'SMARTCARD_ADVFEATURE_SWAP_DISABLE', 'SMARTCARD_ADVFEATURE_SWAP_ENABLE',
    'SMARTCARD_ADVFEATURE_OVERRUN_ENABLE', 'SMARTCARD_ADVFEATURE_OVERRUN_DISABLE',
    'SMARTCARD_ADVFEATURE_DMA_ENABLEONRXERROR',
    'SMARTCARD_ADVFEATURE_DMA_DISABLEONRXERROR',
    'SMARTCARD_ADVFEATURE_MSBFIRST_DISABLE', 'SMARTCARD_ADVFEATURE_MSBFIRST_ENABLE',
    'SMARTCARD_RXDATA_FLUSH_REQUEST', 'SMARTCARD_TXDATA_FLUSH_REQUEST',
    'SMARTCARD_IT_MASK', 'SMARTCARD_CR_MASK', 'SMARTCARD_CR_POS', 'SMARTCARD_ISR_MASK',
    'SMARTCARD_ISR_POS', 'SMARTCARD_InitTypeDef', 'SMARTCARD_AdvFeatureInitTypeDef',
    'HAL_SMBUS_STATE_RESET', 'HAL_SMBUS_STATE_READY', 'HAL_SMBUS_STATE_BUSY',
    'HAL_SMBUS_STATE_MASTER_BUSY_TX', 'HAL_SMBUS_STATE_MASTER_BUSY_RX',
    'HAL_SMBUS_STATE_SLAVE_BUSY_TX', 'HAL_SMBUS_STATE_SLAVE_BUSY_RX',
    'HAL_SMBUS_STATE_TIMEOUT', 'HAL_SMBUS_STATE_ERROR', 'HAL_SMBUS_STATE_LISTEN',
    'HAL_SMBUS_ERROR_NONE', 'HAL_SMBUS_ERROR_BERR', 'HAL_SMBUS_ERROR_ARLO',
    'HAL_SMBUS_ERROR_ACKF', 'HAL_SMBUS_ERROR_OVR', 'HAL_SMBUS_ERROR_HALTIMEOUT',
    'HAL_SMBUS_ERROR_BUSTIMEOUT', 'HAL_SMBUS_ERROR_ALERT', 'HAL_SMBUS_ERROR_PECERR',
    'HAL_SMBUS_ERROR_INVALID_PARAM', 'SMBUS_ANALOGFILTER_ENABLE',
    'SMBUS_ANALOGFILTER_DISABLE', 'SMBUS_ADDRESSINGMODE_7BIT',
    'SMBUS_ADDRESSINGMODE_10BIT', 'SMBUS_DUALADDRESS_DISABLE',
    'SMBUS_DUALADDRESS_ENABLE', 'SMBUS_OA2_NOMASK', 'SMBUS_OA2_MASK01',
    'SMBUS_OA2_MASK02', 'SMBUS_OA2_MASK03', 'SMBUS_OA2_MASK04', 'SMBUS_OA2_MASK05',
    'SMBUS_OA2_MASK06', 'SMBUS_OA2_MASK07', 'SMBUS_GENERALCALL_DISABLE',
    'SMBUS_GENERALCALL_ENABLE', 'SMBUS_NOSTRETCH_DISABLE', 'SMBUS_NOSTRETCH_ENABLE',
    'SMBUS_PEC_DISABLE', 'SMBUS_PEC_ENABLE', 'SMBUS_PERIPHERAL_MODE_SMBUS_HOST',
    'SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE', 'SMBUS_PERIPHERAL_MODE_SMBUS_SLAVE_ARP',
    'SMBUS_SOFTEND_MODE', 'SMBUS_RELOAD_MODE', 'SMBUS_AUTOEND_MODE',
    'SMBUS_SENDPEC_MODE', 'SMBUS_NO_STARTSTOP', 'SMBUS_GENERATE_STOP',
    'SMBUS_GENERATE_START_READ', 'SMBUS_GENERATE_START_WRITE', 'SMBUS_FIRST_FRAME',
    'SMBUS_NEXT_FRAME', 'SMBUS_FIRST_AND_LAST_FRAME_NO_PEC', 'SMBUS_LAST_FRAME_NO_PEC',
    'SMBUS_FIRST_AND_LAST_FRAME_WITH_PEC', 'SMBUS_LAST_FRAME_WITH_PEC',
    'SMBUS_OTHER_FRAME_NO_PEC', 'SMBUS_OTHER_FRAME_WITH_PEC',
    'SMBUS_OTHER_AND_LAST_FRAME_NO_PEC', 'SMBUS_OTHER_AND_LAST_FRAME_WITH_PEC',
    'SMBUS_IT_ERRI', 'SMBUS_IT_TCI', 'SMBUS_IT_STOPI', 'SMBUS_IT_NACKI',
    'SMBUS_IT_ADDRI', 'SMBUS_IT_RXI', 'SMBUS_IT_TXI', 'SMBUS_IT_TX', 'SMBUS_IT_RX',
    'SMBUS_IT_ALERT', 'SMBUS_IT_ADDR', 'SMBUS_FLAG_TXE', 'SMBUS_FLAG_TXIS',
    'SMBUS_FLAG_RXNE', 'SMBUS_FLAG_ADDR', 'SMBUS_FLAG_AF', 'SMBUS_FLAG_STOPF',
    'SMBUS_FLAG_TC', 'SMBUS_FLAG_TCR', 'SMBUS_FLAG_BERR', 'SMBUS_FLAG_ARLO',
    'SMBUS_FLAG_OVR', 'SMBUS_FLAG_PECERR', 'SMBUS_FLAG_TIMEOUT', 'SMBUS_FLAG_ALERT',
    'SMBUS_FLAG_BUSY', 'SMBUS_FLAG_DIR', 'SMBUS_FLAG_MASK', 'SMBUS_InitTypeDef',
    'HAL_SPI_STATE_RESET', 'HAL_SPI_STATE_READY', 'HAL_SPI_STATE_BUSY',
    'HAL_SPI_STATE_BUSY_TX', 'HAL_SPI_STATE_BUSY_RX', 'HAL_SPI_STATE_BUSY_TX_RX',
    'HAL_SPI_STATE_ERROR', 'HAL_SPI_STATE_ABORT', 'HAL_SPI_ERROR_NONE',
    'HAL_SPI_ERROR_MODF', 'HAL_SPI_ERROR_CRC', 'HAL_SPI_ERROR_OVR', 'HAL_SPI_ERROR_FRE',
    'HAL_SPI_ERROR_DMA', 'HAL_SPI_ERROR_FLAG', 'HAL_SPI_ERROR_ABORT', 'SPI_MODE_SLAVE',
    'SPI_MODE_MASTER', 'SPI_DIRECTION_2LINES', 'SPI_DIRECTION_2LINES_RXONLY',
    'SPI_DIRECTION_1LINE', 'SPI_DATASIZE_8BIT', 'SPI_DATASIZE_16BIT',
    'SPI_POLARITY_LOW', 'SPI_POLARITY_HIGH', 'SPI_PHASE_1EDGE', 'SPI_PHASE_2EDGE',
    'SPI_NSS_SOFT', 'SPI_NSS_HARD_INPUT', 'SPI_NSS_HARD_OUTPUT',
    'SPI_BAUDRATEPRESCALER_2', 'SPI_BAUDRATEPRESCALER_4', 'SPI_BAUDRATEPRESCALER_8',
    'SPI_BAUDRATEPRESCALER_16', 'SPI_BAUDRATEPRESCALER_32', 'SPI_BAUDRATEPRESCALER_64',
    'SPI_BAUDRATEPRESCALER_128', 'SPI_BAUDRATEPRESCALER_256', 'SPI_FIRSTBIT_MSB',
    'SPI_FIRSTBIT_LSB', 'SPI_TIMODE_DISABLE', 'SPI_TIMODE_ENABLE',
    'SPI_CRCCALCULATION_DISABLE', 'SPI_CRCCALCULATION_ENABLE', 'SPI_IT_TXE',
    'SPI_IT_RXNE', 'SPI_IT_ERR', 'SPI_FLAG_RXNE', 'SPI_FLAG_TXE', 'SPI_FLAG_BSY',
    'SPI_FLAG_CRCERR', 'SPI_FLAG_MODF', 'SPI_FLAG_OVR', 'SPI_FLAG_FRE', 'SPI_FLAG_MASK',
    'SPI_InitTypeDef', 'TIM2_ETR_GPIO', 'TIM2_ETR_HSI48', 'TIM2_ETR_HSI16',
    'TIM2_ETR_LSE', 'TIM2_ETR_COMP2_OUT', 'TIM2_ETR_COMP1_OUT', 'TIM2_TI4_GPIO',
    'TIM2_TI4_COMP2', 'TIM2_TI4_COMP1', 'TIM21_ETR_GPIO', 'TIM21_ETR_COMP2_OUT',
    'TIM21_ETR_COMP1_OUT', 'TIM21_ETR_LSE', 'TIM21_TI1_GPIO', 'TIM21_TI1_MCO',
    'TIM21_TI1_RTC_WKUT_IT', 'TIM21_TI1_HSE_RTC', 'TIM21_TI1_MSI', 'TIM21_TI1_LSE',
    'TIM21_TI1_LSI', 'TIM21_TI1_COMP1_OUT', 'TIM21_TI2_GPIO', 'TIM21_TI2_COMP2_OUT',
    'TIM22_ETR_GPIO', 'TIM22_ETR_COMP2_OUT', 'TIM22_ETR_COMP1_OUT', 'TIM22_ETR_LSE',
    'TIM22_TI1_GPIO', 'TIM22_TI1_COMP2_OUT', 'TIM22_TI1_COMP1_OUT',
    'HAL_TIM_STATE_RESET', 'HAL_TIM_STATE_READY', 'HAL_TIM_STATE_BUSY',
    'HAL_TIM_STATE_TIMEOUT', 'HAL_TIM_STATE_ERROR', 'HAL_TIM_ACTIVE_CHANNEL_1',
    'HAL_TIM_ACTIVE_CHANNEL_2', 'HAL_TIM_ACTIVE_CHANNEL_3', 'HAL_TIM_ACTIVE_CHANNEL_4',
    'HAL_TIM_ACTIVE_CHANNEL_CLEARED', 'TIM_CLEARINPUTSOURCE_NONE',
    'TIM_CLEARINPUTSOURCE_ETR', 'TIM_DMABASE_CR1', 'TIM_DMABASE_CR2',
    'TIM_DMABASE_SMCR', 'TIM_DMABASE_DIER', 'TIM_DMABASE_SR', 'TIM_DMABASE_EGR',
    'TIM_DMABASE_CCMR1', 'TIM_DMABASE_CCMR2', 'TIM_DMABASE_CCER', 'TIM_DMABASE_CNT',
    'TIM_DMABASE_PSC', 'TIM_DMABASE_ARR', 'TIM_DMABASE_CCR1', 'TIM_DMABASE_CCR2',
    'TIM_DMABASE_CCR3', 'TIM_DMABASE_CCR4', 'TIM_DMABASE_DCR', 'TIM_DMABASE_DMAR',
    'TIM_DMABASE_OR', 'TIM_EVENTSOURCE_UPDATE', 'TIM_EVENTSOURCE_CC1',
    'TIM_EVENTSOURCE_CC2', 'TIM_EVENTSOURCE_CC3', 'TIM_EVENTSOURCE_CC4',
    'TIM_EVENTSOURCE_TRIGGER', 'TIM_INPUTCHANNELPOLARITY_RISING',
    'TIM_INPUTCHANNELPOLARITY_FALLING', 'TIM_INPUTCHANNELPOLARITY_BOTHEDGE',
    'TIM_ETRPOLARITY_INVERTED', 'TIM_ETRPOLARITY_NONINVERTED', 'TIM_ETRPRESCALER_DIV1',
    'TIM_ETRPRESCALER_DIV2', 'TIM_ETRPRESCALER_DIV4', 'TIM_ETRPRESCALER_DIV8',
    'TIM_COUNTERMODE_UP', 'TIM_COUNTERMODE_DOWN', 'TIM_COUNTERMODE_CENTERALIGNED1',
    'TIM_COUNTERMODE_CENTERALIGNED2', 'TIM_COUNTERMODE_CENTERALIGNED3',
    'TIM_CLOCKDIVISION_DIV1', 'TIM_CLOCKDIVISION_DIV2', 'TIM_CLOCKDIVISION_DIV4',
    'TIM_OUTPUTSTATE_DISABLE', 'TIM_OUTPUTSTATE_ENABLE',
    'TIM_AUTORELOAD_PRELOAD_DISABLE', 'TIM_AUTORELOAD_PRELOAD_ENABLE',
    'TIM_OCFAST_DISABLE', 'TIM_OCFAST_ENABLE', 'TIM_OUTPUTNSTATE_DISABLE',
    'TIM_OCPOLARITY_HIGH', 'TIM_OCPOLARITY_LOW', 'TIM_ICPOLARITY_RISING',
    'TIM_ICPOLARITY_FALLING', 'TIM_ICPOLARITY_BOTHEDGE', 'TIM_ICSELECTION_DIRECTTI',
    'TIM_ICSELECTION_INDIRECTTI', 'TIM_ICSELECTION_TRC', 'TIM_ICPSC_DIV1',
    'TIM_ICPSC_DIV2', 'TIM_ICPSC_DIV4', 'TIM_ICPSC_DIV8', 'TIM_OPMODE_SINGLE',
    'TIM_OPMODE_REPETITIVE', 'TIM_ENCODERMODE_TI1', 'TIM_ENCODERMODE_TI2',
    'TIM_ENCODERMODE_TI12', 'TIM_IT_UPDATE', 'TIM_IT_CC1', 'TIM_IT_CC2', 'TIM_IT_CC3',
    'TIM_IT_CC4', 'TIM_IT_TRIGGER', 'TIM_DMA_UPDATE', 'TIM_DMA_CC1', 'TIM_DMA_CC2',
    'TIM_DMA_CC3', 'TIM_DMA_CC4', 'TIM_DMA_TRIGGER', 'TIM_FLAG_UPDATE', 'TIM_FLAG_CC1',
    'TIM_FLAG_CC2', 'TIM_FLAG_CC3', 'TIM_FLAG_CC4', 'TIM_FLAG_TRIGGER',
    'TIM_FLAG_CC1OF', 'TIM_FLAG_CC2OF', 'TIM_FLAG_CC3OF', 'TIM_FLAG_CC4OF',
    'TIM_CHANNEL_1', 'TIM_CHANNEL_2', 'TIM_CHANNEL_3', 'TIM_CHANNEL_4',
    'TIM_CHANNEL_ALL', 'TIM_CLOCKSOURCE_ETRMODE2', 'TIM_CLOCKSOURCE_INTERNAL',
    'TIM_CLOCKSOURCE_ITR0', 'TIM_CLOCKSOURCE_ITR1', 'TIM_CLOCKSOURCE_ITR2',
    'TIM_CLOCKSOURCE_ITR3', 'TIM_CLOCKSOURCE_TI1ED', 'TIM_CLOCKSOURCE_TI1',
    'TIM_CLOCKSOURCE_TI2', 'TIM_CLOCKSOURCE_ETRMODE1', 'TIM_CLOCKPOLARITY_INVERTED',
    'TIM_CLOCKPOLARITY_NONINVERTED', 'TIM_CLOCKPOLARITY_RISING',
    'TIM_CLOCKPOLARITY_FALLING', 'TIM_CLOCKPOLARITY_BOTHEDGE',
    'TIM_CLOCKPRESCALER_DIV1', 'TIM_CLOCKPRESCALER_DIV2', 'TIM_CLOCKPRESCALER_DIV4',
    'TIM_CLOCKPRESCALER_DIV8', 'TIM_CLEARINPUTPOLARITY_INVERTED',
    'TIM_CLEARINPUTPOLARITY_NONINVERTED', 'TIM_CLEARINPUTPRESCALER_DIV1',
    'TIM_CLEARINPUTPRESCALER_DIV2', 'TIM_CLEARINPUTPRESCALER_DIV4',
    'TIM_CLEARINPUTPRESCALER_DIV8', 'TIM_TRGO_RESET', 'TIM_TRGO_ENABLE',
    'TIM_TRGO_UPDATE', 'TIM_TRGO_OC1', 'TIM_TRGO_OC1REF', 'TIM_TRGO_OC2REF',
    'TIM_TRGO_OC3REF', 'TIM_TRGO_OC4REF', 'TIM_MASTERSLAVEMODE_ENABLE',
    'TIM_MASTERSLAVEMODE_DISABLE', 'TIM_SLAVEMODE_DISABLE', 'TIM_SLAVEMODE_RESET',
    'TIM_SLAVEMODE_GATED', 'TIM_SLAVEMODE_TRIGGER', 'TIM_SLAVEMODE_EXTERNAL1',
    'TIM_OCMODE_TIMING', 'TIM_OCMODE_ACTIVE', 'TIM_OCMODE_INACTIVE',
    'TIM_OCMODE_TOGGLE', 'TIM_OCMODE_PWM1', 'TIM_OCMODE_PWM2',
    'TIM_OCMODE_FORCED_ACTIVE', 'TIM_OCMODE_FORCED_INACTIVE', 'TIM_TS_ITR0',
    'TIM_TS_ITR1', 'TIM_TS_ITR2', 'TIM_TS_ITR3', 'TIM_TS_TI1F_ED', 'TIM_TS_TI1FP1',
    'TIM_TS_TI2FP2', 'TIM_TS_ETRF', 'TIM_TS_NONE', 'TIM_TRIGGERPOLARITY_INVERTED',
    'TIM_TRIGGERPOLARITY_NONINVERTED', 'TIM_TRIGGERPOLARITY_RISING',
    'TIM_TRIGGERPOLARITY_FALLING', 'TIM_TRIGGERPOLARITY_BOTHEDGE',
    'TIM_TRIGGERPRESCALER_DIV1', 'TIM_TRIGGERPRESCALER_DIV2',
    'TIM_TRIGGERPRESCALER_DIV4', 'TIM_TRIGGERPRESCALER_DIV8', 'TIM_TI1SELECTION_CH1',
    'TIM_TI1SELECTION_XORCOMBINATION', 'TIM_DMABURSTLENGTH_1TRANSFER',
    'TIM_DMABURSTLENGTH_2TRANSFERS', 'TIM_DMABURSTLENGTH_3TRANSFERS',
    'TIM_DMABURSTLENGTH_4TRANSFERS', 'TIM_DMABURSTLENGTH_5TRANSFERS',
    'TIM_DMABURSTLENGTH_6TRANSFERS', 'TIM_DMABURSTLENGTH_7TRANSFERS',
    'TIM_DMABURSTLENGTH_8TRANSFERS', 'TIM_DMABURSTLENGTH_9TRANSFERS',
    'TIM_DMABURSTLENGTH_10TRANSFERS', 'TIM_DMABURSTLENGTH_11TRANSFERS',
    'TIM_DMABURSTLENGTH_12TRANSFERS', 'TIM_DMABURSTLENGTH_13TRANSFERS',
    'TIM_DMABURSTLENGTH_14TRANSFERS', 'TIM_DMABURSTLENGTH_15TRANSFERS',
    'TIM_DMABURSTLENGTH_16TRANSFERS', 'TIM_DMABURSTLENGTH_17TRANSFERS',
    'TIM_DMABURSTLENGTH_18TRANSFERS', 'TIM_DMA_ID_UPDATE', 'TIM_DMA_ID_CC1',
    'TIM_DMA_ID_CC2', 'TIM_DMA_ID_CC3', 'TIM_DMA_ID_CC4', 'TIM_DMA_ID_TRIGGER',
    'TIM_CCx_ENABLE', 'TIM_CCx_DISABLE', 'TIM_CCER_CCxE_MASK', 'TIM_Base_InitTypeDef',
    'TIM_OC_InitTypeDef', 'TIM_OnePulse_InitTypeDef', 'TIM_IC_InitTypeDef',
    'TIM_Encoder_InitTypeDef', 'TIM_ClockConfigTypeDef', 'TIM_ClearInputConfigTypeDef',
    'TIM_MasterConfigTypeDef', 'TIM_SlaveConfigTypeDef', 'HAL_TSC_STATE_RESET',
    'HAL_TSC_STATE_READY', 'HAL_TSC_STATE_BUSY', 'HAL_TSC_STATE_ERROR',
    'TSC_GROUP_ONGOING', 'TSC_GROUP_COMPLETED', 'TSC_GROUP1_IDX', 'TSC_GROUP2_IDX',
    'TSC_GROUP3_IDX', 'TSC_GROUP4_IDX', 'TSC_GROUP5_IDX', 'TSC_GROUP6_IDX',
    'TSC_GROUP7_IDX', 'TSC_GROUP8_IDX', 'TSC_NB_OF_GROUPS', 'HAL_TSC_ERROR_NONE',
    'TSC_CTPH_1CYCLE', 'TSC_CTPH_2CYCLES', 'TSC_CTPH_3CYCLES', 'TSC_CTPH_4CYCLES',
    'TSC_CTPH_5CYCLES', 'TSC_CTPH_6CYCLES', 'TSC_CTPH_7CYCLES', 'TSC_CTPH_8CYCLES',
    'TSC_CTPH_9CYCLES', 'TSC_CTPH_10CYCLES', 'TSC_CTPH_11CYCLES', 'TSC_CTPH_12CYCLES',
    'TSC_CTPH_13CYCLES', 'TSC_CTPH_14CYCLES', 'TSC_CTPH_15CYCLES', 'TSC_CTPH_16CYCLES',
    'TSC_CTPL_1CYCLE', 'TSC_CTPL_2CYCLES', 'TSC_CTPL_3CYCLES', 'TSC_CTPL_4CYCLES',
    'TSC_CTPL_5CYCLES', 'TSC_CTPL_6CYCLES', 'TSC_CTPL_7CYCLES', 'TSC_CTPL_8CYCLES',
    'TSC_CTPL_9CYCLES', 'TSC_CTPL_10CYCLES', 'TSC_CTPL_11CYCLES', 'TSC_CTPL_12CYCLES',
    'TSC_CTPL_13CYCLES', 'TSC_CTPL_14CYCLES', 'TSC_CTPL_15CYCLES', 'TSC_CTPL_16CYCLES',
    'TSC_SS_PRESC_DIV1', 'TSC_SS_PRESC_DIV2', 'TSC_PG_PRESC_DIV1', 'TSC_PG_PRESC_DIV2',
    'TSC_PG_PRESC_DIV4', 'TSC_PG_PRESC_DIV8', 'TSC_PG_PRESC_DIV16',
    'TSC_PG_PRESC_DIV32', 'TSC_PG_PRESC_DIV64', 'TSC_PG_PRESC_DIV128', 'TSC_MCV_255',
    'TSC_MCV_511', 'TSC_MCV_1023', 'TSC_MCV_2047', 'TSC_MCV_4095', 'TSC_MCV_8191',
    'TSC_MCV_16383', 'TSC_IODEF_OUT_PP_LOW', 'TSC_IODEF_IN_FLOAT',
    'TSC_SYNC_POLARITY_FALLING', 'TSC_SYNC_POLARITY_RISING', 'TSC_ACQ_MODE_NORMAL',
    'TSC_ACQ_MODE_SYNCHRO', 'TSC_IT_EOA', 'TSC_IT_MCE', 'TSC_FLAG_EOA', 'TSC_FLAG_MCE',
    'TSC_GROUP1', 'TSC_GROUP2', 'TSC_GROUP3', 'TSC_GROUP4', 'TSC_GROUP5', 'TSC_GROUP6',
    'TSC_GROUP7', 'TSC_GROUP8', 'TSC_GROUP1_IO1', 'TSC_GROUP1_IO2', 'TSC_GROUP1_IO3',
    'TSC_GROUP1_IO4', 'TSC_GROUP2_IO1', 'TSC_GROUP2_IO2', 'TSC_GROUP2_IO3',
    'TSC_GROUP2_IO4', 'TSC_GROUP3_IO1', 'TSC_GROUP3_IO2', 'TSC_GROUP3_IO3',
    'TSC_GROUP3_IO4', 'TSC_GROUP4_IO1', 'TSC_GROUP4_IO2', 'TSC_GROUP4_IO3',
    'TSC_GROUP4_IO4', 'TSC_GROUP5_IO1', 'TSC_GROUP5_IO2', 'TSC_GROUP5_IO3',
    'TSC_GROUP5_IO4', 'TSC_GROUP6_IO1', 'TSC_GROUP6_IO2', 'TSC_GROUP6_IO3',
    'TSC_GROUP6_IO4', 'TSC_GROUP7_IO1', 'TSC_GROUP7_IO2', 'TSC_GROUP7_IO3',
    'TSC_GROUP7_IO4', 'TSC_GROUP8_IO1', 'TSC_GROUP8_IO2', 'TSC_GROUP8_IO3',
    'TSC_GROUP8_IO4', 'TSC_InitTypeDef', 'TSC_IOConfigTypeDef', 'UART_WORDLENGTH_7B',
    'UART_WORDLENGTH_8B', 'UART_WORDLENGTH_9B', 'UART_ADDRESS_DETECT_4B',
    'UART_ADDRESS_DETECT_7B', 'UART_WakeUpTypeDef', 'UART_CLOCKSOURCE_PCLK1',
    'UART_CLOCKSOURCE_PCLK2', 'UART_CLOCKSOURCE_HSI', 'UART_CLOCKSOURCE_SYSCLK',
    'UART_CLOCKSOURCE_LSE', 'UART_CLOCKSOURCE_UNDEFINED', 'HAL_UART_STATE_RESET',
    'HAL_UART_STATE_READY', 'HAL_UART_STATE_BUSY', 'HAL_UART_STATE_BUSY_TX',
    'HAL_UART_STATE_BUSY_RX', 'HAL_UART_STATE_BUSY_TX_RX', 'HAL_UART_STATE_TIMEOUT',
    'HAL_UART_STATE_ERROR', 'HAL_UART_ERROR_NONE', 'HAL_UART_ERROR_PE',
    'HAL_UART_ERROR_NE', 'HAL_UART_ERROR_FE', 'HAL_UART_ERROR_ORE',
    'HAL_UART_ERROR_DMA', 'UART_STOPBITS_0_5', 'UART_STOPBITS_1', 'UART_STOPBITS_1_5',
    'UART_STOPBITS_2', 'UART_PARITY_NONE', 'UART_PARITY_EVEN', 'UART_PARITY_ODD',
    'UART_HWCONTROL_NONE', 'UART_HWCONTROL_RTS', 'UART_HWCONTROL_CTS',
    'UART_HWCONTROL_RTS_CTS', 'UART_MODE_RX', 'UART_MODE_TX', 'UART_MODE_TX_RX',
    'UART_STATE_DISABLE', 'UART_STATE_ENABLE', 'UART_OVERSAMPLING_16',
    'UART_OVERSAMPLING_8', 'UART_ONE_BIT_SAMPLE_DISABLE', 'UART_ONE_BIT_SAMPLE_ENABLE',
    'UART_ADVFEATURE_AUTOBAUDRATE_ONSTARTBIT',
    'UART_ADVFEATURE_AUTOBAUDRATE_ONFALLINGEDGE',
    'UART_ADVFEATURE_AUTOBAUDRATE_ON0X7FFRAME',
    'UART_ADVFEATURE_AUTOBAUDRATE_ON0X55FRAME', 'UART_RECEIVER_TIMEOUT_DISABLE',
    'UART_RECEIVER_TIMEOUT_ENABLE', 'UART_LIN_DISABLE', 'UART_LIN_ENABLE',
    'UART_LINBREAKDETECTLENGTH_10B', 'UART_LINBREAKDETECTLENGTH_11B',
    'UART_DMA_TX_DISABLE', 'UART_DMA_TX_ENABLE', 'UART_DMA_RX_DISABLE',
    'UART_DMA_RX_ENABLE', 'UART_HALF_DUPLEX_DISABLE', 'UART_HALF_DUPLEX_ENABLE',
    'UART_WAKEUPMETHOD_IDLELINE', 'UART_WAKEUPMETHOD_ADDRESSMARK',
    'UART_AUTOBAUD_REQUEST', 'UART_SENDBREAK_REQUEST', 'UART_MUTE_MODE_REQUEST',
    'UART_RXDATA_FLUSH_REQUEST', 'UART_TXDATA_FLUSH_REQUEST', 'UART_ADVFEATURE_NO_INIT',
    'UART_ADVFEATURE_TXINVERT_INIT', 'UART_ADVFEATURE_RXINVERT_INIT',
    'UART_ADVFEATURE_DATAINVERT_INIT', 'UART_ADVFEATURE_SWAP_INIT',
    'UART_ADVFEATURE_RXOVERRUNDISABLE_INIT', 'UART_ADVFEATURE_DMADISABLEONERROR_INIT',
    'UART_ADVFEATURE_AUTOBAUDRATE_INIT', 'UART_ADVFEATURE_MSBFIRST_INIT',
    'UART_ADVFEATURE_TXINV_DISABLE', 'UART_ADVFEATURE_TXINV_ENABLE',
    'UART_ADVFEATURE_RXINV_DISABLE', 'UART_ADVFEATURE_RXINV_ENABLE',
    'UART_ADVFEATURE_DATAINV_DISABLE', 'UART_ADVFEATURE_DATAINV_ENABLE',
    'UART_ADVFEATURE_SWAP_DISABLE', 'UART_ADVFEATURE_SWAP_ENABLE',
    'UART_ADVFEATURE_OVERRUN_ENABLE', 'UART_ADVFEATURE_OVERRUN_DISABLE',
    'UART_ADVFEATURE_AUTOBAUDRATE_DISABLE', 'UART_ADVFEATURE_AUTOBAUDRATE_ENABLE',
    'UART_ADVFEATURE_DMA_ENABLEONRXERROR', 'UART_ADVFEATURE_DMA_DISABLEONRXERROR',
    'UART_ADVFEATURE_MSBFIRST_DISABLE', 'UART_ADVFEATURE_MSBFIRST_ENABLE',
    'UART_ADVFEATURE_STOPMODE_DISABLE', 'UART_ADVFEATURE_STOPMODE_ENABLE',
    'UART_ADVFEATURE_MUTEMODE_DISABLE', 'UART_ADVFEATURE_MUTEMODE_ENABLE',
    'UART_CR2_ADDRESS_LSB_POS', 'UART_WAKEUP_ON_ADDRESS', 'UART_WAKEUP_ON_STARTBIT',
    'UART_WAKEUP_ON_READDATA_NONEMPTY', 'UART_DE_POLARITY_HIGH', 'UART_DE_POLARITY_LOW',
    'UART_CR1_DEAT_ADDRESS_LSB_POS', 'UART_CR1_DEDT_ADDRESS_LSB_POS', 'UART_IT_MASK',
    'HAL_UART_TIMEOUT_VALUE', 'UART_FLAG_REACK', 'UART_FLAG_TEACK', 'UART_FLAG_WUF',
    'UART_FLAG_RWU', 'UART_FLAG_SBKF', 'UART_FLAG_CMF', 'UART_FLAG_BUSY',
    'UART_FLAG_ABRF', 'UART_FLAG_ABRE', 'UART_FLAG_CTS', 'UART_FLAG_CTSIF',
    'UART_FLAG_LBDF', 'UART_FLAG_TXE', 'UART_FLAG_TC', 'UART_FLAG_RXNE',
    'UART_FLAG_IDLE', 'UART_FLAG_ORE', 'UART_FLAG_NE', 'UART_FLAG_FE', 'UART_FLAG_PE',
    'UART_IT_PE', 'UART_IT_TXE', 'UART_IT_TC', 'UART_IT_RXNE', 'UART_IT_IDLE',
    'UART_IT_LBD', 'UART_IT_CTS', 'UART_IT_CM', 'UART_IT_WUF', 'UART_IT_ERR',
    'UART_IT_ORE', 'UART_IT_NE', 'UART_IT_FE', 'UART_CLEAR_PEF', 'UART_CLEAR_FEF',
    'UART_CLEAR_NEF', 'UART_CLEAR_OREF', 'UART_CLEAR_IDLEF', 'UART_CLEAR_TCF',
    'UART_CLEAR_LBDF', 'UART_CLEAR_CTSF', 'UART_CLEAR_CMF', 'UART_CLEAR_WUF',
    'UART_InitTypeDef', 'UART_AdvFeatureInitTypeDef', 'USART_WORDLENGTH_7B',
    'USART_WORDLENGTH_8B', 'USART_WORDLENGTH_9B', 'HAL_USART_STATE_RESET',
    'HAL_USART_STATE_READY', 'HAL_USART_STATE_BUSY', 'HAL_USART_STATE_BUSY_TX',
    'HAL_USART_STATE_BUSY_RX', 'HAL_USART_STATE_BUSY_TX_RX', 'HAL_USART_STATE_TIMEOUT',
    'HAL_USART_STATE_ERROR', 'USART_CLOCKSOURCE_PCLK1', 'USART_CLOCKSOURCE_PCLK2',
    'USART_CLOCKSOURCE_HSI', 'USART_CLOCKSOURCE_SYSCLK', 'USART_CLOCKSOURCE_LSE',
    'USART_CLOCKSOURCE_UNDEFINED', 'HAL_USART_ERROR_NONE', 'HAL_USART_ERROR_PE',
    'HAL_USART_ERROR_NE', 'HAL_USART_ERROR_FE', 'HAL_USART_ERROR_ORE',
    'HAL_USART_ERROR_DMA', 'USART_STOPBITS_0_5', 'USART_STOPBITS_1',
    'USART_STOPBITS_1_5', 'USART_STOPBITS_2', 'USART_PARITY_NONE', 'USART_PARITY_EVEN',
    'USART_PARITY_ODD', 'USART_MODE_RX', 'USART_MODE_TX', 'USART_MODE_TX_RX',
    'USART_OVERSAMPLING_16', 'USART_OVERSAMPLING_8', 'USART_CLOCK_DISABLE',
    'USART_CLOCK_ENABLE', 'USART_POLARITY_LOW', 'USART_POLARITY_HIGH',
    'USART_PHASE_1EDGE', 'USART_PHASE_2EDGE', 'USART_LASTBIT_DISABLE',
    'USART_LASTBIT_ENABLE', 'USART_RXDATA_FLUSH_REQUEST', 'USART_TXDATA_FLUSH_REQUEST',
    'USART_FLAG_REACK', 'USART_FLAG_TEACK', 'USART_FLAG_BUSY', 'USART_FLAG_TXE',
    'USART_FLAG_TC', 'USART_FLAG_RXNE', 'USART_FLAG_IDLE', 'USART_FLAG_ORE',
    'USART_FLAG_NE', 'USART_FLAG_FE', 'USART_FLAG_PE', 'USART_IT_PE', 'USART_IT_TXE',
    'USART_IT_TC', 'USART_IT_RXNE', 'USART_IT_IDLE', 'USART_IT_ERR', 'USART_IT_ORE',
    'USART_IT_NE', 'USART_IT_FE', 'USART_CLEAR_PEF', 'USART_CLEAR_FEF',
    'USART_CLEAR_NEF', 'USART_CLEAR_OREF', 'USART_CLEAR_IDLEF', 'USART_CLEAR_TCF',
    'USART_IT_MASK', 'USART_CR_MASK', 'USART_CR_POS', 'USART_ISR_MASK', 'USART_ISR_POS',
    'USART_InitTypeDef', 'WWDG_IT_EWI', 'WWDG_FLAG_EWIF', 'WWDG_PRESCALER_1',
    'WWDG_PRESCALER_2', 'WWDG_PRESCALER_4', 'WWDG_PRESCALER_8', 'WWDG_EWI_DISABLE',
    'WWDG_EWI_ENABLE', 'WWDG_InitTypeDef', 'ADC_REG_TRIG_EXT_EDGE_DEFAULT',
    'ADC_REG_TRIG_SOURCE_MASK', 'ADC_REG_TRIG_EDGE_MASK',
    'ADC_REG_TRIG_EXTSEL_BITOFFSET_POS', 'ADC_REG_TRIG_EXTEN_BITOFFSET_POS',
    'ADC_CHANNEL_ID_NUMBER_MASK', 'ADC_CHANNEL_ID_BITFIELD_MASK',
    'ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS', 'ADC_CHANNEL_ID_MASK',
    'ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0', 'ADC_CHANNEL_ID_INTERNAL_CH',
    'ADC_CHANNEL_ID_INTERNAL_CH_MASK', 'ADC_CHANNEL_0_NUMBER', 'ADC_CHANNEL_1_NUMBER',
    'ADC_CHANNEL_2_NUMBER', 'ADC_CHANNEL_3_NUMBER', 'ADC_CHANNEL_4_NUMBER',
    'ADC_CHANNEL_5_NUMBER', 'ADC_CHANNEL_6_NUMBER', 'ADC_CHANNEL_7_NUMBER',
    'ADC_CHANNEL_8_NUMBER', 'ADC_CHANNEL_9_NUMBER', 'ADC_CHANNEL_10_NUMBER',
    'ADC_CHANNEL_11_NUMBER', 'ADC_CHANNEL_12_NUMBER', 'ADC_CHANNEL_13_NUMBER',
    'ADC_CHANNEL_14_NUMBER', 'ADC_CHANNEL_15_NUMBER', 'ADC_CHANNEL_16_NUMBER',
    'ADC_CHANNEL_17_NUMBER', 'ADC_CHANNEL_18_NUMBER', 'ADC_CHANNEL_0_BITFIELD',
    'ADC_CHANNEL_1_BITFIELD', 'ADC_CHANNEL_2_BITFIELD', 'ADC_CHANNEL_3_BITFIELD',
    'ADC_CHANNEL_4_BITFIELD', 'ADC_CHANNEL_5_BITFIELD', 'ADC_CHANNEL_6_BITFIELD',
    'ADC_CHANNEL_7_BITFIELD', 'ADC_CHANNEL_8_BITFIELD', 'ADC_CHANNEL_9_BITFIELD',
    'ADC_CHANNEL_10_BITFIELD', 'ADC_CHANNEL_11_BITFIELD', 'ADC_CHANNEL_12_BITFIELD',
    'ADC_CHANNEL_13_BITFIELD', 'ADC_CHANNEL_14_BITFIELD', 'ADC_CHANNEL_15_BITFIELD',
    'ADC_CHANNEL_16_BITFIELD', 'ADC_CHANNEL_17_BITFIELD', 'ADC_CHANNEL_18_BITFIELD',
    'ADC_AWD_CR1_REGOFFSET', 'ADC_AWD_CRX_REGOFFSET_MASK', 'ADC_AWD_CR1_CHANNEL_MASK',
    'ADC_AWD_CR_ALL_CHANNEL_MASK', 'ADC_AWD_TR1_REGOFFSET',
    'ADC_AWD_TRX_REGOFFSET_MASK', 'ADC_CFGR1_RES_BITOFFSET_POS',
    'ADC_CFGR1_AWDSGL_BITOFFSET_POS', 'ADC_TR_HT_BITOFFSET_POS',
    'ADC_CHSELR_CHSEL0_BITOFFSET_POS', 'ADC_CHSELR_CHSEL1_BITOFFSET_POS',
    'ADC_CHSELR_CHSEL2_BITOFFSET_POS', 'ADC_CHSELR_CHSEL3_BITOFFSET_POS',
    'ADC_CHSELR_CHSEL4_BITOFFSET_POS', 'ADC_CHSELR_CHSEL5_BITOFFSET_POS',
    'ADC_CHSELR_CHSEL6_BITOFFSET_POS', 'ADC_CHSELR_CHSEL7_BITOFFSET_POS',
    'ADC_CHSELR_CHSEL8_BITOFFSET_POS', 'ADC_CHSELR_CHSEL9_BITOFFSET_POS',
    'ADC_CHSELR_CHSEL10_BITOFFSET_POS', 'ADC_CHSELR_CHSEL11_BITOFFSET_POS',
    'ADC_CHSELR_CHSEL12_BITOFFSET_POS', 'ADC_CHSELR_CHSEL13_BITOFFSET_POS',
    'ADC_CHSELR_CHSEL14_BITOFFSET_POS', 'ADC_CHSELR_CHSEL15_BITOFFSET_POS',
    'ADC_CHSELR_CHSEL16_BITOFFSET_POS', 'ADC_CHSELR_CHSEL17_BITOFFSET_POS',
    'ADC_CHSELR_CHSEL18_BITOFFSET_POS', 'ADC_CR_BITS_PROPERTY_RS', 'VREFINT_CAL_ADDR',
    'VREFINT_CAL_VREF', 'TEMPSENSOR_CAL1_ADDR', 'TEMPSENSOR_CAL2_ADDR',
    'TEMPSENSOR_CAL1_TEMP', 'TEMPSENSOR_CAL2_TEMP', 'TEMPSENSOR_CAL_VREFANALOG',
    'LL_ADC_FLAG_ADRDY', 'LL_ADC_FLAG_EOC', 'LL_ADC_FLAG_EOS', 'LL_ADC_FLAG_OVR',
    'LL_ADC_FLAG_EOSMP', 'LL_ADC_FLAG_AWD1', 'LL_ADC_FLAG_EOCAL', 'LL_ADC_IT_ADRDY',
    'LL_ADC_IT_EOC', 'LL_ADC_IT_EOS', 'LL_ADC_IT_OVR', 'LL_ADC_IT_EOSMP',
    'LL_ADC_IT_AWD1', 'LL_ADC_IT_EOCAL', 'LL_ADC_DMA_REG_REGULAR_DATA',
    'LL_ADC_CLOCK_ASYNC_DIV1', 'LL_ADC_CLOCK_ASYNC_DIV2', 'LL_ADC_CLOCK_ASYNC_DIV4',
    'LL_ADC_CLOCK_ASYNC_DIV6', 'LL_ADC_CLOCK_ASYNC_DIV8', 'LL_ADC_CLOCK_ASYNC_DIV10',
    'LL_ADC_CLOCK_ASYNC_DIV12', 'LL_ADC_CLOCK_ASYNC_DIV16', 'LL_ADC_CLOCK_ASYNC_DIV32',
    'LL_ADC_CLOCK_ASYNC_DIV64', 'LL_ADC_CLOCK_ASYNC_DIV128',
    'LL_ADC_CLOCK_ASYNC_DIV256', 'LL_ADC_CLOCK_FREQ_MODE_HIGH',
    'LL_ADC_CLOCK_FREQ_MODE_LOW', 'LL_ADC_PATH_INTERNAL_NONE',
    'LL_ADC_PATH_INTERNAL_VREFINT', 'LL_ADC_PATH_INTERNAL_TEMPSENSOR',
    'LL_ADC_PATH_INTERNAL_VLCD', 'LL_ADC_CLOCK_SYNC_PCLK_DIV4',
    'LL_ADC_CLOCK_SYNC_PCLK_DIV2', 'LL_ADC_CLOCK_SYNC_PCLK_DIV1', 'LL_ADC_CLOCK_ASYNC',
    'LL_ADC_RESOLUTION_12B', 'LL_ADC_RESOLUTION_10B', 'LL_ADC_RESOLUTION_8B',
    'LL_ADC_RESOLUTION_6B', 'LL_ADC_DATA_ALIGN_RIGHT', 'LL_ADC_DATA_ALIGN_LEFT',
    'LL_ADC_LP_MODE_NONE', 'LL_ADC_LP_AUTOWAIT', 'LL_ADC_LP_AUTOPOWEROFF',
    'LL_ADC_LP_AUTOWAIT_AUTOPOWEROFF', 'LL_ADC_GROUP_REGULAR', 'LL_ADC_CHANNEL_0',
    'LL_ADC_CHANNEL_1', 'LL_ADC_CHANNEL_2', 'LL_ADC_CHANNEL_3', 'LL_ADC_CHANNEL_4',
    'LL_ADC_CHANNEL_5', 'LL_ADC_CHANNEL_6', 'LL_ADC_CHANNEL_7', 'LL_ADC_CHANNEL_8',
    'LL_ADC_CHANNEL_9', 'LL_ADC_CHANNEL_10', 'LL_ADC_CHANNEL_11', 'LL_ADC_CHANNEL_12',
    'LL_ADC_CHANNEL_13', 'LL_ADC_CHANNEL_14', 'LL_ADC_CHANNEL_15', 'LL_ADC_CHANNEL_17',
    'LL_ADC_CHANNEL_18', 'LL_ADC_CHANNEL_VREFINT', 'LL_ADC_CHANNEL_TEMPSENSOR',
    'LL_ADC_CHANNEL_16', 'LL_ADC_CHANNEL_VLCD', 'LL_ADC_REG_TRIG_SOFTWARE',
    'LL_ADC_REG_TRIG_EXT_TIM6_TRGO', 'LL_ADC_REG_TRIG_EXT_TIM21_CH2',
    'LL_ADC_REG_TRIG_EXT_TIM2_TRGO', 'LL_ADC_REG_TRIG_EXT_TIM2_CH4',
    'LL_ADC_REG_TRIG_EXT_TIM22_TRGO', 'LL_ADC_REG_TRIG_EXT_TIM3_TRGO',
    'LL_ADC_REG_TRIG_EXT_EXTI_LINE11', 'LL_ADC_REG_TRIG_EXT_TIM21_TRGO',
    'LL_ADC_REG_TRIG_EXT_RISING', 'LL_ADC_REG_TRIG_EXT_FALLING',
    'LL_ADC_REG_TRIG_EXT_RISINGFALLING', 'LL_ADC_REG_CONV_SINGLE',
    'LL_ADC_REG_CONV_CONTINUOUS', 'LL_ADC_REG_DMA_TRANSFER_NONE',
    'LL_ADC_REG_DMA_TRANSFER_LIMITED', 'LL_ADC_REG_DMA_TRANSFER_UNLIMITED',
    'LL_ADC_REG_OVR_DATA_PRESERVED', 'LL_ADC_REG_OVR_DATA_OVERWRITTEN',
    'LL_ADC_REG_SEQ_SCAN_DIR_FORWARD', 'LL_ADC_REG_SEQ_SCAN_DIR_BACKWARD',
    'LL_ADC_REG_SEQ_DISCONT_DISABLE', 'LL_ADC_REG_SEQ_DISCONT_1RANK',
    'LL_ADC_SAMPLINGTIME_1CYCLE_5', 'LL_ADC_SAMPLINGTIME_3CYCLES_5',
    'LL_ADC_SAMPLINGTIME_7CYCLES_5', 'LL_ADC_SAMPLINGTIME_12CYCLES_5',
    'LL_ADC_SAMPLINGTIME_19CYCLES_5', 'LL_ADC_SAMPLINGTIME_39CYCLES_5',
    'LL_ADC_SAMPLINGTIME_79CYCLES_5', 'LL_ADC_SAMPLINGTIME_160CYCLES_5', 'LL_ADC_AWD1',
    'LL_ADC_AWD_DISABLE', 'LL_ADC_AWD_ALL_CHANNELS_REG', 'LL_ADC_AWD_CHANNEL_0_REG',
    'LL_ADC_AWD_CHANNEL_1_REG', 'LL_ADC_AWD_CHANNEL_2_REG', 'LL_ADC_AWD_CHANNEL_3_REG',
    'LL_ADC_AWD_CHANNEL_4_REG', 'LL_ADC_AWD_CHANNEL_5_REG', 'LL_ADC_AWD_CHANNEL_6_REG',
    'LL_ADC_AWD_CHANNEL_7_REG', 'LL_ADC_AWD_CHANNEL_8_REG', 'LL_ADC_AWD_CHANNEL_9_REG',
    'LL_ADC_AWD_CHANNEL_10_REG', 'LL_ADC_AWD_CHANNEL_11_REG',
    'LL_ADC_AWD_CHANNEL_12_REG', 'LL_ADC_AWD_CHANNEL_13_REG',
    'LL_ADC_AWD_CHANNEL_14_REG', 'LL_ADC_AWD_CHANNEL_15_REG',
    'LL_ADC_AWD_CHANNEL_17_REG', 'LL_ADC_AWD_CHANNEL_18_REG',
    'LL_ADC_AWD_CH_VREFINT_REG', 'LL_ADC_AWD_CH_TEMPSENSOR_REG',
    'LL_ADC_AWD_CHANNEL_16_REG', 'LL_ADC_AWD_CH_VLCD_REG', 'LL_ADC_AWD_THRESHOLD_HIGH',
    'LL_ADC_AWD_THRESHOLD_LOW', 'LL_ADC_AWD_THRESHOLDS_HIGH_LOW', 'LL_ADC_OVS_DISABLE',
    'LL_ADC_OVS_GRP_REGULAR_CONTINUED', 'LL_ADC_OVS_REG_CONT', 'LL_ADC_OVS_REG_DISCONT',
    'LL_ADC_OVS_RATIO_2', 'LL_ADC_OVS_RATIO_4', 'LL_ADC_OVS_RATIO_8',
    'LL_ADC_OVS_RATIO_16', 'LL_ADC_OVS_RATIO_32', 'LL_ADC_OVS_RATIO_64',
    'LL_ADC_OVS_RATIO_128', 'LL_ADC_OVS_RATIO_256', 'LL_ADC_OVS_SHIFT_NONE',
    'LL_ADC_OVS_SHIFT_RIGHT_1', 'LL_ADC_OVS_SHIFT_RIGHT_2', 'LL_ADC_OVS_SHIFT_RIGHT_3',
    'LL_ADC_OVS_SHIFT_RIGHT_4', 'LL_ADC_OVS_SHIFT_RIGHT_5', 'LL_ADC_OVS_SHIFT_RIGHT_6',
    'LL_ADC_OVS_SHIFT_RIGHT_7', 'LL_ADC_OVS_SHIFT_RIGHT_8',
    'LL_ADC_DELAY_INTERNAL_REGUL_STAB_US', 'LL_ADC_DELAY_VREFINT_STAB_US',
    'LL_ADC_DELAY_TEMPSENSOR_STAB_US', 'LL_ADC_DELAY_CALIB_ENABLE_ADC_CYCLES',
    'LL_ADC_CommonInitTypeDef', 'LL_ADC_InitTypeDef', 'LL_ADC_REG_InitTypeDef',
    'LL_AHB1_GRP1_PERIPH_ALL', 'LL_AHB1_GRP1_PERIPH_DMA1', 'LL_AHB1_GRP1_PERIPH_MIF',
    'LL_AHB1_GRP1_PERIPH_SRAM', 'LL_AHB1_GRP1_PERIPH_CRC', 'LL_AHB1_GRP1_PERIPH_TSC',
    'LL_AHB1_GRP1_PERIPH_RNG', 'LL_AHB1_GRP1_PERIPH_CRYP', 'LL_APB1_GRP1_PERIPH_ALL',
    'LL_APB1_GRP1_PERIPH_TIM2', 'LL_APB1_GRP1_PERIPH_TIM6', 'LL_APB1_GRP1_PERIPH_LCD',
    'LL_APB1_GRP1_PERIPH_WWDG', 'LL_APB1_GRP1_PERIPH_SPI2',
    'LL_APB1_GRP1_PERIPH_USART2', 'LL_APB1_GRP1_PERIPH_LPUART1',
    'LL_APB1_GRP1_PERIPH_I2C1', 'LL_APB1_GRP1_PERIPH_I2C2', 'LL_APB1_GRP1_PERIPH_USB',
    'LL_APB1_GRP1_PERIPH_CRS', 'LL_APB1_GRP1_PERIPH_PWR', 'LL_APB1_GRP1_PERIPH_DAC1',
    'LL_APB1_GRP1_PERIPH_LPTIM1', 'LL_APB2_GRP1_PERIPH_ALL',
    'LL_APB2_GRP1_PERIPH_SYSCFG', 'LL_APB2_GRP1_PERIPH_TIM21',
    'LL_APB2_GRP1_PERIPH_TIM22', 'LL_APB2_GRP1_PERIPH_FW', 'LL_APB2_GRP1_PERIPH_ADC1',
    'LL_APB2_GRP1_PERIPH_SPI1', 'LL_APB2_GRP1_PERIPH_USART1',
    'LL_APB2_GRP1_PERIPH_DBGMCU', 'LL_IOP_GRP1_PERIPH_ALL', 'LL_IOP_GRP1_PERIPH_GPIOA',
    'LL_IOP_GRP1_PERIPH_GPIOB', 'LL_IOP_GRP1_PERIPH_GPIOC', 'LL_IOP_GRP1_PERIPH_GPIOD',
    'LL_IOP_GRP1_PERIPH_GPIOH', 'LL_COMP_OUTPUT_LEVEL_BITOFFSET_POS',
    'LL_COMP_WINDOWMODE_DISABLE', 'LL_COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON',
    'LL_COMP_POWERMODE_ULTRALOWPOWER', 'LL_COMP_POWERMODE_MEDIUMSPEED',
    'LL_COMP_INPUT_PLUS_IO1', 'LL_COMP_INPUT_PLUS_IO2', 'LL_COMP_INPUT_PLUS_IO3',
    'LL_COMP_INPUT_PLUS_IO4', 'LL_COMP_INPUT_PLUS_IO5',
    'LL_COMP_INPUT_MINUS_1_4VREFINT', 'LL_COMP_INPUT_MINUS_1_2VREFINT',
    'LL_COMP_INPUT_MINUS_3_4VREFINT', 'LL_COMP_INPUT_MINUS_VREFINT',
    'LL_COMP_INPUT_MINUS_DAC1_CH1', 'LL_COMP_INPUT_MINUS_DAC1_CH2',
    'LL_COMP_INPUT_MINUS_IO1', 'LL_COMP_INPUT_MINUS_IO2',
    'LL_COMP_OUTPUT_LPTIM1_IN1_COMP1', 'LL_COMP_OUTPUT_LPTIM1_IN1_COMP2',
    'LL_COMP_OUTPUT_LPTIM1_IN2_COMP2', 'LL_COMP_OUTPUTPOL_NONINVERTED',
    'LL_COMP_OUTPUTPOL_INVERTED', 'LL_COMP_OUTPUT_LEVEL_LOW',
    'LL_COMP_OUTPUT_LEVEL_HIGH', 'LL_COMP_DELAY_STARTUP_US',
    'LL_COMP_DELAY_VOLTAGE_SCALER_STAB_US', 'LL_COMP_InitTypeDef',
    'LL_CRC_POLYLENGTH_32B', 'LL_CRC_POLYLENGTH_16B', 'LL_CRC_POLYLENGTH_8B',
    'LL_CRC_POLYLENGTH_7B', 'LL_CRC_INDATA_REVERSE_NONE', 'LL_CRC_INDATA_REVERSE_BYTE',
    'LL_CRC_INDATA_REVERSE_HALFWORD', 'LL_CRC_INDATA_REVERSE_WORD',
    'LL_CRC_OUTDATA_REVERSE_NONE', 'LL_CRC_OUTDATA_REVERSE_BIT',
    'LL_CRC_DEFAULT_CRC32_POLY', 'LL_CRC_DEFAULT_CRC_INITVALUE', 'CRS_POSITION_TRIM',
    'CRS_POSITION_FECAP', 'CRS_POSITION_FELIM', 'LL_CRS_ISR_SYNCOKF',
    'LL_CRS_ISR_SYNCWARNF', 'LL_CRS_ISR_ERRF', 'LL_CRS_ISR_ESYNCF',
    'LL_CRS_ISR_SYNCERR', 'LL_CRS_ISR_SYNCMISS', 'LL_CRS_ISR_TRIMOVF',
    'LL_CRS_CR_SYNCOKIE', 'LL_CRS_CR_SYNCWARNIE', 'LL_CRS_CR_ERRIE',
    'LL_CRS_CR_ESYNCIE', 'LL_CRS_SYNC_DIV_1', 'LL_CRS_SYNC_DIV_2', 'LL_CRS_SYNC_DIV_4',
    'LL_CRS_SYNC_DIV_8', 'LL_CRS_SYNC_DIV_16', 'LL_CRS_SYNC_DIV_32',
    'LL_CRS_SYNC_DIV_64', 'LL_CRS_SYNC_DIV_128', 'LL_CRS_SYNC_SOURCE_GPIO',
    'LL_CRS_SYNC_SOURCE_LSE', 'LL_CRS_SYNC_SOURCE_USB', 'LL_CRS_SYNC_POLARITY_RISING',
    'LL_CRS_SYNC_POLARITY_FALLING', 'LL_CRS_FREQ_ERROR_DIR_UP',
    'LL_CRS_FREQ_ERROR_DIR_DOWN', 'LL_CRS_RELOADVALUE_DEFAULT',
    'LL_CRS_ERRORLIMIT_DEFAULT', 'LL_CRS_HSI48CALIBRATION_DEFAULT',
    'DAC_CR_CH1_BITOFFSET', 'DAC_CR_CH2_BITOFFSET', 'DAC_CR_CHX_BITOFFSET_MASK',
    'DAC_SWTR_CH1', 'DAC_SWTR_CHX_MASK', 'DAC_SWTR_CHX_MASK',
    'DAC_REG_DHR12R1_REGOFFSET', 'DAC_REG_DHR12L1_REGOFFSET',
    'DAC_REG_DHR8R1_REGOFFSET', 'DAC_REG_DHR12RX_REGOFFSET_MASK',
    'DAC_REG_DHR12LX_REGOFFSET_MASK', 'DAC_REG_DHR8RX_REGOFFSET_MASK',
    'DAC_REG_DHRX_REGOFFSET_MASK', 'DAC_REG_DOR1_REGOFFSET',
    'DAC_REG_DORX_REGOFFSET_MASK', 'DAC_REG_DORX_REGOFFSET_MASK',
    'DAC_REG_REGOFFSET_MASK_POSBIT0', 'DAC_REG_DHR12RX_REGOFFSET_BITOFFSET_POS',
    'DAC_REG_DHR12LX_REGOFFSET_BITOFFSET_POS', 'DAC_REG_DHR8RX_REGOFFSET_BITOFFSET_POS',
    'DAC_REG_DORX_REGOFFSET_BITOFFSET_POS', 'DAC_DIGITAL_SCALE_12BITS',
    'LL_DAC_FLAG_DMAUDR1', 'LL_DAC_IT_DMAUDRIE1', 'LL_DAC_CHANNEL_1',
    'LL_DAC_TRIG_SOFTWARE', 'LL_DAC_TRIG_EXT_TIM2_TRGO', 'LL_DAC_TRIG_EXT_TIM3_TRGO',
    'LL_DAC_TRIG_EXT_TIM3_CH3', 'LL_DAC_TRIG_EXT_TIM6_TRGO',
    'LL_DAC_TRIG_EXT_TIM7_TRGO', 'LL_DAC_TRIG_EXT_TIM21_TRGO',
    'LL_DAC_TRIG_EXT_EXTI_LINE9', 'LL_DAC_WAVE_AUTO_GENERATION_NONE',
    'LL_DAC_WAVE_AUTO_GENERATION_NOISE', 'LL_DAC_WAVE_AUTO_GENERATION_TRIANGLE',
    'LL_DAC_NOISE_LFSR_UNMASK_BIT0', 'LL_DAC_NOISE_LFSR_UNMASK_BITS1_0',
    'LL_DAC_NOISE_LFSR_UNMASK_BITS2_0', 'LL_DAC_NOISE_LFSR_UNMASK_BITS3_0',
    'LL_DAC_NOISE_LFSR_UNMASK_BITS4_0', 'LL_DAC_NOISE_LFSR_UNMASK_BITS5_0',
    'LL_DAC_NOISE_LFSR_UNMASK_BITS6_0', 'LL_DAC_NOISE_LFSR_UNMASK_BITS7_0',
    'LL_DAC_NOISE_LFSR_UNMASK_BITS8_0', 'LL_DAC_NOISE_LFSR_UNMASK_BITS9_0',
    'LL_DAC_NOISE_LFSR_UNMASK_BITS10_0', 'LL_DAC_NOISE_LFSR_UNMASK_BITS11_0',
    'LL_DAC_TRIANGLE_AMPLITUDE_1', 'LL_DAC_TRIANGLE_AMPLITUDE_3',
    'LL_DAC_TRIANGLE_AMPLITUDE_7', 'LL_DAC_TRIANGLE_AMPLITUDE_15',
    'LL_DAC_TRIANGLE_AMPLITUDE_31', 'LL_DAC_TRIANGLE_AMPLITUDE_63',
    'LL_DAC_TRIANGLE_AMPLITUDE_127', 'LL_DAC_TRIANGLE_AMPLITUDE_255',
    'LL_DAC_TRIANGLE_AMPLITUDE_511', 'LL_DAC_TRIANGLE_AMPLITUDE_1023',
    'LL_DAC_TRIANGLE_AMPLITUDE_2047', 'LL_DAC_TRIANGLE_AMPLITUDE_4095',
    'LL_DAC_OUTPUT_BUFFER_ENABLE', 'LL_DAC_OUTPUT_BUFFER_DISABLE',
    'LL_DAC_RESOLUTION_12B', 'LL_DAC_RESOLUTION_8B',
    'LL_DAC_DMA_REG_DATA_12BITS_RIGHT_ALIGNED',
    'LL_DAC_DMA_REG_DATA_12BITS_LEFT_ALIGNED',
    'LL_DAC_DMA_REG_DATA_8BITS_RIGHT_ALIGNED',
    'LL_DAC_DELAY_STARTUP_VOLTAGE_SETTLING_US', 'LL_DAC_DELAY_VOLTAGE_SETTLING_US',
    'LL_DAC_InitTypeDef', 'DMA_CSELR_OFFSET', 'LL_DMA_IFCR_CGIF1', 'LL_DMA_IFCR_CTCIF1',
    'LL_DMA_IFCR_CHTIF1', 'LL_DMA_IFCR_CTEIF1', 'LL_DMA_IFCR_CGIF2',
    'LL_DMA_IFCR_CTCIF2', 'LL_DMA_IFCR_CHTIF2', 'LL_DMA_IFCR_CTEIF2',
    'LL_DMA_IFCR_CGIF3', 'LL_DMA_IFCR_CTCIF3', 'LL_DMA_IFCR_CHTIF3',
    'LL_DMA_IFCR_CTEIF3', 'LL_DMA_IFCR_CGIF4', 'LL_DMA_IFCR_CTCIF4',
    'LL_DMA_IFCR_CHTIF4', 'LL_DMA_IFCR_CTEIF4', 'LL_DMA_IFCR_CGIF5',
    'LL_DMA_IFCR_CTCIF5', 'LL_DMA_IFCR_CHTIF5', 'LL_DMA_IFCR_CTEIF5',
    'LL_DMA_IFCR_CGIF6', 'LL_DMA_IFCR_CTCIF6', 'LL_DMA_IFCR_CHTIF6',
    'LL_DMA_IFCR_CTEIF6', 'LL_DMA_IFCR_CGIF7', 'LL_DMA_IFCR_CTCIF7',
    'LL_DMA_IFCR_CHTIF7', 'LL_DMA_IFCR_CTEIF7', 'LL_DMA_ISR_GIF1', 'LL_DMA_ISR_TCIF1',
    'LL_DMA_ISR_HTIF1', 'LL_DMA_ISR_TEIF1', 'LL_DMA_ISR_GIF2', 'LL_DMA_ISR_TCIF2',
    'LL_DMA_ISR_HTIF2', 'LL_DMA_ISR_TEIF2', 'LL_DMA_ISR_GIF3', 'LL_DMA_ISR_TCIF3',
    'LL_DMA_ISR_HTIF3', 'LL_DMA_ISR_TEIF3', 'LL_DMA_ISR_GIF4', 'LL_DMA_ISR_TCIF4',
    'LL_DMA_ISR_HTIF4', 'LL_DMA_ISR_TEIF4', 'LL_DMA_ISR_GIF5', 'LL_DMA_ISR_TCIF5',
    'LL_DMA_ISR_HTIF5', 'LL_DMA_ISR_TEIF5', 'LL_DMA_ISR_GIF6', 'LL_DMA_ISR_TCIF6',
    'LL_DMA_ISR_HTIF6', 'LL_DMA_ISR_TEIF6', 'LL_DMA_ISR_GIF7', 'LL_DMA_ISR_TCIF7',
    'LL_DMA_ISR_HTIF7', 'LL_DMA_ISR_TEIF7', 'LL_DMA_CCR_TCIE', 'LL_DMA_CCR_HTIE',
    'LL_DMA_CCR_TEIE', 'LL_DMA_CHANNEL_1', 'LL_DMA_CHANNEL_2', 'LL_DMA_CHANNEL_3',
    'LL_DMA_CHANNEL_4', 'LL_DMA_CHANNEL_5', 'LL_DMA_CHANNEL_6', 'LL_DMA_CHANNEL_7',
    'LL_DMA_CHANNEL_ALL', 'LL_DMA_DIRECTION_PERIPH_TO_MEMORY',
    'LL_DMA_DIRECTION_MEMORY_TO_PERIPH', 'LL_DMA_DIRECTION_MEMORY_TO_MEMORY',
    'LL_DMA_MODE_NORMAL', 'LL_DMA_MODE_CIRCULAR', 'LL_DMA_PERIPH_INCREMENT',
    'LL_DMA_PERIPH_NOINCREMENT', 'LL_DMA_MEMORY_INCREMENT', 'LL_DMA_MEMORY_NOINCREMENT',
    'LL_DMA_PDATAALIGN_BYTE', 'LL_DMA_PDATAALIGN_HALFWORD', 'LL_DMA_PDATAALIGN_WORD',
    'LL_DMA_MDATAALIGN_BYTE', 'LL_DMA_MDATAALIGN_HALFWORD', 'LL_DMA_MDATAALIGN_WORD',
    'LL_DMA_PRIORITY_LOW', 'LL_DMA_PRIORITY_MEDIUM', 'LL_DMA_PRIORITY_HIGH',
    'LL_DMA_PRIORITY_VERYHIGH', 'LL_DMA_REQUEST_0', 'LL_DMA_REQUEST_1',
    'LL_DMA_REQUEST_2', 'LL_DMA_REQUEST_3', 'LL_DMA_REQUEST_4', 'LL_DMA_REQUEST_5',
    'LL_DMA_REQUEST_6', 'LL_DMA_REQUEST_7', 'LL_DMA_REQUEST_8', 'LL_DMA_REQUEST_9',
    'LL_DMA_REQUEST_10', 'LL_DMA_REQUEST_11', 'LL_DMA_REQUEST_12', 'LL_DMA_REQUEST_13',
    'LL_DMA_REQUEST_14', 'LL_DMA_REQUEST_15', 'LL_DMA_InitTypeDef', 'LL_EXTI_LINE_0',
    'LL_EXTI_LINE_1', 'LL_EXTI_LINE_2', 'LL_EXTI_LINE_3', 'LL_EXTI_LINE_4',
    'LL_EXTI_LINE_5', 'LL_EXTI_LINE_6', 'LL_EXTI_LINE_7', 'LL_EXTI_LINE_8',
    'LL_EXTI_LINE_9', 'LL_EXTI_LINE_10', 'LL_EXTI_LINE_11', 'LL_EXTI_LINE_12',
    'LL_EXTI_LINE_13', 'LL_EXTI_LINE_14', 'LL_EXTI_LINE_15', 'LL_EXTI_LINE_16',
    'LL_EXTI_LINE_17', 'LL_EXTI_LINE_18', 'LL_EXTI_LINE_19', 'LL_EXTI_LINE_20',
    'LL_EXTI_LINE_21', 'LL_EXTI_LINE_22', 'LL_EXTI_LINE_23', 'LL_EXTI_LINE_25',
    'LL_EXTI_LINE_26', 'LL_EXTI_LINE_28', 'LL_EXTI_LINE_29', 'LL_EXTI_LINE_ALL_0_31',
    'LL_EXTI_LINE_ALL', 'LL_EXTI_LINE_NONE', 'LL_EXTI_MODE_IT', 'LL_EXTI_MODE_EVENT',
    'LL_EXTI_MODE_IT_EVENT', 'LL_EXTI_TRIGGER_NONE', 'LL_EXTI_TRIGGER_RISING',
    'LL_EXTI_TRIGGER_FALLING', 'LL_EXTI_TRIGGER_RISING_FALLING', 'LL_EXTI_InitTypeDef',
    'LL_GPIO_PIN_0', 'LL_GPIO_PIN_1', 'LL_GPIO_PIN_2', 'LL_GPIO_PIN_3', 'LL_GPIO_PIN_4',
    'LL_GPIO_PIN_5', 'LL_GPIO_PIN_6', 'LL_GPIO_PIN_7', 'LL_GPIO_PIN_8', 'LL_GPIO_PIN_9',
    'LL_GPIO_PIN_10', 'LL_GPIO_PIN_11', 'LL_GPIO_PIN_12', 'LL_GPIO_PIN_13',
    'LL_GPIO_PIN_14', 'LL_GPIO_PIN_15', 'LL_GPIO_PIN_ALL', 'LL_GPIO_MODE_INPUT',
    'LL_GPIO_MODE_OUTPUT', 'LL_GPIO_MODE_ALTERNATE', 'LL_GPIO_MODE_ANALOG',
    'LL_GPIO_OUTPUT_PUSHPULL', 'LL_GPIO_OUTPUT_OPENDRAIN', 'LL_GPIO_SPEED_FREQ_LOW',
    'LL_GPIO_SPEED_FREQ_MEDIUM', 'LL_GPIO_SPEED_FREQ_HIGH',
    'LL_GPIO_SPEED_FREQ_VERY_HIGH', 'LL_GPIO_SPEED_LOW', 'LL_GPIO_SPEED_MEDIUM',
    'LL_GPIO_SPEED_FAST', 'LL_GPIO_SPEED_HIGH', 'LL_GPIO_PULL_NO', 'LL_GPIO_PULL_UP',
    'LL_GPIO_PULL_DOWN', 'LL_GPIO_AF_0', 'LL_GPIO_AF_1', 'LL_GPIO_AF_2', 'LL_GPIO_AF_3',
    'LL_GPIO_AF_4', 'LL_GPIO_AF_5', 'LL_GPIO_AF_6', 'LL_GPIO_AF_7',
    'LL_GPIO_InitTypeDef', 'LL_I2C_ICR_ADDRCF', 'LL_I2C_ICR_NACKCF',
    'LL_I2C_ICR_STOPCF', 'LL_I2C_ICR_BERRCF', 'LL_I2C_ICR_ARLOCF', 'LL_I2C_ICR_OVRCF',
    'LL_I2C_ICR_PECCF', 'LL_I2C_ICR_TIMOUTCF', 'LL_I2C_ICR_ALERTCF', 'LL_I2C_ISR_TXE',
    'LL_I2C_ISR_TXIS', 'LL_I2C_ISR_RXNE', 'LL_I2C_ISR_ADDR', 'LL_I2C_ISR_NACKF',
    'LL_I2C_ISR_STOPF', 'LL_I2C_ISR_TC', 'LL_I2C_ISR_TCR', 'LL_I2C_ISR_BERR',
    'LL_I2C_ISR_ARLO', 'LL_I2C_ISR_OVR', 'LL_I2C_ISR_PECERR', 'LL_I2C_ISR_TIMEOUT',
    'LL_I2C_ISR_ALERT', 'LL_I2C_ISR_BUSY', 'LL_I2C_CR1_TXIE', 'LL_I2C_CR1_RXIE',
    'LL_I2C_CR1_ADDRIE', 'LL_I2C_CR1_NACKIE', 'LL_I2C_CR1_STOPIE', 'LL_I2C_CR1_TCIE',
    'LL_I2C_CR1_ERRIE', 'LL_I2C_MODE_I2C', 'LL_I2C_MODE_SMBUS_HOST',
    'LL_I2C_MODE_SMBUS_DEVICE', 'LL_I2C_MODE_SMBUS_DEVICE_ARP',
    'LL_I2C_ANALOGFILTER_ENABLE', 'LL_I2C_ANALOGFILTER_DISABLE',
    'LL_I2C_ADDRESSING_MODE_7BIT', 'LL_I2C_ADDRESSING_MODE_10BIT',
    'LL_I2C_OWNADDRESS1_7BIT', 'LL_I2C_OWNADDRESS1_10BIT', 'LL_I2C_OWNADDRESS2_NOMASK',
    'LL_I2C_OWNADDRESS2_MASK01', 'LL_I2C_OWNADDRESS2_MASK02',
    'LL_I2C_OWNADDRESS2_MASK03', 'LL_I2C_OWNADDRESS2_MASK04',
    'LL_I2C_OWNADDRESS2_MASK05', 'LL_I2C_OWNADDRESS2_MASK06',
    'LL_I2C_OWNADDRESS2_MASK07', 'LL_I2C_ACK', 'LL_I2C_NACK', 'LL_I2C_ADDRSLAVE_7BIT',
    'LL_I2C_ADDRSLAVE_10BIT', 'LL_I2C_REQUEST_WRITE', 'LL_I2C_REQUEST_READ',
    'LL_I2C_MODE_RELOAD', 'LL_I2C_MODE_AUTOEND', 'LL_I2C_MODE_SOFTEND',
    'LL_I2C_MODE_SMBUS_RELOAD', 'LL_I2C_MODE_SMBUS_AUTOEND_NO_PEC',
    'LL_I2C_MODE_SMBUS_SOFTEND_NO_PEC', 'LL_I2C_MODE_SMBUS_AUTOEND_WITH_PEC',
    'LL_I2C_MODE_SMBUS_SOFTEND_WITH_PEC', 'LL_I2C_GENERATE_NOSTARTSTOP',
    'LL_I2C_GENERATE_STOP', 'LL_I2C_GENERATE_START_READ', 'LL_I2C_GENERATE_START_WRITE',
    'LL_I2C_GENERATE_RESTART_7BIT_READ', 'LL_I2C_GENERATE_RESTART_7BIT_WRITE',
    'LL_I2C_GENERATE_RESTART_10BIT_READ', 'LL_I2C_GENERATE_RESTART_10BIT_WRITE',
    'LL_I2C_DIRECTION_WRITE', 'LL_I2C_DIRECTION_READ', 'LL_I2C_DMA_REG_DATA_TRANSMIT',
    'LL_I2C_DMA_REG_DATA_RECEIVE', 'LL_I2C_SMBUS_TIMEOUTA_MODE_SCL_LOW',
    'LL_I2C_SMBUS_TIMEOUTA_MODE_SDA_SCL_HIGH', 'LL_I2C_SMBUS_TIMEOUTA',
    'LL_I2C_SMBUS_TIMEOUTB', 'LL_I2C_SMBUS_ALL_TIMEOUT', 'LL_I2C_InitTypeDef',
    'LL_IWDG_KEY_RELOAD', 'LL_IWDG_KEY_ENABLE', 'LL_IWDG_KEY_WR_ACCESS_ENABLE',
    'LL_IWDG_KEY_WR_ACCESS_DISABLE', 'LL_IWDG_SR_PVU', 'LL_IWDG_SR_RVU',
    'LL_IWDG_SR_WVU', 'LL_IWDG_PRESCALER_4', 'LL_IWDG_PRESCALER_8',
    'LL_IWDG_PRESCALER_16', 'LL_IWDG_PRESCALER_32', 'LL_IWDG_PRESCALER_64',
    'LL_IWDG_PRESCALER_128', 'LL_IWDG_PRESCALER_256', 'LL_LPTIM_ISR_CMPM',
    'LL_LPTIM_ISR_ARRM', 'LL_LPTIM_ISR_EXTTRIG', 'LL_LPTIM_ISR_CMPOK',
    'LL_LPTIM_ISR_ARROK', 'LL_LPTIM_ISR_UP', 'LL_LPTIM_ISR_DOWN', 'LL_LPTIM_IER_CMPMIE',
    'LL_LPTIM_IER_ARRMIE', 'LL_LPTIM_IER_EXTTRIGIE', 'LL_LPTIM_IER_CMPOKIE',
    'LL_LPTIM_IER_ARROKIE', 'LL_LPTIM_IER_UPIE', 'LL_LPTIM_IER_DOWNIE',
    'LL_LPTIM_OPERATING_MODE_CONTINUOUS', 'LL_LPTIM_OPERATING_MODE_ONESHOT',
    'LL_LPTIM_UPDATE_MODE_IMMEDIATE', 'LL_LPTIM_UPDATE_MODE_ENDOFPERIOD',
    'LL_LPTIM_COUNTER_MODE_INTERNAL', 'LL_LPTIM_COUNTER_MODE_EXTERNAL',
    'LL_LPTIM_OUTPUT_WAVEFORM_PWM', 'LL_LPTIM_OUTPUT_WAVEFORM_SETONCE',
    'LL_LPTIM_OUTPUT_POLARITY_REGULAR', 'LL_LPTIM_OUTPUT_POLARITY_INVERSE',
    'LL_LPTIM_PRESCALER_DIV1', 'LL_LPTIM_PRESCALER_DIV2', 'LL_LPTIM_PRESCALER_DIV4',
    'LL_LPTIM_PRESCALER_DIV8', 'LL_LPTIM_PRESCALER_DIV16', 'LL_LPTIM_PRESCALER_DIV32',
    'LL_LPTIM_PRESCALER_DIV64', 'LL_LPTIM_PRESCALER_DIV128',
    'LL_LPTIM_TRIG_SOURCE_GPIO', 'LL_LPTIM_TRIG_SOURCE_RTCALARMA',
    'LL_LPTIM_TRIG_SOURCE_RTCALARMB', 'LL_LPTIM_TRIG_SOURCE_RTCTAMP1',
    'LL_LPTIM_TRIG_SOURCE_RTCTAMP2', 'LL_LPTIM_TRIG_SOURCE_COMP1',
    'LL_LPTIM_TRIG_SOURCE_COMP2', 'LL_LPTIM_TRIG_FILTER_NONE', 'LL_LPTIM_TRIG_FILTER_2',
    'LL_LPTIM_TRIG_FILTER_4', 'LL_LPTIM_TRIG_FILTER_8', 'LL_LPTIM_TRIG_POLARITY_RISING',
    'LL_LPTIM_TRIG_POLARITY_FALLING', 'LL_LPTIM_TRIG_POLARITY_RISING_FALLING',
    'LL_LPTIM_CLK_SOURCE_INTERNAL', 'LL_LPTIM_CLK_SOURCE_EXTERNAL',
    'LL_LPTIM_CLK_FILTER_NONE', 'LL_LPTIM_CLK_FILTER_2', 'LL_LPTIM_CLK_FILTER_4',
    'LL_LPTIM_CLK_FILTER_8', 'LL_LPTIM_CLK_POLARITY_RISING',
    'LL_LPTIM_CLK_POLARITY_FALLING', 'LL_LPTIM_CLK_POLARITY_RISING_FALLING',
    'LL_LPTIM_ENCODER_MODE_RISING', 'LL_LPTIM_ENCODER_MODE_FALLING',
    'LL_LPTIM_ENCODER_MODE_RISING_FALLING', 'LL_LPTIM_InitTypeDef',
    'LPUART_LPUARTDIV_FREQ_MUL', 'LPUART_BRR_MASK', 'LPUART_BRR_MIN_VALUE',
    'LL_LPUART_ICR_PECF', 'LL_LPUART_ICR_FECF', 'LL_LPUART_ICR_NCF',
    'LL_LPUART_ICR_ORECF', 'LL_LPUART_ICR_IDLECF', 'LL_LPUART_ICR_TCCF',
    'LL_LPUART_ICR_CTSCF', 'LL_LPUART_ICR_CMCF', 'LL_LPUART_ICR_WUCF',
    'LL_LPUART_ISR_PE', 'LL_LPUART_ISR_FE', 'LL_LPUART_ISR_NE', 'LL_LPUART_ISR_ORE',
    'LL_LPUART_ISR_IDLE', 'LL_LPUART_ISR_RXNE', 'LL_LPUART_ISR_TC', 'LL_LPUART_ISR_TXE',
    'LL_LPUART_ISR_CTSIF', 'LL_LPUART_ISR_CTS', 'LL_LPUART_ISR_BUSY',
    'LL_LPUART_ISR_CMF', 'LL_LPUART_ISR_SBKF', 'LL_LPUART_ISR_RWU', 'LL_LPUART_ISR_WUF',
    'LL_LPUART_ISR_TEACK', 'LL_LPUART_ISR_REACK', 'LL_LPUART_CR1_IDLEIE',
    'LL_LPUART_CR1_RXNEIE', 'LL_LPUART_CR1_TCIE', 'LL_LPUART_CR1_TXEIE',
    'LL_LPUART_CR1_PEIE', 'LL_LPUART_CR1_CMIE', 'LL_LPUART_CR3_EIE',
    'LL_LPUART_CR3_CTSIE', 'LL_LPUART_CR3_WUFIE', 'LL_LPUART_DIRECTION_NONE',
    'LL_LPUART_DIRECTION_RX', 'LL_LPUART_DIRECTION_TX', 'LL_LPUART_DIRECTION_TX_RX',
    'LL_LPUART_PARITY_NONE', 'LL_LPUART_PARITY_EVEN', 'LL_LPUART_PARITY_ODD',
    'LL_LPUART_WAKEUP_IDLELINE', 'LL_LPUART_WAKEUP_ADDRESSMARK',
    'LL_LPUART_DATAWIDTH_7B', 'LL_LPUART_DATAWIDTH_8B', 'LL_LPUART_DATAWIDTH_9B',
    'LL_LPUART_STOPBITS_1', 'LL_LPUART_STOPBITS_2', 'LL_LPUART_TXRX_STANDARD',
    'LL_LPUART_TXRX_SWAPPED', 'LL_LPUART_RXPIN_LEVEL_STANDARD',
    'LL_LPUART_RXPIN_LEVEL_INVERTED', 'LL_LPUART_TXPIN_LEVEL_STANDARD',
    'LL_LPUART_TXPIN_LEVEL_INVERTED', 'LL_LPUART_BINARY_LOGIC_POSITIVE',
    'LL_LPUART_BINARY_LOGIC_NEGATIVE', 'LL_LPUART_BITORDER_LSBFIRST',
    'LL_LPUART_BITORDER_MSBFIRST', 'LL_LPUART_ADDRESS_DETECT_4B',
    'LL_LPUART_ADDRESS_DETECT_7B', 'LL_LPUART_HWCONTROL_NONE',
    'LL_LPUART_HWCONTROL_RTS', 'LL_LPUART_HWCONTROL_CTS', 'LL_LPUART_HWCONTROL_RTS_CTS',
    'LL_LPUART_WAKEUP_ON_ADDRESS', 'LL_LPUART_WAKEUP_ON_STARTBIT',
    'LL_LPUART_WAKEUP_ON_RXNE', 'LL_LPUART_DE_POLARITY_HIGH',
    'LL_LPUART_DE_POLARITY_LOW', 'LL_LPUART_DMA_REG_DATA_TRANSMIT',
    'LL_LPUART_DMA_REG_DATA_RECEIVE', 'LL_LPUART_InitTypeDef', 'HSE_VALUE', 'HSI_VALUE',
    'LSE_VALUE', 'LSI_VALUE', 'HSI48_VALUE', 'LL_RCC_CICR_LSIRDYC',
    'LL_RCC_CICR_LSERDYC', 'LL_RCC_CICR_HSIRDYC', 'LL_RCC_CICR_HSERDYC',
    'LL_RCC_CICR_PLLRDYC', 'LL_RCC_CICR_MSIRDYC', 'LL_RCC_CICR_HSI48RDYC',
    'LL_RCC_CICR_LSECSSC', 'LL_RCC_CICR_CSSC', 'LL_RCC_CIFR_LSIRDYF',
    'LL_RCC_CIFR_LSERDYF', 'LL_RCC_CIFR_HSIRDYF', 'LL_RCC_CIFR_HSERDYF',
    'LL_RCC_CIFR_PLLRDYF', 'LL_RCC_CIFR_MSIRDYF', 'LL_RCC_CIFR_HSI48RDYF',
    'LL_RCC_CIFR_LSECSSF', 'LL_RCC_CIFR_CSSF', 'LL_RCC_CSR_FWRSTF',
    'LL_RCC_CSR_OBLRSTF', 'LL_RCC_CSR_PINRSTF', 'LL_RCC_CSR_PORRSTF',
    'LL_RCC_CSR_SFTRSTF', 'LL_RCC_CSR_IWDGRSTF', 'LL_RCC_CSR_WWDGRSTF',
    'LL_RCC_CSR_LPWRRSTF', 'LL_RCC_CIER_LSIRDYIE', 'LL_RCC_CIER_LSERDYIE',
    'LL_RCC_CIER_HSIRDYIE', 'LL_RCC_CIER_HSERDYIE', 'LL_RCC_CIER_PLLRDYIE',
    'LL_RCC_CIER_MSIRDYIE', 'LL_RCC_CIER_HSI48RDYIE', 'LL_RCC_CIER_LSECSSIE',
    'LL_RCC_LSEDRIVE_LOW', 'LL_RCC_LSEDRIVE_MEDIUMLOW', 'LL_RCC_LSEDRIVE_MEDIUMHIGH',
    'LL_RCC_LSEDRIVE_HIGH', 'LL_RCC_RTC_HSE_DIV_2', 'LL_RCC_RTC_HSE_DIV_4',
    'LL_RCC_RTC_HSE_DIV_8', 'LL_RCC_RTC_HSE_DIV_16', 'LL_RCC_MSIRANGE_0',
    'LL_RCC_MSIRANGE_1', 'LL_RCC_MSIRANGE_2', 'LL_RCC_MSIRANGE_3', 'LL_RCC_MSIRANGE_4',
    'LL_RCC_MSIRANGE_5', 'LL_RCC_MSIRANGE_6', 'LL_RCC_SYS_CLKSOURCE_MSI',
    'LL_RCC_SYS_CLKSOURCE_HSI', 'LL_RCC_SYS_CLKSOURCE_HSE', 'LL_RCC_SYS_CLKSOURCE_PLL',
    'LL_RCC_SYS_CLKSOURCE_STATUS_MSI', 'LL_RCC_SYS_CLKSOURCE_STATUS_HSI',
    'LL_RCC_SYS_CLKSOURCE_STATUS_HSE', 'LL_RCC_SYS_CLKSOURCE_STATUS_PLL',
    'LL_RCC_SYSCLK_DIV_1', 'LL_RCC_SYSCLK_DIV_2', 'LL_RCC_SYSCLK_DIV_4',
    'LL_RCC_SYSCLK_DIV_8', 'LL_RCC_SYSCLK_DIV_16', 'LL_RCC_SYSCLK_DIV_64',
    'LL_RCC_SYSCLK_DIV_128', 'LL_RCC_SYSCLK_DIV_256', 'LL_RCC_SYSCLK_DIV_512',
    'LL_RCC_APB1_DIV_1', 'LL_RCC_APB1_DIV_2', 'LL_RCC_APB1_DIV_4', 'LL_RCC_APB1_DIV_8',
    'LL_RCC_APB1_DIV_16', 'LL_RCC_APB2_DIV_1', 'LL_RCC_APB2_DIV_2', 'LL_RCC_APB2_DIV_4',
    'LL_RCC_APB2_DIV_8', 'LL_RCC_APB2_DIV_16', 'LL_RCC_STOP_WAKEUPCLOCK_MSI',
    'LL_RCC_STOP_WAKEUPCLOCK_HSI', 'LL_RCC_MCO1SOURCE_NOCLOCK',
    'LL_RCC_MCO1SOURCE_SYSCLK', 'LL_RCC_MCO1SOURCE_HSI', 'LL_RCC_MCO1SOURCE_MSI',
    'LL_RCC_MCO1SOURCE_HSE', 'LL_RCC_MCO1SOURCE_LSI', 'LL_RCC_MCO1SOURCE_LSE',
    'LL_RCC_MCO1SOURCE_HSI48', 'LL_RCC_MCO1SOURCE_PLLCLK', 'LL_RCC_MCO1_DIV_1',
    'LL_RCC_MCO1_DIV_2', 'LL_RCC_MCO1_DIV_4', 'LL_RCC_MCO1_DIV_8', 'LL_RCC_MCO1_DIV_16',
    'LL_RCC_PERIPH_FREQUENCY_NO', 'LL_RCC_PERIPH_FREQUENCY_NA',
    'LL_RCC_USART1_CLKSOURCE_PCLK2', 'LL_RCC_USART1_CLKSOURCE_SYSCLK',
    'LL_RCC_USART1_CLKSOURCE_HSI', 'LL_RCC_USART1_CLKSOURCE_LSE',
    'LL_RCC_USART2_CLKSOURCE_PCLK1', 'LL_RCC_USART2_CLKSOURCE_SYSCLK',
    'LL_RCC_USART2_CLKSOURCE_HSI', 'LL_RCC_USART2_CLKSOURCE_LSE',
    'LL_RCC_LPUART1_CLKSOURCE_PCLK1', 'LL_RCC_LPUART1_CLKSOURCE_SYSCLK',
    'LL_RCC_LPUART1_CLKSOURCE_HSI', 'LL_RCC_LPUART1_CLKSOURCE_LSE',
    'LL_RCC_I2C1_CLKSOURCE_PCLK1', 'LL_RCC_I2C1_CLKSOURCE_SYSCLK',
    'LL_RCC_I2C1_CLKSOURCE_HSI', 'LL_RCC_LPTIM1_CLKSOURCE_PCLK1',
    'LL_RCC_LPTIM1_CLKSOURCE_LSI', 'LL_RCC_LPTIM1_CLKSOURCE_HSI',
    'LL_RCC_LPTIM1_CLKSOURCE_LSE', 'LL_RCC_RNG_CLKSOURCE_PLL',
    'LL_RCC_RNG_CLKSOURCE_HSI48', 'LL_RCC_USB_CLKSOURCE_PLL',
    'LL_RCC_USB_CLKSOURCE_HSI48', 'LL_RCC_USART1_CLKSOURCE', 'LL_RCC_USART2_CLKSOURCE',
    'LL_RCC_LPUART1_CLKSOURCE', 'LL_RCC_I2C1_CLKSOURCE', 'LL_RCC_LPTIM1_CLKSOURCE',
    'LL_RCC_RNG_CLKSOURCE', 'LL_RCC_USB_CLKSOURCE', 'LL_RCC_RTC_CLKSOURCE_NONE',
    'LL_RCC_RTC_CLKSOURCE_LSE', 'LL_RCC_RTC_CLKSOURCE_LSI', 'LL_RCC_RTC_CLKSOURCE_HSE',
    'LL_RCC_PLL_MUL_3', 'LL_RCC_PLL_MUL_4', 'LL_RCC_PLL_MUL_6', 'LL_RCC_PLL_MUL_8',
    'LL_RCC_PLL_MUL_12', 'LL_RCC_PLL_MUL_16', 'LL_RCC_PLL_MUL_24', 'LL_RCC_PLL_MUL_32',
    'LL_RCC_PLL_MUL_48', 'LL_RCC_PLL_DIV_2', 'LL_RCC_PLL_DIV_3', 'LL_RCC_PLL_DIV_4',
    'LL_RCC_PLLSOURCE_HSI', 'LL_RCC_PLLSOURCE_HSE', 'LL_RCC_ClocksTypeDef',
    'LL_RNG_SR_DRDY', 'LL_RNG_SR_CECS', 'LL_RNG_SR_SECS', 'LL_RNG_SR_CEIS',
    'LL_RNG_SR_SEIS', 'LL_RNG_CR_IE', 'RTC_LL_INIT_MASK', 'RTC_LL_RSF_MASK',
    'RTC_WRITE_PROTECTION_DISABLE', 'RTC_WRITE_PROTECTION_ENABLE_1',
    'RTC_WRITE_PROTECTION_ENABLE_2', 'RTC_OFFSET_WEEKDAY', 'RTC_OFFSET_DAY',
    'RTC_OFFSET_MONTH', 'RTC_OFFSET_HOUR', 'RTC_OFFSET_MINUTE', 'LL_RTC_FORMAT_BIN',
    'LL_RTC_FORMAT_BCD', 'LL_RTC_ALMA_DATEWEEKDAYSEL_DATE',
    'LL_RTC_ALMA_DATEWEEKDAYSEL_WEEKDAY', 'LL_RTC_ALMB_DATEWEEKDAYSEL_DATE',
    'LL_RTC_ALMB_DATEWEEKDAYSEL_WEEKDAY', 'LL_RTC_ISR_RECALPF', 'LL_RTC_ISR_TAMP2F',
    'LL_RTC_ISR_TAMP1F', 'LL_RTC_ISR_TSOVF', 'LL_RTC_ISR_TSF', 'LL_RTC_ISR_WUTF',
    'LL_RTC_ISR_ALRBF', 'LL_RTC_ISR_ALRAF', 'LL_RTC_ISR_INITF', 'LL_RTC_ISR_RSF',
    'LL_RTC_ISR_INITS', 'LL_RTC_ISR_SHPF', 'LL_RTC_ISR_WUTWF', 'LL_RTC_ISR_ALRBWF',
    'LL_RTC_ISR_ALRAWF', 'LL_RTC_CR_TSIE', 'LL_RTC_CR_WUTIE', 'LL_RTC_CR_ALRBIE',
    'LL_RTC_CR_ALRAIE', 'LL_RTC_TAMPCR_TAMP2IE', 'LL_RTC_TAMPCR_TAMP1IE',
    'LL_RTC_TAMPCR_TAMPIE', 'LL_RTC_WEEKDAY_MONDAY', 'LL_RTC_WEEKDAY_TUESDAY',
    'LL_RTC_WEEKDAY_WEDNESDAY', 'LL_RTC_WEEKDAY_THURSDAY', 'LL_RTC_WEEKDAY_FRIDAY',
    'LL_RTC_WEEKDAY_SATURDAY', 'LL_RTC_WEEKDAY_SUNDAY', 'LL_RTC_MONTH_JANUARY',
    'LL_RTC_MONTH_FEBRUARY', 'LL_RTC_MONTH_MARCH', 'LL_RTC_MONTH_APRIL',
    'LL_RTC_MONTH_MAY', 'LL_RTC_MONTH_JUNE', 'LL_RTC_MONTH_JULY', 'LL_RTC_MONTH_AUGUST',
    'LL_RTC_MONTH_SEPTEMBER', 'LL_RTC_MONTH_OCTOBER', 'LL_RTC_MONTH_NOVEMBER',
    'LL_RTC_MONTH_DECEMBER', 'LL_RTC_HOURFORMAT_24HOUR', 'LL_RTC_HOURFORMAT_AMPM',
    'LL_RTC_ALARMOUT_DISABLE', 'LL_RTC_ALARMOUT_ALMA', 'LL_RTC_ALARMOUT_ALMB',
    'LL_RTC_ALARMOUT_WAKEUP', 'LL_RTC_ALARM_OUTPUTTYPE_OPENDRAIN',
    'LL_RTC_ALARM_OUTPUTTYPE_PUSHPULL', 'LL_RTC_OUTPUTPOLARITY_PIN_HIGH',
    'LL_RTC_OUTPUTPOLARITY_PIN_LOW', 'LL_RTC_TIME_FORMAT_AM_OR_24',
    'LL_RTC_TIME_FORMAT_PM', 'LL_RTC_SHIFT_SECOND_DELAY', 'LL_RTC_SHIFT_SECOND_ADVANCE',
    'LL_RTC_ALMA_MASK_NONE', 'LL_RTC_ALMA_MASK_DATEWEEKDAY', 'LL_RTC_ALMA_MASK_HOURS',
    'LL_RTC_ALMA_MASK_MINUTES', 'LL_RTC_ALMA_MASK_SECONDS', 'LL_RTC_ALMA_MASK_ALL',
    'LL_RTC_ALMA_TIME_FORMAT_AM', 'LL_RTC_ALMA_TIME_FORMAT_PM', 'LL_RTC_ALMB_MASK_NONE',
    'LL_RTC_ALMB_MASK_DATEWEEKDAY', 'LL_RTC_ALMB_MASK_HOURS',
    'LL_RTC_ALMB_MASK_MINUTES', 'LL_RTC_ALMB_MASK_SECONDS', 'LL_RTC_ALMB_MASK_ALL',
    'LL_RTC_ALMB_TIME_FORMAT_AM', 'LL_RTC_ALMB_TIME_FORMAT_PM',
    'LL_RTC_TIMESTAMP_EDGE_RISING', 'LL_RTC_TIMESTAMP_EDGE_FALLING',
    'LL_RTC_TS_TIME_FORMAT_AM', 'LL_RTC_TS_TIME_FORMAT_PM', 'LL_RTC_TAMPER_1',
    'LL_RTC_TAMPER_2', 'LL_RTC_TAMPER_MASK_TAMPER1', 'LL_RTC_TAMPER_MASK_TAMPER2',
    'LL_RTC_TAMPER_NOERASE_TAMPER1', 'LL_RTC_TAMPER_NOERASE_TAMPER2',
    'LL_RTC_TAMPER_DURATION_1RTCCLK', 'LL_RTC_TAMPER_DURATION_2RTCCLK',
    'LL_RTC_TAMPER_DURATION_4RTCCLK', 'LL_RTC_TAMPER_DURATION_8RTCCLK',
    'LL_RTC_TAMPER_FILTER_DISABLE', 'LL_RTC_TAMPER_FILTER_2SAMPLE',
    'LL_RTC_TAMPER_FILTER_4SAMPLE', 'LL_RTC_TAMPER_FILTER_8SAMPLE',
    'LL_RTC_TAMPER_SAMPLFREQDIV_32768', 'LL_RTC_TAMPER_SAMPLFREQDIV_16384',
    'LL_RTC_TAMPER_SAMPLFREQDIV_8192', 'LL_RTC_TAMPER_SAMPLFREQDIV_4096',
    'LL_RTC_TAMPER_SAMPLFREQDIV_2048', 'LL_RTC_TAMPER_SAMPLFREQDIV_1024',
    'LL_RTC_TAMPER_SAMPLFREQDIV_512', 'LL_RTC_TAMPER_SAMPLFREQDIV_256',
    'LL_RTC_TAMPER_ACTIVELEVEL_TAMP1', 'LL_RTC_TAMPER_ACTIVELEVEL_TAMP2',
    'LL_RTC_WAKEUPCLOCK_DIV_16', 'LL_RTC_WAKEUPCLOCK_DIV_8', 'LL_RTC_WAKEUPCLOCK_DIV_4',
    'LL_RTC_WAKEUPCLOCK_DIV_2', 'LL_RTC_WAKEUPCLOCK_CKSPRE',
    'LL_RTC_WAKEUPCLOCK_CKSPRE_WUT', 'LL_RTC_BKP_DR0', 'LL_RTC_BKP_DR1',
    'LL_RTC_BKP_DR2', 'LL_RTC_BKP_DR3', 'LL_RTC_BKP_DR4', 'LL_RTC_CALIB_OUTPUT_NONE',
    'LL_RTC_CALIB_OUTPUT_1HZ', 'LL_RTC_CALIB_OUTPUT_512HZ',
    'LL_RTC_CALIB_INSERTPULSE_NONE', 'LL_RTC_CALIB_INSERTPULSE_SET',
    'LL_RTC_CALIB_PERIOD_32SEC', 'LL_RTC_CALIB_PERIOD_16SEC',
    'LL_RTC_CALIB_PERIOD_8SEC', 'LL_RTC_InitTypeDef', 'LL_RTC_TimeTypeDef',
    'LL_RTC_DateTypeDef', 'LL_SPI_SR_RXNE', 'LL_SPI_SR_TXE', 'LL_SPI_SR_BSY',
    'LL_SPI_SR_CRCERR', 'LL_SPI_SR_MODF', 'LL_SPI_SR_OVR', 'LL_SPI_SR_FRE',
    'LL_SPI_CR2_RXNEIE', 'LL_SPI_CR2_TXEIE', 'LL_SPI_CR2_ERRIE', 'LL_SPI_MODE_MASTER',
    'LL_SPI_MODE_SLAVE', 'LL_SPI_PROTOCOL_MOTOROLA', 'LL_SPI_PROTOCOL_TI',
    'LL_SPI_PHASE_1EDGE', 'LL_SPI_PHASE_2EDGE', 'LL_SPI_POLARITY_LOW',
    'LL_SPI_POLARITY_HIGH', 'LL_SPI_BAUDRATEPRESCALER_DIV2',
    'LL_SPI_BAUDRATEPRESCALER_DIV4', 'LL_SPI_BAUDRATEPRESCALER_DIV8',
    'LL_SPI_BAUDRATEPRESCALER_DIV16', 'LL_SPI_BAUDRATEPRESCALER_DIV32',
    'LL_SPI_BAUDRATEPRESCALER_DIV64', 'LL_SPI_BAUDRATEPRESCALER_DIV128',
    'LL_SPI_BAUDRATEPRESCALER_DIV256', 'LL_SPI_LSB_FIRST', 'LL_SPI_MSB_FIRST',
    'LL_SPI_FULL_DUPLEX', 'LL_SPI_SIMPLEX_RX', 'LL_SPI_HALF_DUPLEX_RX',
    'LL_SPI_HALF_DUPLEX_TX', 'LL_SPI_NSS_SOFT', 'LL_SPI_NSS_HARD_INPUT',
    'LL_SPI_NSS_HARD_OUTPUT', 'LL_SPI_DATAWIDTH_8BIT', 'LL_SPI_DATAWIDTH_16BIT',
    'LL_SPI_CRCCALCULATION_DISABLE', 'LL_SPI_CRCCALCULATION_ENABLE', 'LL_I2S_SR_RXNE',
    'LL_I2S_SR_TXE', 'LL_I2S_SR_BSY', 'LL_I2S_SR_UDR', 'LL_I2S_SR_OVR', 'LL_I2S_SR_FRE',
    'LL_I2S_CR2_RXNEIE', 'LL_I2S_CR2_TXEIE', 'LL_I2S_CR2_ERRIE',
    'LL_I2S_DATAFORMAT_16B', 'LL_I2S_DATAFORMAT_16B_EXTENDED', 'LL_I2S_DATAFORMAT_24B',
    'LL_I2S_DATAFORMAT_32B', 'LL_I2S_POLARITY_LOW', 'LL_I2S_POLARITY_HIGH',
    'LL_I2S_STANDARD_PHILIPS', 'LL_I2S_STANDARD_MSB', 'LL_I2S_STANDARD_LSB',
    'LL_I2S_STANDARD_PCM_SHORT', 'LL_I2S_STANDARD_PCM_LONG', 'LL_I2S_MODE_SLAVE_TX',
    'LL_I2S_MODE_SLAVE_RX', 'LL_I2S_MODE_MASTER_TX', 'LL_I2S_MODE_MASTER_RX',
    'LL_I2S_PRESCALER_PARITY_EVEN', 'LL_I2S_PRESCALER_PARITY_ODD',
    'LL_I2S_MCLK_OUTPUT_DISABLE', 'LL_I2S_MCLK_OUTPUT_ENABLE', 'LL_I2S_AUDIOFREQ_192K',
    'LL_I2S_AUDIOFREQ_96K', 'LL_I2S_AUDIOFREQ_48K', 'LL_I2S_AUDIOFREQ_44K',
    'LL_I2S_AUDIOFREQ_32K', 'LL_I2S_AUDIOFREQ_22K', 'LL_I2S_AUDIOFREQ_16K',
    'LL_I2S_AUDIOFREQ_11K', 'LL_I2S_AUDIOFREQ_8K', 'LL_I2S_AUDIOFREQ_DEFAULT',
    'LL_SPI_InitTypeDef', 'LL_I2S_InitTypeDef', 'FLASH_PDKEY1', 'FLASH_PDKEY2',
    'LL_SYSCFG_REMAP_FLASH', 'LL_SYSCFG_REMAP_SYSTEMFLASH', 'LL_SYSCFG_REMAP_SRAM',
    'LL_SYSCFG_BOOTMODE_FLASH', 'LL_SYSCFG_BOOTMODE_SYSTEMFLASH',
    'LL_SYSCFG_BOOTMODE_SRAM', 'LL_SYSCFG_CAPA_VLCD2_PB2', 'LL_SYSCFG_CAPA_VLCD1_PB12',
    'LL_SYSCFG_CAPA_VLCD3_PB0', 'LL_SYSCFG_I2C_FASTMODEPLUS_PB6',
    'LL_SYSCFG_I2C_FASTMODEPLUS_PB7', 'LL_SYSCFG_I2C_FASTMODEPLUS_PB8',
    'LL_SYSCFG_I2C_FASTMODEPLUS_PB9', 'LL_SYSCFG_I2C_FASTMODEPLUS_I2C1',
    'LL_SYSCFG_I2C_FASTMODEPLUS_I2C2', 'LL_SYSCFG_VREFINT_CONNECT_NONE',
    'LL_SYSCFG_VREFINT_CONNECT_IO1', 'LL_SYSCFG_VREFINT_CONNECT_IO2',
    'LL_SYSCFG_VREFINT_CONNECT_IO1_IO2', 'LL_SYSCFG_EXTI_PORTA', 'LL_SYSCFG_EXTI_PORTB',
    'LL_SYSCFG_EXTI_PORTC', 'LL_SYSCFG_EXTI_PORTD', 'LL_SYSCFG_EXTI_PORTH',
    'LL_SYSCFG_EXTI_LINE0', 'LL_SYSCFG_EXTI_LINE1', 'LL_SYSCFG_EXTI_LINE2',
    'LL_SYSCFG_EXTI_LINE3', 'LL_SYSCFG_EXTI_LINE4', 'LL_SYSCFG_EXTI_LINE5',
    'LL_SYSCFG_EXTI_LINE6', 'LL_SYSCFG_EXTI_LINE7', 'LL_SYSCFG_EXTI_LINE8',
    'LL_SYSCFG_EXTI_LINE9', 'LL_SYSCFG_EXTI_LINE10', 'LL_SYSCFG_EXTI_LINE11',
    'LL_SYSCFG_EXTI_LINE12', 'LL_SYSCFG_EXTI_LINE13', 'LL_SYSCFG_EXTI_LINE14',
    'LL_SYSCFG_EXTI_LINE15', 'LL_DBGMCU_APB1_GRP1_TIM2_STOP',
    'LL_DBGMCU_APB1_GRP1_TIM6_STOP', 'LL_DBGMCU_APB1_GRP1_RTC_STOP',
    'LL_DBGMCU_APB1_GRP1_WWDG_STOP', 'LL_DBGMCU_APB1_GRP1_IWDG_STOP',
    'LL_DBGMCU_APB1_GRP1_I2C1_STOP', 'LL_DBGMCU_APB1_GRP1_I2C2_STOP',
    'LL_DBGMCU_APB1_GRP1_LPTIM1_STOP', 'LL_DBGMCU_APB2_GRP1_TIM22_STOP',
    'LL_DBGMCU_APB2_GRP1_TIM21_STOP', 'LL_FLASH_LATENCY_0', 'LL_FLASH_LATENCY_1',
    'TIMx_OR_RMP_SHIFT', 'TIMx_OR_RMP_MASK', 'TIM2_OR_RMP_MASK', 'TIM21_OR_RMP_MASK',
    'TIM22_OR_RMP_MASK', 'LL_TIM_SR_UIF', 'LL_TIM_SR_CC1IF', 'LL_TIM_SR_CC2IF',
    'LL_TIM_SR_CC3IF', 'LL_TIM_SR_CC4IF', 'LL_TIM_SR_TIF', 'LL_TIM_SR_CC1OF',
    'LL_TIM_SR_CC2OF', 'LL_TIM_SR_CC3OF', 'LL_TIM_SR_CC4OF', 'LL_TIM_DIER_UIE',
    'LL_TIM_DIER_CC1IE', 'LL_TIM_DIER_CC2IE', 'LL_TIM_DIER_CC3IE', 'LL_TIM_DIER_CC4IE',
    'LL_TIM_DIER_TIE', 'LL_TIM_UPDATESOURCE_REGULAR', 'LL_TIM_UPDATESOURCE_COUNTER',
    'LL_TIM_ONEPULSEMODE_SINGLE', 'LL_TIM_ONEPULSEMODE_REPETITIVE',
    'LL_TIM_COUNTERMODE_UP', 'LL_TIM_COUNTERMODE_DOWN', 'LL_TIM_COUNTERMODE_CENTER_UP',
    'LL_TIM_COUNTERMODE_CENTER_DOWN', 'LL_TIM_COUNTERMODE_CENTER_UP_DOWN',
    'LL_TIM_CLOCKDIVISION_DIV1', 'LL_TIM_CLOCKDIVISION_DIV2',
    'LL_TIM_CLOCKDIVISION_DIV4', 'LL_TIM_COUNTERDIRECTION_UP',
    'LL_TIM_COUNTERDIRECTION_DOWN', 'LL_TIM_CCDMAREQUEST_CC',
    'LL_TIM_CCDMAREQUEST_UPDATE', 'LL_TIM_CHANNEL_CH1', 'LL_TIM_CHANNEL_CH2',
    'LL_TIM_CHANNEL_CH3', 'LL_TIM_CHANNEL_CH4', 'LL_TIM_OCSTATE_DISABLE',
    'LL_TIM_OCSTATE_ENABLE', 'LL_TIM_OCMODE_FROZEN', 'LL_TIM_OCMODE_ACTIVE',
    'LL_TIM_OCMODE_INACTIVE', 'LL_TIM_OCMODE_TOGGLE', 'LL_TIM_OCMODE_FORCED_INACTIVE',
    'LL_TIM_OCMODE_FORCED_ACTIVE', 'LL_TIM_OCMODE_PWM1', 'LL_TIM_OCMODE_PWM2',
    'LL_TIM_OCPOLARITY_HIGH', 'LL_TIM_OCPOLARITY_LOW', 'LL_TIM_ACTIVEINPUT_DIRECTTI',
    'LL_TIM_ACTIVEINPUT_INDIRECTTI', 'LL_TIM_ACTIVEINPUT_TRC', 'LL_TIM_ICPSC_DIV1',
    'LL_TIM_ICPSC_DIV2', 'LL_TIM_ICPSC_DIV4', 'LL_TIM_ICPSC_DIV8',
    'LL_TIM_IC_FILTER_FDIV1', 'LL_TIM_IC_FILTER_FDIV1_N2', 'LL_TIM_IC_FILTER_FDIV1_N4',
    'LL_TIM_IC_FILTER_FDIV1_N8', 'LL_TIM_IC_FILTER_FDIV2_N6',
    'LL_TIM_IC_FILTER_FDIV2_N8', 'LL_TIM_IC_FILTER_FDIV4_N6',
    'LL_TIM_IC_FILTER_FDIV4_N8', 'LL_TIM_IC_FILTER_FDIV8_N6',
    'LL_TIM_IC_FILTER_FDIV8_N8', 'LL_TIM_IC_FILTER_FDIV16_N5',
    'LL_TIM_IC_FILTER_FDIV16_N6', 'LL_TIM_IC_FILTER_FDIV16_N8',
    'LL_TIM_IC_FILTER_FDIV32_N5', 'LL_TIM_IC_FILTER_FDIV32_N6',
    'LL_TIM_IC_FILTER_FDIV32_N8', 'LL_TIM_IC_POLARITY_RISING',
    'LL_TIM_IC_POLARITY_FALLING', 'LL_TIM_IC_POLARITY_BOTHEDGE',
    'LL_TIM_CLOCKSOURCE_INTERNAL', 'LL_TIM_CLOCKSOURCE_EXT_MODE1',
    'LL_TIM_CLOCKSOURCE_EXT_MODE2', 'LL_TIM_ENCODERMODE_X2_TI1',
    'LL_TIM_ENCODERMODE_X2_TI2', 'LL_TIM_ENCODERMODE_X4_TI12', 'LL_TIM_TRGO_RESET',
    'LL_TIM_TRGO_ENABLE', 'LL_TIM_TRGO_UPDATE', 'LL_TIM_TRGO_CC1IF',
    'LL_TIM_TRGO_OC1REF', 'LL_TIM_TRGO_OC2REF', 'LL_TIM_TRGO_OC3REF',
    'LL_TIM_TRGO_OC4REF', 'LL_TIM_SLAVEMODE_DISABLED', 'LL_TIM_SLAVEMODE_RESET',
    'LL_TIM_SLAVEMODE_GATED', 'LL_TIM_SLAVEMODE_TRIGGER', 'LL_TIM_TS_ITR0',
    'LL_TIM_TS_ITR1', 'LL_TIM_TS_ITR2', 'LL_TIM_TS_ITR3', 'LL_TIM_TS_TI1F_ED',
    'LL_TIM_TS_TI1FP1', 'LL_TIM_TS_TI2FP2', 'LL_TIM_TS_ETRF',
    'LL_TIM_ETR_POLARITY_NONINVERTED', 'LL_TIM_ETR_POLARITY_INVERTED',
    'LL_TIM_ETR_PRESCALER_DIV1', 'LL_TIM_ETR_PRESCALER_DIV2',
    'LL_TIM_ETR_PRESCALER_DIV4', 'LL_TIM_ETR_PRESCALER_DIV8', 'LL_TIM_ETR_FILTER_FDIV1',
    'LL_TIM_ETR_FILTER_FDIV1_N2', 'LL_TIM_ETR_FILTER_FDIV1_N4',
    'LL_TIM_ETR_FILTER_FDIV1_N8', 'LL_TIM_ETR_FILTER_FDIV2_N6',
    'LL_TIM_ETR_FILTER_FDIV2_N8', 'LL_TIM_ETR_FILTER_FDIV4_N6',
    'LL_TIM_ETR_FILTER_FDIV4_N8', 'LL_TIM_ETR_FILTER_FDIV8_N6',
    'LL_TIM_ETR_FILTER_FDIV8_N8', 'LL_TIM_ETR_FILTER_FDIV16_N5',
    'LL_TIM_ETR_FILTER_FDIV16_N6', 'LL_TIM_ETR_FILTER_FDIV16_N8',
    'LL_TIM_ETR_FILTER_FDIV32_N5', 'LL_TIM_ETR_FILTER_FDIV32_N6',
    'LL_TIM_ETR_FILTER_FDIV32_N8', 'LL_TIM_DMABURST_BASEADDR_CR1',
    'LL_TIM_DMABURST_BASEADDR_CR2', 'LL_TIM_DMABURST_BASEADDR_SMCR',
    'LL_TIM_DMABURST_BASEADDR_DIER', 'LL_TIM_DMABURST_BASEADDR_SR',
    'LL_TIM_DMABURST_BASEADDR_EGR', 'LL_TIM_DMABURST_BASEADDR_CCMR1',
    'LL_TIM_DMABURST_BASEADDR_CCMR2', 'LL_TIM_DMABURST_BASEADDR_CCER',
    'LL_TIM_DMABURST_BASEADDR_CNT', 'LL_TIM_DMABURST_BASEADDR_PSC',
    'LL_TIM_DMABURST_BASEADDR_ARR', 'LL_TIM_DMABURST_BASEADDR_RCR',
    'LL_TIM_DMABURST_BASEADDR_CCR1', 'LL_TIM_DMABURST_BASEADDR_CCR2',
    'LL_TIM_DMABURST_BASEADDR_CCR3', 'LL_TIM_DMABURST_BASEADDR_CCR4',
    'LL_TIM_DMABURST_BASEADDR_BDTR', 'LL_TIM_DMABURST_BASEADDR_CCMR3',
    'LL_TIM_DMABURST_BASEADDR_CCR5', 'LL_TIM_DMABURST_BASEADDR_CCR6',
    'LL_TIM_DMABURST_BASEADDR_OR1', 'LL_TIM_DMABURST_BASEADDR_OR2',
    'LL_TIM_DMABURST_BASEADDR_OR3', 'LL_TIM_DMABURST_LENGTH_1TRANSFER',
    'LL_TIM_DMABURST_LENGTH_2TRANSFERS', 'LL_TIM_DMABURST_LENGTH_3TRANSFERS',
    'LL_TIM_DMABURST_LENGTH_4TRANSFERS', 'LL_TIM_DMABURST_LENGTH_5TRANSFERS',
    'LL_TIM_DMABURST_LENGTH_6TRANSFERS', 'LL_TIM_DMABURST_LENGTH_7TRANSFERS',
    'LL_TIM_DMABURST_LENGTH_8TRANSFERS', 'LL_TIM_DMABURST_LENGTH_9TRANSFERS',
    'LL_TIM_DMABURST_LENGTH_10TRANSFERS', 'LL_TIM_DMABURST_LENGTH_11TRANSFERS',
    'LL_TIM_DMABURST_LENGTH_12TRANSFERS', 'LL_TIM_DMABURST_LENGTH_13TRANSFERS',
    'LL_TIM_DMABURST_LENGTH_14TRANSFERS', 'LL_TIM_DMABURST_LENGTH_15TRANSFERS',
    'LL_TIM_DMABURST_LENGTH_16TRANSFERS', 'LL_TIM_DMABURST_LENGTH_17TRANSFERS',
    'LL_TIM_DMABURST_LENGTH_18TRANSFERS', 'LL_TIM_TIM2_ETR_RMP_GPIO',
    'LL_TIM_TIM2_ETR_RMP_HSI48', 'LL_TIM_TIM2_ETR_RMP_LSE', 'LL_TIM_TIM2_ETR_RMP_COMP2',
    'LL_TIM_TIM2_ETR_RMP_COMP1', 'LL_TIM_TIM2_TI4_RMP_GPIO',
    'LL_TIM_TIM2_TI4_RMP_COMP2', 'LL_TIM_TIM2_TI4_RMP_COMP1',
    'LL_TIM_TIM21_ETR_RMP_GPIO', 'LL_TIM_TIM21_ETR_RMP_COMP2',
    'LL_TIM_TIM21_ETR_RMP_COMP1', 'LL_TIM_TIM21_ETR_RMP_LSE',
    'LL_TIM_TIM21_TI1_RMP_GPIO', 'LL_TIM_TIM21_TI1_RMP_RTC_WK',
    'LL_TIM_TIM21_TI1_RMP_HSE_RTC', 'LL_TIM_TIM21_TI1_RMP_MSI',
    'LL_TIM_TIM21_TI1_RMP_LSE', 'LL_TIM_TIM21_TI1_RMP_LSI',
    'LL_TIM_TIM21_TI1_RMP_COMP1', 'LL_TIM_TIM21_TI1_RMP_MCO',
    'LL_TIM_TIM21_TI2_RMP_GPIO', 'LL_TIM_TIM21_TI2_RMP_COMP2',
    'LL_TIM_TIM22_ETR_RMP_GPIO', 'LL_TIM_TIM22_ETR_RMP_COMP2',
    'LL_TIM_TIM22_ETR_RMP_COMP1', 'LL_TIM_TIM22_ETR_RMP_LSE',
    'LL_TIM_TIM22_TI1_RMP_GPIO1', 'LL_TIM_TIM22_TI1_RMP_COMP2',
    'LL_TIM_TIM22_TI1_RMP_COMP1', 'LL_TIM_TIM22_TI1_RMP_GPIO2', 'LL_TIM_InitTypeDef',
    'LL_TIM_OC_InitTypeDef', 'LL_TIM_IC_InitTypeDef', 'LL_TIM_ENCODER_InitTypeDef',
    'LL_USART_ICR_PECF', 'LL_USART_ICR_FECF', 'LL_USART_ICR_NCF', 'LL_USART_ICR_ORECF',
    'LL_USART_ICR_IDLECF', 'LL_USART_ICR_TCCF', 'LL_USART_ICR_LBDCF',
    'LL_USART_ICR_CTSCF', 'LL_USART_ICR_RTOCF', 'LL_USART_ICR_EOBCF',
    'LL_USART_ICR_CMCF', 'LL_USART_ICR_WUCF', 'LL_USART_ISR_PE', 'LL_USART_ISR_FE',
    'LL_USART_ISR_NE', 'LL_USART_ISR_ORE', 'LL_USART_ISR_IDLE', 'LL_USART_ISR_RXNE',
    'LL_USART_ISR_TC', 'LL_USART_ISR_TXE', 'LL_USART_ISR_LBDF', 'LL_USART_ISR_CTSIF',
    'LL_USART_ISR_CTS', 'LL_USART_ISR_RTOF', 'LL_USART_ISR_EOBF', 'LL_USART_ISR_ABRE',
    'LL_USART_ISR_ABRF', 'LL_USART_ISR_BUSY', 'LL_USART_ISR_CMF', 'LL_USART_ISR_SBKF',
    'LL_USART_ISR_RWU', 'LL_USART_ISR_WUF', 'LL_USART_ISR_TEACK', 'LL_USART_ISR_REACK',
    'LL_USART_CR1_IDLEIE', 'LL_USART_CR1_RXNEIE', 'LL_USART_CR1_TCIE',
    'LL_USART_CR1_TXEIE', 'LL_USART_CR1_PEIE', 'LL_USART_CR1_CMIE',
    'LL_USART_CR1_RTOIE', 'LL_USART_CR1_EOBIE', 'LL_USART_CR2_LBDIE',
    'LL_USART_CR3_EIE', 'LL_USART_CR3_CTSIE', 'LL_USART_CR3_WUFIE',
    'LL_USART_DIRECTION_NONE', 'LL_USART_DIRECTION_RX', 'LL_USART_DIRECTION_TX',
    'LL_USART_DIRECTION_TX_RX', 'LL_USART_PARITY_NONE', 'LL_USART_PARITY_EVEN',
    'LL_USART_PARITY_ODD', 'LL_USART_WAKEUP_IDLELINE', 'LL_USART_WAKEUP_ADDRESSMARK',
    'LL_USART_DATAWIDTH_7B', 'LL_USART_DATAWIDTH_8B', 'LL_USART_DATAWIDTH_9B',
    'LL_USART_OVERSAMPLING_16', 'LL_USART_OVERSAMPLING_8', 'LL_USART_CLOCK_DISABLE',
    'LL_USART_CLOCK_ENABLE', 'LL_USART_LASTCLKPULSE_NO_OUTPUT',
    'LL_USART_LASTCLKPULSE_OUTPUT', 'LL_USART_PHASE_1EDGE', 'LL_USART_PHASE_2EDGE',
    'LL_USART_POLARITY_LOW', 'LL_USART_POLARITY_HIGH', 'LL_USART_STOPBITS_0_5',
    'LL_USART_STOPBITS_1', 'LL_USART_STOPBITS_1_5', 'LL_USART_STOPBITS_2',
    'LL_USART_TXRX_STANDARD', 'LL_USART_TXRX_SWAPPED', 'LL_USART_RXPIN_LEVEL_STANDARD',
    'LL_USART_RXPIN_LEVEL_INVERTED', 'LL_USART_TXPIN_LEVEL_STANDARD',
    'LL_USART_TXPIN_LEVEL_INVERTED', 'LL_USART_BINARY_LOGIC_POSITIVE',
    'LL_USART_BINARY_LOGIC_NEGATIVE', 'LL_USART_BITORDER_LSBFIRST',
    'LL_USART_BITORDER_MSBFIRST', 'LL_USART_AUTOBAUD_DETECT_ON_STARTBIT',
    'LL_USART_AUTOBAUD_DETECT_ON_FALLINGEDGE', 'LL_USART_AUTOBAUD_DETECT_ON_7F_FRAME',
    'LL_USART_AUTOBAUD_DETECT_ON_55_FRAME', 'LL_USART_ADDRESS_DETECT_4B',
    'LL_USART_ADDRESS_DETECT_7B', 'LL_USART_HWCONTROL_NONE', 'LL_USART_HWCONTROL_RTS',
    'LL_USART_HWCONTROL_CTS', 'LL_USART_HWCONTROL_RTS_CTS',
    'LL_USART_WAKEUP_ON_ADDRESS', 'LL_USART_WAKEUP_ON_STARTBIT',
    'LL_USART_WAKEUP_ON_RXNE', 'LL_USART_IRDA_POWER_NORMAL', 'LL_USART_IRDA_POWER_LOW',
    'LL_USART_LINBREAK_DETECT_10B', 'LL_USART_LINBREAK_DETECT_11B',
    'LL_USART_DE_POLARITY_HIGH', 'LL_USART_DE_POLARITY_LOW',
    'LL_USART_DMA_REG_DATA_TRANSMIT', 'LL_USART_DMA_REG_DATA_RECEIVE',
    'LL_USART_InitTypeDef', 'LL_USART_ClockInitTypeDef', 'LL_MAX_DELAY',
    'UID_BASE_ADDRESS', 'FLASHSIZE_BASE_ADDRESS', 'LL_UTILS_HSEBYPASS_OFF',
    'LL_UTILS_HSEBYPASS_ON', 'LL_UTILS_PLLInitTypeDef', 'LL_UTILS_ClkInitTypeDef',
    'LL_WWDG_CFR_EWI', 'LL_WWDG_PRESCALER_1', 'LL_WWDG_PRESCALER_2',
    'LL_WWDG_PRESCALER_4', 'LL_WWDG_PRESCALER_8']
